
usb_test-tempJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000779c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007968  08007968  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007968  08007968  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08007970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200001c8  08007b38  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  08007b38  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c55  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a84  00000000  00000000  00030e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  000338d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  00034338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d8c  00000000  00000000  00034c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca9e  00000000  00000000  0004a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076719  00000000  00000000  00057472  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b0  00000000  00000000  000cdc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c8 	.word	0x200001c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007844 	.word	0x08007844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001cc 	.word	0x200001cc
 8000104:	08007844 	.word	0x08007844

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f006 fc93 	bl	8006b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <HAL_InitTick+0x5c>)
 800026a:	681c      	ldr	r4, [r3, #0]
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <HAL_InitTick+0x60>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	0019      	movs	r1, r3
 8000272:	23fa      	movs	r3, #250	; 0xfa
 8000274:	0098      	lsls	r0, r3, #2
 8000276:	f7ff ff47 	bl	8000108 <__udivsi3>
 800027a:	0003      	movs	r3, r0
 800027c:	0019      	movs	r1, r3
 800027e:	0020      	movs	r0, r4
 8000280:	f7ff ff42 	bl	8000108 <__udivsi3>
 8000284:	0003      	movs	r3, r0
 8000286:	0018      	movs	r0, r3
 8000288:	f000 f929 	bl	80004de <HAL_SYSTICK_Config>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000290:	2301      	movs	r3, #1
 8000292:	e00f      	b.n	80002b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b03      	cmp	r3, #3
 8000298:	d80b      	bhi.n	80002b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	2301      	movs	r3, #1
 800029e:	425b      	negs	r3, r3
 80002a0:	2200      	movs	r2, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 f8f6 	bl	8000494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_InitTick+0x64>)
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002ae:	2300      	movs	r3, #0
 80002b0:	e000      	b.n	80002b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
}
 80002b4:	0018      	movs	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b003      	add	sp, #12
 80002ba:	bd90      	pop	{r4, r7, pc}
 80002bc:	200000dc 	.word	0x200000dc
 80002c0:	20000004 	.word	0x20000004
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <HAL_IncTick+0x1c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	001a      	movs	r2, r3
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <HAL_IncTick+0x20>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	18d2      	adds	r2, r2, r3
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <HAL_IncTick+0x20>)
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20000004 	.word	0x20000004
 80002e8:	200001f4 	.word	0x200001f4

080002ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  return uwTick;
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <HAL_GetTick+0x10>)
 80002f2:	681b      	ldr	r3, [r3, #0]
}
 80002f4:	0018      	movs	r0, r3
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	200001f4 	.word	0x200001f4

08000300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000308:	f7ff fff0 	bl	80002ec <HAL_GetTick>
 800030c:	0003      	movs	r3, r0
 800030e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	d005      	beq.n	8000326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <HAL_Delay+0x40>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	001a      	movs	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	189b      	adds	r3, r3, r2
 8000324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	f7ff ffe0 	bl	80002ec <HAL_GetTick>
 800032c:	0002      	movs	r2, r0
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	429a      	cmp	r2, r3
 8000336:	d8f7      	bhi.n	8000328 <HAL_Delay+0x28>
  {
  }
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b004      	add	sp, #16
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000004 	.word	0x20000004

08000344 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	0002      	movs	r2, r0
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	001a      	movs	r2, r3
 8000356:	231f      	movs	r3, #31
 8000358:	401a      	ands	r2, r3
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <NVIC_EnableIRQ+0x28>)
 800035c:	2101      	movs	r1, #1
 800035e:	4091      	lsls	r1, r2
 8000360:	000a      	movs	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b002      	add	sp, #8
 800036a:	bd80      	pop	{r7, pc}
 800036c:	e000e100 	.word	0xe000e100

08000370 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	0002      	movs	r2, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b7f      	cmp	r3, #127	; 0x7f
 8000384:	d932      	bls.n	80003ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000386:	4a2f      	ldr	r2, [pc, #188]	; (8000444 <NVIC_SetPriority+0xd4>)
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	0019      	movs	r1, r3
 800038e:	230f      	movs	r3, #15
 8000390:	400b      	ands	r3, r1
 8000392:	3b08      	subs	r3, #8
 8000394:	089b      	lsrs	r3, r3, #2
 8000396:	3306      	adds	r3, #6
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	18d3      	adds	r3, r2, r3
 800039c:	3304      	adds	r3, #4
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	481d      	ldr	r0, [pc, #116]	; (8000444 <NVIC_SetPriority+0xd4>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	001c      	movs	r4, r3
 80003d6:	230f      	movs	r3, #15
 80003d8:	4023      	ands	r3, r4
 80003da:	3b08      	subs	r3, #8
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	430a      	orrs	r2, r1
 80003e0:	3306      	adds	r3, #6
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	18c3      	adds	r3, r0, r3
 80003e6:	3304      	adds	r3, #4
 80003e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003ea:	e027      	b.n	800043c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ec:	4a16      	ldr	r2, [pc, #88]	; (8000448 <NVIC_SetPriority+0xd8>)
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	b25b      	sxtb	r3, r3
 80003f4:	089b      	lsrs	r3, r3, #2
 80003f6:	33c0      	adds	r3, #192	; 0xc0
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	589b      	ldr	r3, [r3, r2]
 80003fc:	1dfa      	adds	r2, r7, #7
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	0011      	movs	r1, r2
 8000402:	2203      	movs	r2, #3
 8000404:	400a      	ands	r2, r1
 8000406:	00d2      	lsls	r2, r2, #3
 8000408:	21ff      	movs	r1, #255	; 0xff
 800040a:	4091      	lsls	r1, r2
 800040c:	000a      	movs	r2, r1
 800040e:	43d2      	mvns	r2, r2
 8000410:	401a      	ands	r2, r3
 8000412:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	019b      	lsls	r3, r3, #6
 8000418:	22ff      	movs	r2, #255	; 0xff
 800041a:	401a      	ands	r2, r3
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	0018      	movs	r0, r3
 8000422:	2303      	movs	r3, #3
 8000424:	4003      	ands	r3, r0
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800042a:	4807      	ldr	r0, [pc, #28]	; (8000448 <NVIC_SetPriority+0xd8>)
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b25b      	sxtb	r3, r3
 8000432:	089b      	lsrs	r3, r3, #2
 8000434:	430a      	orrs	r2, r1
 8000436:	33c0      	adds	r3, #192	; 0xc0
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	501a      	str	r2, [r3, r0]
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b003      	add	sp, #12
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	e000e100 	.word	0xe000e100

0800044c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3b01      	subs	r3, #1
 8000458:	4a0c      	ldr	r2, [pc, #48]	; (800048c <SysTick_Config+0x40>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d901      	bls.n	8000462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800045e:	2301      	movs	r3, #1
 8000460:	e010      	b.n	8000484 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <SysTick_Config+0x44>)
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	3a01      	subs	r2, #1
 8000468:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800046a:	2301      	movs	r3, #1
 800046c:	425b      	negs	r3, r3
 800046e:	2103      	movs	r1, #3
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ff7d 	bl	8000370 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <SysTick_Config+0x44>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Config+0x44>)
 800047e:	2207      	movs	r2, #7
 8000480:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000482:	2300      	movs	r3, #0
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}
 800048c:	00ffffff 	.word	0x00ffffff
 8000490:	e000e010 	.word	0xe000e010

08000494 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
 800049e:	210f      	movs	r1, #15
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	1c02      	adds	r2, r0, #0
 80004a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff5d 	bl	8000370 <NVIC_SetPriority>
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}

080004be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	0002      	movs	r2, r0
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	b25b      	sxtb	r3, r3
 80004d0:	0018      	movs	r0, r3
 80004d2:	f7ff ff37 	bl	8000344 <NVIC_EnableIRQ>
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}

080004de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b082      	sub	sp, #8
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ffaf 	bl	800044c <SysTick_Config>
 80004ee:	0003      	movs	r3, r0
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800050e:	e14f      	b.n	80007b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	4091      	lsls	r1, r2
 800051a:	000a      	movs	r2, r1
 800051c:	4013      	ands	r3, r2
 800051e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d100      	bne.n	8000528 <HAL_GPIO_Init+0x30>
 8000526:	e140      	b.n	80007aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d00b      	beq.n	8000548 <HAL_GPIO_Init+0x50>
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d007      	beq.n	8000548 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800053c:	2b11      	cmp	r3, #17
 800053e:	d003      	beq.n	8000548 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b12      	cmp	r3, #18
 8000546:	d130      	bne.n	80005aa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	2203      	movs	r2, #3
 8000554:	409a      	lsls	r2, r3
 8000556:	0013      	movs	r3, r2
 8000558:	43da      	mvns	r2, r3
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	4013      	ands	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	409a      	lsls	r2, r3
 800056a:	0013      	movs	r3, r2
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	4313      	orrs	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800057e:	2201      	movs	r2, #1
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	409a      	lsls	r2, r3
 8000584:	0013      	movs	r3, r2
 8000586:	43da      	mvns	r2, r3
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	4013      	ands	r3, r2
 800058c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	091b      	lsrs	r3, r3, #4
 8000594:	2201      	movs	r2, #1
 8000596:	401a      	ands	r2, r3
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	409a      	lsls	r2, r3
 800059c:	0013      	movs	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	2203      	movs	r2, #3
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0013      	movs	r3, r2
 80005ba:	43da      	mvns	r2, r3
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4013      	ands	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	689a      	ldr	r2, [r3, #8]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d003      	beq.n	80005ea <HAL_GPIO_Init+0xf2>
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2b12      	cmp	r3, #18
 80005e8:	d123      	bne.n	8000632 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	08da      	lsrs	r2, r3, #3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3208      	adds	r2, #8
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	58d3      	ldr	r3, [r2, r3]
 80005f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2207      	movs	r2, #7
 80005fc:	4013      	ands	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	220f      	movs	r2, #15
 8000602:	409a      	lsls	r2, r3
 8000604:	0013      	movs	r3, r2
 8000606:	43da      	mvns	r2, r3
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	4013      	ands	r3, r2
 800060c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	691a      	ldr	r2, [r3, #16]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2107      	movs	r1, #7
 8000616:	400b      	ands	r3, r1
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	409a      	lsls	r2, r3
 800061c:	0013      	movs	r3, r2
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	4313      	orrs	r3, r2
 8000622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	08da      	lsrs	r2, r3, #3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3208      	adds	r2, #8
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	6939      	ldr	r1, [r7, #16]
 8000630:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	2203      	movs	r2, #3
 800063e:	409a      	lsls	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	43da      	mvns	r2, r3
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	2203      	movs	r2, #3
 8000650:	401a      	ands	r2, r3
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	409a      	lsls	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	055b      	lsls	r3, r3, #21
 800066e:	4013      	ands	r3, r2
 8000670:	d100      	bne.n	8000674 <HAL_GPIO_Init+0x17c>
 8000672:	e09a      	b.n	80007aa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	4b54      	ldr	r3, [pc, #336]	; (80007c8 <HAL_GPIO_Init+0x2d0>)
 8000676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000678:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <HAL_GPIO_Init+0x2d0>)
 800067a:	2101      	movs	r1, #1
 800067c:	430a      	orrs	r2, r1
 800067e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000680:	4a52      	ldr	r2, [pc, #328]	; (80007cc <HAL_GPIO_Init+0x2d4>)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	3302      	adds	r3, #2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	589b      	ldr	r3, [r3, r2]
 800068c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2203      	movs	r2, #3
 8000692:	4013      	ands	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	220f      	movs	r2, #15
 8000698:	409a      	lsls	r2, r3
 800069a:	0013      	movs	r3, r2
 800069c:	43da      	mvns	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d019      	beq.n	80006e2 <HAL_GPIO_Init+0x1ea>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a47      	ldr	r2, [pc, #284]	; (80007d0 <HAL_GPIO_Init+0x2d8>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d013      	beq.n	80006de <HAL_GPIO_Init+0x1e6>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a46      	ldr	r2, [pc, #280]	; (80007d4 <HAL_GPIO_Init+0x2dc>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d00d      	beq.n	80006da <HAL_GPIO_Init+0x1e2>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a45      	ldr	r2, [pc, #276]	; (80007d8 <HAL_GPIO_Init+0x2e0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d007      	beq.n	80006d6 <HAL_GPIO_Init+0x1de>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a44      	ldr	r2, [pc, #272]	; (80007dc <HAL_GPIO_Init+0x2e4>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_GPIO_Init+0x1da>
 80006ce:	2305      	movs	r3, #5
 80006d0:	e008      	b.n	80006e4 <HAL_GPIO_Init+0x1ec>
 80006d2:	2306      	movs	r3, #6
 80006d4:	e006      	b.n	80006e4 <HAL_GPIO_Init+0x1ec>
 80006d6:	2303      	movs	r3, #3
 80006d8:	e004      	b.n	80006e4 <HAL_GPIO_Init+0x1ec>
 80006da:	2302      	movs	r3, #2
 80006dc:	e002      	b.n	80006e4 <HAL_GPIO_Init+0x1ec>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <HAL_GPIO_Init+0x1ec>
 80006e2:	2300      	movs	r3, #0
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	2103      	movs	r1, #3
 80006e8:	400a      	ands	r2, r1
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	4093      	lsls	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006f4:	4935      	ldr	r1, [pc, #212]	; (80007cc <HAL_GPIO_Init+0x2d4>)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	3302      	adds	r3, #2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	43da      	mvns	r2, r3
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	4013      	ands	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685a      	ldr	r2, [r3, #4]
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	4013      	ands	r3, r2
 800071c:	d003      	beq.n	8000726 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4313      	orrs	r3, r2
 8000724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	43da      	mvns	r2, r3
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	d003      	beq.n	8000750 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	43da      	mvns	r2, r3
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	4013      	ands	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	035b      	lsls	r3, r3, #13
 800076e:	4013      	ands	r3, r2
 8000770:	d003      	beq.n	800077a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4313      	orrs	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	43da      	mvns	r2, r3
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	4013      	ands	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	039b      	lsls	r3, r3, #14
 8000798:	4013      	ands	r3, r2
 800079a:	d003      	beq.n	80007a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_GPIO_Init+0x2e8>)
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	40da      	lsrs	r2, r3
 80007b8:	1e13      	subs	r3, r2, #0
 80007ba:	d000      	beq.n	80007be <HAL_GPIO_Init+0x2c6>
 80007bc:	e6a8      	b.n	8000510 <HAL_GPIO_Init+0x18>
  }
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b006      	add	sp, #24
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000
 80007d0:	50000400 	.word	0x50000400
 80007d4:	50000800 	.word	0x50000800
 80007d8:	50000c00 	.word	0x50000c00
 80007dc:	50001c00 	.word	0x50001c00
 80007e0:	40010400 	.word	0x40010400

080007e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	0008      	movs	r0, r1
 80007ee:	0011      	movs	r1, r2
 80007f0:	1cbb      	adds	r3, r7, #2
 80007f2:	1c02      	adds	r2, r0, #0
 80007f4:	801a      	strh	r2, [r3, #0]
 80007f6:	1c7b      	adds	r3, r7, #1
 80007f8:	1c0a      	adds	r2, r1, #0
 80007fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007fc:	1c7b      	adds	r3, r7, #1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d004      	beq.n	800080e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000804:	1cbb      	adds	r3, r7, #2
 8000806:	881a      	ldrh	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800080c:	e003      	b.n	8000816 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800080e:	1cbb      	adds	r3, r7, #2
 8000810:	881a      	ldrh	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	000a      	movs	r2, r1
 8000828:	1cbb      	adds	r3, r7, #2
 800082a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000832:	1cbb      	adds	r3, r7, #2
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4013      	ands	r3, r2
 800083a:	041a      	lsls	r2, r3, #16
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	43db      	mvns	r3, r3
 8000840:	1cb9      	adds	r1, r7, #2
 8000842:	8809      	ldrh	r1, [r1, #0]
 8000844:	400b      	ands	r3, r1
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	619a      	str	r2, [r3, #24]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b004      	add	sp, #16
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af06      	add	r7, sp, #24
 800085a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e100      	b.n	8000a68 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a81      	ldr	r2, [pc, #516]	; (8000a70 <HAL_PCD_Init+0x21c>)
 800086a:	5c9b      	ldrb	r3, [r3, r2]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d108      	bne.n	8000884 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	23aa      	movs	r3, #170	; 0xaa
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	2100      	movs	r1, #0
 800087a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	0018      	movs	r0, r3
 8000880:	f006 fa48 	bl	8006d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a7a      	ldr	r2, [pc, #488]	; (8000a70 <HAL_PCD_Init+0x21c>)
 8000888:	2103      	movs	r1, #3
 800088a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fb51 	bl	8002f38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000896:	230f      	movs	r3, #15
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e058      	b.n	8000952 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80008a0:	200f      	movs	r0, #15
 80008a2:	183b      	adds	r3, r7, r0
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	0013      	movs	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	189b      	adds	r3, r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	18cb      	adds	r3, r1, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80008ba:	183b      	adds	r3, r7, r0
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	0013      	movs	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	189b      	adds	r3, r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	183a      	adds	r2, r7, r0
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80008d0:	183b      	adds	r3, r7, r0
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	0004      	movs	r4, r0
 80008d6:	183b      	adds	r3, r7, r0
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b298      	uxth	r0, r3
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	0013      	movs	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	18cb      	adds	r3, r1, r3
 80008e8:	3336      	adds	r3, #54	; 0x36
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	0013      	movs	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	18cb      	adds	r3, r1, r3
 8000900:	3303      	adds	r3, #3
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	0013      	movs	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	189b      	adds	r3, r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	18cb      	adds	r3, r1, r3
 8000916:	3338      	adds	r3, #56	; 0x38
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	0013      	movs	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	189b      	adds	r3, r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	18cb      	adds	r3, r1, r3
 800092c:	333c      	adds	r3, #60	; 0x3c
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	0013      	movs	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	189b      	adds	r3, r3, r2
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	18cb      	adds	r3, r1, r3
 8000942:	3340      	adds	r3, #64	; 0x40
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000948:	193b      	adds	r3, r7, r4
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	193b      	adds	r3, r7, r4
 800094e:	3201      	adds	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	230f      	movs	r3, #15
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d39f      	bcc.n	80008a0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000960:	230f      	movs	r3, #15
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e056      	b.n	8000a18 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800096a:	240f      	movs	r4, #15
 800096c:	193b      	adds	r3, r7, r4
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	236a      	movs	r3, #106	; 0x6a
 8000974:	33ff      	adds	r3, #255	; 0xff
 8000976:	0019      	movs	r1, r3
 8000978:	0013      	movs	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	189b      	adds	r3, r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	18c3      	adds	r3, r0, r3
 8000982:	185b      	adds	r3, r3, r1
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	23b4      	movs	r3, #180	; 0xb4
 8000990:	0059      	lsls	r1, r3, #1
 8000992:	0013      	movs	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	189b      	adds	r3, r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	18c3      	adds	r3, r0, r3
 800099c:	185b      	adds	r3, r3, r1
 800099e:	193a      	adds	r2, r7, r4
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	236c      	movs	r3, #108	; 0x6c
 80009ac:	33ff      	adds	r3, #255	; 0xff
 80009ae:	0019      	movs	r1, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	189b      	adds	r3, r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	18c3      	adds	r3, r0, r3
 80009ba:	185b      	adds	r3, r3, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	23bc      	movs	r3, #188	; 0xbc
 80009c8:	0059      	lsls	r1, r3, #1
 80009ca:	0013      	movs	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	189b      	adds	r3, r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	18c3      	adds	r3, r0, r3
 80009d4:	185b      	adds	r3, r3, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	23be      	movs	r3, #190	; 0xbe
 80009e2:	0059      	lsls	r1, r3, #1
 80009e4:	0013      	movs	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	189b      	adds	r3, r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	18c3      	adds	r3, r0, r3
 80009ee:	185b      	adds	r3, r3, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	0059      	lsls	r1, r3, #1
 80009fe:	0013      	movs	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	189b      	adds	r3, r3, r2
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	18c3      	adds	r3, r0, r3
 8000a08:	185b      	adds	r3, r3, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	3201      	adds	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	230f      	movs	r3, #15
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3a1      	bcc.n	800096a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	466a      	mov	r2, sp
 8000a2e:	0011      	movs	r1, r2
 8000a30:	001a      	movs	r2, r3
 8000a32:	3210      	adds	r2, #16
 8000a34:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000a36:	c170      	stmia	r1!, {r4, r5, r6}
 8000a38:	ca30      	ldmia	r2!, {r4, r5}
 8000a3a:	c130      	stmia	r1!, {r4, r5}
 8000a3c:	6859      	ldr	r1, [r3, #4]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	f002 fa93 	bl	8002f6c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2224      	movs	r2, #36	; 0x24
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_PCD_Init+0x21c>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d103      	bne.n	8000a66 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 fb4b 	bl	80020fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b005      	add	sp, #20
 8000a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a70:	000002a9 	.word	0x000002a9

08000a74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	23aa      	movs	r3, #170	; 0xaa
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d101      	bne.n	8000a8c <HAL_PCD_Start+0x18>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e014      	b.n	8000ab6 <HAL_PCD_Start+0x42>
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	23aa      	movs	r3, #170	; 0xaa
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	2101      	movs	r1, #1
 8000a94:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fa36 	bl	8002f0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f004 fa0f 	bl	8004ec8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	23aa      	movs	r3, #170	; 0xaa
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f004 fa11 	bl	8004ef4 <USB_ReadInterrupts>
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	401a      	ands	r2, r3
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d103      	bne.n	8000aea <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fba3 	bl	8001230 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	0018      	movs	r0, r3
 8000af0:	f004 fa00 	bl	8004ef4 <USB_ReadInterrupts>
 8000af4:	0002      	movs	r2, r0
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	401a      	ands	r2, r3
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d114      	bne.n	8000b2e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2244      	movs	r2, #68	; 0x44
 8000b0a:	5a9b      	ldrh	r3, [r3, r2]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	49a2      	ldr	r1, [pc, #648]	; (8000d9c <HAL_PCD_IRQHandler+0x2dc>)
 8000b14:	400a      	ands	r2, r1
 8000b16:	b291      	uxth	r1, r2
 8000b18:	2244      	movs	r2, #68	; 0x44
 8000b1a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f006 f97b 	bl	8006e1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2100      	movs	r1, #0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 f945 	bl	8000db8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f004 f9de 	bl	8004ef4 <USB_ReadInterrupts>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	01db      	lsls	r3, r3, #7
 8000b3e:	401a      	ands	r2, r3
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	01db      	lsls	r3, r3, #7
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d10b      	bne.n	8000b60 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2244      	movs	r2, #68	; 0x44
 8000b4e:	5a9b      	ldrh	r3, [r3, r2]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4992      	ldr	r1, [pc, #584]	; (8000da0 <HAL_PCD_IRQHandler+0x2e0>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	b291      	uxth	r1, r2
 8000b5c:	2244      	movs	r2, #68	; 0x44
 8000b5e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f004 f9c5 	bl	8004ef4 <USB_ReadInterrupts>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	019b      	lsls	r3, r3, #6
 8000b70:	401a      	ands	r2, r3
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d10b      	bne.n	8000b92 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2244      	movs	r2, #68	; 0x44
 8000b80:	5a9b      	ldrh	r3, [r3, r2]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4986      	ldr	r1, [pc, #536]	; (8000da4 <HAL_PCD_IRQHandler+0x2e4>)
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	b291      	uxth	r1, r2
 8000b8e:	2244      	movs	r2, #68	; 0x44
 8000b90:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f004 f9ac 	bl	8004ef4 <USB_ReadInterrupts>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	015b      	lsls	r3, r3, #5
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d137      	bne.n	8000c1c <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	5a9b      	ldrh	r3, [r3, r2]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2104      	movs	r1, #4
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	b291      	uxth	r1, r2
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2240      	movs	r2, #64	; 0x40
 8000bca:	5a9b      	ldrh	r3, [r3, r2]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	b291      	uxth	r1, r2
 8000bd8:	2240      	movs	r2, #64	; 0x40
 8000bda:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	23b8      	movs	r3, #184	; 0xb8
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d109      	bne.n	8000bfc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	23b8      	movs	r3, #184	; 0xb8
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	2100      	movs	r1, #0
 8000bf0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 faaa 	bl	8002150 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f006 f94c 	bl	8006e9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2244      	movs	r2, #68	; 0x44
 8000c0a:	5a9b      	ldrh	r3, [r3, r2]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4965      	ldr	r1, [pc, #404]	; (8000da8 <HAL_PCD_IRQHandler+0x2e8>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	b291      	uxth	r1, r2
 8000c18:	2244      	movs	r2, #68	; 0x44
 8000c1a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f004 f967 	bl	8004ef4 <USB_ReadInterrupts>
 8000c26:	0002      	movs	r2, r0
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d127      	bne.n	8000c86 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2240      	movs	r2, #64	; 0x40
 8000c3c:	5a9b      	ldrh	r3, [r3, r2]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2108      	movs	r1, #8
 8000c46:	430a      	orrs	r2, r1
 8000c48:	b291      	uxth	r1, r2
 8000c4a:	2240      	movs	r2, #64	; 0x40
 8000c4c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2244      	movs	r2, #68	; 0x44
 8000c54:	5a9b      	ldrh	r3, [r3, r2]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4953      	ldr	r1, [pc, #332]	; (8000dac <HAL_PCD_IRQHandler+0x2ec>)
 8000c5e:	400a      	ands	r2, r1
 8000c60:	b291      	uxth	r1, r2
 8000c62:	2244      	movs	r2, #68	; 0x44
 8000c64:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	5a9b      	ldrh	r3, [r3, r2]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2104      	movs	r1, #4
 8000c76:	430a      	orrs	r2, r1
 8000c78:	b291      	uxth	r1, r2
 8000c7a:	2240      	movs	r2, #64	; 0x40
 8000c7c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f006 f8ef 	bl	8006e64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f004 f932 	bl	8004ef4 <USB_ReadInterrupts>
 8000c90:	0002      	movs	r2, r0
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b80      	cmp	r3, #128	; 0x80
 8000c98:	d145      	bne.n	8000d26 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2244      	movs	r2, #68	; 0x44
 8000ca0:	5a9b      	ldrh	r3, [r3, r2]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	438a      	bics	r2, r1
 8000cac:	b291      	uxth	r1, r2
 8000cae:	2244      	movs	r2, #68	; 0x44
 8000cb0:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	23b8      	movs	r3, #184	; 0xb8
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	5cd3      	ldrb	r3, [r2, r3]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d12f      	bne.n	8000d1e <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	5a9b      	ldrh	r3, [r3, r2]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2104      	movs	r1, #4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b291      	uxth	r1, r2
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2240      	movs	r2, #64	; 0x40
 8000cdc:	5a9b      	ldrh	r3, [r3, r2]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	b291      	uxth	r1, r2
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	23b8      	movs	r3, #184	; 0xb8
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2254      	movs	r2, #84	; 0x54
 8000cfe:	5a9b      	ldrh	r3, [r3, r2]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	223c      	movs	r2, #60	; 0x3c
 8000d06:	4013      	ands	r3, r2
 8000d08:	0019      	movs	r1, r3
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	23b9      	movs	r3, #185	; 0xb9
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2101      	movs	r1, #1
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fa1a 	bl	8002150 <HAL_PCDEx_LPM_Callback>
 8000d1c:	e003      	b.n	8000d26 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f006 f89f 	bl	8006e64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f004 f8e2 	bl	8004ef4 <USB_ReadInterrupts>
 8000d30:	0002      	movs	r2, r0
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	401a      	ands	r2, r3
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d10f      	bne.n	8000d60 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2244      	movs	r2, #68	; 0x44
 8000d46:	5a9b      	ldrh	r3, [r3, r2]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4918      	ldr	r1, [pc, #96]	; (8000db0 <HAL_PCD_IRQHandler+0x2f0>)
 8000d50:	400a      	ands	r2, r1
 8000d52:	b291      	uxth	r1, r2
 8000d54:	2244      	movs	r2, #68	; 0x44
 8000d56:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f006 f84e 	bl	8006dfc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f004 f8c5 	bl	8004ef4 <USB_ReadInterrupts>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	401a      	ands	r2, r3
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d10b      	bne.n	8000d92 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2244      	movs	r2, #68	; 0x44
 8000d80:	5a9b      	ldrh	r3, [r3, r2]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	490a      	ldr	r1, [pc, #40]	; (8000db4 <HAL_PCD_IRQHandler+0x2f4>)
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	b291      	uxth	r1, r2
 8000d8e:	2244      	movs	r2, #68	; 0x44
 8000d90:	5299      	strh	r1, [r3, r2]
  }
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	fffffbff 	.word	0xfffffbff
 8000da0:	ffffbfff 	.word	0xffffbfff
 8000da4:	ffffdfff 	.word	0xffffdfff
 8000da8:	ffffefff 	.word	0xffffefff
 8000dac:	fffff7ff 	.word	0xfffff7ff
 8000db0:	fffffdff 	.word	0xfffffdff
 8000db4:	fffffeff 	.word	0xfffffeff

08000db8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	000a      	movs	r2, r1
 8000dc2:	1cfb      	adds	r3, r7, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	23aa      	movs	r3, #170	; 0xaa
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d101      	bne.n	8000dd6 <HAL_PCD_SetAddress+0x1e>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e017      	b.n	8000e06 <HAL_PCD_SetAddress+0x4e>
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	23aa      	movs	r3, #170	; 0xaa
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	2101      	movs	r1, #1
 8000dde:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1cfa      	adds	r2, r7, #3
 8000de4:	2124      	movs	r1, #36	; 0x24
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	1cfb      	adds	r3, r7, #3
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f004 f853 	bl	8004ea0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	23aa      	movs	r3, #170	; 0xaa
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	2100      	movs	r1, #0
 8000e02:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000e0e:	b590      	push	{r4, r7, lr}
 8000e10:	b085      	sub	sp, #20
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	000c      	movs	r4, r1
 8000e18:	0010      	movs	r0, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	1cfb      	adds	r3, r7, #3
 8000e1e:	1c22      	adds	r2, r4, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	003b      	movs	r3, r7
 8000e24:	1c02      	adds	r2, r0, #0
 8000e26:	801a      	strh	r2, [r3, #0]
 8000e28:	1cbb      	adds	r3, r7, #2
 8000e2a:	1c0a      	adds	r2, r1, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e36:	1cfb      	adds	r3, r7, #3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da0f      	bge.n	8000e60 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e40:	1cfb      	adds	r3, r7, #3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2207      	movs	r2, #7
 8000e46:	4013      	ands	r3, r2
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	189b      	adds	r3, r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	18d3      	adds	r3, r2, r3
 8000e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	705a      	strb	r2, [r3, #1]
 8000e5e:	e00f      	b.n	8000e80 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e60:	1cfb      	adds	r3, r7, #3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2207      	movs	r2, #7
 8000e66:	401a      	ands	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	189b      	adds	r3, r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	3369      	adds	r3, #105	; 0x69
 8000e72:	33ff      	adds	r3, #255	; 0xff
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	18d3      	adds	r3, r2, r3
 8000e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000e80:	1cfb      	adds	r3, r7, #3
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2207      	movs	r2, #7
 8000e86:	4013      	ands	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	881a      	ldrh	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	1cba      	adds	r2, r7, #2
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000eb0:	1cbb      	adds	r3, r7, #2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d102      	bne.n	8000ebe <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	23aa      	movs	r3, #170	; 0xaa
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d101      	bne.n	8000ece <HAL_PCD_EP_Open+0xc0>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e013      	b.n	8000ef6 <HAL_PCD_EP_Open+0xe8>
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	23aa      	movs	r3, #170	; 0xaa
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 f86f 	bl	8002fc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	23aa      	movs	r3, #170	; 0xaa
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	2100      	movs	r1, #0
 8000eee:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000ef0:	230b      	movs	r3, #11
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b005      	add	sp, #20
 8000efc:	bd90      	pop	{r4, r7, pc}

08000efe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	000a      	movs	r2, r1
 8000f08:	1cfb      	adds	r3, r7, #3
 8000f0a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f0c:	1cfb      	adds	r3, r7, #3
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da0f      	bge.n	8000f36 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f16:	1cfb      	adds	r3, r7, #3
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	0013      	movs	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	189b      	adds	r3, r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	18d3      	adds	r3, r2, r3
 8000f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2201      	movs	r2, #1
 8000f32:	705a      	strb	r2, [r3, #1]
 8000f34:	e00f      	b.n	8000f56 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f36:	1cfb      	adds	r3, r7, #3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	189b      	adds	r3, r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	3369      	adds	r3, #105	; 0x69
 8000f48:	33ff      	adds	r3, #255	; 0xff
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000f56:	1cfb      	adds	r3, r7, #3
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	23aa      	movs	r3, #170	; 0xaa
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_PCD_EP_Close+0x76>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e011      	b.n	8000f98 <HAL_PCD_EP_Close+0x9a>
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	23aa      	movs	r3, #170	; 0xaa
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 fb72 	bl	8003670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	23aa      	movs	r3, #170	; 0xaa
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	2100      	movs	r1, #0
 8000f94:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b004      	add	sp, #16
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	200b      	movs	r0, #11
 8000fae:	183b      	adds	r3, r7, r0
 8000fb0:	1c0a      	adds	r2, r1, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fb4:	0001      	movs	r1, r0
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2207      	movs	r2, #7
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	3369      	adds	r3, #105	; 0x69
 8000fc8:	33ff      	adds	r3, #255	; 0xff
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	18d3      	adds	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2207      	movs	r2, #7
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d107      	bne.n	8001010 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f002 fcf1 	bl	80039f0 <USB_EPStartXfer>
 800100e:	e006      	b.n	800101e <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f002 fce9 	bl	80039f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b006      	add	sp, #24
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	200b      	movs	r0, #11
 8001036:	183b      	adds	r3, r7, r0
 8001038:	1c0a      	adds	r2, r1, #0
 800103a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800103c:	183b      	adds	r3, r7, r0
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2207      	movs	r2, #7
 8001042:	4013      	ands	r3, r2
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	0013      	movs	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	189b      	adds	r3, r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	18d3      	adds	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2224      	movs	r2, #36	; 0x24
 8001064:	2101      	movs	r1, #1
 8001066:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2201      	movs	r2, #1
 8001078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800107a:	183b      	adds	r3, r7, r0
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2207      	movs	r2, #7
 8001080:	4013      	ands	r3, r2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001088:	183b      	adds	r3, r7, r0
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2207      	movs	r2, #7
 800108e:	4013      	ands	r3, r2
 8001090:	d107      	bne.n	80010a2 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f002 fca8 	bl	80039f0 <USB_EPStartXfer>
 80010a0:	e006      	b.n	80010b0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f002 fca0 	bl	80039f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b006      	add	sp, #24
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	000a      	movs	r2, r1
 80010c4:	1cfb      	adds	r3, r7, #3
 80010c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80010c8:	1cfb      	adds	r3, r7, #3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2207      	movs	r2, #7
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d901      	bls.n	80010dc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e046      	b.n	800116a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010dc:	1cfb      	adds	r3, r7, #3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da0f      	bge.n	8001106 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010e6:	1cfb      	adds	r3, r7, #3
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2207      	movs	r2, #7
 80010ec:	4013      	ands	r3, r2
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	0013      	movs	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	18d3      	adds	r3, r2, r3
 80010fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2201      	movs	r2, #1
 8001102:	705a      	strb	r2, [r3, #1]
 8001104:	e00d      	b.n	8001122 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001106:	1cfb      	adds	r3, r7, #3
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	0013      	movs	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	189b      	adds	r3, r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	3369      	adds	r3, #105	; 0x69
 8001114:	33ff      	adds	r3, #255	; 0xff
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2201      	movs	r2, #1
 8001126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001128:	1cfb      	adds	r3, r7, #3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2207      	movs	r2, #7
 800112e:	4013      	ands	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	23aa      	movs	r3, #170	; 0xaa
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_PCD_EP_SetStall+0x8c>
 8001142:	2302      	movs	r3, #2
 8001144:	e011      	b.n	800116a <HAL_PCD_EP_SetStall+0xb0>
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	23aa      	movs	r3, #170	; 0xaa
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	2101      	movs	r1, #1
 800114e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f003 fd9f 	bl	8004c9c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	23aa      	movs	r3, #170	; 0xaa
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	2100      	movs	r1, #0
 8001166:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	000a      	movs	r2, r1
 800117c:	1cfb      	adds	r3, r7, #3
 800117e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	220f      	movs	r2, #15
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d901      	bls.n	8001194 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e048      	b.n	8001226 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001194:	1cfb      	adds	r3, r7, #3
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	da0f      	bge.n	80011be <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800119e:	1cfb      	adds	r3, r7, #3
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2207      	movs	r2, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	0013      	movs	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2201      	movs	r2, #1
 80011ba:	705a      	strb	r2, [r3, #1]
 80011bc:	e00f      	b.n	80011de <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011be:	1cfb      	adds	r3, r7, #3
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2207      	movs	r2, #7
 80011c4:	401a      	ands	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	189b      	adds	r3, r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	3369      	adds	r3, #105	; 0x69
 80011d0:	33ff      	adds	r3, #255	; 0xff
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011e4:	1cfb      	adds	r3, r7, #3
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2207      	movs	r2, #7
 80011ea:	4013      	ands	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	23aa      	movs	r3, #170	; 0xaa
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_PCD_EP_ClrStall+0x90>
 80011fe:	2302      	movs	r3, #2
 8001200:	e011      	b.n	8001226 <HAL_PCD_EP_ClrStall+0xb4>
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	23aa      	movs	r3, #170	; 0xaa
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	2101      	movs	r1, #1
 800120a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f003 fd91 	bl	8004d3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	23aa      	movs	r3, #170	; 0xaa
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	2100      	movs	r1, #0
 8001222:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b08f      	sub	sp, #60	; 0x3c
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001238:	e323      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	202e      	movs	r0, #46	; 0x2e
 8001240:	183b      	adds	r3, r7, r0
 8001242:	2144      	movs	r1, #68	; 0x44
 8001244:	5a52      	ldrh	r2, [r2, r1]
 8001246:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001248:	183b      	adds	r3, r7, r0
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	202d      	movs	r0, #45	; 0x2d
 8001250:	183b      	adds	r3, r7, r0
 8001252:	210f      	movs	r1, #15
 8001254:	400a      	ands	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001258:	183b      	adds	r3, r7, r0
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d000      	beq.n	8001262 <PCD_EP_ISR_Handler+0x32>
 8001260:	e15e      	b.n	8001520 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001262:	232e      	movs	r3, #46	; 0x2e
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2210      	movs	r2, #16
 800126a:	4013      	ands	r3, r2
 800126c:	d152      	bne.n	8001314 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	200e      	movs	r0, #14
 8001278:	183b      	adds	r3, r7, r0
 800127a:	49db      	ldr	r1, [pc, #876]	; (80015e8 <PCD_EP_ISR_Handler+0x3b8>)
 800127c:	400a      	ands	r2, r1
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	183a      	adds	r2, r7, r0
 8001286:	8812      	ldrh	r2, [r2, #0]
 8001288:	49d8      	ldr	r1, [pc, #864]	; (80015ec <PCD_EP_ISR_Handler+0x3bc>)
 800128a:	430a      	orrs	r2, r1
 800128c:	b292      	uxth	r2, r2
 800128e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3328      	adds	r3, #40	; 0x28
 8001294:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2250      	movs	r2, #80	; 0x50
 800129c:	5a9b      	ldrh	r3, [r3, r2]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	001a      	movs	r2, r3
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	18d2      	adds	r2, r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	18d3      	adds	r3, r2, r3
 80012b0:	4acf      	ldr	r2, [pc, #828]	; (80015f0 <PCD_EP_ISR_Handler+0x3c0>)
 80012b2:	4694      	mov	ip, r2
 80012b4:	4463      	add	r3, ip
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	059b      	lsls	r3, r3, #22
 80012ba:	0d9a      	lsrs	r2, r3, #22
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	18d2      	adds	r2, r2, r3
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2100      	movs	r1, #0
 80012d2:	0018      	movs	r0, r3
 80012d4:	f005 fd74 	bl	8006dc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	5c9b      	ldrb	r3, [r3, r2]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d100      	bne.n	80012e6 <PCD_EP_ISR_Handler+0xb6>
 80012e4:	e2cd      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <PCD_EP_ISR_Handler+0xc0>
 80012ee:	e2c8      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	5c9b      	ldrb	r3, [r3, r2]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	4252      	negs	r2, r2
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b291      	uxth	r1, r2
 8001306:	224c      	movs	r2, #76	; 0x4c
 8001308:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2224      	movs	r2, #36	; 0x24
 800130e:	2100      	movs	r1, #0
 8001310:	5499      	strb	r1, [r3, r2]
 8001312:	e2b6      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3369      	adds	r3, #105	; 0x69
 8001318:	33ff      	adds	r3, #255	; 0xff
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	212a      	movs	r1, #42	; 0x2a
 8001322:	187b      	adds	r3, r7, r1
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001328:	187b      	adds	r3, r7, r1
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4013      	ands	r3, r2
 8001332:	d037      	beq.n	80013a4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2250      	movs	r2, #80	; 0x50
 800133a:	5a9b      	ldrh	r3, [r3, r2]
 800133c:	b29b      	uxth	r3, r3
 800133e:	001a      	movs	r2, r3
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	18d2      	adds	r2, r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	18d3      	adds	r3, r2, r3
 800134e:	4aa9      	ldr	r2, [pc, #676]	; (80015f4 <PCD_EP_ISR_Handler+0x3c4>)
 8001350:	4694      	mov	ip, r2
 8001352:	4463      	add	r3, ip
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	059b      	lsls	r3, r3, #22
 8001358:	0d9a      	lsrs	r2, r3, #22
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	22ac      	movs	r2, #172	; 0xac
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	1899      	adds	r1, r3, r2
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001372:	b29b      	uxth	r3, r3
 8001374:	f003 fe0f 	bl	8004f96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29a      	uxth	r2, r3
 8001380:	2010      	movs	r0, #16
 8001382:	183b      	adds	r3, r7, r0
 8001384:	499c      	ldr	r1, [pc, #624]	; (80015f8 <PCD_EP_ISR_Handler+0x3c8>)
 8001386:	400a      	ands	r2, r1
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	183a      	adds	r2, r7, r0
 8001390:	8812      	ldrh	r2, [r2, #0]
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	430a      	orrs	r2, r1
 8001396:	b292      	uxth	r2, r2
 8001398:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	f005 fcd9 	bl	8006d54 <HAL_PCD_SetupStageCallback>
 80013a2:	e26e      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013a4:	232a      	movs	r3, #42	; 0x2a
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	5e9b      	ldrsh	r3, [r3, r2]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db00      	blt.n	80013b2 <PCD_EP_ISR_Handler+0x182>
 80013b0:	e267      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	201c      	movs	r0, #28
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	498e      	ldr	r1, [pc, #568]	; (80015f8 <PCD_EP_ISR_Handler+0x3c8>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	801a      	strh	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	183a      	adds	r2, r7, r0
 80013ca:	8812      	ldrh	r2, [r2, #0]
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	430a      	orrs	r2, r1
 80013d0:	b292      	uxth	r2, r2
 80013d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2250      	movs	r2, #80	; 0x50
 80013da:	5a9b      	ldrh	r3, [r3, r2]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	001a      	movs	r2, r3
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	18d2      	adds	r2, r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	4a81      	ldr	r2, [pc, #516]	; (80015f4 <PCD_EP_ISR_Handler+0x3c4>)
 80013f0:	4694      	mov	ip, r2
 80013f2:	4463      	add	r3, ip
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	059b      	lsls	r3, r3, #22
 80013f8:	0d9a      	lsrs	r2, r3, #22
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01a      	beq.n	800143c <PCD_EP_ISR_Handler+0x20c>
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d016      	beq.n	800143c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	6959      	ldr	r1, [r3, #20]
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800141e:	b29b      	uxth	r3, r3
 8001420:	f003 fdb9 	bl	8004f96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	18d2      	adds	r2, r2, r3
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2100      	movs	r1, #0
 8001436:	0018      	movs	r0, r3
 8001438:	f005 fca1 	bl	8006d7e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2250      	movs	r2, #80	; 0x50
 8001448:	5a9b      	ldrh	r3, [r3, r2]
 800144a:	b29b      	uxth	r3, r3
 800144c:	001a      	movs	r2, r3
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	189b      	adds	r3, r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	4a67      	ldr	r2, [pc, #412]	; (80015f4 <PCD_EP_ISR_Handler+0x3c4>)
 8001458:	4694      	mov	ip, r2
 800145a:	4463      	add	r3, ip
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d110      	bne.n	8001488 <PCD_EP_ISR_Handler+0x258>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4a63      	ldr	r2, [pc, #396]	; (80015fc <PCD_EP_ISR_Handler+0x3cc>)
 800146e:	4013      	ands	r3, r2
 8001470:	b29a      	uxth	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	801a      	strh	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4a5b      	ldr	r2, [pc, #364]	; (80015ec <PCD_EP_ISR_Handler+0x3bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	b29a      	uxth	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	e02b      	b.n	80014e0 <PCD_EP_ISR_Handler+0x2b0>
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b3e      	cmp	r3, #62	; 0x3e
 800148e:	d812      	bhi.n	80014b6 <PCD_EP_ISR_Handler+0x286>
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	d002      	beq.n	80014a8 <PCD_EP_ISR_Handler+0x278>
 80014a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a4:	3301      	adds	r3, #1
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
 80014a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	029b      	lsls	r3, r3, #10
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	801a      	strh	r2, [r3, #0]
 80014b4:	e014      	b.n	80014e0 <PCD_EP_ISR_Handler+0x2b0>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	221f      	movs	r2, #31
 80014c4:	4013      	ands	r3, r2
 80014c6:	d102      	bne.n	80014ce <PCD_EP_ISR_Handler+0x29e>
 80014c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ca:	3b01      	subs	r3, #1
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
 80014ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4a45      	ldr	r2, [pc, #276]	; (80015ec <PCD_EP_ISR_Handler+0x3bc>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	2012      	movs	r0, #18
 80014ea:	183b      	adds	r3, r7, r0
 80014ec:	4944      	ldr	r1, [pc, #272]	; (8001600 <PCD_EP_ISR_Handler+0x3d0>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	183b      	adds	r3, r7, r0
 80014f4:	183a      	adds	r2, r7, r0
 80014f6:	8812      	ldrh	r2, [r2, #0]
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0149      	lsls	r1, r1, #5
 80014fc:	404a      	eors	r2, r1
 80014fe:	801a      	strh	r2, [r3, #0]
 8001500:	183b      	adds	r3, r7, r0
 8001502:	183a      	adds	r2, r7, r0
 8001504:	8812      	ldrh	r2, [r2, #0]
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0189      	lsls	r1, r1, #6
 800150a:	404a      	eors	r2, r1
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	183a      	adds	r2, r7, r0
 8001514:	8812      	ldrh	r2, [r2, #0]
 8001516:	493b      	ldr	r1, [pc, #236]	; (8001604 <PCD_EP_ISR_Handler+0x3d4>)
 8001518:	430a      	orrs	r2, r1
 800151a:	b292      	uxth	r2, r2
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	e1b0      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	001a      	movs	r2, r3
 8001526:	232d      	movs	r3, #45	; 0x2d
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	18d2      	adds	r2, r2, r3
 8001530:	212a      	movs	r1, #42	; 0x2a
 8001532:	187b      	adds	r3, r7, r1
 8001534:	8812      	ldrh	r2, [r2, #0]
 8001536:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	5e9b      	ldrsh	r3, [r3, r2]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db00      	blt.n	8001544 <PCD_EP_ISR_Handler+0x314>
 8001542:	e10f      	b.n	8001764 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	202d      	movs	r0, #45	; 0x2d
 800154c:	183b      	adds	r3, r7, r0
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29a      	uxth	r2, r3
 8001558:	2428      	movs	r4, #40	; 0x28
 800155a:	193b      	adds	r3, r7, r4
 800155c:	4926      	ldr	r1, [pc, #152]	; (80015f8 <PCD_EP_ISR_Handler+0x3c8>)
 800155e:	400a      	ands	r2, r1
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	001a      	movs	r2, r3
 8001568:	183b      	adds	r3, r7, r0
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	18d3      	adds	r3, r2, r3
 8001570:	193a      	adds	r2, r7, r4
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	430a      	orrs	r2, r1
 8001578:	b292      	uxth	r2, r2
 800157a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800157c:	183b      	adds	r3, r7, r0
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	0013      	movs	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	189b      	adds	r3, r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	3369      	adds	r3, #105	; 0x69
 800158a:	33ff      	adds	r3, #255	; 0xff
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	18d3      	adds	r3, r2, r3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	7b1b      	ldrb	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d136      	bne.n	8001608 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2250      	movs	r2, #80	; 0x50
 80015a0:	5a9b      	ldrh	r3, [r3, r2]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	001a      	movs	r2, r3
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	18d2      	adds	r2, r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	18d3      	adds	r3, r2, r3
 80015b4:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <PCD_EP_ISR_Handler+0x3c4>)
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	2136      	movs	r1, #54	; 0x36
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	0592      	lsls	r2, r2, #22
 80015c2:	0d92      	lsrs	r2, r2, #22
 80015c4:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d100      	bne.n	80015d0 <PCD_EP_ISR_Handler+0x3a0>
 80015ce:	e0a0      	b.n	8001712 <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	6959      	ldr	r1, [r3, #20]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	88da      	ldrh	r2, [r3, #6]
 80015dc:	2336      	movs	r3, #54	; 0x36
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	f003 fcd8 	bl	8004f96 <USB_ReadPMA>
 80015e6:	e094      	b.n	8001712 <PCD_EP_ISR_Handler+0x4e2>
 80015e8:	ffff8f0f 	.word	0xffff8f0f
 80015ec:	ffff8000 	.word	0xffff8000
 80015f0:	00000402 	.word	0x00000402
 80015f4:	00000406 	.word	0x00000406
 80015f8:	00000f8f 	.word	0x00000f8f
 80015fc:	ffff83ff 	.word	0xffff83ff
 8001600:	ffffbf8f 	.word	0xffffbf8f
 8001604:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	78db      	ldrb	r3, [r3, #3]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d10c      	bne.n	800162a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001610:	2336      	movs	r3, #54	; 0x36
 8001612:	18fc      	adds	r4, r7, r3
 8001614:	232a      	movs	r3, #42	; 0x2a
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	0018      	movs	r0, r3
 8001620:	f000 f94a 	bl	80018b8 <HAL_PCD_EP_DB_Receive>
 8001624:	0003      	movs	r3, r0
 8001626:	8023      	strh	r3, [r4, #0]
 8001628:	e073      	b.n	8001712 <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	001a      	movs	r2, r3
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b29a      	uxth	r2, r3
 800163c:	2022      	movs	r0, #34	; 0x22
 800163e:	183b      	adds	r3, r7, r0
 8001640:	4997      	ldr	r1, [pc, #604]	; (80018a0 <PCD_EP_ISR_Handler+0x670>)
 8001642:	400a      	ands	r2, r1
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	001a      	movs	r2, r3
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	18d3      	adds	r3, r2, r3
 8001654:	183a      	adds	r2, r7, r0
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	4992      	ldr	r1, [pc, #584]	; (80018a4 <PCD_EP_ISR_Handler+0x674>)
 800165a:	430a      	orrs	r2, r1
 800165c:	b292      	uxth	r2, r2
 800165e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	001a      	movs	r2, r3
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	001a      	movs	r2, r3
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	01db      	lsls	r3, r3, #7
 8001678:	4013      	ands	r3, r2
 800167a:	d025      	beq.n	80016c8 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2250      	movs	r2, #80	; 0x50
 8001682:	5a9b      	ldrh	r3, [r3, r2]
 8001684:	b29b      	uxth	r3, r3
 8001686:	001a      	movs	r2, r3
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	18d2      	adds	r2, r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	18d3      	adds	r3, r2, r3
 8001696:	4a84      	ldr	r2, [pc, #528]	; (80018a8 <PCD_EP_ISR_Handler+0x678>)
 8001698:	4694      	mov	ip, r2
 800169a:	4463      	add	r3, ip
 800169c:	881a      	ldrh	r2, [r3, #0]
 800169e:	2136      	movs	r1, #54	; 0x36
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	0592      	lsls	r2, r2, #22
 80016a4:	0d92      	lsrs	r2, r2, #22
 80016a6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d030      	beq.n	8001712 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	6959      	ldr	r1, [r3, #20]
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	891a      	ldrh	r2, [r3, #8]
 80016bc:	2336      	movs	r3, #54	; 0x36
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	f003 fc68 	bl	8004f96 <USB_ReadPMA>
 80016c6:	e024      	b.n	8001712 <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2250      	movs	r2, #80	; 0x50
 80016ce:	5a9b      	ldrh	r3, [r3, r2]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	001a      	movs	r2, r3
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	18d2      	adds	r2, r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	4a72      	ldr	r2, [pc, #456]	; (80018ac <PCD_EP_ISR_Handler+0x67c>)
 80016e4:	4694      	mov	ip, r2
 80016e6:	4463      	add	r3, ip
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	2136      	movs	r1, #54	; 0x36
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	0592      	lsls	r2, r2, #22
 80016f0:	0d92      	lsrs	r2, r2, #22
 80016f2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00a      	beq.n	8001712 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	6959      	ldr	r1, [r3, #20]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	895a      	ldrh	r2, [r3, #10]
 8001708:	2336      	movs	r3, #54	; 0x36
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	f003 fc42 	bl	8004f96 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	2136      	movs	r1, #54	; 0x36
 8001718:	187b      	adds	r3, r7, r1
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	18d2      	adds	r2, r2, r3
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	187b      	adds	r3, r7, r1
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	18d2      	adds	r2, r2, r3
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <PCD_EP_ISR_Handler+0x516>
 8001738:	2336      	movs	r3, #54	; 0x36
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	429a      	cmp	r2, r3
 8001744:	d207      	bcs.n	8001756 <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f005 fb15 	bl	8006d7e <HAL_PCD_DataOutStageCallback>
 8001754:	e006      	b.n	8001764 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	0011      	movs	r1, r2
 800175e:	0018      	movs	r0, r3
 8001760:	f002 f946 	bl	80039f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001764:	232a      	movs	r3, #42	; 0x2a
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	4013      	ands	r3, r2
 800176e:	d100      	bne.n	8001772 <PCD_EP_ISR_Handler+0x542>
 8001770:	e087      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 8001772:	202d      	movs	r0, #45	; 0x2d
 8001774:	183b      	adds	r3, r7, r0
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	0013      	movs	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	189b      	adds	r3, r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	001a      	movs	r2, r3
 800178e:	183b      	adds	r3, r7, r0
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29a      	uxth	r2, r3
 800179a:	2420      	movs	r4, #32
 800179c:	193b      	adds	r3, r7, r4
 800179e:	4944      	ldr	r1, [pc, #272]	; (80018b0 <PCD_EP_ISR_Handler+0x680>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	001a      	movs	r2, r3
 80017aa:	183b      	adds	r3, r7, r0
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	193a      	adds	r2, r7, r4
 80017b4:	8812      	ldrh	r2, [r2, #0]
 80017b6:	493f      	ldr	r1, [pc, #252]	; (80018b4 <PCD_EP_ISR_Handler+0x684>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	b292      	uxth	r2, r2
 80017bc:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	78db      	ldrb	r3, [r3, #3]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d10a      	bne.n	80017dc <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d151      	bne.n	8001872 <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80017ce:	232a      	movs	r3, #42	; 0x2a
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d14a      	bne.n	8001872 <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2250      	movs	r2, #80	; 0x50
 80017e2:	5a9b      	ldrh	r3, [r3, r2]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	001a      	movs	r2, r3
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	18d2      	adds	r2, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <PCD_EP_ISR_Handler+0x678>)
 80017f8:	4694      	mov	ip, r2
 80017fa:	4463      	add	r3, ip
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	211e      	movs	r1, #30
 8001800:	187b      	adds	r3, r7, r1
 8001802:	0592      	lsls	r2, r2, #22
 8001804:	0d92      	lsrs	r2, r2, #22
 8001806:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	699a      	ldr	r2, [r3, #24]
 800180c:	187b      	adds	r3, r7, r1
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d908      	bls.n	8001826 <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	699a      	ldr	r2, [r3, #24]
 8001818:	231e      	movs	r3, #30
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	1ad2      	subs	r2, r2, r3
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	619a      	str	r2, [r3, #24]
 8001824:	e002      	b.n	800182c <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f005 fabf 	bl	8006dc0 <HAL_PCD_DataInStageCallback>
 8001842:	e01e      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	211e      	movs	r1, #30
 800184a:	187b      	adds	r3, r7, r1
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	18d2      	adds	r2, r2, r3
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	187b      	adds	r3, r7, r1
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	18d2      	adds	r2, r2, r3
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f002 f8c0 	bl	80039f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001870:	e007      	b.n	8001882 <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001872:	232a      	movs	r3, #42	; 0x2a
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	881a      	ldrh	r2, [r3, #0]
 8001878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	f000 f93b 	bl	8001af8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2244      	movs	r2, #68	; 0x44
 8001888:	5a9b      	ldrh	r3, [r3, r2]
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21b      	sxth	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	da00      	bge.n	8001894 <PCD_EP_ISR_Handler+0x664>
 8001892:	e4d2      	b.n	800123a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b00f      	add	sp, #60	; 0x3c
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	ffff8f8f 	.word	0xffff8f8f
 80018a4:	ffff80c0 	.word	0xffff80c0
 80018a8:	00000402 	.word	0x00000402
 80018ac:	00000406 	.word	0x00000406
 80018b0:	ffff8f0f 	.word	0xffff8f0f
 80018b4:	ffff8000 	.word	0xffff8000

080018b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	1dbb      	adds	r3, r7, #6
 80018c4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018c6:	1dbb      	adds	r3, r7, #6
 80018c8:	881a      	ldrh	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	01db      	lsls	r3, r3, #7
 80018ce:	4013      	ands	r3, r2
 80018d0:	d100      	bne.n	80018d4 <HAL_PCD_EP_DB_Receive+0x1c>
 80018d2:	e07f      	b.n	80019d4 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2250      	movs	r2, #80	; 0x50
 80018da:	5a9b      	ldrh	r3, [r3, r2]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	001a      	movs	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	18d2      	adds	r2, r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	4a7c      	ldr	r2, [pc, #496]	; (8001ae0 <HAL_PCD_EP_DB_Receive+0x228>)
 80018f0:	4694      	mov	ip, r2
 80018f2:	4463      	add	r3, ip
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	211a      	movs	r1, #26
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	0592      	lsls	r2, r2, #22
 80018fc:	0d92      	lsrs	r2, r2, #22
 80018fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	187b      	adds	r3, r7, r1
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d308      	bcc.n	800191e <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	231a      	movs	r3, #26
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	1ad2      	subs	r2, r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	619a      	str	r2, [r3, #24]
 800191c:	e002      	b.n	8001924 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d121      	bne.n	8001970 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	001a      	movs	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	2018      	movs	r0, #24
 8001940:	183b      	adds	r3, r7, r0
 8001942:	4968      	ldr	r1, [pc, #416]	; (8001ae4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001944:	400a      	ands	r2, r1
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	183b      	adds	r3, r7, r0
 800194a:	183a      	adds	r2, r7, r0
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0189      	lsls	r1, r1, #6
 8001952:	404a      	eors	r2, r1
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	001a      	movs	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	18d3      	adds	r3, r2, r3
 8001964:	183a      	adds	r2, r7, r0
 8001966:	8812      	ldrh	r2, [r2, #0]
 8001968:	495f      	ldr	r1, [pc, #380]	; (8001ae8 <HAL_PCD_EP_DB_Receive+0x230>)
 800196a:	430a      	orrs	r2, r1
 800196c:	b292      	uxth	r2, r2
 800196e:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001970:	1dbb      	adds	r3, r7, #6
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2240      	movs	r2, #64	; 0x40
 8001976:	4013      	ands	r3, r2
 8001978:	d01a      	beq.n	80019b0 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	001a      	movs	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	2016      	movs	r0, #22
 800198e:	183b      	adds	r3, r7, r0
 8001990:	4956      	ldr	r1, [pc, #344]	; (8001aec <HAL_PCD_EP_DB_Receive+0x234>)
 8001992:	400a      	ands	r2, r1
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	001a      	movs	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	18d3      	adds	r3, r2, r3
 80019a4:	183a      	adds	r2, r7, r0
 80019a6:	8812      	ldrh	r2, [r2, #0]
 80019a8:	4951      	ldr	r1, [pc, #324]	; (8001af0 <HAL_PCD_EP_DB_Receive+0x238>)
 80019aa:	430a      	orrs	r2, r1
 80019ac:	b292      	uxth	r2, r2
 80019ae:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80019b0:	231a      	movs	r3, #26
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d100      	bne.n	80019bc <HAL_PCD_EP_DB_Receive+0x104>
 80019ba:	e089      	b.n	8001ad0 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	6959      	ldr	r1, [r3, #20]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	891a      	ldrh	r2, [r3, #8]
 80019c8:	231a      	movs	r3, #26
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	f003 fae2 	bl	8004f96 <USB_ReadPMA>
 80019d2:	e07d      	b.n	8001ad0 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2250      	movs	r2, #80	; 0x50
 80019da:	5a9b      	ldrh	r3, [r3, r2]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	001a      	movs	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	18d2      	adds	r2, r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	4a41      	ldr	r2, [pc, #260]	; (8001af4 <HAL_PCD_EP_DB_Receive+0x23c>)
 80019f0:	4694      	mov	ip, r2
 80019f2:	4463      	add	r3, ip
 80019f4:	881a      	ldrh	r2, [r3, #0]
 80019f6:	211a      	movs	r1, #26
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	0592      	lsls	r2, r2, #22
 80019fc:	0d92      	lsrs	r2, r2, #22
 80019fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d308      	bcc.n	8001a1e <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	231a      	movs	r3, #26
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	619a      	str	r2, [r3, #24]
 8001a1c:	e002      	b.n	8001a24 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d121      	bne.n	8001a70 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	001a      	movs	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	201e      	movs	r0, #30
 8001a40:	183b      	adds	r3, r7, r0
 8001a42:	4928      	ldr	r1, [pc, #160]	; (8001ae4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	801a      	strh	r2, [r3, #0]
 8001a48:	183b      	adds	r3, r7, r0
 8001a4a:	183a      	adds	r2, r7, r0
 8001a4c:	8812      	ldrh	r2, [r2, #0]
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0189      	lsls	r1, r1, #6
 8001a52:	404a      	eors	r2, r1
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	18d3      	adds	r3, r2, r3
 8001a64:	183a      	adds	r2, r7, r0
 8001a66:	8812      	ldrh	r2, [r2, #0]
 8001a68:	491f      	ldr	r1, [pc, #124]	; (8001ae8 <HAL_PCD_EP_DB_Receive+0x230>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001a70:	1dbb      	adds	r3, r7, #6
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	4013      	ands	r3, r2
 8001a78:	d11a      	bne.n	8001ab0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	001a      	movs	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	18d3      	adds	r3, r2, r3
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	201c      	movs	r0, #28
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_PCD_EP_DB_Receive+0x234>)
 8001a92:	400a      	ands	r2, r1
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	18d3      	adds	r3, r2, r3
 8001aa4:	183a      	adds	r2, r7, r0
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	4911      	ldr	r1, [pc, #68]	; (8001af0 <HAL_PCD_EP_DB_Receive+0x238>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	b292      	uxth	r2, r2
 8001aae:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001ab0:	231a      	movs	r3, #26
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6959      	ldr	r1, [r3, #20]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	895a      	ldrh	r2, [r3, #10]
 8001ac6:	231a      	movs	r3, #26
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f003 fa63 	bl	8004f96 <USB_ReadPMA>
    }
  }

  return count;
 8001ad0:	231a      	movs	r3, #26
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	881b      	ldrh	r3, [r3, #0]
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b008      	add	sp, #32
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	00000402 	.word	0x00000402
 8001ae4:	ffffbf8f 	.word	0xffffbf8f
 8001ae8:	ffff8080 	.word	0xffff8080
 8001aec:	ffff8f8f 	.word	0xffff8f8f
 8001af0:	ffff80c0 	.word	0xffff80c0
 8001af4:	00000406 	.word	0x00000406

08001af8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b092      	sub	sp, #72	; 0x48
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	1dbb      	adds	r3, r7, #6
 8001b04:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001b10:	e12f      	b.n	8001d72 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2250      	movs	r2, #80	; 0x50
 8001b18:	5a9b      	ldrh	r3, [r3, r2]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	18d2      	adds	r2, r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	4abc      	ldr	r2, [pc, #752]	; (8001e20 <HAL_PCD_EP_DB_Transmit+0x328>)
 8001b2e:	4694      	mov	ip, r2
 8001b30:	4463      	add	r3, ip
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	212e      	movs	r1, #46	; 0x2e
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	0592      	lsls	r2, r2, #22
 8001b3a:	0d92      	lsrs	r2, r2, #22
 8001b3c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d908      	bls.n	8001b5c <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	232e      	movs	r3, #46	; 0x2e
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	619a      	str	r2, [r3, #24]
 8001b5a:	e002      	b.n	8001b62 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d129      	bne.n	8001bbe <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0011      	movs	r1, r2
 8001b72:	0018      	movs	r0, r3
 8001b74:	f005 f924 	bl	8006dc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b78:	1dbb      	adds	r3, r7, #6
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	d100      	bne.n	8001b86 <HAL_PCD_EP_DB_Transmit+0x8e>
 8001b84:	e231      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	18d3      	adds	r3, r2, r3
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2012      	movs	r0, #18
 8001b9a:	183b      	adds	r3, r7, r0
 8001b9c:	49a1      	ldr	r1, [pc, #644]	; (8001e24 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18d3      	adds	r3, r2, r3
 8001bb0:	183a      	adds	r2, r7, r0
 8001bb2:	8812      	ldrh	r2, [r2, #0]
 8001bb4:	499c      	ldr	r1, [pc, #624]	; (8001e28 <HAL_PCD_EP_DB_Transmit+0x330>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	e215      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	01db      	lsls	r3, r3, #7
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d01a      	beq.n	8001c00 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	001a      	movs	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	18d3      	adds	r3, r2, r3
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2024      	movs	r0, #36	; 0x24
 8001bde:	183b      	adds	r3, r7, r0
 8001be0:	4990      	ldr	r1, [pc, #576]	; (8001e24 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	001a      	movs	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	183a      	adds	r2, r7, r0
 8001bf6:	8812      	ldrh	r2, [r2, #0]
 8001bf8:	498b      	ldr	r1, [pc, #556]	; (8001e28 <HAL_PCD_EP_DB_Transmit+0x330>)
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2224      	movs	r2, #36	; 0x24
 8001c04:	5c9b      	ldrb	r3, [r3, r2]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d000      	beq.n	8001c0c <HAL_PCD_EP_DB_Transmit+0x114>
 8001c0a:	e1ee      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	212e      	movs	r1, #46	; 0x2e
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	18d2      	adds	r2, r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	18d2      	adds	r2, r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d309      	bcc.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	621a      	str	r2, [r3, #32]
 8001c48:	e016      	b.n	8001c78 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8001c52:	232e      	movs	r3, #46	; 0x2e
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2224      	movs	r2, #36	; 0x24
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]
 8001c62:	e009      	b.n	8001c78 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d150      	bne.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x22a>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2250      	movs	r2, #80	; 0x50
 8001c8c:	5a9b      	ldrh	r3, [r3, r2]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	001a      	movs	r2, r3
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	189b      	adds	r3, r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	00da      	lsls	r2, r3, #3
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	; (8001e20 <HAL_PCD_EP_DB_Transmit+0x328>)
 8001ca4:	4694      	mov	ip, r2
 8001ca6:	4463      	add	r3, ip
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d110      	bne.n	8001cd2 <HAL_PCD_EP_DB_Transmit+0x1da>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <HAL_PCD_EP_DB_Transmit+0x334>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	801a      	strh	r2, [r3, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <HAL_PCD_EP_DB_Transmit+0x338>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e044      	b.n	8001d5c <HAL_PCD_EP_DB_Transmit+0x264>
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8001cd6:	d810      	bhi.n	8001cfa <HAL_PCD_EP_DB_Transmit+0x202>
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d002      	beq.n	8001cec <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	3301      	adds	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	029b      	lsls	r3, r3, #10
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	e030      	b.n	8001d5c <HAL_PCD_EP_DB_Transmit+0x264>
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	221f      	movs	r2, #31
 8001d04:	4013      	ands	r3, r2
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_EP_DB_Transmit+0x216>
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_PCD_EP_DB_Transmit+0x338>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	e01c      	b.n	8001d5c <HAL_PCD_EP_DB_Transmit+0x264>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d118      	bne.n	8001d5c <HAL_PCD_EP_DB_Transmit+0x264>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2250      	movs	r2, #80	; 0x50
 8001d36:	5a9b      	ldrh	r3, [r3, r2]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	00da      	lsls	r2, r3, #3
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	18d3      	adds	r3, r2, r3
 8001d4c:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <HAL_PCD_EP_DB_Transmit+0x328>)
 8001d4e:	4694      	mov	ip, r2
 8001d50:	4463      	add	r3, ip
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	6959      	ldr	r1, [r3, #20]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	891a      	ldrh	r2, [r3, #8]
 8001d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f003 f8d0 	bl	8004f10 <USB_WritePMA>
 8001d70:	e13b      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2250      	movs	r2, #80	; 0x50
 8001d78:	5a9b      	ldrh	r3, [r3, r2]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	18d2      	adds	r2, r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	18d3      	adds	r3, r2, r3
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8001d8e:	4694      	mov	ip, r2
 8001d90:	4463      	add	r3, ip
 8001d92:	881a      	ldrh	r2, [r3, #0]
 8001d94:	212e      	movs	r1, #46	; 0x2e
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	0592      	lsls	r2, r2, #22
 8001d9a:	0d92      	lsrs	r2, r2, #22
 8001d9c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d308      	bcc.n	8001dbc <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	232e      	movs	r3, #46	; 0x2e
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	1ad2      	subs	r2, r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	619a      	str	r2, [r3, #24]
 8001dba:	e002      	b.n	8001dc2 <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d136      	bne.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f004 fff4 	bl	8006dc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	01db      	lsls	r3, r3, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	d000      	beq.n	8001de6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8001de4:	e101      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	001a      	movs	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2026      	movs	r0, #38	; 0x26
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	4909      	ldr	r1, [pc, #36]	; (8001e24 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	001a      	movs	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	183a      	adds	r2, r7, r0
 8001e12:	8812      	ldrh	r2, [r2, #0]
 8001e14:	4904      	ldr	r1, [pc, #16]	; (8001e28 <HAL_PCD_EP_DB_Transmit+0x330>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	e0e5      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	00000402 	.word	0x00000402
 8001e24:	ffff8f8f 	.word	0xffff8f8f
 8001e28:	ffffc080 	.word	0xffffc080
 8001e2c:	ffff83ff 	.word	0xffff83ff
 8001e30:	ffff8000 	.word	0xffff8000
 8001e34:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e38:	1dbb      	adds	r3, r7, #6
 8001e3a:	881a      	ldrh	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	d11a      	bne.n	8001e7a <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	001a      	movs	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	202c      	movs	r0, #44	; 0x2c
 8001e58:	183b      	adds	r3, r7, r0
 8001e5a:	497a      	ldr	r1, [pc, #488]	; (8002044 <HAL_PCD_EP_DB_Transmit+0x54c>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	801a      	strh	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	001a      	movs	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	183a      	adds	r2, r7, r0
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	4975      	ldr	r1, [pc, #468]	; (8002048 <HAL_PCD_EP_DB_Transmit+0x550>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	b292      	uxth	r2, r2
 8001e78:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2224      	movs	r2, #36	; 0x24
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d000      	beq.n	8001e86 <HAL_PCD_EP_DB_Transmit+0x38e>
 8001e84:	e0b1      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	212e      	movs	r1, #46	; 0x2e
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	18d2      	adds	r2, r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	18d2      	adds	r2, r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d309      	bcc.n	8001ec4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	1ad2      	subs	r2, r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	621a      	str	r2, [r3, #32]
 8001ec2:	e016      	b.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 8001ecc:	232e      	movs	r3, #46	; 0x2e
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]
 8001edc:	e009      	b.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2224      	movs	r2, #36	; 0x24
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d150      	bne.n	8001fa2 <HAL_PCD_EP_DB_Transmit+0x4aa>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2250      	movs	r2, #80	; 0x50
 8001f0c:	5a9b      	ldrh	r3, [r3, r2]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	001a      	movs	r2, r3
 8001f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f14:	189b      	adds	r3, r3, r2
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	00da      	lsls	r2, r3, #3
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f20:	18d3      	adds	r3, r2, r3
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_PCD_EP_DB_Transmit+0x554>)
 8001f24:	4694      	mov	ip, r2
 8001f26:	4463      	add	r3, ip
 8001f28:	643b      	str	r3, [r7, #64]	; 0x40
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d110      	bne.n	8001f52 <HAL_PCD_EP_DB_Transmit+0x45a>
 8001f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4a46      	ldr	r2, [pc, #280]	; (8002050 <HAL_PCD_EP_DB_Transmit+0x558>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4a43      	ldr	r2, [pc, #268]	; (8002054 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	e041      	b.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x4de>
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f54:	2b3e      	cmp	r3, #62	; 0x3e
 8001f56:	d810      	bhi.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x482>
 8001f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	d002      	beq.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x474>
 8001f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f68:	3301      	adds	r3, #1
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	029b      	lsls	r3, r3, #10
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	e02d      	b.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x4de>
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	221f      	movs	r2, #31
 8001f84:	4013      	ands	r3, r2
 8001f86:	d102      	bne.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x496>
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e019      	b.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x4de>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d115      	bne.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x4de>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2250      	movs	r2, #80	; 0x50
 8001fb0:	5a9b      	ldrh	r3, [r3, r2]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb8:	189b      	adds	r3, r3, r2
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	00da      	lsls	r2, r3, #3
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_PCD_EP_DB_Transmit+0x554>)
 8001fc8:	4694      	mov	ip, r2
 8001fca:	4463      	add	r3, ip
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6959      	ldr	r1, [r3, #20]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	895a      	ldrh	r2, [r3, #10]
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f002 ff93 	bl	8004f10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	001a      	movs	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	18d3      	adds	r3, r2, r3
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	183b      	adds	r3, r7, r0
 8002000:	4915      	ldr	r1, [pc, #84]	; (8002058 <HAL_PCD_EP_DB_Transmit+0x560>)
 8002002:	400a      	ands	r2, r1
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	183b      	adds	r3, r7, r0
 8002008:	183a      	adds	r2, r7, r0
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	2110      	movs	r1, #16
 800200e:	404a      	eors	r2, r1
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	183b      	adds	r3, r7, r0
 8002014:	183a      	adds	r2, r7, r0
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	2120      	movs	r1, #32
 800201a:	404a      	eors	r2, r1
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	001a      	movs	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	18d3      	adds	r3, r2, r3
 800202c:	183a      	adds	r2, r7, r0
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	490a      	ldr	r1, [pc, #40]	; (800205c <HAL_PCD_EP_DB_Transmit+0x564>)
 8002032:	430a      	orrs	r2, r1
 8002034:	b292      	uxth	r2, r2
 8002036:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b012      	add	sp, #72	; 0x48
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	ffff8f8f 	.word	0xffff8f8f
 8002048:	ffffc080 	.word	0xffffc080
 800204c:	00000406 	.word	0x00000406
 8002050:	ffff83ff 	.word	0xffff83ff
 8002054:	ffff8000 	.word	0xffff8000
 8002058:	ffff8fbf 	.word	0xffff8fbf
 800205c:	ffff8080 	.word	0xffff8080

08002060 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	0008      	movs	r0, r1
 800206a:	0011      	movs	r1, r2
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	240a      	movs	r4, #10
 8002070:	193b      	adds	r3, r7, r4
 8002072:	1c02      	adds	r2, r0, #0
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	2308      	movs	r3, #8
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	1c0a      	adds	r2, r1, #0
 800207c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800207e:	193b      	adds	r3, r7, r4
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	4013      	ands	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	230a      	movs	r3, #10
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2207      	movs	r2, #7
 8002094:	4013      	ands	r3, r2
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	0013      	movs	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	189b      	adds	r3, r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	18d3      	adds	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e00b      	b.n	80020c0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a8:	230a      	movs	r3, #10
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	0013      	movs	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	189b      	adds	r3, r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	3369      	adds	r3, #105	; 0x69
 80020b8:	33ff      	adds	r3, #255	; 0xff
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	18d3      	adds	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80020c0:	2308      	movs	r3, #8
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	80da      	strh	r2, [r3, #6]
 80020d8:	e00b      	b.n	80020f2 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2201      	movs	r2, #1
 80020de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b007      	add	sp, #28
 80020fa:	bd90      	pop	{r4, r7, pc}

080020fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	23ba      	movs	r3, #186	; 0xba
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	2101      	movs	r1, #1
 8002112:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	23b8      	movs	r3, #184	; 0xb8
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	2100      	movs	r1, #0
 800211c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2254      	movs	r2, #84	; 0x54
 8002122:	5a9b      	ldrh	r3, [r3, r2]
 8002124:	b29b      	uxth	r3, r3
 8002126:	2201      	movs	r2, #1
 8002128:	4313      	orrs	r3, r2
 800212a:	b299      	uxth	r1, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2254      	movs	r2, #84	; 0x54
 8002130:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2254      	movs	r2, #84	; 0x54
 8002136:	5a9b      	ldrh	r3, [r3, r2]
 8002138:	b29b      	uxth	r3, r3
 800213a:	2202      	movs	r2, #2
 800213c:	4313      	orrs	r3, r2
 800213e:	b299      	uxth	r1, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2254      	movs	r2, #84	; 0x54
 8002144:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	000a      	movs	r2, r1
 800215a:	1cfb      	adds	r3, r7, #3
 800215c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b002      	add	sp, #8
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	f000 fbab 	bl	80028d2 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217c:	4bce      	ldr	r3, [pc, #824]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	220c      	movs	r2, #12
 8002182:	4013      	ands	r3, r2
 8002184:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002186:	4bcc      	ldr	r3, [pc, #816]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	4013      	ands	r3, r2
 8002190:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x36>
 800219c:	e07e      	b.n	800229c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d007      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d112      	bne.n	80021d0 <HAL_RCC_OscConfig+0x68>
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4bc0      	ldr	r3, [pc, #768]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	4013      	ands	r3, r2
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5a>
 80021c0:	e06b      	b.n	800229a <HAL_RCC_OscConfig+0x132>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d167      	bne.n	800229a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 fb81 	bl	80028d2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x84>
 80021dc:	4bb6      	ldr	r3, [pc, #728]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4bb5      	ldr	r3, [pc, #724]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0249      	lsls	r1, r1, #9
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e027      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	23a0      	movs	r3, #160	; 0xa0
 80021f2:	02db      	lsls	r3, r3, #11
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d10e      	bne.n	8002216 <HAL_RCC_OscConfig+0xae>
 80021f8:	4baf      	ldr	r3, [pc, #700]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4bae      	ldr	r3, [pc, #696]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	02c9      	lsls	r1, r1, #11
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	4bac      	ldr	r3, [pc, #688]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4bab      	ldr	r3, [pc, #684]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	0249      	lsls	r1, r1, #9
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e012      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 8002216:	4ba8      	ldr	r3, [pc, #672]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4ba7      	ldr	r3, [pc, #668]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800221c:	49a7      	ldr	r1, [pc, #668]	; (80024bc <HAL_RCC_OscConfig+0x354>)
 800221e:	400a      	ands	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4ba5      	ldr	r3, [pc, #660]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4ba1      	ldr	r3, [pc, #644]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4ba0      	ldr	r3, [pc, #640]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002236:	49a2      	ldr	r1, [pc, #648]	; (80024c0 <HAL_RCC_OscConfig+0x358>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d015      	beq.n	8002270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe f852 	bl	80002ec <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800224c:	e009      	b.n	8002262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224e:	f7fe f84d 	bl	80002ec <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d902      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	f000 fb38 	bl	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002262:	4b95      	ldr	r3, [pc, #596]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	029b      	lsls	r3, r3, #10
 800226a:	4013      	ands	r3, r2
 800226c:	d0ef      	beq.n	800224e <HAL_RCC_OscConfig+0xe6>
 800226e:	e015      	b.n	800229c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe f83c 	bl	80002ec <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227a:	f7fe f837 	bl	80002ec <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	; 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e322      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800228c:	4b8a      	ldr	r3, [pc, #552]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x112>
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_RCC_OscConfig+0x140>
 80022a6:	e08a      	b.n	80023be <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d13d      	bne.n	8002336 <HAL_RCC_OscConfig+0x1ce>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d13a      	bne.n	8002336 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022c0:	4b7d      	ldr	r3, [pc, #500]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2204      	movs	r2, #4
 80022c6:	4013      	ands	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_RCC_OscConfig+0x16c>
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e2fe      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x35c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	021a      	lsls	r2, r3, #8
 80022e4:	4b74      	ldr	r3, [pc, #464]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2209      	movs	r2, #9
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fc:	f000 fc1e 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002300:	0001      	movs	r1, r0
 8002302:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	220f      	movs	r2, #15
 800230a:	4013      	ands	r3, r2
 800230c:	4a6e      	ldr	r2, [pc, #440]	; (80024c8 <HAL_RCC_OscConfig+0x360>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	000a      	movs	r2, r1
 8002312:	40da      	lsrs	r2, r3
 8002314:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <HAL_RCC_OscConfig+0x364>)
 8002316:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002318:	2513      	movs	r5, #19
 800231a:	197c      	adds	r4, r7, r5
 800231c:	2000      	movs	r0, #0
 800231e:	f7fd ff9f 	bl	8000260 <HAL_InitTick>
 8002322:	0003      	movs	r3, r0
 8002324:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002326:	197b      	adds	r3, r7, r5
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d047      	beq.n	80023be <HAL_RCC_OscConfig+0x256>
      {
        return status;
 800232e:	2313      	movs	r3, #19
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	e2cd      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d027      	beq.n	800238c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2209      	movs	r2, #9
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	4b5c      	ldr	r3, [pc, #368]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fd ffcd 	bl	80002ec <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002358:	f7fd ffc8 	bl	80002ec <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2b3      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2204      	movs	r2, #4
 8002370:	4013      	ands	r3, r2
 8002372:	d0f1      	beq.n	8002358 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_OscConfig+0x35c>)
 800237a:	4013      	ands	r3, r2
 800237c:	0019      	movs	r1, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e018      	b.n	80023be <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238c:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fd ffa8 	bl	80002ec <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fd ffa3 	bl	80002ec <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e28e      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f1      	bne.n	80023a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2210      	movs	r2, #16
 80023c4:	4013      	ands	r3, r2
 80023c6:	d100      	bne.n	80023ca <HAL_RCC_OscConfig+0x262>
 80023c8:	e09e      	b.n	8002508 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d13f      	bne.n	8002450 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x280>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e274      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <HAL_RCC_OscConfig+0x368>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fc:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	0a19      	lsrs	r1, r3, #8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	061a      	lsls	r2, r3, #24
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	0b5b      	lsrs	r3, r3, #13
 8002416:	3301      	adds	r3, #1
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	0212      	lsls	r2, r2, #8
 800241c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	210f      	movs	r1, #15
 8002426:	400b      	ands	r3, r1
 8002428:	4927      	ldr	r1, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x360>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800242e:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x364>)
 8002430:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002432:	2513      	movs	r5, #19
 8002434:	197c      	adds	r4, r7, r5
 8002436:	2000      	movs	r0, #0
 8002438:	f7fd ff12 	bl	8000260 <HAL_InitTick>
 800243c:	0003      	movs	r3, r0
 800243e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002440:	197b      	adds	r3, r7, r5
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05f      	beq.n	8002508 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002448:	2313      	movs	r3, #19
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	e240      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d03d      	beq.n	80024d4 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0049      	lsls	r1, r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fd ff41 	bl	80002ec <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002470:	f7fd ff3c 	bl	80002ec <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e227      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_RCC_OscConfig+0x368>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	0a19      	lsrs	r1, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	061a      	lsls	r2, r3, #24
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <HAL_RCC_OscConfig+0x350>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e027      	b.n	8002508 <HAL_RCC_OscConfig+0x3a0>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	fffeffff 	.word	0xfffeffff
 80024c0:	fffbffff 	.word	0xfffbffff
 80024c4:	ffffe0ff 	.word	0xffffe0ff
 80024c8:	0800794c 	.word	0x0800794c
 80024cc:	200000dc 	.word	0x200000dc
 80024d0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024d4:	4bbd      	ldr	r3, [pc, #756]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4bbc      	ldr	r3, [pc, #752]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80024da:	49bd      	ldr	r1, [pc, #756]	; (80027d0 <HAL_RCC_OscConfig+0x668>)
 80024dc:	400a      	ands	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fd ff04 	bl	80002ec <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ea:	f7fd feff 	bl	80002ec <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1ea      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024fc:	4bb3      	ldr	r3, [pc, #716]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2208      	movs	r2, #8
 800250e:	4013      	ands	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4bac      	ldr	r3, [pc, #688]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800251c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800251e:	4bab      	ldr	r3, [pc, #684]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fd fee1 	bl	80002ec <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7fd fedc 	bl	80002ec <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1c7      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002542:	4ba2      	ldr	r3, [pc, #648]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d0f1      	beq.n	8002530 <HAL_RCC_OscConfig+0x3c8>
 800254c:	e018      	b.n	8002580 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b9f      	ldr	r3, [pc, #636]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002552:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002554:	2101      	movs	r1, #1
 8002556:	438a      	bics	r2, r1
 8002558:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fd fec7 	bl	80002ec <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fd fec2 	bl	80002ec <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1ad      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002576:	4b95      	ldr	r3, [pc, #596]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d1f1      	bne.n	8002564 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2204      	movs	r2, #4
 8002586:	4013      	ands	r3, r2
 8002588:	d100      	bne.n	800258c <HAL_RCC_OscConfig+0x424>
 800258a:	e0af      	b.n	80026ec <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258c:	2327      	movs	r3, #39	; 0x27
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002594:	4b8d      	ldr	r3, [pc, #564]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	055b      	lsls	r3, r3, #21
 800259c:	4013      	ands	r3, r2
 800259e:	d10a      	bne.n	80025b6 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b8a      	ldr	r3, [pc, #552]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80025a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a4:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	0549      	lsls	r1, r1, #21
 80025aa:	430a      	orrs	r2, r1
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025ae:	2327      	movs	r3, #39	; 0x27
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <HAL_RCC_OscConfig+0x66c>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	d11a      	bne.n	80025f8 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c2:	4b84      	ldr	r3, [pc, #528]	; (80027d4 <HAL_RCC_OscConfig+0x66c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_RCC_OscConfig+0x66c>)
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	0049      	lsls	r1, r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d0:	f7fd fe8c 	bl	80002ec <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7fd fe87 	bl	80002ec <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e172      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <HAL_RCC_OscConfig+0x66c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x4ac>
 8002604:	4b71      	ldr	r3, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002608:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	0049      	lsls	r1, r1, #1
 800260e:	430a      	orrs	r2, r1
 8002610:	651a      	str	r2, [r3, #80]	; 0x50
 8002612:	e031      	b.n	8002678 <HAL_RCC_OscConfig+0x510>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x4ce>
 800261c:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800261e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002622:	496b      	ldr	r1, [pc, #428]	; (80027d0 <HAL_RCC_OscConfig+0x668>)
 8002624:	400a      	ands	r2, r1
 8002626:	651a      	str	r2, [r3, #80]	; 0x50
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800262a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800262c:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800262e:	496a      	ldr	r1, [pc, #424]	; (80027d8 <HAL_RCC_OscConfig+0x670>)
 8002630:	400a      	ands	r2, r1
 8002632:	651a      	str	r2, [r3, #80]	; 0x50
 8002634:	e020      	b.n	8002678 <HAL_RCC_OscConfig+0x510>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	23a0      	movs	r3, #160	; 0xa0
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	429a      	cmp	r2, r3
 8002640:	d10e      	bne.n	8002660 <HAL_RCC_OscConfig+0x4f8>
 8002642:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002646:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	00c9      	lsls	r1, r1, #3
 800264c:	430a      	orrs	r2, r1
 800264e:	651a      	str	r2, [r3, #80]	; 0x50
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002654:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0049      	lsls	r1, r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	651a      	str	r2, [r3, #80]	; 0x50
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0x510>
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002666:	495a      	ldr	r1, [pc, #360]	; (80027d0 <HAL_RCC_OscConfig+0x668>)
 8002668:	400a      	ands	r2, r1
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800266e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002670:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002672:	4959      	ldr	r1, [pc, #356]	; (80027d8 <HAL_RCC_OscConfig+0x670>)
 8002674:	400a      	ands	r2, r1
 8002676:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fd fe34 	bl	80002ec <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002688:	e009      	b.n	800269e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fd fe2f 	bl	80002ec <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	4a51      	ldr	r2, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x674>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e119      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80026a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4013      	ands	r3, r2
 80026a8:	d0ef      	beq.n	800268a <HAL_RCC_OscConfig+0x522>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7fd fe1e 	bl	80002ec <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b4:	e009      	b.n	80026ca <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fd fe19 	bl	80002ec <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	4a46      	ldr	r2, [pc, #280]	; (80027dc <HAL_RCC_OscConfig+0x674>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e103      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026ca:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80026cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026d6:	2327      	movs	r3, #39	; 0x27
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80026e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80026e6:	493e      	ldr	r1, [pc, #248]	; (80027e0 <HAL_RCC_OscConfig+0x678>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2220      	movs	r2, #32
 80026f2:	4013      	ands	r3, r2
 80026f4:	d049      	beq.n	800278a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d026      	beq.n	800274c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002704:	2101      	movs	r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800270c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002710:	2101      	movs	r1, #1
 8002712:	430a      	orrs	r2, r1
 8002714:	635a      	str	r2, [r3, #52]	; 0x34
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_RCC_OscConfig+0x67c>)
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_RCC_OscConfig+0x67c>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0189      	lsls	r1, r1, #6
 8002720:	430a      	orrs	r2, r1
 8002722:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fd fde2 	bl	80002ec <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272e:	f7fd fddd 	bl	80002ec <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0c8      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d0f1      	beq.n	800272e <HAL_RCC_OscConfig+0x5c6>
 800274a:	e01e      	b.n	800278a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_OscConfig+0x67c>)
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x67c>)
 800275e:	4922      	ldr	r1, [pc, #136]	; (80027e8 <HAL_RCC_OscConfig+0x680>)
 8002760:	400a      	ands	r2, r1
 8002762:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fd fdc2 	bl	80002ec <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276e:	f7fd fdbd 	bl	80002ec <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0a8      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d100      	bne.n	8002794 <HAL_RCC_OscConfig+0x62c>
 8002792:	e09d      	b.n	80028d0 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d100      	bne.n	800279c <HAL_RCC_OscConfig+0x634>
 800279a:	e076      	b.n	800288a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCC_OscConfig+0x664>)
 80027aa:	4910      	ldr	r1, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x684>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fd fd9c 	bl	80002ec <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027b8:	e01a      	b.n	80027f0 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fd fd97 	bl	80002ec <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d913      	bls.n	80027f0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e082      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	fffffeff 	.word	0xfffffeff
 80027d4:	40007000 	.word	0x40007000
 80027d8:	fffffbff 	.word	0xfffffbff
 80027dc:	00001388 	.word	0x00001388
 80027e0:	efffffff 	.word	0xefffffff
 80027e4:	40010000 	.word	0x40010000
 80027e8:	ffffdfff 	.word	0xffffdfff
 80027ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027f0:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	049b      	lsls	r3, r3, #18
 80027f8:	4013      	ands	r3, r2
 80027fa:	d1de      	bne.n	80027ba <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a37      	ldr	r2, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x778>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	431a      	orrs	r2, r3
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0449      	lsls	r1, r1, #17
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fd fd5f 	bl	80002ec <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fd fd5a 	bl	80002ec <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e045      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	049b      	lsls	r3, r3, #18
 800284e:	4013      	ands	r3, r2
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x6cc>
 8002852:	e03d      	b.n	80028d0 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 800285a:	4922      	ldr	r1, [pc, #136]	; (80028e4 <HAL_RCC_OscConfig+0x77c>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fd fd44 	bl	80002ec <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fd fd3f 	bl	80002ec <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e02a      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	049b      	lsls	r3, r3, #18
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x702>
 8002888:	e022      	b.n	80028d0 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01d      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_OscConfig+0x774>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	025b      	lsls	r3, r3, #9
 80028a2:	401a      	ands	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d10f      	bne.n	80028cc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	23f0      	movs	r3, #240	; 0xf0
 80028b0:	039b      	lsls	r3, r3, #14
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	23c0      	movs	r3, #192	; 0xc0
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	401a      	ands	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b00a      	add	sp, #40	; 0x28
 80028d8:	bdb0      	pop	{r4, r5, r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40021000 	.word	0x40021000
 80028e0:	ff02ffff 	.word	0xff02ffff
 80028e4:	feffffff 	.word	0xfeffffff

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e10d      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d911      	bls.n	800292e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b85      	ldr	r3, [pc, #532]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2201      	movs	r2, #1
 8002910:	4393      	bics	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291c:	4b80      	ldr	r3, [pc, #512]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0f4      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b7a      	ldr	r3, [pc, #488]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	22f0      	movs	r2, #240	; 0xf0
 800293e:	4393      	bics	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b77      	ldr	r3, [pc, #476]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002948:	430a      	orrs	r2, r1
 800294a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d100      	bne.n	8002958 <HAL_RCC_ClockConfig+0x70>
 8002956:	e089      	b.n	8002a6c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d107      	bne.n	8002970 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002960:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	4013      	ands	r3, r2
 800296a:	d120      	bne.n	80029ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0d3      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	049b      	lsls	r3, r3, #18
 8002980:	4013      	ands	r3, r2
 8002982:	d114      	bne.n	80029ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0c7      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2204      	movs	r2, #4
 8002996:	4013      	ands	r3, r2
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0bc      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0b4      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2203      	movs	r2, #3
 80029b4:	4393      	bics	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c2:	f7fd fc93 	bl	80002ec <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d111      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d2:	e009      	b.n	80029e8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fd fc8a 	bl	80002ec <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_RCC_ClockConfig+0x240>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e097      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	220c      	movs	r2, #12
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d1ef      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xec>
 80029f4:	e03a      	b.n	8002a6c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d111      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fe:	e009      	b.n	8002a14 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fd fc74 	bl	80002ec <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e081      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a14:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	220c      	movs	r2, #12
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d1ef      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x118>
 8002a20:	e024      	b.n	8002a6c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d11b      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2a:	e009      	b.n	8002a40 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fd fc5e 	bl	80002ec <HAL_GetTick>
 8002a30:	0002      	movs	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e06b      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	220c      	movs	r2, #12
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d1ef      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x144>
 8002a4c:	e00e      	b.n	8002a6c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4e:	f7fd fc4d 	bl	80002ec <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e05a      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	220c      	movs	r2, #12
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d211      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4393      	bics	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_ClockConfig+0x238>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e03c      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_RCC_ClockConfig+0x248>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00da      	lsls	r2, r3, #3
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002adc:	f000 f82e 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002ae0:	0001      	movs	r1, r0
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_ClockConfig+0x23c>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	220f      	movs	r2, #15
 8002aea:	4013      	ands	r3, r2
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <HAL_RCC_ClockConfig+0x24c>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	000a      	movs	r2, r1
 8002af2:	40da      	lsrs	r2, r3
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_RCC_ClockConfig+0x250>)
 8002af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002af8:	250b      	movs	r5, #11
 8002afa:	197c      	adds	r4, r7, r5
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fd fbaf 	bl	8000260 <HAL_InitTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b06:	197b      	adds	r3, r7, r5
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002b0e:	230b      	movs	r3, #11
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	e000      	b.n	8002b18 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b004      	add	sp, #16
 8002b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	00001388 	.word	0x00001388
 8002b2c:	fffff8ff 	.word	0xfffff8ff
 8002b30:	ffffc7ff 	.word	0xffffc7ff
 8002b34:	0800794c 	.word	0x0800794c
 8002b38:	200000dc 	.word	0x200000dc

08002b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b42:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d00e      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d00f      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d157      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b5a:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2210      	movs	r2, #16
 8002b60:	4013      	ands	r3, r2
 8002b62:	d002      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b66:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b68:	e05d      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b6c:	613b      	str	r3, [r7, #16]
      break;
 8002b6e:	e05a      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b72:	613b      	str	r3, [r7, #16]
      break;
 8002b74:	e057      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	0c9b      	lsrs	r3, r3, #18
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	0d9b      	lsrs	r3, r3, #22
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	025b      	lsls	r3, r3, #9
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d00f      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	000a      	movs	r2, r1
 8002ba0:	0152      	lsls	r2, r2, #5
 8002ba2:	1a52      	subs	r2, r2, r1
 8002ba4:	0193      	lsls	r3, r2, #6
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	185b      	adds	r3, r3, r1
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fd faa9 	bl	8000108 <__udivsi3>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e023      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	000a      	movs	r2, r1
 8002bca:	0152      	lsls	r2, r2, #5
 8002bcc:	1a52      	subs	r2, r2, r1
 8002bce:	0193      	lsls	r3, r2, #6
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	185b      	adds	r3, r3, r1
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fd fa94 	bl	8000108 <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e00e      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	000a      	movs	r2, r1
 8002bea:	0152      	lsls	r2, r2, #5
 8002bec:	1a52      	subs	r2, r2, r1
 8002bee:	0193      	lsls	r3, r2, #6
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	185b      	adds	r3, r3, r1
 8002bf6:	029b      	lsls	r3, r3, #10
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fd fa84 	bl	8000108 <__udivsi3>
 8002c00:	0003      	movs	r3, r0
 8002c02:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
      break;
 8002c08:	e00d      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0b5b      	lsrs	r3, r3, #13
 8002c10:	2207      	movs	r2, #7
 8002c12:	4013      	ands	r3, r2
 8002c14:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	0212      	lsls	r2, r2, #8
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
      break;
 8002c24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c26:	693b      	ldr	r3, [r7, #16]
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	003d0900 	.word	0x003d0900
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200
 8002c40:	0800795c 	.word	0x0800795c

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2220      	movs	r2, #32
 8002c52:	4013      	ands	r3, r2
 8002c54:	d106      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d100      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8002c62:	e0dd      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002c64:	2317      	movs	r3, #23
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6c:	4b9c      	ldr	r3, [pc, #624]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	055b      	lsls	r3, r3, #21
 8002c74:	4013      	ands	r3, r2
 8002c76:	d10a      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b99      	ldr	r3, [pc, #612]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7c:	4b98      	ldr	r3, [pc, #608]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0549      	lsls	r1, r1, #21
 8002c82:	430a      	orrs	r2, r1
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c86:	2317      	movs	r3, #23
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b95      	ldr	r3, [pc, #596]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d11a      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b91      	ldr	r3, [pc, #580]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0049      	lsls	r1, r1, #1
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca8:	f7fd fb20 	bl	80002ec <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fd fb1b 	bl	80002ec <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e108      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b87      	ldr	r3, [pc, #540]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002cd0:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	23c0      	movs	r3, #192	; 0xc0
 8002cd6:	039b      	lsls	r3, r3, #14
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	23c0      	movs	r3, #192	; 0xc0
 8002ce2:	039b      	lsls	r3, r3, #14
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	23c0      	movs	r3, #192	; 0xc0
 8002cf2:	039b      	lsls	r3, r3, #14
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	23c0      	movs	r3, #192	; 0xc0
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	401a      	ands	r2, r3
 8002d06:	23c0      	movs	r3, #192	; 0xc0
 8002d08:	029b      	lsls	r3, r3, #10
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d10a      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b74      	ldr	r3, [pc, #464]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	401a      	ands	r2, r3
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0d8      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d24:	4b6e      	ldr	r3, [pc, #440]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d049      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	23c0      	movs	r3, #192	; 0xc0
 8002d3c:	029b      	lsls	r3, r3, #10
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d004      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	23c0      	movs	r3, #192	; 0xc0
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d034      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d02e      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002d6c:	4b5c      	ldr	r3, [pc, #368]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d7a:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0309      	lsls	r1, r1, #12
 8002d80:	430a      	orrs	r2, r1
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d88:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d8a:	4958      	ldr	r1, [pc, #352]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d014      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fd faa4 	bl	80002ec <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da8:	e009      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fd fa9f 	bl	80002ec <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e08b      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbe:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d0ef      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	029b      	lsls	r3, r3, #10
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	23c0      	movs	r3, #192	; 0xc0
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002ddc:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	23c0      	movs	r3, #192	; 0xc0
 8002dec:	039b      	lsls	r3, r3, #14
 8002dee:	401a      	ands	r2, r3
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002df8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	23c0      	movs	r3, #192	; 0xc0
 8002e00:	029b      	lsls	r3, r3, #10
 8002e02:	401a      	ands	r2, r3
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0a:	2317      	movs	r3, #23
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e18:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e1a:	4937      	ldr	r1, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	2203      	movs	r2, #3
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	220c      	movs	r2, #12
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2204      	movs	r2, #4
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e66:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	4a24      	ldr	r2, [pc, #144]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2208      	movs	r2, #8
 8002e80:	4013      	ands	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b006      	add	sp, #24
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	fffcffff 	.word	0xfffcffff
 8002eec:	fff7ffff 	.word	0xfff7ffff
 8002ef0:	00001388 	.word	0x00001388
 8002ef4:	ffcfffff 	.word	0xffcfffff
 8002ef8:	efffffff 	.word	0xefffffff
 8002efc:	fffff3ff 	.word	0xfffff3ff
 8002f00:	ffffcfff 	.word	0xffffcfff
 8002f04:	fbffffff 	.word	0xfbffffff
 8002f08:	fff3ffff 	.word	0xfff3ffff

08002f0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2244      	movs	r2, #68	; 0x44
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <USB_EnableGlobalInt+0x28>)
 8002f1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	b299      	uxth	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	0000bf80 	.word	0x0000bf80

08002f38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <USB_DisableGlobalInt+0x30>)
 8002f42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	5a9b      	ldrh	r3, [r3, r2]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	43d2      	mvns	r2, r2
 8002f52:	b292      	uxth	r2, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	b299      	uxth	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	0000bf80 	.word	0x0000bf80

08002f6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	b590      	push	{r4, r7, lr}
 8002f70:	46c6      	mov	lr, r8
 8002f72:	b500      	push	{lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	2004      	movs	r0, #4
 8002f7c:	2410      	movs	r4, #16
 8002f7e:	46a4      	mov	ip, r4
 8002f80:	2408      	movs	r4, #8
 8002f82:	46a0      	mov	r8, r4
 8002f84:	44b8      	add	r8, r7
 8002f86:	44c4      	add	ip, r8
 8002f88:	4460      	add	r0, ip
 8002f8a:	6001      	str	r1, [r0, #0]
 8002f8c:	6042      	str	r2, [r0, #4]
 8002f8e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	2101      	movs	r1, #1
 8002f96:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2244      	movs	r2, #68	; 0x44
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2250      	movs	r2, #80	; 0x50
 8002fac:	2100      	movs	r1, #0
 8002fae:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bc04      	pop	{r2}
 8002fba:	4690      	mov	r8, r2
 8002fbc:	bc90      	pop	{r4, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	b004      	add	sp, #16
 8002fc2:	4718      	bx	r3

08002fc4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b09a      	sub	sp, #104	; 0x68
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fce:	2367      	movs	r3, #103	; 0x67
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	18d3      	adds	r3, r2, r3
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	2364      	movs	r3, #100	; 0x64
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	49cf      	ldr	r1, [pc, #828]	; (8003328 <USB_ActivateEndpoint+0x364>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d020      	beq.n	8003038 <USB_ActivateEndpoint+0x74>
 8002ff6:	dc02      	bgt.n	8002ffe <USB_ActivateEndpoint+0x3a>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <USB_ActivateEndpoint+0x44>
 8002ffc:	e025      	b.n	800304a <USB_ActivateEndpoint+0x86>
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d00b      	beq.n	800301a <USB_ActivateEndpoint+0x56>
 8003002:	2b03      	cmp	r3, #3
 8003004:	d00f      	beq.n	8003026 <USB_ActivateEndpoint+0x62>
 8003006:	e020      	b.n	800304a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003008:	2264      	movs	r2, #100	; 0x64
 800300a:	18bb      	adds	r3, r7, r2
 800300c:	18ba      	adds	r2, r7, r2
 800300e:	8812      	ldrh	r2, [r2, #0]
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0089      	lsls	r1, r1, #2
 8003014:	430a      	orrs	r2, r1
 8003016:	801a      	strh	r2, [r3, #0]
      break;
 8003018:	e01c      	b.n	8003054 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800301a:	2264      	movs	r2, #100	; 0x64
 800301c:	18bb      	adds	r3, r7, r2
 800301e:	18ba      	adds	r2, r7, r2
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	801a      	strh	r2, [r3, #0]
      break;
 8003024:	e016      	b.n	8003054 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003026:	2264      	movs	r2, #100	; 0x64
 8003028:	18bb      	adds	r3, r7, r2
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	21c0      	movs	r1, #192	; 0xc0
 8003030:	00c9      	lsls	r1, r1, #3
 8003032:	430a      	orrs	r2, r1
 8003034:	801a      	strh	r2, [r3, #0]
      break;
 8003036:	e00d      	b.n	8003054 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	18bb      	adds	r3, r7, r2
 800303c:	18ba      	adds	r2, r7, r2
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	00c9      	lsls	r1, r1, #3
 8003044:	430a      	orrs	r2, r1
 8003046:	801a      	strh	r2, [r3, #0]
      break;
 8003048:	e004      	b.n	8003054 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800304a:	2367      	movs	r3, #103	; 0x67
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
      break;
 8003052:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	18d3      	adds	r3, r2, r3
 800305e:	2264      	movs	r2, #100	; 0x64
 8003060:	18ba      	adds	r2, r7, r2
 8003062:	8812      	ldrh	r2, [r2, #0]
 8003064:	49b1      	ldr	r1, [pc, #708]	; (800332c <USB_ActivateEndpoint+0x368>)
 8003066:	430a      	orrs	r2, r1
 8003068:	b292      	uxth	r2, r2
 800306a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	b21b      	sxth	r3, r3
 800307c:	4aac      	ldr	r2, [pc, #688]	; (8003330 <USB_ActivateEndpoint+0x36c>)
 800307e:	4013      	ands	r3, r2
 8003080:	b21a      	sxth	r2, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b21b      	sxth	r3, r3
 8003088:	4313      	orrs	r3, r2
 800308a:	b21a      	sxth	r2, r3
 800308c:	215e      	movs	r1, #94	; 0x5e
 800308e:	187b      	adds	r3, r7, r1
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	187a      	adds	r2, r7, r1
 800309e:	8812      	ldrh	r2, [r2, #0]
 80030a0:	49a2      	ldr	r1, [pc, #648]	; (800332c <USB_ActivateEndpoint+0x368>)
 80030a2:	430a      	orrs	r2, r1
 80030a4:	b292      	uxth	r2, r2
 80030a6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	7b1b      	ldrb	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d000      	beq.n	80030b2 <USB_ActivateEndpoint+0xee>
 80030b0:	e150      	b.n	8003354 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d100      	bne.n	80030bc <USB_ActivateEndpoint+0xf8>
 80030ba:	e07a      	b.n	80031b2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2250      	movs	r2, #80	; 0x50
 80030c4:	5a9b      	ldrh	r3, [r3, r2]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	001a      	movs	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	189b      	adds	r3, r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	00da      	lsls	r2, r3, #3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	00d2      	lsls	r2, r2, #3
 80030de:	4694      	mov	ip, r2
 80030e0:	4463      	add	r3, ip
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	88db      	ldrh	r3, [r3, #6]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	18db      	adds	r3, r3, r3
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	18d2      	adds	r2, r2, r3
 80030fe:	210e      	movs	r1, #14
 8003100:	187b      	adds	r3, r7, r1
 8003102:	8812      	ldrh	r2, [r2, #0]
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	187b      	adds	r3, r7, r1
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	4013      	ands	r3, r2
 800310e:	d016      	beq.n	800313e <USB_ActivateEndpoint+0x17a>
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	18d3      	adds	r3, r2, r3
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29a      	uxth	r2, r3
 800311e:	200c      	movs	r0, #12
 8003120:	183b      	adds	r3, r7, r0
 8003122:	4983      	ldr	r1, [pc, #524]	; (8003330 <USB_ActivateEndpoint+0x36c>)
 8003124:	400a      	ands	r2, r1
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	183a      	adds	r2, r7, r0
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	497f      	ldr	r1, [pc, #508]	; (8003334 <USB_ActivateEndpoint+0x370>)
 8003138:	430a      	orrs	r2, r1
 800313a:	b292      	uxth	r2, r2
 800313c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	78db      	ldrb	r3, [r3, #3]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d01d      	beq.n	8003182 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	18d3      	adds	r3, r2, r3
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29a      	uxth	r2, r3
 8003154:	2008      	movs	r0, #8
 8003156:	183b      	adds	r3, r7, r0
 8003158:	4977      	ldr	r1, [pc, #476]	; (8003338 <USB_ActivateEndpoint+0x374>)
 800315a:	400a      	ands	r2, r1
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	183b      	adds	r3, r7, r0
 8003160:	183a      	adds	r2, r7, r0
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	2120      	movs	r1, #32
 8003166:	404a      	eors	r2, r1
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	183a      	adds	r2, r7, r0
 8003176:	8812      	ldrh	r2, [r2, #0]
 8003178:	496c      	ldr	r1, [pc, #432]	; (800332c <USB_ActivateEndpoint+0x368>)
 800317a:	430a      	orrs	r2, r1
 800317c:	b292      	uxth	r2, r2
 800317e:	801a      	strh	r2, [r3, #0]
 8003180:	e25e      	b.n	8003640 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	18d3      	adds	r3, r2, r3
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29a      	uxth	r2, r3
 8003190:	200a      	movs	r0, #10
 8003192:	183b      	adds	r3, r7, r0
 8003194:	4968      	ldr	r1, [pc, #416]	; (8003338 <USB_ActivateEndpoint+0x374>)
 8003196:	400a      	ands	r2, r1
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	18d3      	adds	r3, r2, r3
 80031a4:	183a      	adds	r2, r7, r0
 80031a6:	8812      	ldrh	r2, [r2, #0]
 80031a8:	4960      	ldr	r1, [pc, #384]	; (800332c <USB_ActivateEndpoint+0x368>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	b292      	uxth	r2, r2
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	e246      	b.n	8003640 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2250      	movs	r2, #80	; 0x50
 80031ba:	5a9b      	ldrh	r3, [r3, r2]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	001a      	movs	r2, r3
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	00da      	lsls	r2, r3, #3
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	18d3      	adds	r3, r2, r3
 80031d0:	4a5a      	ldr	r2, [pc, #360]	; (800333c <USB_ActivateEndpoint+0x378>)
 80031d2:	4694      	mov	ip, r2
 80031d4:	4463      	add	r3, ip
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	88db      	ldrh	r3, [r3, #6]
 80031dc:	085b      	lsrs	r3, r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	18db      	adds	r3, r3, r3
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2250      	movs	r2, #80	; 0x50
 80031f0:	5a9b      	ldrh	r3, [r3, r2]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	001a      	movs	r2, r3
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	189b      	adds	r3, r3, r2
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	00da      	lsls	r2, r3, #3
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	18d3      	adds	r3, r2, r3
 8003206:	4a4e      	ldr	r2, [pc, #312]	; (8003340 <USB_ActivateEndpoint+0x37c>)
 8003208:	4694      	mov	ip, r2
 800320a:	4463      	add	r3, ip
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d110      	bne.n	8003238 <USB_ActivateEndpoint+0x274>
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	4a49      	ldr	r2, [pc, #292]	; (8003344 <USB_ActivateEndpoint+0x380>)
 800321e:	4013      	ands	r3, r2
 8003220:	b29a      	uxth	r2, r3
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <USB_ActivateEndpoint+0x384>)
 800322e:	4313      	orrs	r3, r2
 8003230:	b29a      	uxth	r2, r3
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	e02b      	b.n	8003290 <USB_ActivateEndpoint+0x2cc>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b3e      	cmp	r3, #62	; 0x3e
 800323e:	d812      	bhi.n	8003266 <USB_ActivateEndpoint+0x2a2>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	663b      	str	r3, [r7, #96]	; 0x60
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d002      	beq.n	8003258 <USB_ActivateEndpoint+0x294>
 8003252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003254:	3301      	adds	r3, #1
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
 8003258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800325a:	b29b      	uxth	r3, r3
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	b29a      	uxth	r2, r3
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	801a      	strh	r2, [r3, #0]
 8003264:	e014      	b.n	8003290 <USB_ActivateEndpoint+0x2cc>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	221f      	movs	r2, #31
 8003274:	4013      	ands	r3, r2
 8003276:	d102      	bne.n	800327e <USB_ActivateEndpoint+0x2ba>
 8003278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327a:	3b01      	subs	r3, #1
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
 800327e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003280:	b29b      	uxth	r3, r3
 8003282:	029b      	lsls	r3, r3, #10
 8003284:	b29b      	uxth	r3, r3
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <USB_ActivateEndpoint+0x384>)
 8003288:	4313      	orrs	r3, r2
 800328a:	b29a      	uxth	r2, r3
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	18d2      	adds	r2, r2, r3
 800329a:	211e      	movs	r1, #30
 800329c:	187b      	adds	r3, r7, r1
 800329e:	8812      	ldrh	r2, [r2, #0]
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	01db      	lsls	r3, r3, #7
 80032aa:	4013      	ands	r3, r2
 80032ac:	d016      	beq.n	80032dc <USB_ActivateEndpoint+0x318>
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	18d3      	adds	r3, r2, r3
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	201c      	movs	r0, #28
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	491b      	ldr	r1, [pc, #108]	; (8003330 <USB_ActivateEndpoint+0x36c>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	18d3      	adds	r3, r2, r3
 80032d0:	183a      	adds	r2, r7, r0
 80032d2:	8812      	ldrh	r2, [r2, #0]
 80032d4:	491d      	ldr	r1, [pc, #116]	; (800334c <USB_ActivateEndpoint+0x388>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	b292      	uxth	r2, r2
 80032da:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	18d3      	adds	r3, r2, r3
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	201a      	movs	r0, #26
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	4918      	ldr	r1, [pc, #96]	; (8003350 <USB_ActivateEndpoint+0x38c>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	183b      	adds	r3, r7, r0
 80032f6:	183a      	adds	r2, r7, r0
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	0149      	lsls	r1, r1, #5
 80032fe:	404a      	eors	r2, r1
 8003300:	801a      	strh	r2, [r3, #0]
 8003302:	183b      	adds	r3, r7, r0
 8003304:	183a      	adds	r2, r7, r0
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0189      	lsls	r1, r1, #6
 800330c:	404a      	eors	r2, r1
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	18d3      	adds	r3, r2, r3
 800331a:	183a      	adds	r2, r7, r0
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	4903      	ldr	r1, [pc, #12]	; (800332c <USB_ActivateEndpoint+0x368>)
 8003320:	430a      	orrs	r2, r1
 8003322:	b292      	uxth	r2, r2
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	e18b      	b.n	8003640 <USB_ActivateEndpoint+0x67c>
 8003328:	ffff898f 	.word	0xffff898f
 800332c:	ffff8080 	.word	0xffff8080
 8003330:	ffff8f8f 	.word	0xffff8f8f
 8003334:	ffff80c0 	.word	0xffff80c0
 8003338:	ffff8fbf 	.word	0xffff8fbf
 800333c:	00000404 	.word	0x00000404
 8003340:	00000406 	.word	0x00000406
 8003344:	ffff83ff 	.word	0xffff83ff
 8003348:	ffff8000 	.word	0xffff8000
 800334c:	ffffc080 	.word	0xffffc080
 8003350:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29a      	uxth	r2, r3
 8003362:	205c      	movs	r0, #92	; 0x5c
 8003364:	183b      	adds	r3, r7, r0
 8003366:	49ba      	ldr	r1, [pc, #744]	; (8003650 <USB_ActivateEndpoint+0x68c>)
 8003368:	400a      	ands	r2, r1
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	183a      	adds	r2, r7, r0
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	49b6      	ldr	r1, [pc, #728]	; (8003654 <USB_ActivateEndpoint+0x690>)
 800337c:	430a      	orrs	r2, r1
 800337e:	b292      	uxth	r2, r2
 8003380:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65bb      	str	r3, [r7, #88]	; 0x58
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2250      	movs	r2, #80	; 0x50
 800338a:	5a9b      	ldrh	r3, [r3, r2]
 800338c:	b29b      	uxth	r3, r3
 800338e:	001a      	movs	r2, r3
 8003390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003392:	189b      	adds	r3, r3, r2
 8003394:	65bb      	str	r3, [r7, #88]	; 0x58
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	00da      	lsls	r2, r3, #3
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	00d2      	lsls	r2, r2, #3
 80033a4:	4694      	mov	ip, r2
 80033a6:	4463      	add	r3, ip
 80033a8:	657b      	str	r3, [r7, #84]	; 0x54
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	891b      	ldrh	r3, [r3, #8]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	18db      	adds	r3, r3, r3
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	653b      	str	r3, [r7, #80]	; 0x50
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2250      	movs	r2, #80	; 0x50
 80033c2:	5a9b      	ldrh	r3, [r3, r2]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	001a      	movs	r2, r3
 80033c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	653b      	str	r3, [r7, #80]	; 0x50
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	00da      	lsls	r2, r3, #3
 80033d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d6:	18d3      	adds	r3, r2, r3
 80033d8:	4a9f      	ldr	r2, [pc, #636]	; (8003658 <USB_ActivateEndpoint+0x694>)
 80033da:	4694      	mov	ip, r2
 80033dc:	4463      	add	r3, ip
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	895b      	ldrh	r3, [r3, #10]
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	18db      	adds	r3, r3, r3
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d000      	beq.n	80033fa <USB_ActivateEndpoint+0x436>
 80033f8:	e087      	b.n	800350a <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	18d2      	adds	r2, r2, r3
 8003404:	213c      	movs	r1, #60	; 0x3c
 8003406:	187b      	adds	r3, r7, r1
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	187b      	adds	r3, r7, r1
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	01db      	lsls	r3, r3, #7
 8003414:	4013      	ands	r3, r2
 8003416:	d016      	beq.n	8003446 <USB_ActivateEndpoint+0x482>
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29a      	uxth	r2, r3
 8003426:	203a      	movs	r0, #58	; 0x3a
 8003428:	183b      	adds	r3, r7, r0
 800342a:	4989      	ldr	r1, [pc, #548]	; (8003650 <USB_ActivateEndpoint+0x68c>)
 800342c:	400a      	ands	r2, r1
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	183a      	adds	r2, r7, r0
 800343c:	8812      	ldrh	r2, [r2, #0]
 800343e:	4987      	ldr	r1, [pc, #540]	; (800365c <USB_ActivateEndpoint+0x698>)
 8003440:	430a      	orrs	r2, r1
 8003442:	b292      	uxth	r2, r2
 8003444:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	18d2      	adds	r2, r2, r3
 8003450:	2138      	movs	r1, #56	; 0x38
 8003452:	187b      	adds	r3, r7, r1
 8003454:	8812      	ldrh	r2, [r2, #0]
 8003456:	801a      	strh	r2, [r3, #0]
 8003458:	187b      	adds	r3, r7, r1
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	2240      	movs	r2, #64	; 0x40
 800345e:	4013      	ands	r3, r2
 8003460:	d016      	beq.n	8003490 <USB_ActivateEndpoint+0x4cc>
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	18d3      	adds	r3, r2, r3
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29a      	uxth	r2, r3
 8003470:	2036      	movs	r0, #54	; 0x36
 8003472:	183b      	adds	r3, r7, r0
 8003474:	4976      	ldr	r1, [pc, #472]	; (8003650 <USB_ActivateEndpoint+0x68c>)
 8003476:	400a      	ands	r2, r1
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	18d3      	adds	r3, r2, r3
 8003484:	183a      	adds	r2, r7, r0
 8003486:	8812      	ldrh	r2, [r2, #0]
 8003488:	4975      	ldr	r1, [pc, #468]	; (8003660 <USB_ActivateEndpoint+0x69c>)
 800348a:	430a      	orrs	r2, r1
 800348c:	b292      	uxth	r2, r2
 800348e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29a      	uxth	r2, r3
 800349e:	2034      	movs	r0, #52	; 0x34
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	4970      	ldr	r1, [pc, #448]	; (8003664 <USB_ActivateEndpoint+0x6a0>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	183b      	adds	r3, r7, r0
 80034aa:	183a      	adds	r2, r7, r0
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	0149      	lsls	r1, r1, #5
 80034b2:	404a      	eors	r2, r1
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	183a      	adds	r2, r7, r0
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0189      	lsls	r1, r1, #6
 80034c0:	404a      	eors	r2, r1
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	183a      	adds	r2, r7, r0
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	4965      	ldr	r1, [pc, #404]	; (8003668 <USB_ActivateEndpoint+0x6a4>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	b292      	uxth	r2, r2
 80034d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	18d3      	adds	r3, r2, r3
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	2032      	movs	r0, #50	; 0x32
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	495f      	ldr	r1, [pc, #380]	; (800366c <USB_ActivateEndpoint+0x6a8>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	18d3      	adds	r3, r2, r3
 80034fc:	183a      	adds	r2, r7, r0
 80034fe:	8812      	ldrh	r2, [r2, #0]
 8003500:	4959      	ldr	r1, [pc, #356]	; (8003668 <USB_ActivateEndpoint+0x6a4>)
 8003502:	430a      	orrs	r2, r1
 8003504:	b292      	uxth	r2, r2
 8003506:	801a      	strh	r2, [r3, #0]
 8003508:	e09a      	b.n	8003640 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	18d2      	adds	r2, r2, r3
 8003514:	214a      	movs	r1, #74	; 0x4a
 8003516:	187b      	adds	r3, r7, r1
 8003518:	8812      	ldrh	r2, [r2, #0]
 800351a:	801a      	strh	r2, [r3, #0]
 800351c:	187b      	adds	r3, r7, r1
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	01db      	lsls	r3, r3, #7
 8003524:	4013      	ands	r3, r2
 8003526:	d016      	beq.n	8003556 <USB_ActivateEndpoint+0x592>
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	18d3      	adds	r3, r2, r3
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29a      	uxth	r2, r3
 8003536:	2048      	movs	r0, #72	; 0x48
 8003538:	183b      	adds	r3, r7, r0
 800353a:	4945      	ldr	r1, [pc, #276]	; (8003650 <USB_ActivateEndpoint+0x68c>)
 800353c:	400a      	ands	r2, r1
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	18d3      	adds	r3, r2, r3
 800354a:	183a      	adds	r2, r7, r0
 800354c:	8812      	ldrh	r2, [r2, #0]
 800354e:	4943      	ldr	r1, [pc, #268]	; (800365c <USB_ActivateEndpoint+0x698>)
 8003550:	430a      	orrs	r2, r1
 8003552:	b292      	uxth	r2, r2
 8003554:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	18d2      	adds	r2, r2, r3
 8003560:	2146      	movs	r1, #70	; 0x46
 8003562:	187b      	adds	r3, r7, r1
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	801a      	strh	r2, [r3, #0]
 8003568:	187b      	adds	r3, r7, r1
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	4013      	ands	r3, r2
 8003570:	d016      	beq.n	80035a0 <USB_ActivateEndpoint+0x5dc>
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29a      	uxth	r2, r3
 8003580:	2044      	movs	r0, #68	; 0x44
 8003582:	183b      	adds	r3, r7, r0
 8003584:	4932      	ldr	r1, [pc, #200]	; (8003650 <USB_ActivateEndpoint+0x68c>)
 8003586:	400a      	ands	r2, r1
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	18d3      	adds	r3, r2, r3
 8003594:	183a      	adds	r2, r7, r0
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	4931      	ldr	r1, [pc, #196]	; (8003660 <USB_ActivateEndpoint+0x69c>)
 800359a:	430a      	orrs	r2, r1
 800359c:	b292      	uxth	r2, r2
 800359e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	78db      	ldrb	r3, [r3, #3]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d01d      	beq.n	80035e4 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	18d3      	adds	r3, r2, r3
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	2040      	movs	r0, #64	; 0x40
 80035b8:	183b      	adds	r3, r7, r0
 80035ba:	492c      	ldr	r1, [pc, #176]	; (800366c <USB_ActivateEndpoint+0x6a8>)
 80035bc:	400a      	ands	r2, r1
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	183b      	adds	r3, r7, r0
 80035c2:	183a      	adds	r2, r7, r0
 80035c4:	8812      	ldrh	r2, [r2, #0]
 80035c6:	2120      	movs	r1, #32
 80035c8:	404a      	eors	r2, r1
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	183a      	adds	r2, r7, r0
 80035d8:	8812      	ldrh	r2, [r2, #0]
 80035da:	4923      	ldr	r1, [pc, #140]	; (8003668 <USB_ActivateEndpoint+0x6a4>)
 80035dc:	430a      	orrs	r2, r1
 80035de:	b292      	uxth	r2, r2
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	e016      	b.n	8003612 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	18d3      	adds	r3, r2, r3
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	2042      	movs	r0, #66	; 0x42
 80035f4:	183b      	adds	r3, r7, r0
 80035f6:	491d      	ldr	r1, [pc, #116]	; (800366c <USB_ActivateEndpoint+0x6a8>)
 80035f8:	400a      	ands	r2, r1
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	183a      	adds	r2, r7, r0
 8003608:	8812      	ldrh	r2, [r2, #0]
 800360a:	4917      	ldr	r1, [pc, #92]	; (8003668 <USB_ActivateEndpoint+0x6a4>)
 800360c:	430a      	orrs	r2, r1
 800360e:	b292      	uxth	r2, r2
 8003610:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29a      	uxth	r2, r3
 8003620:	203e      	movs	r0, #62	; 0x3e
 8003622:	183b      	adds	r3, r7, r0
 8003624:	490f      	ldr	r1, [pc, #60]	; (8003664 <USB_ActivateEndpoint+0x6a0>)
 8003626:	400a      	ands	r2, r1
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	18d3      	adds	r3, r2, r3
 8003634:	183a      	adds	r2, r7, r0
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	490b      	ldr	r1, [pc, #44]	; (8003668 <USB_ActivateEndpoint+0x6a4>)
 800363a:	430a      	orrs	r2, r1
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8003640:	2367      	movs	r3, #103	; 0x67
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b01a      	add	sp, #104	; 0x68
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	ffff8f8f 	.word	0xffff8f8f
 8003654:	ffff8180 	.word	0xffff8180
 8003658:	00000404 	.word	0x00000404
 800365c:	ffffc080 	.word	0xffffc080
 8003660:	ffff80c0 	.word	0xffff80c0
 8003664:	ffffbf8f 	.word	0xffffbf8f
 8003668:	ffff8080 	.word	0xffff8080
 800366c:	ffff8fbf 	.word	0xffff8fbf

08003670 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	; 0x30
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	7b1b      	ldrb	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d000      	beq.n	8003684 <USB_DeactivateEndpoint+0x14>
 8003682:	e07e      	b.n	8003782 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03c      	beq.n	8003706 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	18d2      	adds	r2, r2, r3
 8003696:	210c      	movs	r1, #12
 8003698:	187b      	adds	r3, r7, r1
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	4013      	ands	r3, r2
 80036a6:	d016      	beq.n	80036d6 <USB_DeactivateEndpoint+0x66>
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	200a      	movs	r0, #10
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	49c7      	ldr	r1, [pc, #796]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 80036bc:	400a      	ands	r2, r1
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	18d3      	adds	r3, r2, r3
 80036ca:	183a      	adds	r2, r7, r0
 80036cc:	8812      	ldrh	r2, [r2, #0]
 80036ce:	49c3      	ldr	r1, [pc, #780]	; (80039dc <USB_DeactivateEndpoint+0x36c>)
 80036d0:	430a      	orrs	r2, r1
 80036d2:	b292      	uxth	r2, r2
 80036d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	2008      	movs	r0, #8
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	49bd      	ldr	r1, [pc, #756]	; (80039e0 <USB_DeactivateEndpoint+0x370>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	183a      	adds	r2, r7, r0
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	49b9      	ldr	r1, [pc, #740]	; (80039e4 <USB_DeactivateEndpoint+0x374>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	b292      	uxth	r2, r2
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e163      	b.n	80039ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	18d2      	adds	r2, r2, r3
 8003710:	2112      	movs	r1, #18
 8003712:	187b      	adds	r3, r7, r1
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	187b      	adds	r3, r7, r1
 800371a:	881a      	ldrh	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	01db      	lsls	r3, r3, #7
 8003720:	4013      	ands	r3, r2
 8003722:	d016      	beq.n	8003752 <USB_DeactivateEndpoint+0xe2>
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	18d3      	adds	r3, r2, r3
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29a      	uxth	r2, r3
 8003732:	2010      	movs	r0, #16
 8003734:	183b      	adds	r3, r7, r0
 8003736:	49a8      	ldr	r1, [pc, #672]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 8003738:	400a      	ands	r2, r1
 800373a:	801a      	strh	r2, [r3, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	183a      	adds	r2, r7, r0
 8003748:	8812      	ldrh	r2, [r2, #0]
 800374a:	49a7      	ldr	r1, [pc, #668]	; (80039e8 <USB_DeactivateEndpoint+0x378>)
 800374c:	430a      	orrs	r2, r1
 800374e:	b292      	uxth	r2, r2
 8003750:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29a      	uxth	r2, r3
 8003760:	200e      	movs	r0, #14
 8003762:	183b      	adds	r3, r7, r0
 8003764:	49a1      	ldr	r1, [pc, #644]	; (80039ec <USB_DeactivateEndpoint+0x37c>)
 8003766:	400a      	ands	r2, r1
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	183a      	adds	r2, r7, r0
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	499a      	ldr	r1, [pc, #616]	; (80039e4 <USB_DeactivateEndpoint+0x374>)
 800377a:	430a      	orrs	r2, r1
 800377c:	b292      	uxth	r2, r2
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	e125      	b.n	80039ce <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d000      	beq.n	800378c <USB_DeactivateEndpoint+0x11c>
 800378a:	e090      	b.n	80038ae <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	18d2      	adds	r2, r2, r3
 8003796:	2120      	movs	r1, #32
 8003798:	187b      	adds	r3, r7, r1
 800379a:	8812      	ldrh	r2, [r2, #0]
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	881a      	ldrh	r2, [r3, #0]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	01db      	lsls	r3, r3, #7
 80037a6:	4013      	ands	r3, r2
 80037a8:	d016      	beq.n	80037d8 <USB_DeactivateEndpoint+0x168>
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	18d3      	adds	r3, r2, r3
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	201e      	movs	r0, #30
 80037ba:	183b      	adds	r3, r7, r0
 80037bc:	4986      	ldr	r1, [pc, #536]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 80037be:	400a      	ands	r2, r1
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	18d3      	adds	r3, r2, r3
 80037cc:	183a      	adds	r2, r7, r0
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	4985      	ldr	r1, [pc, #532]	; (80039e8 <USB_DeactivateEndpoint+0x378>)
 80037d2:	430a      	orrs	r2, r1
 80037d4:	b292      	uxth	r2, r2
 80037d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	18d2      	adds	r2, r2, r3
 80037e2:	211c      	movs	r1, #28
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	801a      	strh	r2, [r3, #0]
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	4013      	ands	r3, r2
 80037f2:	d016      	beq.n	8003822 <USB_DeactivateEndpoint+0x1b2>
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	18d3      	adds	r3, r2, r3
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29a      	uxth	r2, r3
 8003802:	201a      	movs	r0, #26
 8003804:	183b      	adds	r3, r7, r0
 8003806:	4974      	ldr	r1, [pc, #464]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 8003808:	400a      	ands	r2, r1
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	183a      	adds	r2, r7, r0
 8003818:	8812      	ldrh	r2, [r2, #0]
 800381a:	4970      	ldr	r1, [pc, #448]	; (80039dc <USB_DeactivateEndpoint+0x36c>)
 800381c:	430a      	orrs	r2, r1
 800381e:	b292      	uxth	r2, r2
 8003820:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	18d3      	adds	r3, r2, r3
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29a      	uxth	r2, r3
 8003830:	2018      	movs	r0, #24
 8003832:	183b      	adds	r3, r7, r0
 8003834:	4968      	ldr	r1, [pc, #416]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 8003836:	400a      	ands	r2, r1
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	18d3      	adds	r3, r2, r3
 8003844:	183a      	adds	r2, r7, r0
 8003846:	8812      	ldrh	r2, [r2, #0]
 8003848:	4964      	ldr	r1, [pc, #400]	; (80039dc <USB_DeactivateEndpoint+0x36c>)
 800384a:	430a      	orrs	r2, r1
 800384c:	b292      	uxth	r2, r2
 800384e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18d3      	adds	r3, r2, r3
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29a      	uxth	r2, r3
 800385e:	2016      	movs	r0, #22
 8003860:	183b      	adds	r3, r7, r0
 8003862:	4962      	ldr	r1, [pc, #392]	; (80039ec <USB_DeactivateEndpoint+0x37c>)
 8003864:	400a      	ands	r2, r1
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	18d3      	adds	r3, r2, r3
 8003872:	183a      	adds	r2, r7, r0
 8003874:	8812      	ldrh	r2, [r2, #0]
 8003876:	495b      	ldr	r1, [pc, #364]	; (80039e4 <USB_DeactivateEndpoint+0x374>)
 8003878:	430a      	orrs	r2, r1
 800387a:	b292      	uxth	r2, r2
 800387c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	18d3      	adds	r3, r2, r3
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29a      	uxth	r2, r3
 800388c:	2014      	movs	r0, #20
 800388e:	183b      	adds	r3, r7, r0
 8003890:	4953      	ldr	r1, [pc, #332]	; (80039e0 <USB_DeactivateEndpoint+0x370>)
 8003892:	400a      	ands	r2, r1
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	183a      	adds	r2, r7, r0
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	494f      	ldr	r1, [pc, #316]	; (80039e4 <USB_DeactivateEndpoint+0x374>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	b292      	uxth	r2, r2
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	e08f      	b.n	80039ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	18d2      	adds	r2, r2, r3
 80038b8:	212e      	movs	r1, #46	; 0x2e
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	01db      	lsls	r3, r3, #7
 80038c8:	4013      	ands	r3, r2
 80038ca:	d016      	beq.n	80038fa <USB_DeactivateEndpoint+0x28a>
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	202c      	movs	r0, #44	; 0x2c
 80038dc:	183b      	adds	r3, r7, r0
 80038de:	493e      	ldr	r1, [pc, #248]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	183a      	adds	r2, r7, r0
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	493d      	ldr	r1, [pc, #244]	; (80039e8 <USB_DeactivateEndpoint+0x378>)
 80038f4:	430a      	orrs	r2, r1
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	18d2      	adds	r2, r2, r3
 8003904:	212a      	movs	r1, #42	; 0x2a
 8003906:	187b      	adds	r3, r7, r1
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	187b      	adds	r3, r7, r1
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	4013      	ands	r3, r2
 8003914:	d016      	beq.n	8003944 <USB_DeactivateEndpoint+0x2d4>
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	18d3      	adds	r3, r2, r3
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29a      	uxth	r2, r3
 8003924:	2028      	movs	r0, #40	; 0x28
 8003926:	183b      	adds	r3, r7, r0
 8003928:	492b      	ldr	r1, [pc, #172]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 800392a:	400a      	ands	r2, r1
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	18d3      	adds	r3, r2, r3
 8003938:	183a      	adds	r2, r7, r0
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	4927      	ldr	r1, [pc, #156]	; (80039dc <USB_DeactivateEndpoint+0x36c>)
 800393e:	430a      	orrs	r2, r1
 8003940:	b292      	uxth	r2, r2
 8003942:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	18d3      	adds	r3, r2, r3
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29a      	uxth	r2, r3
 8003952:	2026      	movs	r0, #38	; 0x26
 8003954:	183b      	adds	r3, r7, r0
 8003956:	4920      	ldr	r1, [pc, #128]	; (80039d8 <USB_DeactivateEndpoint+0x368>)
 8003958:	400a      	ands	r2, r1
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	18d3      	adds	r3, r2, r3
 8003966:	183a      	adds	r2, r7, r0
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	491f      	ldr	r1, [pc, #124]	; (80039e8 <USB_DeactivateEndpoint+0x378>)
 800396c:	430a      	orrs	r2, r1
 800396e:	b292      	uxth	r2, r2
 8003970:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29a      	uxth	r2, r3
 8003980:	2024      	movs	r0, #36	; 0x24
 8003982:	183b      	adds	r3, r7, r0
 8003984:	4916      	ldr	r1, [pc, #88]	; (80039e0 <USB_DeactivateEndpoint+0x370>)
 8003986:	400a      	ands	r2, r1
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	18d3      	adds	r3, r2, r3
 8003994:	183a      	adds	r2, r7, r0
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	4912      	ldr	r1, [pc, #72]	; (80039e4 <USB_DeactivateEndpoint+0x374>)
 800399a:	430a      	orrs	r2, r1
 800399c:	b292      	uxth	r2, r2
 800399e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	2022      	movs	r0, #34	; 0x22
 80039b0:	183b      	adds	r3, r7, r0
 80039b2:	490e      	ldr	r1, [pc, #56]	; (80039ec <USB_DeactivateEndpoint+0x37c>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	18d3      	adds	r3, r2, r3
 80039c2:	183a      	adds	r2, r7, r0
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	4907      	ldr	r1, [pc, #28]	; (80039e4 <USB_DeactivateEndpoint+0x374>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	b292      	uxth	r2, r2
 80039cc:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b00c      	add	sp, #48	; 0x30
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	ffff8f8f 	.word	0xffff8f8f
 80039dc:	ffff80c0 	.word	0xffff80c0
 80039e0:	ffff8fbf 	.word	0xffff8fbf
 80039e4:	ffff8080 	.word	0xffff8080
 80039e8:	ffffc080 	.word	0xffffc080
 80039ec:	ffffbf8f 	.word	0xffffbf8f

080039f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039f0:	b5b0      	push	{r4, r5, r7, lr}
 80039f2:	b0c4      	sub	sp, #272	; 0x110
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <USB_EPStartXfer+0x16>
 8003a02:	f000 fd63 	bl	80044cc <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d906      	bls.n	8003a20 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2286      	movs	r2, #134	; 0x86
 8003a18:	0052      	lsls	r2, r2, #1
 8003a1a:	18ba      	adds	r2, r7, r2
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e005      	b.n	8003a2c <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2286      	movs	r2, #134	; 0x86
 8003a26:	0052      	lsls	r2, r2, #1
 8003a28:	18ba      	adds	r2, r7, r2
 8003a2a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	7b1b      	ldrb	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d125      	bne.n	8003a80 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6959      	ldr	r1, [r3, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	88da      	ldrh	r2, [r3, #6]
 8003a3c:	2486      	movs	r4, #134	; 0x86
 8003a3e:	0064      	lsls	r4, r4, #1
 8003a40:	193b      	adds	r3, r7, r4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f001 fa62 	bl	8004f10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2250      	movs	r2, #80	; 0x50
 8003a54:	5a9b      	ldrh	r3, [r3, r2]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	001a      	movs	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	189b      	adds	r3, r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	00da      	lsls	r2, r3, #3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	18d3      	adds	r3, r2, r3
 8003a6a:	4ad4      	ldr	r2, [pc, #848]	; (8003dbc <USB_EPStartXfer+0x3cc>)
 8003a6c:	4694      	mov	ip, r2
 8003a6e:	4463      	add	r3, ip
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	f000 fce4 	bl	8004448 <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	78db      	ldrb	r3, [r3, #3]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d000      	beq.n	8003a8a <USB_EPStartXfer+0x9a>
 8003a88:	e358      	b.n	800413c <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d800      	bhi.n	8003a98 <USB_EPStartXfer+0xa8>
 8003a96:	e2fe      	b.n	8004096 <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	205a      	movs	r0, #90	; 0x5a
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	49c5      	ldr	r1, [pc, #788]	; (8003dc0 <USB_EPStartXfer+0x3d0>)
 8003aac:	400a      	ands	r2, r1
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	183a      	adds	r2, r7, r0
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	49c1      	ldr	r1, [pc, #772]	; (8003dc4 <USB_EPStartXfer+0x3d4>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	b292      	uxth	r2, r2
 8003ac4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	2386      	movs	r3, #134	; 0x86
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1ad2      	subs	r2, r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	18d3      	adds	r3, r2, r3
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	2340      	movs	r3, #64	; 0x40
 8003aea:	4013      	ands	r3, r2
 8003aec:	d100      	bne.n	8003af0 <USB_EPStartXfer+0x100>
 8003aee:	e171      	b.n	8003dd4 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d16c      	bne.n	8003bd6 <USB_EPStartXfer+0x1e6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2250      	movs	r2, #80	; 0x50
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	001a      	movs	r2, r3
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00da      	lsls	r2, r3, #3
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	4aab      	ldr	r2, [pc, #684]	; (8003dc8 <USB_EPStartXfer+0x3d8>)
 8003b1c:	4694      	mov	ip, r2
 8003b1e:	4463      	add	r3, ip
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b22:	2386      	movs	r3, #134	; 0x86
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d110      	bne.n	8003b50 <USB_EPStartXfer+0x160>
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4aa5      	ldr	r2, [pc, #660]	; (8003dcc <USB_EPStartXfer+0x3dc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4aa2      	ldr	r2, [pc, #648]	; (8003dd0 <USB_EPStartXfer+0x3e0>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	e05e      	b.n	8003c0e <USB_EPStartXfer+0x21e>
 8003b50:	2386      	movs	r3, #134	; 0x86
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b3e      	cmp	r3, #62	; 0x3e
 8003b5a:	d81c      	bhi.n	8003b96 <USB_EPStartXfer+0x1a6>
 8003b5c:	2286      	movs	r2, #134	; 0x86
 8003b5e:	0052      	lsls	r2, r2, #1
 8003b60:	18bb      	adds	r3, r7, r2
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	1d79      	adds	r1, r7, #5
 8003b68:	31ff      	adds	r1, #255	; 0xff
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	18bb      	adds	r3, r7, r2
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2201      	movs	r2, #1
 8003b72:	4013      	ands	r3, r2
 8003b74:	d006      	beq.n	8003b84 <USB_EPStartXfer+0x194>
 8003b76:	1d7b      	adds	r3, r7, #5
 8003b78:	33ff      	adds	r3, #255	; 0xff
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	1d7a      	adds	r2, r7, #5
 8003b80:	32ff      	adds	r2, #255	; 0xff
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	1d7b      	adds	r3, r7, #5
 8003b86:	33ff      	adds	r3, #255	; 0xff
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	029b      	lsls	r3, r3, #10
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	e03b      	b.n	8003c0e <USB_EPStartXfer+0x21e>
 8003b96:	2286      	movs	r2, #134	; 0x86
 8003b98:	0052      	lsls	r2, r2, #1
 8003b9a:	18bb      	adds	r3, r7, r2
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	1d79      	adds	r1, r7, #5
 8003ba2:	31ff      	adds	r1, #255	; 0xff
 8003ba4:	600b      	str	r3, [r1, #0]
 8003ba6:	18bb      	adds	r3, r7, r2
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	221f      	movs	r2, #31
 8003bac:	4013      	ands	r3, r2
 8003bae:	d106      	bne.n	8003bbe <USB_EPStartXfer+0x1ce>
 8003bb0:	1d7b      	adds	r3, r7, #5
 8003bb2:	33ff      	adds	r3, #255	; 0xff
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	1d7a      	adds	r2, r7, #5
 8003bba:	32ff      	adds	r2, #255	; 0xff
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	1d7b      	adds	r3, r7, #5
 8003bc0:	33ff      	adds	r3, #255	; 0xff
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4a81      	ldr	r2, [pc, #516]	; (8003dd0 <USB_EPStartXfer+0x3e0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	801a      	strh	r2, [r3, #0]
 8003bd4:	e01b      	b.n	8003c0e <USB_EPStartXfer+0x21e>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d117      	bne.n	8003c0e <USB_EPStartXfer+0x21e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2250      	movs	r2, #80	; 0x50
 8003be2:	5a9b      	ldrh	r3, [r3, r2]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	001a      	movs	r2, r3
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	18d3      	adds	r3, r2, r3
 8003bf8:	4a73      	ldr	r2, [pc, #460]	; (8003dc8 <USB_EPStartXfer+0x3d8>)
 8003bfa:	4694      	mov	ip, r2
 8003bfc:	4463      	add	r3, ip
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8003c00:	2386      	movs	r3, #134	; 0x86
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c0e:	2085      	movs	r0, #133	; 0x85
 8003c10:	0040      	lsls	r0, r0, #1
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	8952      	ldrh	r2, [r2, #10]
 8003c18:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6959      	ldr	r1, [r3, #20]
 8003c1e:	2586      	movs	r5, #134	; 0x86
 8003c20:	006d      	lsls	r5, r5, #1
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	b29c      	uxth	r4, r3
 8003c28:	183b      	adds	r3, r7, r0
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	0023      	movs	r3, r4
 8003c30:	f001 f96e 	bl	8004f10 <USB_WritePMA>
            ep->xfer_buff += len;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	197b      	adds	r3, r7, r5
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	18d2      	adds	r2, r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d909      	bls.n	8003c62 <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	2386      	movs	r3, #134	; 0x86
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	621a      	str	r2, [r3, #32]
 8003c60:	e008      	b.n	8003c74 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	2286      	movs	r2, #134	; 0x86
 8003c68:	0052      	lsls	r2, r2, #1
 8003c6a:	18ba      	adds	r2, r7, r2
 8003c6c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d16c      	bne.n	8003d56 <USB_EPStartXfer+0x366>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2250      	movs	r2, #80	; 0x50
 8003c84:	5a9b      	ldrh	r3, [r3, r2]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	001a      	movs	r2, r3
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	189b      	adds	r3, r3, r2
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	00da      	lsls	r2, r3, #3
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	18d3      	adds	r3, r2, r3
 8003c9a:	4a48      	ldr	r2, [pc, #288]	; (8003dbc <USB_EPStartXfer+0x3cc>)
 8003c9c:	4694      	mov	ip, r2
 8003c9e:	4463      	add	r3, ip
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	2386      	movs	r3, #134	; 0x86
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d110      	bne.n	8003cd0 <USB_EPStartXfer+0x2e0>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	4a45      	ldr	r2, [pc, #276]	; (8003dcc <USB_EPStartXfer+0x3dc>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4a42      	ldr	r2, [pc, #264]	; (8003dd0 <USB_EPStartXfer+0x3e0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	801a      	strh	r2, [r3, #0]
 8003cce:	e060      	b.n	8003d92 <USB_EPStartXfer+0x3a2>
 8003cd0:	2386      	movs	r3, #134	; 0x86
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8003cda:	d81c      	bhi.n	8003d16 <USB_EPStartXfer+0x326>
 8003cdc:	2286      	movs	r2, #134	; 0x86
 8003cde:	0052      	lsls	r2, r2, #1
 8003ce0:	18bb      	adds	r3, r7, r2
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	1c79      	adds	r1, r7, #1
 8003ce8:	31ff      	adds	r1, #255	; 0xff
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	18bb      	adds	r3, r7, r2
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d006      	beq.n	8003d04 <USB_EPStartXfer+0x314>
 8003cf6:	1c7b      	adds	r3, r7, #1
 8003cf8:	33ff      	adds	r3, #255	; 0xff
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	1c7a      	adds	r2, r7, #1
 8003d00:	32ff      	adds	r2, #255	; 0xff
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	1c7b      	adds	r3, r7, #1
 8003d06:	33ff      	adds	r3, #255	; 0xff
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	029b      	lsls	r3, r3, #10
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e03d      	b.n	8003d92 <USB_EPStartXfer+0x3a2>
 8003d16:	2286      	movs	r2, #134	; 0x86
 8003d18:	0052      	lsls	r2, r2, #1
 8003d1a:	18bb      	adds	r3, r7, r2
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	1c79      	adds	r1, r7, #1
 8003d22:	31ff      	adds	r1, #255	; 0xff
 8003d24:	600b      	str	r3, [r1, #0]
 8003d26:	18bb      	adds	r3, r7, r2
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	221f      	movs	r2, #31
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d106      	bne.n	8003d3e <USB_EPStartXfer+0x34e>
 8003d30:	1c7b      	adds	r3, r7, #1
 8003d32:	33ff      	adds	r3, #255	; 0xff
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	1c7a      	adds	r2, r7, #1
 8003d3a:	32ff      	adds	r2, #255	; 0xff
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	1c7b      	adds	r3, r7, #1
 8003d40:	33ff      	adds	r3, #255	; 0xff
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	029b      	lsls	r3, r3, #10
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <USB_EPStartXfer+0x3e0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	e01d      	b.n	8003d92 <USB_EPStartXfer+0x3a2>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d119      	bne.n	8003d92 <USB_EPStartXfer+0x3a2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2250      	movs	r2, #80	; 0x50
 8003d66:	5a9b      	ldrh	r3, [r3, r2]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	00da      	lsls	r2, r3, #3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	18d3      	adds	r3, r2, r3
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <USB_EPStartXfer+0x3cc>)
 8003d7e:	4694      	mov	ip, r2
 8003d80:	4463      	add	r3, ip
 8003d82:	623b      	str	r3, [r7, #32]
 8003d84:	2386      	movs	r3, #134	; 0x86
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d92:	2085      	movs	r0, #133	; 0x85
 8003d94:	0040      	lsls	r0, r0, #1
 8003d96:	183b      	adds	r3, r7, r0
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	8912      	ldrh	r2, [r2, #8]
 8003d9c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6959      	ldr	r1, [r3, #20]
 8003da2:	2386      	movs	r3, #134	; 0x86
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29c      	uxth	r4, r3
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	881a      	ldrh	r2, [r3, #0]
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	0023      	movs	r3, r4
 8003db4:	f001 f8ac 	bl	8004f10 <USB_WritePMA>
 8003db8:	e346      	b.n	8004448 <USB_EPStartXfer+0xa58>
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	00000402 	.word	0x00000402
 8003dc0:	ffff8f8f 	.word	0xffff8f8f
 8003dc4:	ffff8180 	.word	0xffff8180
 8003dc8:	00000406 	.word	0x00000406
 8003dcc:	ffff83ff 	.word	0xffff83ff
 8003dd0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d16a      	bne.n	8003eb2 <USB_EPStartXfer+0x4c2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2250      	movs	r2, #80	; 0x50
 8003de4:	5a9b      	ldrh	r3, [r3, r2]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	001a      	movs	r2, r3
 8003dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	00da      	lsls	r2, r3, #3
 8003df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	4aca      	ldr	r2, [pc, #808]	; (8004124 <USB_EPStartXfer+0x734>)
 8003dfc:	4694      	mov	ip, r2
 8003dfe:	4463      	add	r3, ip
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e02:	2386      	movs	r3, #134	; 0x86
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d110      	bne.n	8003e30 <USB_EPStartXfer+0x440>
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	4ac4      	ldr	r2, [pc, #784]	; (8004128 <USB_EPStartXfer+0x738>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4ac1      	ldr	r2, [pc, #772]	; (800412c <USB_EPStartXfer+0x73c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e05e      	b.n	8003eee <USB_EPStartXfer+0x4fe>
 8003e30:	2386      	movs	r3, #134	; 0x86
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b3e      	cmp	r3, #62	; 0x3e
 8003e3a:	d81b      	bhi.n	8003e74 <USB_EPStartXfer+0x484>
 8003e3c:	2286      	movs	r2, #134	; 0x86
 8003e3e:	0052      	lsls	r2, r2, #1
 8003e40:	18bb      	adds	r3, r7, r2
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	21fc      	movs	r1, #252	; 0xfc
 8003e48:	1879      	adds	r1, r7, r1
 8003e4a:	600b      	str	r3, [r1, #0]
 8003e4c:	18bb      	adds	r3, r7, r2
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	d005      	beq.n	8003e62 <USB_EPStartXfer+0x472>
 8003e56:	22fc      	movs	r2, #252	; 0xfc
 8003e58:	18bb      	adds	r3, r7, r2
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	18ba      	adds	r2, r7, r2
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	23fc      	movs	r3, #252	; 0xfc
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	029b      	lsls	r3, r3, #10
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	e03c      	b.n	8003eee <USB_EPStartXfer+0x4fe>
 8003e74:	2286      	movs	r2, #134	; 0x86
 8003e76:	0052      	lsls	r2, r2, #1
 8003e78:	18bb      	adds	r3, r7, r2
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	21fc      	movs	r1, #252	; 0xfc
 8003e80:	1879      	adds	r1, r7, r1
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	18bb      	adds	r3, r7, r2
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	221f      	movs	r2, #31
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d105      	bne.n	8003e9a <USB_EPStartXfer+0x4aa>
 8003e8e:	22fc      	movs	r2, #252	; 0xfc
 8003e90:	18bb      	adds	r3, r7, r2
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	18ba      	adds	r2, r7, r2
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	23fc      	movs	r3, #252	; 0xfc
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4aa1      	ldr	r2, [pc, #644]	; (800412c <USB_EPStartXfer+0x73c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	e01d      	b.n	8003eee <USB_EPStartXfer+0x4fe>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d119      	bne.n	8003eee <USB_EPStartXfer+0x4fe>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2250      	movs	r2, #80	; 0x50
 8003ec2:	5a9b      	ldrh	r3, [r3, r2]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	00da      	lsls	r2, r3, #3
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed6:	18d3      	adds	r3, r2, r3
 8003ed8:	4a92      	ldr	r2, [pc, #584]	; (8004124 <USB_EPStartXfer+0x734>)
 8003eda:	4694      	mov	ip, r2
 8003edc:	4463      	add	r3, ip
 8003ede:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee0:	2386      	movs	r3, #134	; 0x86
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003eee:	2085      	movs	r0, #133	; 0x85
 8003ef0:	0040      	lsls	r0, r0, #1
 8003ef2:	183b      	adds	r3, r7, r0
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	8912      	ldrh	r2, [r2, #8]
 8003ef8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6959      	ldr	r1, [r3, #20]
 8003efe:	2586      	movs	r5, #134	; 0x86
 8003f00:	006d      	lsls	r5, r5, #1
 8003f02:	197b      	adds	r3, r7, r5
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b29c      	uxth	r4, r3
 8003f08:	183b      	adds	r3, r7, r0
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	0023      	movs	r3, r4
 8003f10:	f000 fffe 	bl	8004f10 <USB_WritePMA>
            ep->xfer_buff += len;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	197b      	adds	r3, r7, r5
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	18d2      	adds	r2, r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d909      	bls.n	8003f42 <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	2386      	movs	r3, #134	; 0x86
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	e008      	b.n	8003f54 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	2286      	movs	r2, #134	; 0x86
 8003f48:	0052      	lsls	r2, r2, #1
 8003f4a:	18ba      	adds	r2, r7, r2
 8003f4c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d16a      	bne.n	8004036 <USB_EPStartXfer+0x646>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2250      	movs	r2, #80	; 0x50
 8003f68:	5a9b      	ldrh	r3, [r3, r2]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	189b      	adds	r3, r3, r2
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	00da      	lsls	r2, r3, #3
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	4a6c      	ldr	r2, [pc, #432]	; (8004130 <USB_EPStartXfer+0x740>)
 8003f80:	4694      	mov	ip, r2
 8003f82:	4463      	add	r3, ip
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f86:	2386      	movs	r3, #134	; 0x86
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d110      	bne.n	8003fb4 <USB_EPStartXfer+0x5c4>
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4a63      	ldr	r2, [pc, #396]	; (8004128 <USB_EPStartXfer+0x738>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	801a      	strh	r2, [r3, #0]
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4a60      	ldr	r2, [pc, #384]	; (800412c <USB_EPStartXfer+0x73c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	801a      	strh	r2, [r3, #0]
 8003fb2:	e05c      	b.n	800406e <USB_EPStartXfer+0x67e>
 8003fb4:	2386      	movs	r3, #134	; 0x86
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8003fbe:	d81b      	bhi.n	8003ff8 <USB_EPStartXfer+0x608>
 8003fc0:	2286      	movs	r2, #134	; 0x86
 8003fc2:	0052      	lsls	r2, r2, #1
 8003fc4:	18bb      	adds	r3, r7, r2
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	21f8      	movs	r1, #248	; 0xf8
 8003fcc:	1879      	adds	r1, r7, r1
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	18bb      	adds	r3, r7, r2
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d005      	beq.n	8003fe6 <USB_EPStartXfer+0x5f6>
 8003fda:	22f8      	movs	r2, #248	; 0xf8
 8003fdc:	18bb      	adds	r3, r7, r2
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	18ba      	adds	r2, r7, r2
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	23f8      	movs	r3, #248	; 0xf8
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	029b      	lsls	r3, r3, #10
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	e03a      	b.n	800406e <USB_EPStartXfer+0x67e>
 8003ff8:	2286      	movs	r2, #134	; 0x86
 8003ffa:	0052      	lsls	r2, r2, #1
 8003ffc:	18bb      	adds	r3, r7, r2
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	21f8      	movs	r1, #248	; 0xf8
 8004004:	1879      	adds	r1, r7, r1
 8004006:	600b      	str	r3, [r1, #0]
 8004008:	18bb      	adds	r3, r7, r2
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	221f      	movs	r2, #31
 800400e:	4013      	ands	r3, r2
 8004010:	d105      	bne.n	800401e <USB_EPStartXfer+0x62e>
 8004012:	22f8      	movs	r2, #248	; 0xf8
 8004014:	18bb      	adds	r3, r7, r2
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	18ba      	adds	r2, r7, r2
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	23f8      	movs	r3, #248	; 0xf8
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	029b      	lsls	r3, r3, #10
 8004028:	b29b      	uxth	r3, r3
 800402a:	4a40      	ldr	r2, [pc, #256]	; (800412c <USB_EPStartXfer+0x73c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	b29a      	uxth	r2, r3
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	e01b      	b.n	800406e <USB_EPStartXfer+0x67e>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d117      	bne.n	800406e <USB_EPStartXfer+0x67e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2250      	movs	r2, #80	; 0x50
 8004042:	5a9b      	ldrh	r3, [r3, r2]
 8004044:	b29b      	uxth	r3, r3
 8004046:	001a      	movs	r2, r3
 8004048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404a:	189b      	adds	r3, r3, r2
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	00da      	lsls	r2, r3, #3
 8004054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004056:	18d3      	adds	r3, r2, r3
 8004058:	4a35      	ldr	r2, [pc, #212]	; (8004130 <USB_EPStartXfer+0x740>)
 800405a:	4694      	mov	ip, r2
 800405c:	4463      	add	r3, ip
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
 8004060:	2386      	movs	r3, #134	; 0x86
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b29a      	uxth	r2, r3
 800406a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800406e:	2085      	movs	r0, #133	; 0x85
 8004070:	0040      	lsls	r0, r0, #1
 8004072:	183b      	adds	r3, r7, r0
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	8952      	ldrh	r2, [r2, #10]
 8004078:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6959      	ldr	r1, [r3, #20]
 800407e:	2386      	movs	r3, #134	; 0x86
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b29c      	uxth	r4, r3
 8004088:	183b      	adds	r3, r7, r0
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	0023      	movs	r3, r4
 8004090:	f000 ff3e 	bl	8004f10 <USB_WritePMA>
 8004094:	e1d8      	b.n	8004448 <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	2086      	movs	r0, #134	; 0x86
 800409c:	0040      	lsls	r0, r0, #1
 800409e:	183a      	adds	r2, r7, r0
 80040a0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	18d3      	adds	r3, r2, r3
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	2466      	movs	r4, #102	; 0x66
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	491f      	ldr	r1, [pc, #124]	; (8004134 <USB_EPStartXfer+0x744>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	193a      	adds	r2, r7, r4
 80040c6:	8812      	ldrh	r2, [r2, #0]
 80040c8:	491b      	ldr	r1, [pc, #108]	; (8004138 <USB_EPStartXfer+0x748>)
 80040ca:	430a      	orrs	r2, r1
 80040cc:	b292      	uxth	r2, r2
 80040ce:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	663b      	str	r3, [r7, #96]	; 0x60
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2250      	movs	r2, #80	; 0x50
 80040d8:	5a9b      	ldrh	r3, [r3, r2]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	001a      	movs	r2, r3
 80040de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e0:	189b      	adds	r3, r3, r2
 80040e2:	663b      	str	r3, [r7, #96]	; 0x60
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	00da      	lsls	r2, r3, #3
 80040ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ec:	18d3      	adds	r3, r2, r3
 80040ee:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <USB_EPStartXfer+0x734>)
 80040f0:	4694      	mov	ip, r2
 80040f2:	4463      	add	r3, ip
 80040f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f6:	183b      	adds	r3, r7, r0
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004100:	2585      	movs	r5, #133	; 0x85
 8004102:	006d      	lsls	r5, r5, #1
 8004104:	197b      	adds	r3, r7, r5
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	8912      	ldrh	r2, [r2, #8]
 800410a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6959      	ldr	r1, [r3, #20]
 8004110:	183b      	adds	r3, r7, r0
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	b29c      	uxth	r4, r3
 8004116:	197b      	adds	r3, r7, r5
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	0023      	movs	r3, r4
 800411e:	f000 fef7 	bl	8004f10 <USB_WritePMA>
 8004122:	e191      	b.n	8004448 <USB_EPStartXfer+0xa58>
 8004124:	00000402 	.word	0x00000402
 8004128:	ffff83ff 	.word	0xffff83ff
 800412c:	ffff8000 	.word	0xffff8000
 8004130:	00000406 	.word	0x00000406
 8004134:	ffff8e8f 	.word	0xffff8e8f
 8004138:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	18d3      	adds	r3, r2, r3
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	001a      	movs	r2, r3
 800414c:	2340      	movs	r3, #64	; 0x40
 800414e:	4013      	ands	r3, r2
 8004150:	d100      	bne.n	8004154 <USB_EPStartXfer+0x764>
 8004152:	e093      	b.n	800427c <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	67bb      	str	r3, [r7, #120]	; 0x78
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d16a      	bne.n	8004236 <USB_EPStartXfer+0x846>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	673b      	str	r3, [r7, #112]	; 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2250      	movs	r2, #80	; 0x50
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	b29b      	uxth	r3, r3
 800416c:	001a      	movs	r2, r3
 800416e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004170:	189b      	adds	r3, r3, r2
 8004172:	673b      	str	r3, [r7, #112]	; 0x70
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	00da      	lsls	r2, r3, #3
 800417a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800417c:	18d3      	adds	r3, r2, r3
 800417e:	4ae0      	ldr	r2, [pc, #896]	; (8004500 <USB_EPStartXfer+0xb10>)
 8004180:	4694      	mov	ip, r2
 8004182:	4463      	add	r3, ip
 8004184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004186:	2386      	movs	r3, #134	; 0x86
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d110      	bne.n	80041b4 <USB_EPStartXfer+0x7c4>
 8004192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4ada      	ldr	r2, [pc, #872]	; (8004504 <USB_EPStartXfer+0xb14>)
 800419a:	4013      	ands	r3, r2
 800419c:	b29a      	uxth	r2, r3
 800419e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4ad7      	ldr	r2, [pc, #860]	; (8004508 <USB_EPStartXfer+0xb18>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b0:	801a      	strh	r2, [r3, #0]
 80041b2:	e05c      	b.n	800426e <USB_EPStartXfer+0x87e>
 80041b4:	2386      	movs	r3, #134	; 0x86
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b3e      	cmp	r3, #62	; 0x3e
 80041be:	d81b      	bhi.n	80041f8 <USB_EPStartXfer+0x808>
 80041c0:	2286      	movs	r2, #134	; 0x86
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	21f4      	movs	r1, #244	; 0xf4
 80041cc:	1879      	adds	r1, r7, r1
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	18bb      	adds	r3, r7, r2
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2201      	movs	r2, #1
 80041d6:	4013      	ands	r3, r2
 80041d8:	d005      	beq.n	80041e6 <USB_EPStartXfer+0x7f6>
 80041da:	22f4      	movs	r2, #244	; 0xf4
 80041dc:	18bb      	adds	r3, r7, r2
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	18ba      	adds	r2, r7, r2
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	23f4      	movs	r3, #244	; 0xf4
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	e03a      	b.n	800426e <USB_EPStartXfer+0x87e>
 80041f8:	2286      	movs	r2, #134	; 0x86
 80041fa:	0052      	lsls	r2, r2, #1
 80041fc:	18bb      	adds	r3, r7, r2
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	21f4      	movs	r1, #244	; 0xf4
 8004204:	1879      	adds	r1, r7, r1
 8004206:	600b      	str	r3, [r1, #0]
 8004208:	18bb      	adds	r3, r7, r2
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	221f      	movs	r2, #31
 800420e:	4013      	ands	r3, r2
 8004210:	d105      	bne.n	800421e <USB_EPStartXfer+0x82e>
 8004212:	22f4      	movs	r2, #244	; 0xf4
 8004214:	18bb      	adds	r3, r7, r2
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	18ba      	adds	r2, r7, r2
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	23f4      	movs	r3, #244	; 0xf4
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	b29b      	uxth	r3, r3
 800422a:	4ab7      	ldr	r2, [pc, #732]	; (8004508 <USB_EPStartXfer+0xb18>)
 800422c:	4313      	orrs	r3, r2
 800422e:	b29a      	uxth	r2, r3
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e01b      	b.n	800426e <USB_EPStartXfer+0x87e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d117      	bne.n	800426e <USB_EPStartXfer+0x87e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2250      	movs	r2, #80	; 0x50
 8004242:	5a9b      	ldrh	r3, [r3, r2]
 8004244:	b29b      	uxth	r3, r3
 8004246:	001a      	movs	r2, r3
 8004248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800424a:	189b      	adds	r3, r3, r2
 800424c:	67bb      	str	r3, [r7, #120]	; 0x78
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	00da      	lsls	r2, r3, #3
 8004254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	4aa9      	ldr	r2, [pc, #676]	; (8004500 <USB_EPStartXfer+0xb10>)
 800425a:	4694      	mov	ip, r2
 800425c:	4463      	add	r3, ip
 800425e:	677b      	str	r3, [r7, #116]	; 0x74
 8004260:	2386      	movs	r3, #134	; 0x86
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	b29a      	uxth	r2, r3
 800426a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800426e:	2385      	movs	r3, #133	; 0x85
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	8952      	ldrh	r2, [r2, #10]
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	e09f      	b.n	80043bc <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d16f      	bne.n	8004364 <USB_EPStartXfer+0x974>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	187a      	adds	r2, r7, r1
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2250      	movs	r2, #80	; 0x50
 8004290:	5a9b      	ldrh	r3, [r3, r2]
 8004292:	b29b      	uxth	r3, r3
 8004294:	001a      	movs	r2, r3
 8004296:	187b      	adds	r3, r7, r1
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	189b      	adds	r3, r3, r2
 800429c:	187a      	adds	r2, r7, r1
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	00da      	lsls	r2, r3, #3
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	18d3      	adds	r3, r2, r3
 80042ac:	4a97      	ldr	r2, [pc, #604]	; (800450c <USB_EPStartXfer+0xb1c>)
 80042ae:	4694      	mov	ip, r2
 80042b0:	4463      	add	r3, ip
 80042b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042b4:	2386      	movs	r3, #134	; 0x86
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d110      	bne.n	80042e2 <USB_EPStartXfer+0x8f2>
 80042c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4a8f      	ldr	r2, [pc, #572]	; (8004504 <USB_EPStartXfer+0xb14>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4a8c      	ldr	r2, [pc, #560]	; (8004508 <USB_EPStartXfer+0xb18>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	b29a      	uxth	r2, r3
 80042dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042de:	801a      	strh	r2, [r3, #0]
 80042e0:	e066      	b.n	80043b0 <USB_EPStartXfer+0x9c0>
 80042e2:	2386      	movs	r3, #134	; 0x86
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b3e      	cmp	r3, #62	; 0x3e
 80042ec:	d81b      	bhi.n	8004326 <USB_EPStartXfer+0x936>
 80042ee:	2286      	movs	r2, #134	; 0x86
 80042f0:	0052      	lsls	r2, r2, #1
 80042f2:	18bb      	adds	r3, r7, r2
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	21f0      	movs	r1, #240	; 0xf0
 80042fa:	1879      	adds	r1, r7, r1
 80042fc:	600b      	str	r3, [r1, #0]
 80042fe:	18bb      	adds	r3, r7, r2
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	4013      	ands	r3, r2
 8004306:	d005      	beq.n	8004314 <USB_EPStartXfer+0x924>
 8004308:	22f0      	movs	r2, #240	; 0xf0
 800430a:	18bb      	adds	r3, r7, r2
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	18ba      	adds	r2, r7, r2
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	23f0      	movs	r3, #240	; 0xf0
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	029b      	lsls	r3, r3, #10
 800431e:	b29a      	uxth	r2, r3
 8004320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	e044      	b.n	80043b0 <USB_EPStartXfer+0x9c0>
 8004326:	2286      	movs	r2, #134	; 0x86
 8004328:	0052      	lsls	r2, r2, #1
 800432a:	18bb      	adds	r3, r7, r2
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	21f0      	movs	r1, #240	; 0xf0
 8004332:	1879      	adds	r1, r7, r1
 8004334:	600b      	str	r3, [r1, #0]
 8004336:	18bb      	adds	r3, r7, r2
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	221f      	movs	r2, #31
 800433c:	4013      	ands	r3, r2
 800433e:	d105      	bne.n	800434c <USB_EPStartXfer+0x95c>
 8004340:	22f0      	movs	r2, #240	; 0xf0
 8004342:	18bb      	adds	r3, r7, r2
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	18ba      	adds	r2, r7, r2
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	23f0      	movs	r3, #240	; 0xf0
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	b29b      	uxth	r3, r3
 8004358:	4a6b      	ldr	r2, [pc, #428]	; (8004508 <USB_EPStartXfer+0xb18>)
 800435a:	4313      	orrs	r3, r2
 800435c:	b29a      	uxth	r2, r3
 800435e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	e025      	b.n	80043b0 <USB_EPStartXfer+0x9c0>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d121      	bne.n	80043b0 <USB_EPStartXfer+0x9c0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2188      	movs	r1, #136	; 0x88
 8004370:	187a      	adds	r2, r7, r1
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2250      	movs	r2, #80	; 0x50
 8004378:	5a9b      	ldrh	r3, [r3, r2]
 800437a:	b29b      	uxth	r3, r3
 800437c:	001a      	movs	r2, r3
 800437e:	187b      	adds	r3, r7, r1
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	189b      	adds	r3, r3, r2
 8004384:	187a      	adds	r2, r7, r1
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	00da      	lsls	r2, r3, #3
 800438e:	187b      	adds	r3, r7, r1
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	18d3      	adds	r3, r2, r3
 8004394:	4a5d      	ldr	r2, [pc, #372]	; (800450c <USB_EPStartXfer+0xb1c>)
 8004396:	4694      	mov	ip, r2
 8004398:	4463      	add	r3, ip
 800439a:	2184      	movs	r1, #132	; 0x84
 800439c:	187a      	adds	r2, r7, r1
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	2386      	movs	r3, #134	; 0x86
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80043b0:	2385      	movs	r3, #133	; 0x85
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	8912      	ldrh	r2, [r2, #8]
 80043ba:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6959      	ldr	r1, [r3, #20]
 80043c0:	2386      	movs	r3, #134	; 0x86
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29c      	uxth	r4, r3
 80043ca:	2385      	movs	r3, #133	; 0x85
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	0023      	movs	r3, r4
 80043d6:	f000 fd9b 	bl	8004f10 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d117      	bne.n	8004412 <USB_EPStartXfer+0xa22>
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	2068      	movs	r0, #104	; 0x68
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	4946      	ldr	r1, [pc, #280]	; (8004510 <USB_EPStartXfer+0xb20>)
 80043f6:	400a      	ands	r2, r1
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	18d3      	adds	r3, r2, r3
 8004404:	183a      	adds	r2, r7, r0
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	4942      	ldr	r1, [pc, #264]	; (8004514 <USB_EPStartXfer+0xb24>)
 800440a:	430a      	orrs	r2, r1
 800440c:	b292      	uxth	r2, r2
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e01a      	b.n	8004448 <USB_EPStartXfer+0xa58>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d116      	bne.n	8004448 <USB_EPStartXfer+0xa58>
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	18d3      	adds	r3, r2, r3
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29a      	uxth	r2, r3
 8004428:	206a      	movs	r0, #106	; 0x6a
 800442a:	183b      	adds	r3, r7, r0
 800442c:	4938      	ldr	r1, [pc, #224]	; (8004510 <USB_EPStartXfer+0xb20>)
 800442e:	400a      	ands	r2, r1
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	18d3      	adds	r3, r2, r3
 800443c:	183a      	adds	r2, r7, r0
 800443e:	8812      	ldrh	r2, [r2, #0]
 8004440:	4935      	ldr	r1, [pc, #212]	; (8004518 <USB_EPStartXfer+0xb28>)
 8004442:	430a      	orrs	r2, r1
 8004444:	b292      	uxth	r2, r2
 8004446:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	18d3      	adds	r3, r2, r3
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29a      	uxth	r2, r3
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <USB_EPStartXfer+0xb2c>)
 8004458:	2188      	movs	r1, #136	; 0x88
 800445a:	0049      	lsls	r1, r1, #1
 800445c:	468c      	mov	ip, r1
 800445e:	44bc      	add	ip, r7
 8004460:	4463      	add	r3, ip
 8004462:	492f      	ldr	r1, [pc, #188]	; (8004520 <USB_EPStartXfer+0xb30>)
 8004464:	400a      	ands	r2, r1
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <USB_EPStartXfer+0xb2c>)
 800446a:	2288      	movs	r2, #136	; 0x88
 800446c:	0052      	lsls	r2, r2, #1
 800446e:	4694      	mov	ip, r2
 8004470:	44bc      	add	ip, r7
 8004472:	4463      	add	r3, ip
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <USB_EPStartXfer+0xb2c>)
 8004476:	2188      	movs	r1, #136	; 0x88
 8004478:	0049      	lsls	r1, r1, #1
 800447a:	468c      	mov	ip, r1
 800447c:	44bc      	add	ip, r7
 800447e:	4462      	add	r2, ip
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	2110      	movs	r1, #16
 8004484:	404a      	eors	r2, r1
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	4b24      	ldr	r3, [pc, #144]	; (800451c <USB_EPStartXfer+0xb2c>)
 800448a:	2288      	movs	r2, #136	; 0x88
 800448c:	0052      	lsls	r2, r2, #1
 800448e:	4694      	mov	ip, r2
 8004490:	44bc      	add	ip, r7
 8004492:	4463      	add	r3, ip
 8004494:	4a21      	ldr	r2, [pc, #132]	; (800451c <USB_EPStartXfer+0xb2c>)
 8004496:	2188      	movs	r1, #136	; 0x88
 8004498:	0049      	lsls	r1, r1, #1
 800449a:	468c      	mov	ip, r1
 800449c:	44bc      	add	ip, r7
 800449e:	4462      	add	r2, ip
 80044a0:	8812      	ldrh	r2, [r2, #0]
 80044a2:	2120      	movs	r1, #32
 80044a4:	404a      	eors	r2, r1
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	18d3      	adds	r3, r2, r3
 80044b2:	4a1a      	ldr	r2, [pc, #104]	; (800451c <USB_EPStartXfer+0xb2c>)
 80044b4:	2188      	movs	r1, #136	; 0x88
 80044b6:	0049      	lsls	r1, r1, #1
 80044b8:	468c      	mov	ip, r1
 80044ba:	44bc      	add	ip, r7
 80044bc:	4462      	add	r2, ip
 80044be:	8812      	ldrh	r2, [r2, #0]
 80044c0:	4918      	ldr	r1, [pc, #96]	; (8004524 <USB_EPStartXfer+0xb34>)
 80044c2:	430a      	orrs	r2, r1
 80044c4:	b292      	uxth	r2, r2
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	f000 fbdd 	bl	8004c86 <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	7b1b      	ldrb	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d000      	beq.n	80044d6 <USB_EPStartXfer+0xae6>
 80044d4:	e0ac      	b.n	8004630 <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d922      	bls.n	8004528 <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2186      	movs	r1, #134	; 0x86
 80044e8:	0049      	lsls	r1, r1, #1
 80044ea:	187a      	adds	r2, r7, r1
 80044ec:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	619a      	str	r2, [r3, #24]
 80044fc:	e01d      	b.n	800453a <USB_EPStartXfer+0xb4a>
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	00000406 	.word	0x00000406
 8004504:	ffff83ff 	.word	0xffff83ff
 8004508:	ffff8000 	.word	0xffff8000
 800450c:	00000402 	.word	0x00000402
 8004510:	ffff8f8f 	.word	0xffff8f8f
 8004514:	ffff80c0 	.word	0xffff80c0
 8004518:	ffffc080 	.word	0xffffc080
 800451c:	fffffefe 	.word	0xfffffefe
 8004520:	ffff8fbf 	.word	0xffff8fbf
 8004524:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2286      	movs	r2, #134	; 0x86
 800452e:	0052      	lsls	r2, r2, #1
 8004530:	18ba      	adds	r2, r7, r2
 8004532:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2194      	movs	r1, #148	; 0x94
 800453e:	187a      	adds	r2, r7, r1
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2250      	movs	r2, #80	; 0x50
 8004546:	5a9b      	ldrh	r3, [r3, r2]
 8004548:	b29b      	uxth	r3, r3
 800454a:	001a      	movs	r2, r3
 800454c:	187b      	adds	r3, r7, r1
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	189b      	adds	r3, r3, r2
 8004552:	187a      	adds	r2, r7, r1
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	00da      	lsls	r2, r3, #3
 800455c:	187b      	adds	r3, r7, r1
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	4ac2      	ldr	r2, [pc, #776]	; (800486c <USB_EPStartXfer+0xe7c>)
 8004564:	4694      	mov	ip, r2
 8004566:	4463      	add	r3, ip
 8004568:	2290      	movs	r2, #144	; 0x90
 800456a:	18ba      	adds	r2, r7, r2
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	2386      	movs	r3, #134	; 0x86
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d115      	bne.n	80045a6 <USB_EPStartXfer+0xbb6>
 800457a:	2190      	movs	r1, #144	; 0x90
 800457c:	187b      	adds	r3, r7, r1
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	4aba      	ldr	r2, [pc, #744]	; (8004870 <USB_EPStartXfer+0xe80>)
 8004586:	4013      	ands	r3, r2
 8004588:	b29a      	uxth	r2, r3
 800458a:	187b      	adds	r3, r7, r1
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	801a      	strh	r2, [r3, #0]
 8004590:	187b      	adds	r3, r7, r1
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4ab6      	ldr	r2, [pc, #728]	; (8004874 <USB_EPStartXfer+0xe84>)
 800459a:	4313      	orrs	r3, r2
 800459c:	b29a      	uxth	r2, r3
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	e34a      	b.n	8004c3c <USB_EPStartXfer+0x124c>
 80045a6:	2386      	movs	r3, #134	; 0x86
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b3e      	cmp	r3, #62	; 0x3e
 80045b0:	d81d      	bhi.n	80045ee <USB_EPStartXfer+0xbfe>
 80045b2:	2286      	movs	r2, #134	; 0x86
 80045b4:	0052      	lsls	r2, r2, #1
 80045b6:	18bb      	adds	r3, r7, r2
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	21ec      	movs	r1, #236	; 0xec
 80045be:	1879      	adds	r1, r7, r1
 80045c0:	600b      	str	r3, [r1, #0]
 80045c2:	18bb      	adds	r3, r7, r2
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	d005      	beq.n	80045d8 <USB_EPStartXfer+0xbe8>
 80045cc:	22ec      	movs	r2, #236	; 0xec
 80045ce:	18bb      	adds	r3, r7, r2
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	18ba      	adds	r2, r7, r2
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	23ec      	movs	r3, #236	; 0xec
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	2390      	movs	r3, #144	; 0x90
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e326      	b.n	8004c3c <USB_EPStartXfer+0x124c>
 80045ee:	2286      	movs	r2, #134	; 0x86
 80045f0:	0052      	lsls	r2, r2, #1
 80045f2:	18bb      	adds	r3, r7, r2
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	21ec      	movs	r1, #236	; 0xec
 80045fa:	1879      	adds	r1, r7, r1
 80045fc:	600b      	str	r3, [r1, #0]
 80045fe:	18bb      	adds	r3, r7, r2
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	221f      	movs	r2, #31
 8004604:	4013      	ands	r3, r2
 8004606:	d105      	bne.n	8004614 <USB_EPStartXfer+0xc24>
 8004608:	22ec      	movs	r2, #236	; 0xec
 800460a:	18bb      	adds	r3, r7, r2
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	18ba      	adds	r2, r7, r2
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	23ec      	movs	r3, #236	; 0xec
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	b29b      	uxth	r3, r3
 8004620:	4a94      	ldr	r2, [pc, #592]	; (8004874 <USB_EPStartXfer+0xe84>)
 8004622:	4313      	orrs	r3, r2
 8004624:	b29a      	uxth	r2, r3
 8004626:	2390      	movs	r3, #144	; 0x90
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e305      	b.n	8004c3c <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	78db      	ldrb	r3, [r3, #3]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d000      	beq.n	800463a <USB_EPStartXfer+0xc4a>
 8004638:	e182      	b.n	8004940 <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d000      	beq.n	8004644 <USB_EPStartXfer+0xc54>
 8004642:	e072      	b.n	800472a <USB_EPStartXfer+0xd3a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	21b0      	movs	r1, #176	; 0xb0
 8004648:	187a      	adds	r2, r7, r1
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2250      	movs	r2, #80	; 0x50
 8004650:	5a9b      	ldrh	r3, [r3, r2]
 8004652:	b29b      	uxth	r3, r3
 8004654:	001a      	movs	r2, r3
 8004656:	187b      	adds	r3, r7, r1
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	189b      	adds	r3, r3, r2
 800465c:	187a      	adds	r2, r7, r1
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	00da      	lsls	r2, r3, #3
 8004666:	187b      	adds	r3, r7, r1
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	18d3      	adds	r3, r2, r3
 800466c:	4a82      	ldr	r2, [pc, #520]	; (8004878 <USB_EPStartXfer+0xe88>)
 800466e:	4694      	mov	ip, r2
 8004670:	4463      	add	r3, ip
 8004672:	22ac      	movs	r2, #172	; 0xac
 8004674:	18ba      	adds	r2, r7, r2
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d115      	bne.n	80046ac <USB_EPStartXfer+0xcbc>
 8004680:	21ac      	movs	r1, #172	; 0xac
 8004682:	187b      	adds	r3, r7, r1
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	4a79      	ldr	r2, [pc, #484]	; (8004870 <USB_EPStartXfer+0xe80>)
 800468c:	4013      	ands	r3, r2
 800468e:	b29a      	uxth	r2, r3
 8004690:	187b      	adds	r3, r7, r1
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	187b      	adds	r3, r7, r1
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	4a75      	ldr	r2, [pc, #468]	; (8004874 <USB_EPStartXfer+0xe84>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e062      	b.n	8004772 <USB_EPStartXfer+0xd82>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b3e      	cmp	r3, #62	; 0x3e
 80046b2:	d81b      	bhi.n	80046ec <USB_EPStartXfer+0xcfc>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	22e8      	movs	r2, #232	; 0xe8
 80046bc:	18ba      	adds	r2, r7, r2
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d005      	beq.n	80046d6 <USB_EPStartXfer+0xce6>
 80046ca:	22e8      	movs	r2, #232	; 0xe8
 80046cc:	18bb      	adds	r3, r7, r2
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	18ba      	adds	r2, r7, r2
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	23e8      	movs	r3, #232	; 0xe8
 80046d8:	18fb      	adds	r3, r7, r3
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	23ac      	movs	r3, #172	; 0xac
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e042      	b.n	8004772 <USB_EPStartXfer+0xd82>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	22e8      	movs	r2, #232	; 0xe8
 80046f4:	18ba      	adds	r2, r7, r2
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	221f      	movs	r2, #31
 80046fe:	4013      	ands	r3, r2
 8004700:	d105      	bne.n	800470e <USB_EPStartXfer+0xd1e>
 8004702:	22e8      	movs	r2, #232	; 0xe8
 8004704:	18bb      	adds	r3, r7, r2
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3b01      	subs	r3, #1
 800470a:	18ba      	adds	r2, r7, r2
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	23e8      	movs	r3, #232	; 0xe8
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	b29b      	uxth	r3, r3
 800471a:	4a56      	ldr	r2, [pc, #344]	; (8004874 <USB_EPStartXfer+0xe84>)
 800471c:	4313      	orrs	r3, r2
 800471e:	b29a      	uxth	r2, r3
 8004720:	23ac      	movs	r3, #172	; 0xac
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	e023      	b.n	8004772 <USB_EPStartXfer+0xd82>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d11f      	bne.n	8004772 <USB_EPStartXfer+0xd82>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	21b8      	movs	r1, #184	; 0xb8
 8004736:	187a      	adds	r2, r7, r1
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2250      	movs	r2, #80	; 0x50
 800473e:	5a9b      	ldrh	r3, [r3, r2]
 8004740:	b29b      	uxth	r3, r3
 8004742:	001a      	movs	r2, r3
 8004744:	187b      	adds	r3, r7, r1
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	189b      	adds	r3, r3, r2
 800474a:	187a      	adds	r2, r7, r1
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	00da      	lsls	r2, r3, #3
 8004754:	187b      	adds	r3, r7, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	18d3      	adds	r3, r2, r3
 800475a:	4a47      	ldr	r2, [pc, #284]	; (8004878 <USB_EPStartXfer+0xe88>)
 800475c:	4694      	mov	ip, r2
 800475e:	4463      	add	r3, ip
 8004760:	21b4      	movs	r1, #180	; 0xb4
 8004762:	187a      	adds	r2, r7, r1
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	b29a      	uxth	r2, r3
 800476c:	187b      	adds	r3, r7, r1
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	22a8      	movs	r2, #168	; 0xa8
 8004776:	18ba      	adds	r2, r7, r2
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d000      	beq.n	8004784 <USB_EPStartXfer+0xd94>
 8004782:	e07b      	b.n	800487c <USB_EPStartXfer+0xe8c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	21a0      	movs	r1, #160	; 0xa0
 8004788:	187a      	adds	r2, r7, r1
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2250      	movs	r2, #80	; 0x50
 8004790:	5a9b      	ldrh	r3, [r3, r2]
 8004792:	b29b      	uxth	r3, r3
 8004794:	001a      	movs	r2, r3
 8004796:	187b      	adds	r3, r7, r1
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	189b      	adds	r3, r3, r2
 800479c:	187a      	adds	r2, r7, r1
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	00da      	lsls	r2, r3, #3
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <USB_EPStartXfer+0xe7c>)
 80047ae:	4694      	mov	ip, r2
 80047b0:	4463      	add	r3, ip
 80047b2:	229c      	movs	r2, #156	; 0x9c
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d115      	bne.n	80047ec <USB_EPStartXfer+0xdfc>
 80047c0:	219c      	movs	r1, #156	; 0x9c
 80047c2:	187b      	adds	r3, r7, r1
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4a29      	ldr	r2, [pc, #164]	; (8004870 <USB_EPStartXfer+0xe80>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4a25      	ldr	r2, [pc, #148]	; (8004874 <USB_EPStartXfer+0xe84>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	e068      	b.n	80048be <USB_EPStartXfer+0xece>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b3e      	cmp	r3, #62	; 0x3e
 80047f2:	d81b      	bhi.n	800482c <USB_EPStartXfer+0xe3c>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	22e4      	movs	r2, #228	; 0xe4
 80047fc:	18ba      	adds	r2, r7, r2
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2201      	movs	r2, #1
 8004806:	4013      	ands	r3, r2
 8004808:	d005      	beq.n	8004816 <USB_EPStartXfer+0xe26>
 800480a:	22e4      	movs	r2, #228	; 0xe4
 800480c:	18bb      	adds	r3, r7, r2
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	18ba      	adds	r2, r7, r2
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	23e4      	movs	r3, #228	; 0xe4
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	b29a      	uxth	r2, r3
 8004822:	239c      	movs	r3, #156	; 0x9c
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	801a      	strh	r2, [r3, #0]
 800482a:	e048      	b.n	80048be <USB_EPStartXfer+0xece>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	22e4      	movs	r2, #228	; 0xe4
 8004834:	18ba      	adds	r2, r7, r2
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	221f      	movs	r2, #31
 800483e:	4013      	ands	r3, r2
 8004840:	d105      	bne.n	800484e <USB_EPStartXfer+0xe5e>
 8004842:	22e4      	movs	r2, #228	; 0xe4
 8004844:	18bb      	adds	r3, r7, r2
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3b01      	subs	r3, #1
 800484a:	18ba      	adds	r2, r7, r2
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	23e4      	movs	r3, #228	; 0xe4
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	029b      	lsls	r3, r3, #10
 8004858:	b29b      	uxth	r3, r3
 800485a:	4a06      	ldr	r2, [pc, #24]	; (8004874 <USB_EPStartXfer+0xe84>)
 800485c:	4313      	orrs	r3, r2
 800485e:	b29a      	uxth	r2, r3
 8004860:	239c      	movs	r3, #156	; 0x9c
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	e029      	b.n	80048be <USB_EPStartXfer+0xece>
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	00000406 	.word	0x00000406
 8004870:	ffff83ff 	.word	0xffff83ff
 8004874:	ffff8000 	.word	0xffff8000
 8004878:	00000402 	.word	0x00000402
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d11c      	bne.n	80048be <USB_EPStartXfer+0xece>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2250      	movs	r2, #80	; 0x50
 8004888:	5a9b      	ldrh	r3, [r3, r2]
 800488a:	b29b      	uxth	r3, r3
 800488c:	001a      	movs	r2, r3
 800488e:	21a8      	movs	r1, #168	; 0xa8
 8004890:	187b      	adds	r3, r7, r1
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	189b      	adds	r3, r3, r2
 8004896:	187a      	adds	r2, r7, r1
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	00da      	lsls	r2, r3, #3
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	18d3      	adds	r3, r2, r3
 80048a6:	4acc      	ldr	r2, [pc, #816]	; (8004bd8 <USB_EPStartXfer+0x11e8>)
 80048a8:	4694      	mov	ip, r2
 80048aa:	4463      	add	r3, ip
 80048ac:	21a4      	movs	r1, #164	; 0xa4
 80048ae:	187a      	adds	r2, r7, r1
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d100      	bne.n	80048c8 <USB_EPStartXfer+0xed8>
 80048c6:	e1b9      	b.n	8004c3c <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	18d2      	adds	r2, r2, r3
 80048d2:	219a      	movs	r1, #154	; 0x9a
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	8812      	ldrh	r2, [r2, #0]
 80048d8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4013      	ands	r3, r2
 80048e4:	d005      	beq.n	80048f2 <USB_EPStartXfer+0xf02>
 80048e6:	239a      	movs	r3, #154	; 0x9a
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	2240      	movs	r2, #64	; 0x40
 80048ee:	4013      	ands	r3, r2
 80048f0:	d10e      	bne.n	8004910 <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80048f2:	239a      	movs	r3, #154	; 0x9a
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	01db      	lsls	r3, r3, #7
 80048fc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80048fe:	d000      	beq.n	8004902 <USB_EPStartXfer+0xf12>
 8004900:	e19c      	b.n	8004c3c <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004902:	239a      	movs	r3, #154	; 0x9a
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	4013      	ands	r3, r2
 800490c:	d000      	beq.n	8004910 <USB_EPStartXfer+0xf20>
 800490e:	e195      	b.n	8004c3c <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	18d3      	adds	r3, r2, r3
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29a      	uxth	r2, r3
 800491e:	2098      	movs	r0, #152	; 0x98
 8004920:	183b      	adds	r3, r7, r0
 8004922:	49ae      	ldr	r1, [pc, #696]	; (8004bdc <USB_EPStartXfer+0x11ec>)
 8004924:	400a      	ands	r2, r1
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	18d3      	adds	r3, r2, r3
 8004932:	183a      	adds	r2, r7, r0
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	49aa      	ldr	r1, [pc, #680]	; (8004be0 <USB_EPStartXfer+0x11f0>)
 8004938:	430a      	orrs	r2, r1
 800493a:	b292      	uxth	r2, r2
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	e17d      	b.n	8004c3c <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	78db      	ldrb	r3, [r3, #3]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d000      	beq.n	800494a <USB_EPStartXfer+0xf5a>
 8004948:	e176      	b.n	8004c38 <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d90d      	bls.n	8004972 <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2186      	movs	r1, #134	; 0x86
 800495c:	0049      	lsls	r1, r1, #1
 800495e:	187a      	adds	r2, r7, r1
 8004960:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	187b      	adds	r3, r7, r1
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	619a      	str	r2, [r3, #24]
 8004970:	e008      	b.n	8004984 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2286      	movs	r2, #134	; 0x86
 8004978:	0052      	lsls	r2, r2, #1
 800497a:	18ba      	adds	r2, r7, r2
 800497c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2200      	movs	r2, #0
 8004982:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d000      	beq.n	800498e <USB_EPStartXfer+0xf9e>
 800498c:	e07a      	b.n	8004a84 <USB_EPStartXfer+0x1094>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	21d0      	movs	r1, #208	; 0xd0
 8004992:	187a      	adds	r2, r7, r1
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2250      	movs	r2, #80	; 0x50
 800499a:	5a9b      	ldrh	r3, [r3, r2]
 800499c:	b29b      	uxth	r3, r3
 800499e:	001a      	movs	r2, r3
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	187a      	adds	r2, r7, r1
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	00da      	lsls	r2, r3, #3
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	18d3      	adds	r3, r2, r3
 80049b6:	4a8b      	ldr	r2, [pc, #556]	; (8004be4 <USB_EPStartXfer+0x11f4>)
 80049b8:	4694      	mov	ip, r2
 80049ba:	4463      	add	r3, ip
 80049bc:	22cc      	movs	r2, #204	; 0xcc
 80049be:	18ba      	adds	r2, r7, r2
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	2386      	movs	r3, #134	; 0x86
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d115      	bne.n	80049fa <USB_EPStartXfer+0x100a>
 80049ce:	21cc      	movs	r1, #204	; 0xcc
 80049d0:	187b      	adds	r3, r7, r1
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	4a83      	ldr	r2, [pc, #524]	; (8004be8 <USB_EPStartXfer+0x11f8>)
 80049da:	4013      	ands	r3, r2
 80049dc:	b29a      	uxth	r2, r3
 80049de:	187b      	adds	r3, r7, r1
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	187b      	adds	r3, r7, r1
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4a7f      	ldr	r2, [pc, #508]	; (8004bec <USB_EPStartXfer+0x11fc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	187b      	adds	r3, r7, r1
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	e06a      	b.n	8004ad0 <USB_EPStartXfer+0x10e0>
 80049fa:	2386      	movs	r3, #134	; 0x86
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b3e      	cmp	r3, #62	; 0x3e
 8004a04:	d81d      	bhi.n	8004a42 <USB_EPStartXfer+0x1052>
 8004a06:	2286      	movs	r2, #134	; 0x86
 8004a08:	0052      	lsls	r2, r2, #1
 8004a0a:	18bb      	adds	r3, r7, r2
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	21e0      	movs	r1, #224	; 0xe0
 8004a12:	1879      	adds	r1, r7, r1
 8004a14:	600b      	str	r3, [r1, #0]
 8004a16:	18bb      	adds	r3, r7, r2
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d005      	beq.n	8004a2c <USB_EPStartXfer+0x103c>
 8004a20:	22e0      	movs	r2, #224	; 0xe0
 8004a22:	18bb      	adds	r3, r7, r2
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	18ba      	adds	r2, r7, r2
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	23e0      	movs	r3, #224	; 0xe0
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	23cc      	movs	r3, #204	; 0xcc
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	e046      	b.n	8004ad0 <USB_EPStartXfer+0x10e0>
 8004a42:	2286      	movs	r2, #134	; 0x86
 8004a44:	0052      	lsls	r2, r2, #1
 8004a46:	18bb      	adds	r3, r7, r2
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	21e0      	movs	r1, #224	; 0xe0
 8004a4e:	1879      	adds	r1, r7, r1
 8004a50:	600b      	str	r3, [r1, #0]
 8004a52:	18bb      	adds	r3, r7, r2
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	221f      	movs	r2, #31
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d105      	bne.n	8004a68 <USB_EPStartXfer+0x1078>
 8004a5c:	22e0      	movs	r2, #224	; 0xe0
 8004a5e:	18bb      	adds	r3, r7, r2
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	18ba      	adds	r2, r7, r2
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	23e0      	movs	r3, #224	; 0xe0
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	029b      	lsls	r3, r3, #10
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4a5d      	ldr	r2, [pc, #372]	; (8004bec <USB_EPStartXfer+0x11fc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	23cc      	movs	r3, #204	; 0xcc
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	e025      	b.n	8004ad0 <USB_EPStartXfer+0x10e0>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d121      	bne.n	8004ad0 <USB_EPStartXfer+0x10e0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	21d8      	movs	r1, #216	; 0xd8
 8004a90:	187a      	adds	r2, r7, r1
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2250      	movs	r2, #80	; 0x50
 8004a98:	5a9b      	ldrh	r3, [r3, r2]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	187a      	adds	r2, r7, r1
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	00da      	lsls	r2, r3, #3
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	18d3      	adds	r3, r2, r3
 8004ab4:	4a4b      	ldr	r2, [pc, #300]	; (8004be4 <USB_EPStartXfer+0x11f4>)
 8004ab6:	4694      	mov	ip, r2
 8004ab8:	4463      	add	r3, ip
 8004aba:	21d4      	movs	r1, #212	; 0xd4
 8004abc:	187a      	adds	r2, r7, r1
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	2386      	movs	r3, #134	; 0x86
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	22c8      	movs	r2, #200	; 0xc8
 8004ad4:	18ba      	adds	r2, r7, r2
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d000      	beq.n	8004ae2 <USB_EPStartXfer+0x10f2>
 8004ae0:	e086      	b.n	8004bf0 <USB_EPStartXfer+0x1200>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	21c0      	movs	r1, #192	; 0xc0
 8004ae6:	187a      	adds	r2, r7, r1
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2250      	movs	r2, #80	; 0x50
 8004aee:	5a9b      	ldrh	r3, [r3, r2]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	001a      	movs	r2, r3
 8004af4:	187b      	adds	r3, r7, r1
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	189b      	adds	r3, r3, r2
 8004afa:	187a      	adds	r2, r7, r1
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	00da      	lsls	r2, r3, #3
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <USB_EPStartXfer+0x11e8>)
 8004b0c:	4694      	mov	ip, r2
 8004b0e:	4463      	add	r3, ip
 8004b10:	22bc      	movs	r2, #188	; 0xbc
 8004b12:	18ba      	adds	r2, r7, r2
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	2386      	movs	r3, #134	; 0x86
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d115      	bne.n	8004b4e <USB_EPStartXfer+0x115e>
 8004b22:	21bc      	movs	r1, #188	; 0xbc
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <USB_EPStartXfer+0x11f8>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4a2a      	ldr	r2, [pc, #168]	; (8004bec <USB_EPStartXfer+0x11fc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	e076      	b.n	8004c3c <USB_EPStartXfer+0x124c>
 8004b4e:	2386      	movs	r3, #134	; 0x86
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b3e      	cmp	r3, #62	; 0x3e
 8004b58:	d81d      	bhi.n	8004b96 <USB_EPStartXfer+0x11a6>
 8004b5a:	2286      	movs	r2, #134	; 0x86
 8004b5c:	0052      	lsls	r2, r2, #1
 8004b5e:	18bb      	adds	r3, r7, r2
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	21dc      	movs	r1, #220	; 0xdc
 8004b66:	1879      	adds	r1, r7, r1
 8004b68:	600b      	str	r3, [r1, #0]
 8004b6a:	18bb      	adds	r3, r7, r2
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	d005      	beq.n	8004b80 <USB_EPStartXfer+0x1190>
 8004b74:	22dc      	movs	r2, #220	; 0xdc
 8004b76:	18bb      	adds	r3, r7, r2
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	18ba      	adds	r2, r7, r2
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	23dc      	movs	r3, #220	; 0xdc
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	029b      	lsls	r3, r3, #10
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	23bc      	movs	r3, #188	; 0xbc
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e052      	b.n	8004c3c <USB_EPStartXfer+0x124c>
 8004b96:	2286      	movs	r2, #134	; 0x86
 8004b98:	0052      	lsls	r2, r2, #1
 8004b9a:	18bb      	adds	r3, r7, r2
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	21dc      	movs	r1, #220	; 0xdc
 8004ba2:	1879      	adds	r1, r7, r1
 8004ba4:	600b      	str	r3, [r1, #0]
 8004ba6:	18bb      	adds	r3, r7, r2
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	221f      	movs	r2, #31
 8004bac:	4013      	ands	r3, r2
 8004bae:	d105      	bne.n	8004bbc <USB_EPStartXfer+0x11cc>
 8004bb0:	22dc      	movs	r2, #220	; 0xdc
 8004bb2:	18bb      	adds	r3, r7, r2
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	18ba      	adds	r2, r7, r2
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	23dc      	movs	r3, #220	; 0xdc
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <USB_EPStartXfer+0x11fc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	23bc      	movs	r3, #188	; 0xbc
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	e031      	b.n	8004c3c <USB_EPStartXfer+0x124c>
 8004bd8:	00000406 	.word	0x00000406
 8004bdc:	ffff8f8f 	.word	0xffff8f8f
 8004be0:	ffff80c0 	.word	0xffff80c0
 8004be4:	00000402 	.word	0x00000402
 8004be8:	ffff83ff 	.word	0xffff83ff
 8004bec:	ffff8000 	.word	0xffff8000
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d121      	bne.n	8004c3c <USB_EPStartXfer+0x124c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2250      	movs	r2, #80	; 0x50
 8004bfc:	5a9b      	ldrh	r3, [r3, r2]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	001a      	movs	r2, r3
 8004c02:	21c8      	movs	r1, #200	; 0xc8
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	189b      	adds	r3, r3, r2
 8004c0a:	187a      	adds	r2, r7, r1
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	00da      	lsls	r2, r3, #3
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	18d3      	adds	r3, r2, r3
 8004c1a:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <USB_EPStartXfer+0x12a0>)
 8004c1c:	4694      	mov	ip, r2
 8004c1e:	4463      	add	r3, ip
 8004c20:	21c4      	movs	r1, #196	; 0xc4
 8004c22:	187a      	adds	r2, r7, r1
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	2386      	movs	r3, #134	; 0x86
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e001      	b.n	8004c3c <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e025      	b.n	8004c88 <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	18d3      	adds	r3, r2, r3
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	208e      	movs	r0, #142	; 0x8e
 8004c4c:	183b      	adds	r3, r7, r0
 8004c4e:	4911      	ldr	r1, [pc, #68]	; (8004c94 <USB_EPStartXfer+0x12a4>)
 8004c50:	400a      	ands	r2, r1
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	183b      	adds	r3, r7, r0
 8004c56:	183a      	adds	r2, r7, r0
 8004c58:	8812      	ldrh	r2, [r2, #0]
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	0149      	lsls	r1, r1, #5
 8004c5e:	404a      	eors	r2, r1
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	183b      	adds	r3, r7, r0
 8004c64:	183a      	adds	r2, r7, r0
 8004c66:	8812      	ldrh	r2, [r2, #0]
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	0189      	lsls	r1, r1, #6
 8004c6c:	404a      	eors	r2, r1
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	18d3      	adds	r3, r2, r3
 8004c7a:	183a      	adds	r2, r7, r0
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	4906      	ldr	r1, [pc, #24]	; (8004c98 <USB_EPStartXfer+0x12a8>)
 8004c80:	430a      	orrs	r2, r1
 8004c82:	b292      	uxth	r2, r2
 8004c84:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b044      	add	sp, #272	; 0x110
 8004c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c90:	00000406 	.word	0x00000406
 8004c94:	ffffbf8f 	.word	0xffffbf8f
 8004c98:	ffff8080 	.word	0xffff8080

08004c9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01d      	beq.n	8004cea <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	18d3      	adds	r3, r2, r3
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	200c      	movs	r0, #12
 8004cbe:	183b      	adds	r3, r7, r0
 8004cc0:	491b      	ldr	r1, [pc, #108]	; (8004d30 <USB_EPSetStall+0x94>)
 8004cc2:	400a      	ands	r2, r1
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	183b      	adds	r3, r7, r0
 8004cc8:	183a      	adds	r2, r7, r0
 8004cca:	8812      	ldrh	r2, [r2, #0]
 8004ccc:	2110      	movs	r1, #16
 8004cce:	404a      	eors	r2, r1
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	183a      	adds	r2, r7, r0
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	4914      	ldr	r1, [pc, #80]	; (8004d34 <USB_EPSetStall+0x98>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	e01d      	b.n	8004d26 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	18d3      	adds	r3, r2, r3
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	200e      	movs	r0, #14
 8004cfa:	183b      	adds	r3, r7, r0
 8004cfc:	490e      	ldr	r1, [pc, #56]	; (8004d38 <USB_EPSetStall+0x9c>)
 8004cfe:	400a      	ands	r2, r1
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	183b      	adds	r3, r7, r0
 8004d04:	183a      	adds	r2, r7, r0
 8004d06:	8812      	ldrh	r2, [r2, #0]
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	0149      	lsls	r1, r1, #5
 8004d0c:	404a      	eors	r2, r1
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	183a      	adds	r2, r7, r0
 8004d1c:	8812      	ldrh	r2, [r2, #0]
 8004d1e:	4905      	ldr	r1, [pc, #20]	; (8004d34 <USB_EPSetStall+0x98>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	b292      	uxth	r2, r2
 8004d24:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	ffff8fbf 	.word	0xffff8fbf
 8004d34:	ffff8080 	.word	0xffff8080
 8004d38:	ffffbf8f 	.word	0xffffbf8f

08004d3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	7b1b      	ldrb	r3, [r3, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d000      	beq.n	8004d50 <USB_EPClearStall+0x14>
 8004d4e:	e095      	b.n	8004e7c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d046      	beq.n	8004de6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	18d2      	adds	r2, r2, r3
 8004d62:	2110      	movs	r1, #16
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	8812      	ldrh	r2, [r2, #0]
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	4013      	ands	r3, r2
 8004d72:	d016      	beq.n	8004da2 <USB_EPClearStall+0x66>
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	18d3      	adds	r3, r2, r3
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	200e      	movs	r0, #14
 8004d84:	183b      	adds	r3, r7, r0
 8004d86:	4940      	ldr	r1, [pc, #256]	; (8004e88 <USB_EPClearStall+0x14c>)
 8004d88:	400a      	ands	r2, r1
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	183a      	adds	r2, r7, r0
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	493c      	ldr	r1, [pc, #240]	; (8004e8c <USB_EPClearStall+0x150>)
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	b292      	uxth	r2, r2
 8004da0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d068      	beq.n	8004e7c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	200c      	movs	r0, #12
 8004dba:	183b      	adds	r3, r7, r0
 8004dbc:	4934      	ldr	r1, [pc, #208]	; (8004e90 <USB_EPClearStall+0x154>)
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	183b      	adds	r3, r7, r0
 8004dc4:	183a      	adds	r2, r7, r0
 8004dc6:	8812      	ldrh	r2, [r2, #0]
 8004dc8:	2120      	movs	r1, #32
 8004dca:	404a      	eors	r2, r1
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	18d3      	adds	r3, r2, r3
 8004dd8:	183a      	adds	r2, r7, r0
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	492d      	ldr	r1, [pc, #180]	; (8004e94 <USB_EPClearStall+0x158>)
 8004dde:	430a      	orrs	r2, r1
 8004de0:	b292      	uxth	r2, r2
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e04a      	b.n	8004e7c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	18d2      	adds	r2, r2, r3
 8004df0:	2116      	movs	r1, #22
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	8812      	ldrh	r2, [r2, #0]
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	01db      	lsls	r3, r3, #7
 8004e00:	4013      	ands	r3, r2
 8004e02:	d016      	beq.n	8004e32 <USB_EPClearStall+0xf6>
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	18d3      	adds	r3, r2, r3
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	2014      	movs	r0, #20
 8004e14:	183b      	adds	r3, r7, r0
 8004e16:	491c      	ldr	r1, [pc, #112]	; (8004e88 <USB_EPClearStall+0x14c>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	18d3      	adds	r3, r2, r3
 8004e26:	183a      	adds	r2, r7, r0
 8004e28:	8812      	ldrh	r2, [r2, #0]
 8004e2a:	491b      	ldr	r1, [pc, #108]	; (8004e98 <USB_EPClearStall+0x15c>)
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	18d3      	adds	r3, r2, r3
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	2012      	movs	r0, #18
 8004e42:	183b      	adds	r3, r7, r0
 8004e44:	4915      	ldr	r1, [pc, #84]	; (8004e9c <USB_EPClearStall+0x160>)
 8004e46:	400a      	ands	r2, r1
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	183a      	adds	r2, r7, r0
 8004e4e:	8812      	ldrh	r2, [r2, #0]
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	0149      	lsls	r1, r1, #5
 8004e54:	404a      	eors	r2, r1
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	183b      	adds	r3, r7, r0
 8004e5a:	183a      	adds	r2, r7, r0
 8004e5c:	8812      	ldrh	r2, [r2, #0]
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	0189      	lsls	r1, r1, #6
 8004e62:	404a      	eors	r2, r1
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	183a      	adds	r2, r7, r0
 8004e72:	8812      	ldrh	r2, [r2, #0]
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <USB_EPClearStall+0x158>)
 8004e76:	430a      	orrs	r2, r1
 8004e78:	b292      	uxth	r2, r2
 8004e7a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	0018      	movs	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b006      	add	sp, #24
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	ffff8f8f 	.word	0xffff8f8f
 8004e8c:	ffff80c0 	.word	0xffff80c0
 8004e90:	ffff8fbf 	.word	0xffff8fbf
 8004e94:	ffff8080 	.word	0xffff8080
 8004e98:	ffffc080 	.word	0xffffc080
 8004e9c:	ffffbf8f 	.word	0xffffbf8f

08004ea0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	000a      	movs	r2, r1
 8004eaa:	1cfb      	adds	r3, r7, #3
 8004eac:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8004eae:	1cfb      	adds	r3, r7, #3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	224c      	movs	r2, #76	; 0x4c
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2258      	movs	r2, #88	; 0x58
 8004ed4:	5a9b      	ldrh	r3, [r3, r2]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4a05      	ldr	r2, [pc, #20]	; (8004ef0 <USB_DevConnect+0x28>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b299      	uxth	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2258      	movs	r2, #88	; 0x58
 8004ee2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	ffff8000 	.word	0xffff8000

08004ef4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2244      	movs	r2, #68	; 0x44
 8004f00:	5a9b      	ldrh	r3, [r3, r2]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b004      	add	sp, #16
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08c      	sub	sp, #48	; 0x30
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	1dbb      	adds	r3, r7, #6
 8004f1e:	801a      	strh	r2, [r3, #0]
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	1c0a      	adds	r2, r1, #0
 8004f24:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f26:	1d3b      	adds	r3, r7, #4
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f38:	1dbb      	adds	r3, r7, #6
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	18d3      	adds	r3, r2, r3
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	00d2      	lsls	r2, r2, #3
 8004f44:	4694      	mov	ip, r2
 8004f46:	4463      	add	r3, ip
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	e01b      	b.n	8004f88 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	3301      	adds	r3, #1
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	001a      	movs	r2, r3
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	3302      	adds	r3, #2
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	3b01      	subs	r3, #1
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e0      	bne.n	8004f50 <USB_WritePMA+0x40>
  }
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b00c      	add	sp, #48	; 0x30
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b08a      	sub	sp, #40	; 0x28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	1dbb      	adds	r3, r7, #6
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	1c0a      	adds	r2, r1, #0
 8004faa:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004fbe:	1dbb      	adds	r3, r7, #6
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	18d3      	adds	r3, r2, r3
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	00d2      	lsls	r2, r2, #3
 8004fca:	4694      	mov	ip, r2
 8004fcc:	4463      	add	r3, ip
 8004fce:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	e018      	b.n	8005008 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	3301      	adds	r3, #1
 8005000:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	3b01      	subs	r3, #1
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e3      	bne.n	8004fd6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	701a      	strb	r2, [r3, #0]
  }
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b00a      	add	sp, #40	; 0x28
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	000a      	movs	r2, r1
 800503e:	1cfb      	adds	r3, r7, #3
 8005040:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005042:	230f      	movs	r3, #15
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	2302      	movs	r3, #2
 800504e:	2203      	movs	r2, #3
 8005050:	2181      	movs	r1, #129	; 0x81
 8005052:	f001 ffbf 	bl	8006fd4 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	2302      	movs	r3, #2
 8005060:	2203      	movs	r2, #3
 8005062:	2101      	movs	r1, #1
 8005064:	f001 ffb6 	bl	8006fd4 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	23ac      	movs	r3, #172	; 0xac
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	2101      	movs	r1, #1
 8005070:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8005072:	2054      	movs	r0, #84	; 0x54
 8005074:	f002 fb0e 	bl	8007694 <malloc>
 8005078:	0003      	movs	r3, r0
 800507a:	0019      	movs	r1, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	23a4      	movs	r3, #164	; 0xa4
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	23a4      	movs	r3, #164	; 0xa4
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	58d3      	ldr	r3, [r2, r3]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <USBD_CUSTOM_HID_Init+0x66>
  {
    ret = 1U;
 8005090:	230f      	movs	r3, #15
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e014      	b.n	80050c4 <USBD_CUSTOM_HID_Init+0x90>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	23a4      	movs	r3, #164	; 0xa4
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	58d3      	ldr	r3, [r2, r3]
 80050a2:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2250      	movs	r2, #80	; 0x50
 80050a8:	2100      	movs	r1, #0
 80050aa:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	23a5      	movs	r3, #165	; 0xa5
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	58d3      	ldr	r3, [r2, r3]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	2101      	movs	r1, #1
 80050c0:	f002 f8d8 	bl	8007274 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80050c4:	230f      	movs	r3, #15
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	781b      	ldrb	r3, [r3, #0]
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	000a      	movs	r2, r1
 80050dc:	1cfb      	adds	r3, r7, #3
 80050de:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2181      	movs	r1, #129	; 0x81
 80050e4:	0018      	movs	r0, r3
 80050e6:	f001 ffac 	bl	8007042 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2101      	movs	r1, #1
 80050f4:	0018      	movs	r0, r3
 80050f6:	f001 ffa4 	bl	8007042 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	23ac      	movs	r3, #172	; 0xac
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	2100      	movs	r1, #0
 8005102:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	23a4      	movs	r3, #164	; 0xa4
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	58d3      	ldr	r3, [r2, r3]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d011      	beq.n	8005134 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	23a5      	movs	r3, #165	; 0xa5
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	58d3      	ldr	r3, [r2, r3]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	23a4      	movs	r3, #164	; 0xa4
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	58d3      	ldr	r3, [r2, r3]
 8005124:	0018      	movs	r0, r3
 8005126:	f002 fabf 	bl	80076a8 <free>
    pdev->pClassData = NULL;
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	23a4      	movs	r3, #164	; 0xa4
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	2100      	movs	r1, #0
 8005132:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b002      	add	sp, #8
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	23a4      	movs	r3, #164	; 0xa4
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	58d3      	ldr	r3, [r2, r3]
 8005152:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005154:	231e      	movs	r3, #30
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	2200      	movs	r2, #0
 800515a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005160:	230e      	movs	r3, #14
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	2200      	movs	r2, #0
 8005166:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005168:	2317      	movs	r3, #23
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	001a      	movs	r2, r3
 8005176:	2360      	movs	r3, #96	; 0x60
 8005178:	4013      	ands	r3, r2
 800517a:	d044      	beq.n	8005206 <USBD_CUSTOM_HID_Setup+0xc6>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d000      	beq.n	8005182 <USBD_CUSTOM_HID_Setup+0x42>
 8005180:	e0d5      	b.n	800532e <USBD_CUSTOM_HID_Setup+0x1ee>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b0b      	cmp	r3, #11
 8005188:	d831      	bhi.n	80051ee <USBD_CUSTOM_HID_Setup+0xae>
 800518a:	009a      	lsls	r2, r3, #2
 800518c:	4b71      	ldr	r3, [pc, #452]	; (8005354 <USBD_CUSTOM_HID_Setup+0x214>)
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	469f      	mov	pc, r3
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	885b      	ldrh	r3, [r3, #2]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	001a      	movs	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051a0:	e030      	b.n	8005204 <USBD_CUSTOM_HID_Setup+0xc4>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3340      	adds	r3, #64	; 0x40
 80051a6:	0019      	movs	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	0018      	movs	r0, r3
 80051ae:	f001 fa5b 	bl	8006668 <USBD_CtlSendData>
      break;
 80051b2:	e027      	b.n	8005204 <USBD_CUSTOM_HID_Setup+0xc4>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	885b      	ldrh	r3, [r3, #2]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	001a      	movs	r2, r3
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80051c4:	e01e      	b.n	8005204 <USBD_CUSTOM_HID_Setup+0xc4>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3344      	adds	r3, #68	; 0x44
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	0018      	movs	r0, r3
 80051d2:	f001 fa49 	bl	8006668 <USBD_CtlSendData>
      break;
 80051d6:	e015      	b.n	8005204 <USBD_CUSTOM_HID_Setup+0xc4>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2201      	movs	r2, #1
 80051dc:	64da      	str	r2, [r3, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	88da      	ldrh	r2, [r3, #6]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f001 fa71 	bl	80066ce <USBD_CtlPrepareRx>
      break;
 80051ec:	e00a      	b.n	8005204 <USBD_CUSTOM_HID_Setup+0xc4>

    default:
      USBD_CtlError (pdev, req);
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	0011      	movs	r1, r2
 80051f4:	0018      	movs	r0, r3
 80051f6:	f001 f9b8 	bl	800656a <USBD_CtlError>
      ret = USBD_FAIL;
 80051fa:	2317      	movs	r3, #23
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2202      	movs	r2, #2
 8005200:	701a      	strb	r2, [r3, #0]
      break;
 8005202:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8005204:	e09e      	b.n	8005344 <USBD_CUSTOM_HID_Setup+0x204>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b06      	cmp	r3, #6
 800520c:	d021      	beq.n	8005252 <USBD_CUSTOM_HID_Setup+0x112>
 800520e:	dc02      	bgt.n	8005216 <USBD_CUSTOM_HID_Setup+0xd6>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <USBD_CUSTOM_HID_Setup+0xe0>
 8005214:	e07f      	b.n	8005316 <USBD_CUSTOM_HID_Setup+0x1d6>
 8005216:	2b0a      	cmp	r3, #10
 8005218:	d04b      	beq.n	80052b2 <USBD_CUSTOM_HID_Setup+0x172>
 800521a:	2b0b      	cmp	r3, #11
 800521c:	d063      	beq.n	80052e6 <USBD_CUSTOM_HID_Setup+0x1a6>
 800521e:	e07a      	b.n	8005316 <USBD_CUSTOM_HID_Setup+0x1d6>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	239d      	movs	r3, #157	; 0x9d
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d107      	bne.n	800523c <USBD_CUSTOM_HID_Setup+0xfc>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800522c:	230e      	movs	r3, #14
 800522e:	18f9      	adds	r1, r7, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	0018      	movs	r0, r3
 8005236:	f001 fa17 	bl	8006668 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800523a:	e077      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>
        USBD_CtlError (pdev, req);
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0011      	movs	r1, r2
 8005242:	0018      	movs	r0, r3
 8005244:	f001 f991 	bl	800656a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005248:	2317      	movs	r3, #23
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2202      	movs	r2, #2
 800524e:	701a      	strb	r2, [r3, #0]
      break;
 8005250:	e06c      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	885b      	ldrh	r3, [r3, #2]
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d10f      	bne.n	800527e <USBD_CUSTOM_HID_Setup+0x13e>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	88db      	ldrh	r3, [r3, #6]
 8005262:	221e      	movs	r2, #30
 8005264:	18ba      	adds	r2, r7, r2
 8005266:	b299      	uxth	r1, r3
 8005268:	2921      	cmp	r1, #33	; 0x21
 800526a:	d900      	bls.n	800526e <USBD_CUSTOM_HID_Setup+0x12e>
 800526c:	2321      	movs	r3, #33	; 0x21
 800526e:	8013      	strh	r3, [r2, #0]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	23a5      	movs	r3, #165	; 0xa5
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	58d3      	ldr	r3, [r2, r3]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e010      	b.n	80052a0 <USBD_CUSTOM_HID_Setup+0x160>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	885b      	ldrh	r3, [r3, #2]
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b21      	cmp	r3, #33	; 0x21
 8005288:	d10a      	bne.n	80052a0 <USBD_CUSTOM_HID_Setup+0x160>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800528a:	4b33      	ldr	r3, [pc, #204]	; (8005358 <USBD_CUSTOM_HID_Setup+0x218>)
 800528c:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	88db      	ldrh	r3, [r3, #6]
 8005292:	221e      	movs	r2, #30
 8005294:	18ba      	adds	r2, r7, r2
 8005296:	b299      	uxth	r1, r3
 8005298:	2909      	cmp	r1, #9
 800529a:	d900      	bls.n	800529e <USBD_CUSTOM_HID_Setup+0x15e>
 800529c:	2309      	movs	r3, #9
 800529e:	8013      	strh	r3, [r2, #0]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80052a0:	231e      	movs	r3, #30
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	881a      	ldrh	r2, [r3, #0]
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f001 f9dc 	bl	8006668 <USBD_CtlSendData>
      break;
 80052b0:	e03c      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	239d      	movs	r3, #157	; 0x9d
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	5cd3      	ldrb	r3, [r2, r3]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d108      	bne.n	80052d0 <USBD_CUSTOM_HID_Setup+0x190>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	3348      	adds	r3, #72	; 0x48
 80052c2:	0019      	movs	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	0018      	movs	r0, r3
 80052ca:	f001 f9cd 	bl	8006668 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80052ce:	e02d      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>
        USBD_CtlError (pdev, req);
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0011      	movs	r1, r2
 80052d6:	0018      	movs	r0, r3
 80052d8:	f001 f947 	bl	800656a <USBD_CtlError>
			  ret = USBD_FAIL;
 80052dc:	2317      	movs	r3, #23
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	2202      	movs	r2, #2
 80052e2:	701a      	strb	r2, [r3, #0]
      break;
 80052e4:	e022      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	239d      	movs	r3, #157	; 0x9d
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d106      	bne.n	8005300 <USBD_CUSTOM_HID_Setup+0x1c0>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	885b      	ldrh	r3, [r3, #2]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	001a      	movs	r2, r3
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	649a      	str	r2, [r3, #72]	; 0x48
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80052fe:	e015      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>
        USBD_CtlError (pdev, req);
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0011      	movs	r1, r2
 8005306:	0018      	movs	r0, r3
 8005308:	f001 f92f 	bl	800656a <USBD_CtlError>
			  ret = USBD_FAIL;
 800530c:	2317      	movs	r3, #23
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	2202      	movs	r2, #2
 8005312:	701a      	strb	r2, [r3, #0]
      break;
 8005314:	e00a      	b.n	800532c <USBD_CUSTOM_HID_Setup+0x1ec>

    default:
      USBD_CtlError (pdev, req);
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f001 f924 	bl	800656a <USBD_CtlError>
      ret = USBD_FAIL;
 8005322:	2317      	movs	r3, #23
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2202      	movs	r2, #2
 8005328:	701a      	strb	r2, [r3, #0]
      break;
 800532a:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800532c:	e00a      	b.n	8005344 <USBD_CUSTOM_HID_Setup+0x204>

  default:
    USBD_CtlError (pdev, req);
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0011      	movs	r1, r2
 8005334:	0018      	movs	r0, r3
 8005336:	f001 f918 	bl	800656a <USBD_CtlError>
    ret = USBD_FAIL;
 800533a:	2317      	movs	r3, #23
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
    break;
 8005342:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8005344:	2317      	movs	r3, #23
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	781b      	ldrb	r3, [r3, #0]
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b008      	add	sp, #32
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	080078bc 	.word	0x080078bc
 8005358:	200000c4 	.word	0x200000c4

0800535c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2229      	movs	r2, #41	; 0x29
 8005368:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800536a:	4b02      	ldr	r3, [pc, #8]	; (8005374 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000040 	.word	0x20000040

08005378 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2229      	movs	r2, #41	; 0x29
 8005384:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8005386:	4b02      	ldr	r3, [pc, #8]	; (8005390 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000006c 	.word	0x2000006c

08005394 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2229      	movs	r2, #41	; 0x29
 80053a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80053a2:	4b02      	ldr	r3, [pc, #8]	; (80053ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000098 	.word	0x20000098

080053b0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	000a      	movs	r2, r1
 80053ba:	1cfb      	adds	r3, r7, #3
 80053bc:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	23a4      	movs	r3, #164	; 0xa4
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	58d3      	ldr	r3, [r2, r3]
 80053c6:	2250      	movs	r2, #80	; 0x50
 80053c8:	2100      	movs	r1, #0
 80053ca:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b002      	add	sp, #8
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	000a      	movs	r2, r1
 80053e0:	1cfb      	adds	r3, r7, #3
 80053e2:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	23a4      	movs	r3, #164	; 0xa4
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	58d3      	ldr	r3, [r2, r3]
 80053ec:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	23a5      	movs	r3, #165	; 0xa5
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	58d3      	ldr	r3, [r2, r3]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	7810      	ldrb	r0, [r2, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	7852      	ldrb	r2, [r2, #1]
 8005400:	0011      	movs	r1, r2
 8005402:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	2101      	movs	r1, #1
 800540c:	f001 ff32 	bl	8007274 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	0018      	movs	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	b004      	add	sp, #16
 8005418:	bd80      	pop	{r7, pc}

0800541a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	23a4      	movs	r3, #164	; 0xa4
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	58d3      	ldr	r3, [r2, r3]
 800542a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10d      	bne.n	8005450 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	23a5      	movs	r3, #165	; 0xa5
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	58d3      	ldr	r3, [r2, r3]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	7810      	ldrb	r0, [r2, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	7852      	ldrb	r2, [r2, #1]
 8005446:	0011      	movs	r1, r2
 8005448:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b004      	add	sp, #16
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	220a      	movs	r2, #10
 8005468:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800546a:	4b02      	ldr	r3, [pc, #8]	; (8005474 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}
 8005474:	200000d0 	.word	0x200000d0

08005478 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005482:	230f      	movs	r3, #15
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2202      	movs	r2, #2
 8005488:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <USBD_CUSTOM_HID_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	23a5      	movs	r3, #165	; 0xa5
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800549a:	230f      	movs	r3, #15
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80054a2:	230f      	movs	r3, #15
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	781b      	ldrb	r3, [r3, #0]
}
 80054a8:	0018      	movs	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b004      	add	sp, #16
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	1dfb      	adds	r3, r7, #7
 80054bc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054c4:	2302      	movs	r3, #2
 80054c6:	e020      	b.n	800550a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	23a3      	movs	r3, #163	; 0xa3
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	58d3      	ldr	r3, [r2, r3]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	23a3      	movs	r3, #163	; 0xa3
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	2100      	movs	r1, #0
 80054dc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	23a2      	movs	r3, #162	; 0xa2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	239d      	movs	r3, #157	; 0x9d
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	2101      	movs	r1, #1
 80054f6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1dfa      	adds	r2, r7, #7
 80054fc:	7812      	ldrb	r2, [r2, #0]
 80054fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	0018      	movs	r0, r3
 8005504:	f001 fce8 	bl	8006ed8 <USBD_LL_Init>

  return USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b004      	add	sp, #16
 8005510:	bd80      	pop	{r7, pc}

08005512 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800551c:	230f      	movs	r3, #15
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	23a3      	movs	r3, #163	; 0xa3
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005534:	230f      	movs	r3, #15
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	e003      	b.n	8005546 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800553e:	230f      	movs	r3, #15
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2202      	movs	r2, #2
 8005544:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005546:	230f      	movs	r3, #15
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	781b      	ldrb	r3, [r3, #0]
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b004      	add	sp, #16
 8005552:	bd80      	pop	{r7, pc}

08005554 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0018      	movs	r0, r3
 8005560:	f001 fd12 	bl	8006f88 <USBD_LL_Start>

  return USBD_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b002      	add	sp, #8
 800556c:	bd80      	pop	{r7, pc}

0800556e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b002      	add	sp, #8
 800557e:	bd80      	pop	{r7, pc}

08005580 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	000a      	movs	r2, r1
 800558a:	1cfb      	adds	r3, r7, #3
 800558c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800558e:	230f      	movs	r3, #15
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	23a3      	movs	r3, #163	; 0xa3
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	58d3      	ldr	r3, [r2, r3]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00f      	beq.n	80055c2 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	23a3      	movs	r3, #163	; 0xa3
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	58d3      	ldr	r3, [r2, r3]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	1cfa      	adds	r2, r7, #3
 80055ae:	7811      	ldrb	r1, [r2, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	0010      	movs	r0, r2
 80055b4:	4798      	blx	r3
 80055b6:	1e03      	subs	r3, r0, #0
 80055b8:	d103      	bne.n	80055c2 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 80055ba:	230f      	movs	r3, #15
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80055c2:	230f      	movs	r3, #15
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	781b      	ldrb	r3, [r3, #0]
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b004      	add	sp, #16
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	000a      	movs	r2, r1
 80055da:	1cfb      	adds	r3, r7, #3
 80055dc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	23a3      	movs	r3, #163	; 0xa3
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	58d3      	ldr	r3, [r2, r3]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	1cfa      	adds	r2, r7, #3
 80055ea:	7811      	ldrb	r1, [r2, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	0010      	movs	r0, r2
 80055f0:	4798      	blx	r3
  return USBD_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	22a0      	movs	r2, #160	; 0xa0
 800560a:	0092      	lsls	r2, r2, #2
 800560c:	4694      	mov	ip, r2
 800560e:	4463      	add	r3, ip
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	0011      	movs	r1, r2
 8005614:	0018      	movs	r0, r3
 8005616:	f000 ff6d 	bl	80064f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	239b      	movs	r3, #155	; 0x9b
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	2101      	movs	r1, #1
 8005622:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <USBD_LL_SetupStage+0xb4>)
 8005628:	5a9b      	ldrh	r3, [r3, r2]
 800562a:	0019      	movs	r1, r3
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	239c      	movs	r3, #156	; 0x9c
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	23a0      	movs	r3, #160	; 0xa0
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	001a      	movs	r2, r3
 800563e:	231f      	movs	r3, #31
 8005640:	4013      	ands	r3, r2
 8005642:	2b01      	cmp	r3, #1
 8005644:	d00d      	beq.n	8005662 <USBD_LL_SetupStage+0x66>
 8005646:	d302      	bcc.n	800564e <USBD_LL_SetupStage+0x52>
 8005648:	2b02      	cmp	r3, #2
 800564a:	d014      	beq.n	8005676 <USBD_LL_SetupStage+0x7a>
 800564c:	e01d      	b.n	800568a <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	22a0      	movs	r2, #160	; 0xa0
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	189a      	adds	r2, r3, r2
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0011      	movs	r1, r2
 800565a:	0018      	movs	r0, r3
 800565c:	f000 fa0a 	bl	8005a74 <USBD_StdDevReq>
    break;
 8005660:	e020      	b.n	80056a4 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	22a0      	movs	r2, #160	; 0xa0
 8005666:	0092      	lsls	r2, r2, #2
 8005668:	189a      	adds	r2, r3, r2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f000 fa72 	bl	8005b58 <USBD_StdItfReq>
    break;
 8005674:	e016      	b.n	80056a4 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	22a0      	movs	r2, #160	; 0xa0
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	189a      	adds	r2, r3, r2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0011      	movs	r1, r2
 8005682:	0018      	movs	r0, r3
 8005684:	f000 fabf 	bl	8005c06 <USBD_StdEPReq>
    break;
 8005688:	e00c      	b.n	80056a4 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	23a0      	movs	r3, #160	; 0xa0
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	5cd3      	ldrb	r3, [r2, r3]
 8005692:	227f      	movs	r2, #127	; 0x7f
 8005694:	4393      	bics	r3, r2
 8005696:	b2da      	uxtb	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	0011      	movs	r1, r2
 800569c:	0018      	movs	r0, r3
 800569e:	f001 fcfc 	bl	800709a <USBD_LL_StallEP>
    break;
 80056a2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b002      	add	sp, #8
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	00000286 	.word	0x00000286

080056b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	200b      	movs	r0, #11
 80056c0:	183b      	adds	r3, r7, r0
 80056c2:	1c0a      	adds	r2, r1, #0
 80056c4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80056c6:	183b      	adds	r3, r7, r0
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d154      	bne.n	8005778 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3341      	adds	r3, #65	; 0x41
 80056d2:	33ff      	adds	r3, #255	; 0xff
 80056d4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	239b      	movs	r3, #155	; 0x9b
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	58d3      	ldr	r3, [r2, r3]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d139      	bne.n	8005756 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d919      	bls.n	8005722 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005704:	429a      	cmp	r2, r3
 8005706:	d203      	bcs.n	8005710 <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800570c:	b29b      	uxth	r3, r3
 800570e:	e002      	b.n	8005716 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005714:	b29b      	uxth	r3, r3
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	001a      	movs	r2, r3
 800571c:	f000 fffb 	bl	8006716 <USBD_CtlContinueRx>
 8005720:	e045      	b.n	80057ae <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	23a3      	movs	r3, #163	; 0xa3
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	58d3      	ldr	r3, [r2, r3]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	239d      	movs	r3, #157	; 0x9d
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005738:	2b03      	cmp	r3, #3
 800573a:	d107      	bne.n	800574c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	23a3      	movs	r3, #163	; 0xa3
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	58d3      	ldr	r3, [r2, r3]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	0010      	movs	r0, r2
 800574a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fff4 	bl	800673c <USBD_CtlSendStatus>
 8005754:	e02b      	b.n	80057ae <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	239b      	movs	r3, #155	; 0x9b
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	58d3      	ldr	r3, [r2, r3]
 800575e:	2b05      	cmp	r3, #5
 8005760:	d125      	bne.n	80057ae <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	239b      	movs	r3, #155	; 0x9b
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	2100      	movs	r1, #0
 800576a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2100      	movs	r1, #0
 8005770:	0018      	movs	r0, r3
 8005772:	f001 fc92 	bl	800709a <USBD_LL_StallEP>
 8005776:	e01a      	b.n	80057ae <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	23a3      	movs	r3, #163	; 0xa3
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	58d3      	ldr	r3, [r2, r3]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d011      	beq.n	80057aa <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	239d      	movs	r3, #157	; 0x9d
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 800578e:	2b03      	cmp	r3, #3
 8005790:	d10b      	bne.n	80057aa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	23a3      	movs	r3, #163	; 0xa3
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	58d3      	ldr	r3, [r2, r3]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	220b      	movs	r2, #11
 800579e:	18ba      	adds	r2, r7, r2
 80057a0:	7811      	ldrb	r1, [r2, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	0010      	movs	r0, r2
 80057a6:	4798      	blx	r3
 80057a8:	e001      	b.n	80057ae <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80057aa:	2302      	movs	r3, #2
 80057ac:	e000      	b.n	80057b0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b006      	add	sp, #24
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	200b      	movs	r0, #11
 80057c4:	183b      	adds	r3, r7, r0
 80057c6:	1c0a      	adds	r2, r1, #0
 80057c8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80057ca:	183b      	adds	r3, r7, r0
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d000      	beq.n	80057d4 <USBD_LL_DataInStage+0x1c>
 80057d2:	e08e      	b.n	80058f2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3314      	adds	r3, #20
 80057d8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	239b      	movs	r3, #155	; 0x9b
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	58d3      	ldr	r3, [r2, r3]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d164      	bne.n	80058b0 <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d915      	bls.n	800581e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	b29a      	uxth	r2, r3
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 ff4c 	bl	80066a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	2300      	movs	r3, #0
 8005814:	2200      	movs	r2, #0
 8005816:	2100      	movs	r1, #0
 8005818:	f001 fd2c 	bl	8007274 <USBD_LL_PrepareReceive>
 800581c:	e059      	b.n	80058d2 <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	0019      	movs	r1, r3
 8005828:	0010      	movs	r0, r2
 800582a:	f7fa fcf3 	bl	8000214 <__aeabi_uidivmod>
 800582e:	1e0b      	subs	r3, r1, #0
 8005830:	d11f      	bne.n	8005872 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800583a:	429a      	cmp	r2, r3
 800583c:	d319      	bcc.n	8005872 <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	239c      	movs	r3, #156	; 0x9c
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800584a:	429a      	cmp	r2, r3
 800584c:	d211      	bcs.n	8005872 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	0018      	movs	r0, r3
 8005856:	f000 ff27 	bl	80066a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	239c      	movs	r3, #156	; 0x9c
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	2100      	movs	r1, #0
 8005862:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	2300      	movs	r3, #0
 8005868:	2200      	movs	r2, #0
 800586a:	2100      	movs	r1, #0
 800586c:	f001 fd02 	bl	8007274 <USBD_LL_PrepareReceive>
 8005870:	e02f      	b.n	80058d2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	23a3      	movs	r3, #163	; 0xa3
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	58d3      	ldr	r3, [r2, r3]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00d      	beq.n	800589c <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	239d      	movs	r3, #157	; 0x9d
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005888:	2b03      	cmp	r3, #3
 800588a:	d107      	bne.n	800589c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	23a3      	movs	r3, #163	; 0xa3
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	58d3      	ldr	r3, [r2, r3]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	0010      	movs	r0, r2
 800589a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2180      	movs	r1, #128	; 0x80
 80058a0:	0018      	movs	r0, r3
 80058a2:	f001 fbfa 	bl	800709a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 ff5b 	bl	8006764 <USBD_CtlReceiveStatus>
 80058ae:	e010      	b.n	80058d2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	239b      	movs	r3, #155	; 0x9b
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	58d3      	ldr	r3, [r2, r3]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d005      	beq.n	80058c8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	239b      	movs	r3, #155	; 0x9b
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	0018      	movs	r0, r3
 80058ce:	f001 fbe4 	bl	800709a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	239e      	movs	r3, #158	; 0x9e
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	5cd3      	ldrb	r3, [r2, r3]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d124      	bne.n	8005928 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f7ff fe44 	bl	800556e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	239e      	movs	r3, #158	; 0x9e
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	2100      	movs	r1, #0
 80058ee:	54d1      	strb	r1, [r2, r3]
 80058f0:	e01a      	b.n	8005928 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	23a3      	movs	r3, #163	; 0xa3
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	58d3      	ldr	r3, [r2, r3]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d011      	beq.n	8005924 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	239d      	movs	r3, #157	; 0x9d
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 8005908:	2b03      	cmp	r3, #3
 800590a:	d10b      	bne.n	8005924 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	23a3      	movs	r3, #163	; 0xa3
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	58d3      	ldr	r3, [r2, r3]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	220b      	movs	r2, #11
 8005918:	18ba      	adds	r2, r7, r2
 800591a:	7811      	ldrb	r1, [r2, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	0010      	movs	r0, r2
 8005920:	4798      	blx	r3
 8005922:	e001      	b.n	8005928 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005924:	2302      	movs	r3, #2
 8005926:	e000      	b.n	800592a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b006      	add	sp, #24
 8005930:	bd80      	pop	{r7, pc}

08005932 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	2340      	movs	r3, #64	; 0x40
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	f001 fb47 	bl	8006fd4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	23a2      	movs	r3, #162	; 0xa2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	2101      	movs	r1, #1
 800594e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	23a8      	movs	r3, #168	; 0xa8
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2140      	movs	r1, #64	; 0x40
 8005958:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	2200      	movs	r2, #0
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	f001 fb37 	bl	8006fd4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2240      	movs	r2, #64	; 0x40
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	239d      	movs	r3, #157	; 0x9d
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	2101      	movs	r1, #1
 800597a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	239b      	movs	r3, #155	; 0x9b
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	2100      	movs	r1, #0
 8005984:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	239f      	movs	r3, #159	; 0x9f
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	2100      	movs	r1, #0
 8005994:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	23a4      	movs	r3, #164	; 0xa4
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	58d3      	ldr	r3, [r2, r3]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	23a3      	movs	r3, #163	; 0xa3
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	58d3      	ldr	r3, [r2, r3]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	b2d9      	uxtb	r1, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	0018      	movs	r0, r3
 80059b6:	4790      	blx	r2
  }

  return USBD_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b002      	add	sp, #8
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	000a      	movs	r2, r1
 80059cc:	1cfb      	adds	r3, r7, #3
 80059ce:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	1cfa      	adds	r2, r7, #3
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b002      	add	sp, #8
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	239d      	movs	r3, #157	; 0x9d
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	5cd1      	ldrb	r1, [r2, r3]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <USBD_LL_Suspend+0x2c>)
 80059f8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	239d      	movs	r3, #157	; 0x9d
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	2104      	movs	r1, #4
 8005a02:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b002      	add	sp, #8
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	00000275 	.word	0x00000275

08005a14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <USBD_LL_Resume+0x20>)
 8005a20:	5c99      	ldrb	r1, [r3, r2]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	239d      	movs	r3, #157	; 0x9d
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b002      	add	sp, #8
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	00000275 	.word	0x00000275

08005a38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	239d      	movs	r3, #157	; 0x9d
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	5cd3      	ldrb	r3, [r2, r3]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d10e      	bne.n	8005a6a <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	23a3      	movs	r3, #163	; 0xa3
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	58d3      	ldr	r3, [r2, r3]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	23a3      	movs	r3, #163	; 0xa3
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	58d3      	ldr	r3, [r2, r3]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	0010      	movs	r0, r2
 8005a68:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7e:	230f      	movs	r3, #15
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	2360      	movs	r3, #96	; 0x60
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d004      	beq.n	8005a9e <USBD_StdDevReq+0x2a>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d002      	beq.n	8005a9e <USBD_StdDevReq+0x2a>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <USBD_StdDevReq+0x3e>
 8005a9c:	e04b      	b.n	8005b36 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	23a3      	movs	r3, #163	; 0xa3
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	58d3      	ldr	r3, [r2, r3]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	0010      	movs	r0, r2
 8005aae:	4798      	blx	r3
    break;
 8005ab0:	e048      	b.n	8005b44 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b09      	cmp	r3, #9
 8005ab8:	d835      	bhi.n	8005b26 <USBD_StdDevReq+0xb2>
 8005aba:	009a      	lsls	r2, r3, #2
 8005abc:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <USBD_StdDevReq+0xe0>)
 8005abe:	18d3      	adds	r3, r2, r3
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0011      	movs	r1, r2
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 fa58 	bl	8005f80 <USBD_GetDescriptor>
      break;
 8005ad0:	e030      	b.n	8005b34 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0011      	movs	r1, r2
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f000 fb63 	bl	80061a4 <USBD_SetAddress>
      break;
 8005ade:	e029      	b.n	8005b34 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0011      	movs	r1, r2
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 fbb0 	bl	800624c <USBD_SetConfig>
      break;
 8005aec:	e022      	b.n	8005b34 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	0011      	movs	r1, r2
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 fc4d 	bl	8006394 <USBD_GetConfig>
      break;
 8005afa:	e01b      	b.n	8005b34 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0011      	movs	r1, r2
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 fc80 	bl	8006408 <USBD_GetStatus>
      break;
 8005b08:	e014      	b.n	8005b34 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	0011      	movs	r1, r2
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 fcb3 	bl	800647c <USBD_SetFeature>
      break;
 8005b16:	e00d      	b.n	8005b34 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	0011      	movs	r1, r2
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f000 fcc2 	bl	80064a8 <USBD_ClrFeature>
      break;
 8005b24:	e006      	b.n	8005b34 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	0011      	movs	r1, r2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 fd1c 	bl	800656a <USBD_CtlError>
      break;
 8005b32:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8005b34:	e006      	b.n	8005b44 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 fd14 	bl	800656a <USBD_CtlError>
    break;
 8005b42:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005b44:	230f      	movs	r3, #15
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	781b      	ldrb	r3, [r3, #0]
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	080078ec 	.word	0x080078ec

08005b58 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b62:	230f      	movs	r3, #15
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	001a      	movs	r2, r3
 8005b70:	2360      	movs	r3, #96	; 0x60
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d003      	beq.n	8005b80 <USBD_StdItfReq+0x28>
 8005b78:	2b40      	cmp	r3, #64	; 0x40
 8005b7a:	d001      	beq.n	8005b80 <USBD_StdItfReq+0x28>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d136      	bne.n	8005bee <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	239d      	movs	r3, #157	; 0x9d
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d826      	bhi.n	8005bdc <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d81a      	bhi.n	8005bce <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	23a3      	movs	r3, #163	; 0xa3
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	58d3      	ldr	r3, [r2, r3]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	18bc      	adds	r4, r7, r2
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	0010      	movs	r0, r2
 8005bac:	4798      	blx	r3
 8005bae:	0003      	movs	r3, r0
 8005bb0:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	88db      	ldrh	r3, [r3, #6]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d117      	bne.n	8005bea <USBD_StdItfReq+0x92>
 8005bba:	230f      	movs	r3, #15
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d112      	bne.n	8005bea <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 fdb8 	bl	800673c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005bcc:	e00d      	b.n	8005bea <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	0011      	movs	r1, r2
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 fcc8 	bl	800656a <USBD_CtlError>
      break;
 8005bda:	e006      	b.n	8005bea <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0011      	movs	r1, r2
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 fcc1 	bl	800656a <USBD_CtlError>
      break;
 8005be8:	e000      	b.n	8005bec <USBD_StdItfReq+0x94>
      break;
 8005bea:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8005bec:	e006      	b.n	8005bfc <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0011      	movs	r1, r2
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 fcb8 	bl	800656a <USBD_CtlError>
    break;
 8005bfa:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b005      	add	sp, #20
 8005c04:	bd90      	pop	{r4, r7, pc}

08005c06 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005c06:	b5b0      	push	{r4, r5, r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c10:	230f      	movs	r3, #15
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	889a      	ldrh	r2, [r3, #4]
 8005c1c:	230e      	movs	r3, #14
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	001a      	movs	r2, r3
 8005c28:	2360      	movs	r3, #96	; 0x60
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d004      	beq.n	8005c3a <USBD_StdEPReq+0x34>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d002      	beq.n	8005c3a <USBD_StdEPReq+0x34>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <USBD_StdEPReq+0x48>
 8005c38:	e193      	b.n	8005f62 <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	23a3      	movs	r3, #163	; 0xa3
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	58d3      	ldr	r3, [r2, r3]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	0010      	movs	r0, r2
 8005c4a:	4798      	blx	r3
    break;
 8005c4c:	e190      	b.n	8005f70 <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	001a      	movs	r2, r3
 8005c54:	2360      	movs	r3, #96	; 0x60
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d10f      	bne.n	8005c7c <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	23a3      	movs	r3, #163	; 0xa3
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	58d3      	ldr	r3, [r2, r3]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	250f      	movs	r5, #15
 8005c68:	197c      	adds	r4, r7, r5
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	0010      	movs	r0, r2
 8005c70:	4798      	blx	r3
 8005c72:	0003      	movs	r3, r0
 8005c74:	7023      	strb	r3, [r4, #0]

      return ret;
 8005c76:	197b      	adds	r3, r7, r5
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	e17c      	b.n	8005f76 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d054      	beq.n	8005d2e <USBD_StdEPReq+0x128>
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d003      	beq.n	8005c90 <USBD_StdEPReq+0x8a>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d100      	bne.n	8005c8e <USBD_StdEPReq+0x88>
 8005c8c:	e097      	b.n	8005dbe <USBD_StdEPReq+0x1b8>
 8005c8e:	e160      	b.n	8005f52 <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	239d      	movs	r3, #157	; 0x9d
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	5cd3      	ldrb	r3, [r2, r3]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d002      	beq.n	8005ca2 <USBD_StdEPReq+0x9c>
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d01f      	beq.n	8005ce0 <USBD_StdEPReq+0xda>
 8005ca0:	e03d      	b.n	8005d1e <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ca2:	230e      	movs	r3, #14
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d012      	beq.n	8005cd2 <USBD_StdEPReq+0xcc>
 8005cac:	230e      	movs	r3, #14
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b80      	cmp	r3, #128	; 0x80
 8005cb4:	d00d      	beq.n	8005cd2 <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005cb6:	230e      	movs	r3, #14
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0011      	movs	r1, r2
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f001 f9ea 	bl	800709a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f001 f9e5 	bl	800709a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005cd0:	e02c      	b.n	8005d2c <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	0011      	movs	r1, r2
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f000 fc46 	bl	800656a <USBD_CtlError>
        break;
 8005cde:	e025      	b.n	8005d2c <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	885b      	ldrh	r3, [r3, #2]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d115      	bne.n	8005d14 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ce8:	230e      	movs	r3, #14
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d010      	beq.n	8005d14 <USBD_StdEPReq+0x10e>
 8005cf2:	230e      	movs	r3, #14
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d00b      	beq.n	8005d14 <USBD_StdEPReq+0x10e>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	88db      	ldrh	r3, [r3, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d107      	bne.n	8005d14 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005d04:	230e      	movs	r3, #14
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	0011      	movs	r1, r2
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f001 f9c3 	bl	800709a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 fd10 	bl	800673c <USBD_CtlSendStatus>

        break;
 8005d1c:	e006      	b.n	8005d2c <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 fc20 	bl	800656a <USBD_CtlError>
        break;
 8005d2a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005d2c:	e118      	b.n	8005f60 <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	239d      	movs	r3, #157	; 0x9d
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	5cd3      	ldrb	r3, [r2, r3]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d002      	beq.n	8005d40 <USBD_StdEPReq+0x13a>
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d01f      	beq.n	8005d7e <USBD_StdEPReq+0x178>
 8005d3e:	e035      	b.n	8005dac <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d40:	230e      	movs	r3, #14
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <USBD_StdEPReq+0x16a>
 8005d4a:	230e      	movs	r3, #14
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	d00d      	beq.n	8005d70 <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005d54:	230e      	movs	r3, #14
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f001 f99b 	bl	800709a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f001 f996 	bl	800709a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005d6e:	e025      	b.n	8005dbc <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	0011      	movs	r1, r2
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 fbf7 	bl	800656a <USBD_CtlError>
        break;
 8005d7c:	e01e      	b.n	8005dbc <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	885b      	ldrh	r3, [r3, #2]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005d86:	230e      	movs	r3, #14
 8005d88:	18fb      	adds	r3, r7, r3
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	227f      	movs	r2, #127	; 0x7f
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d007      	beq.n	8005da2 <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d92:	230e      	movs	r3, #14
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	0011      	movs	r1, r2
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f001 f9a8 	bl	80070f2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 fcc9 	bl	800673c <USBD_CtlSendStatus>
        }
        break;
 8005daa:	e006      	b.n	8005dba <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0011      	movs	r1, r2
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 fbd9 	bl	800656a <USBD_CtlError>
        break;
 8005db8:	e000      	b.n	8005dbc <USBD_StdEPReq+0x1b6>
        break;
 8005dba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005dbc:	e0d0      	b.n	8005f60 <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	239d      	movs	r3, #157	; 0x9d
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	5cd3      	ldrb	r3, [r2, r3]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d002      	beq.n	8005dd0 <USBD_StdEPReq+0x1ca>
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d03d      	beq.n	8005e4a <USBD_StdEPReq+0x244>
 8005dce:	e0b8      	b.n	8005f42 <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dd0:	230e      	movs	r3, #14
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <USBD_StdEPReq+0x1ec>
 8005dda:	230e      	movs	r3, #14
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b80      	cmp	r3, #128	; 0x80
 8005de2:	d006      	beq.n	8005df2 <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	0011      	movs	r1, r2
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 fbbd 	bl	800656a <USBD_CtlError>
          break;
 8005df0:	e0ae      	b.n	8005f50 <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005df2:	230e      	movs	r3, #14
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da0d      	bge.n	8005e1a <USBD_StdEPReq+0x214>
 8005dfe:	230e      	movs	r3, #14
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	227f      	movs	r2, #127	; 0x7f
 8005e06:	401a      	ands	r2, r3
 8005e08:	0013      	movs	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	189b      	adds	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	3310      	adds	r3, #16
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	18d3      	adds	r3, r2, r3
 8005e16:	3304      	adds	r3, #4
 8005e18:	e00c      	b.n	8005e34 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005e1a:	230e      	movs	r3, #14
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	227f      	movs	r2, #127	; 0x7f
 8005e22:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005e24:	0013      	movs	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	189b      	adds	r3, r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	3341      	adds	r3, #65	; 0x41
 8005e2e:	33ff      	adds	r3, #255	; 0xff
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	18d3      	adds	r3, r2, r3
 8005e34:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 fc10 	bl	8006668 <USBD_CtlSendData>
          break;
 8005e48:	e082      	b.n	8005f50 <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005e4a:	230e      	movs	r3, #14
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da15      	bge.n	8005e82 <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e56:	230e      	movs	r3, #14
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	220f      	movs	r2, #15
 8005e5e:	401a      	ands	r2, r3
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	0013      	movs	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	18cb      	adds	r3, r1, r3
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11e      	bne.n	8005eb2 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 fb75 	bl	800656a <USBD_CtlError>
            break;
 8005e80:	e066      	b.n	8005f50 <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e82:	230e      	movs	r3, #14
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	220f      	movs	r2, #15
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	23a2      	movs	r3, #162	; 0xa2
 8005e90:	0059      	lsls	r1, r3, #1
 8005e92:	0013      	movs	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	189b      	adds	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	18c3      	adds	r3, r0, r3
 8005e9c:	185b      	adds	r3, r3, r1
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0011      	movs	r1, r2
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 fb5d 	bl	800656a <USBD_CtlError>
            break;
 8005eb0:	e04e      	b.n	8005f50 <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005eb2:	230e      	movs	r3, #14
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da0d      	bge.n	8005eda <USBD_StdEPReq+0x2d4>
 8005ebe:	230e      	movs	r3, #14
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	227f      	movs	r2, #127	; 0x7f
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	0013      	movs	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	189b      	adds	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	18d3      	adds	r3, r2, r3
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	e00c      	b.n	8005ef4 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005eda:	230e      	movs	r3, #14
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	227f      	movs	r2, #127	; 0x7f
 8005ee2:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	189b      	adds	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	3341      	adds	r3, #65	; 0x41
 8005eee:	33ff      	adds	r3, #255	; 0xff
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ef6:	230e      	movs	r3, #14
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <USBD_StdEPReq+0x304>
 8005f00:	230e      	movs	r3, #14
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b80      	cmp	r3, #128	; 0x80
 8005f08:	d103      	bne.n	8005f12 <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e010      	b.n	8005f34 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005f12:	230e      	movs	r3, #14
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	781a      	ldrb	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f001 f914 	bl	800714a <USBD_LL_IsStallEP>
 8005f22:	1e03      	subs	r3, r0, #0
 8005f24:	d003      	beq.n	8005f2e <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e002      	b.n	8005f34 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 fb94 	bl	8006668 <USBD_CtlSendData>
          break;
 8005f40:	e006      	b.n	8005f50 <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	0011      	movs	r1, r2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 fb0e 	bl	800656a <USBD_CtlError>
        break;
 8005f4e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005f50:	e006      	b.n	8005f60 <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	0011      	movs	r1, r2
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 fb06 	bl	800656a <USBD_CtlError>
      break;
 8005f5e:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8005f60:	e006      	b.n	8005f70 <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 fafe 	bl	800656a <USBD_CtlError>
    break;
 8005f6e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005f70:	230f      	movs	r3, #15
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	781b      	ldrb	r3, [r3, #0]
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b004      	add	sp, #16
 8005f7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	885b      	ldrh	r3, [r3, #2]
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b07      	cmp	r3, #7
 8005f94:	d900      	bls.n	8005f98 <USBD_GetDescriptor+0x18>
 8005f96:	e0ce      	b.n	8006136 <USBD_GetDescriptor+0x1b6>
 8005f98:	009a      	lsls	r2, r3, #2
 8005f9a:	4b80      	ldr	r3, [pc, #512]	; (800619c <USBD_GetDescriptor+0x21c>)
 8005f9c:	18d3      	adds	r3, r2, r3
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	23a2      	movs	r3, #162	; 0xa2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	58d3      	ldr	r3, [r2, r3]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	7c12      	ldrb	r2, [r2, #16]
 8005fb0:	210a      	movs	r1, #10
 8005fb2:	1879      	adds	r1, r7, r1
 8005fb4:	0010      	movs	r0, r2
 8005fb6:	4798      	blx	r3
 8005fb8:	0003      	movs	r3, r0
 8005fba:	60fb      	str	r3, [r7, #12]
    break;
 8005fbc:	e0c2      	b.n	8006144 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	7c1b      	ldrb	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10f      	bne.n	8005fe6 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	23a3      	movs	r3, #163	; 0xa3
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	58d3      	ldr	r3, [r2, r3]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	220a      	movs	r2, #10
 8005fd2:	18ba      	adds	r2, r7, r2
 8005fd4:	0010      	movs	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	0003      	movs	r3, r0
 8005fda:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005fe4:	e0ae      	b.n	8006144 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	23a3      	movs	r3, #163	; 0xa3
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	58d3      	ldr	r3, [r2, r3]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	220a      	movs	r2, #10
 8005ff2:	18ba      	adds	r2, r7, r2
 8005ff4:	0010      	movs	r0, r2
 8005ff6:	4798      	blx	r3
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	2202      	movs	r2, #2
 8006002:	701a      	strb	r2, [r3, #0]
    break;
 8006004:	e09e      	b.n	8006144 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	885b      	ldrh	r3, [r3, #2]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b05      	cmp	r3, #5
 800600e:	d858      	bhi.n	80060c2 <USBD_GetDescriptor+0x142>
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	4b63      	ldr	r3, [pc, #396]	; (80061a0 <USBD_GetDescriptor+0x220>)
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	23a2      	movs	r3, #162	; 0xa2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	58d3      	ldr	r3, [r2, r3]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7c12      	ldrb	r2, [r2, #16]
 8006028:	210a      	movs	r1, #10
 800602a:	1879      	adds	r1, r7, r1
 800602c:	0010      	movs	r0, r2
 800602e:	4798      	blx	r3
 8006030:	0003      	movs	r3, r0
 8006032:	60fb      	str	r3, [r7, #12]
      break;
 8006034:	e04c      	b.n	80060d0 <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	23a2      	movs	r3, #162	; 0xa2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	58d3      	ldr	r3, [r2, r3]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	7c12      	ldrb	r2, [r2, #16]
 8006044:	210a      	movs	r1, #10
 8006046:	1879      	adds	r1, r7, r1
 8006048:	0010      	movs	r0, r2
 800604a:	4798      	blx	r3
 800604c:	0003      	movs	r3, r0
 800604e:	60fb      	str	r3, [r7, #12]
      break;
 8006050:	e03e      	b.n	80060d0 <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	23a2      	movs	r3, #162	; 0xa2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	58d3      	ldr	r3, [r2, r3]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	210a      	movs	r1, #10
 8006062:	1879      	adds	r1, r7, r1
 8006064:	0010      	movs	r0, r2
 8006066:	4798      	blx	r3
 8006068:	0003      	movs	r3, r0
 800606a:	60fb      	str	r3, [r7, #12]
      break;
 800606c:	e030      	b.n	80060d0 <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	23a2      	movs	r3, #162	; 0xa2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	58d3      	ldr	r3, [r2, r3]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	7c12      	ldrb	r2, [r2, #16]
 800607c:	210a      	movs	r1, #10
 800607e:	1879      	adds	r1, r7, r1
 8006080:	0010      	movs	r0, r2
 8006082:	4798      	blx	r3
 8006084:	0003      	movs	r3, r0
 8006086:	60fb      	str	r3, [r7, #12]
      break;
 8006088:	e022      	b.n	80060d0 <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	23a2      	movs	r3, #162	; 0xa2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	58d3      	ldr	r3, [r2, r3]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	7c12      	ldrb	r2, [r2, #16]
 8006098:	210a      	movs	r1, #10
 800609a:	1879      	adds	r1, r7, r1
 800609c:	0010      	movs	r0, r2
 800609e:	4798      	blx	r3
 80060a0:	0003      	movs	r3, r0
 80060a2:	60fb      	str	r3, [r7, #12]
      break;
 80060a4:	e014      	b.n	80060d0 <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	23a2      	movs	r3, #162	; 0xa2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	58d3      	ldr	r3, [r2, r3]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	7c12      	ldrb	r2, [r2, #16]
 80060b4:	210a      	movs	r1, #10
 80060b6:	1879      	adds	r1, r7, r1
 80060b8:	0010      	movs	r0, r2
 80060ba:	4798      	blx	r3
 80060bc:	0003      	movs	r3, r0
 80060be:	60fb      	str	r3, [r7, #12]
      break;
 80060c0:	e006      	b.n	80060d0 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f000 fa4e 	bl	800656a <USBD_CtlError>
      return;
 80060ce:	e061      	b.n	8006194 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 80060d0:	e038      	b.n	8006144 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7c1b      	ldrb	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	23a3      	movs	r3, #163	; 0xa3
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	58d3      	ldr	r3, [r2, r3]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	220a      	movs	r2, #10
 80060e6:	18ba      	adds	r2, r7, r2
 80060e8:	0010      	movs	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	0003      	movs	r3, r0
 80060ee:	60fb      	str	r3, [r7, #12]
      break;
 80060f0:	e028      	b.n	8006144 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 fa36 	bl	800656a <USBD_CtlError>
      return;
 80060fe:	e049      	b.n	8006194 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7c1b      	ldrb	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10f      	bne.n	8006128 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	23a3      	movs	r3, #163	; 0xa3
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	58d3      	ldr	r3, [r2, r3]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	220a      	movs	r2, #10
 8006114:	18ba      	adds	r2, r7, r2
 8006116:	0010      	movs	r0, r2
 8006118:	4798      	blx	r3
 800611a:	0003      	movs	r3, r0
 800611c:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	2207      	movs	r2, #7
 8006124:	701a      	strb	r2, [r3, #0]
      break;
 8006126:	e00d      	b.n	8006144 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	0011      	movs	r1, r2
 800612e:	0018      	movs	r0, r3
 8006130:	f000 fa1b 	bl	800656a <USBD_CtlError>
      return;
 8006134:	e02e      	b.n	8006194 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	0011      	movs	r1, r2
 800613c:	0018      	movs	r0, r3
 800613e:	f000 fa14 	bl	800656a <USBD_CtlError>
    return;
 8006142:	e027      	b.n	8006194 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006144:	230a      	movs	r3, #10
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01a      	beq.n	8006184 <USBD_GetDescriptor+0x204>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	88db      	ldrh	r3, [r3, #6]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d016      	beq.n	8006184 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	88da      	ldrh	r2, [r3, #6]
 800615a:	230a      	movs	r3, #10
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	1c18      	adds	r0, r3, #0
 8006162:	1c11      	adds	r1, r2, #0
 8006164:	b28a      	uxth	r2, r1
 8006166:	b283      	uxth	r3, r0
 8006168:	429a      	cmp	r2, r3
 800616a:	d900      	bls.n	800616e <USBD_GetDescriptor+0x1ee>
 800616c:	1c01      	adds	r1, r0, #0
 800616e:	b28a      	uxth	r2, r1
 8006170:	210a      	movs	r1, #10
 8006172:	187b      	adds	r3, r7, r1
 8006174:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8006176:	187b      	adds	r3, r7, r1
 8006178:	881a      	ldrh	r2, [r3, #0]
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0018      	movs	r0, r3
 8006180:	f000 fa72 	bl	8006668 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	88db      	ldrh	r3, [r3, #6]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0018      	movs	r0, r3
 8006190:	f000 fad4 	bl	800673c <USBD_CtlSendStatus>
  }
}
 8006194:	46bd      	mov	sp, r7
 8006196:	b004      	add	sp, #16
 8006198:	bd80      	pop	{r7, pc}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	08007914 	.word	0x08007914
 80061a0:	08007934 	.word	0x08007934

080061a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	889b      	ldrh	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d13d      	bne.n	8006232 <USBD_SetAddress+0x8e>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	88db      	ldrh	r3, [r3, #6]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d139      	bne.n	8006232 <USBD_SetAddress+0x8e>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	885b      	ldrh	r3, [r3, #2]
 80061c2:	2b7f      	cmp	r3, #127	; 0x7f
 80061c4:	d835      	bhi.n	8006232 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	885b      	ldrh	r3, [r3, #2]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	230f      	movs	r3, #15
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	217f      	movs	r1, #127	; 0x7f
 80061d2:	400a      	ands	r2, r1
 80061d4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	239d      	movs	r3, #157	; 0x9d
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	5cd3      	ldrb	r3, [r2, r3]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d106      	bne.n	80061f0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0011      	movs	r1, r2
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 f9be 	bl	800656a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	e026      	b.n	800623e <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	240f      	movs	r4, #15
 80061f4:	193a      	adds	r2, r7, r4
 80061f6:	4914      	ldr	r1, [pc, #80]	; (8006248 <USBD_SetAddress+0xa4>)
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061fc:	193b      	adds	r3, r7, r4
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	0011      	movs	r1, r2
 8006204:	0018      	movs	r0, r3
 8006206:	f000 ffd1 	bl	80071ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 fa95 	bl	800673c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006212:	193b      	adds	r3, r7, r4
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	239d      	movs	r3, #157	; 0x9d
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	2102      	movs	r1, #2
 8006222:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006224:	e00b      	b.n	800623e <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	239d      	movs	r3, #157	; 0x9d
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	2101      	movs	r1, #1
 800622e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006230:	e005      	b.n	800623e <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	0011      	movs	r1, r2
 8006238:	0018      	movs	r0, r3
 800623a:	f000 f996 	bl	800656a <USBD_CtlError>
  }
}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	46bd      	mov	sp, r7
 8006242:	b005      	add	sp, #20
 8006244:	bd90      	pop	{r4, r7, pc}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	00000276 	.word	0x00000276

0800624c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	885b      	ldrh	r3, [r3, #2]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	4b4c      	ldr	r3, [pc, #304]	; (8006390 <USBD_SetConfig+0x144>)
 800625e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006260:	4b4b      	ldr	r3, [pc, #300]	; (8006390 <USBD_SetConfig+0x144>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d906      	bls.n	8006276 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	0011      	movs	r1, r2
 800626e:	0018      	movs	r0, r3
 8006270:	f000 f97b 	bl	800656a <USBD_CtlError>
 8006274:	e088      	b.n	8006388 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	239d      	movs	r3, #157	; 0x9d
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	5cd3      	ldrb	r3, [r2, r3]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d002      	beq.n	8006288 <USBD_SetConfig+0x3c>
 8006282:	2b03      	cmp	r3, #3
 8006284:	d029      	beq.n	80062da <USBD_SetConfig+0x8e>
 8006286:	e071      	b.n	800636c <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006288:	4b41      	ldr	r3, [pc, #260]	; (8006390 <USBD_SetConfig+0x144>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01f      	beq.n	80062d0 <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 8006290:	4b3f      	ldr	r3, [pc, #252]	; (8006390 <USBD_SetConfig+0x144>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	001a      	movs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	239d      	movs	r3, #157	; 0x9d
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	2103      	movs	r1, #3
 80062a2:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062a4:	4b3a      	ldr	r3, [pc, #232]	; (8006390 <USBD_SetConfig+0x144>)
 80062a6:	781a      	ldrb	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	0011      	movs	r1, r2
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7ff f967 	bl	8005580 <USBD_SetClassConfig>
 80062b2:	0003      	movs	r3, r0
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d106      	bne.n	80062c6 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0011      	movs	r1, r2
 80062be:	0018      	movs	r0, r3
 80062c0:	f000 f953 	bl	800656a <USBD_CtlError>
          return;
 80062c4:	e060      	b.n	8006388 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 fa37 	bl	800673c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80062ce:	e05b      	b.n	8006388 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	0018      	movs	r0, r3
 80062d4:	f000 fa32 	bl	800673c <USBD_CtlSendStatus>
      break;
 80062d8:	e056      	b.n	8006388 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <USBD_SetConfig+0x144>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d115      	bne.n	800630e <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	239d      	movs	r3, #157	; 0x9d
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	2102      	movs	r1, #2
 80062ea:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 80062ec:	4b28      	ldr	r3, [pc, #160]	; (8006390 <USBD_SetConfig+0x144>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	001a      	movs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80062f6:	4b26      	ldr	r3, [pc, #152]	; (8006390 <USBD_SetConfig+0x144>)
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	0011      	movs	r1, r2
 80062fe:	0018      	movs	r0, r3
 8006300:	f7ff f966 	bl	80055d0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	f000 fa18 	bl	800673c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800630c:	e03c      	b.n	8006388 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <USBD_SetConfig+0x144>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	001a      	movs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d022      	beq.n	8006362 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0011      	movs	r1, r2
 8006326:	0018      	movs	r0, r3
 8006328:	f7ff f952 	bl	80055d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800632c:	4b18      	ldr	r3, [pc, #96]	; (8006390 <USBD_SetConfig+0x144>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	001a      	movs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <USBD_SetConfig+0x144>)
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0011      	movs	r1, r2
 800633e:	0018      	movs	r0, r3
 8006340:	f7ff f91e 	bl	8005580 <USBD_SetClassConfig>
 8006344:	0003      	movs	r3, r0
 8006346:	2b02      	cmp	r3, #2
 8006348:	d106      	bne.n	8006358 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f90a 	bl	800656a <USBD_CtlError>
          return;
 8006356:	e017      	b.n	8006388 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	0018      	movs	r0, r3
 800635c:	f000 f9ee 	bl	800673c <USBD_CtlSendStatus>
      break;
 8006360:	e012      	b.n	8006388 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	0018      	movs	r0, r3
 8006366:	f000 f9e9 	bl	800673c <USBD_CtlSendStatus>
      break;
 800636a:	e00d      	b.n	8006388 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0011      	movs	r1, r2
 8006372:	0018      	movs	r0, r3
 8006374:	f000 f8f9 	bl	800656a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <USBD_SetConfig+0x144>)
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f7ff f925 	bl	80055d0 <USBD_ClrClassConfig>
      break;
 8006386:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	200001e4 	.word	0x200001e4

08006394 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d006      	beq.n	80063b4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0011      	movs	r1, r2
 80063ac:	0018      	movs	r0, r3
 80063ae:	f000 f8dc 	bl	800656a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80063b2:	e025      	b.n	8006400 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	239d      	movs	r3, #157	; 0x9d
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	db18      	blt.n	80063f2 <USBD_GetConfig+0x5e>
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	dd02      	ble.n	80063ca <USBD_GetConfig+0x36>
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d00c      	beq.n	80063e2 <USBD_GetConfig+0x4e>
 80063c8:	e013      	b.n	80063f2 <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3308      	adds	r3, #8
 80063d4:	0019      	movs	r1, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	0018      	movs	r0, r3
 80063dc:	f000 f944 	bl	8006668 <USBD_CtlSendData>
      break;
 80063e0:	e00e      	b.n	8006400 <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	1d19      	adds	r1, r3, #4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	0018      	movs	r0, r3
 80063ec:	f000 f93c 	bl	8006668 <USBD_CtlSendData>
      break;
 80063f0:	e006      	b.n	8006400 <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	0011      	movs	r1, r2
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 f8b6 	bl	800656a <USBD_CtlError>
      break;
 80063fe:	46c0      	nop			; (mov r8, r8)
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	239d      	movs	r3, #157	; 0x9d
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	5cd3      	ldrb	r3, [r2, r3]
 800641a:	3b01      	subs	r3, #1
 800641c:	2b02      	cmp	r3, #2
 800641e:	d822      	bhi.n	8006466 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	88db      	ldrh	r3, [r3, #6]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d006      	beq.n	8006436 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	0011      	movs	r1, r2
 800642e:	0018      	movs	r0, r3
 8006430:	f000 f89b 	bl	800656a <USBD_CtlError>
      break;
 8006434:	e01e      	b.n	8006474 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	239f      	movs	r3, #159	; 0x9f
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	58d3      	ldr	r3, [r2, r3]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2202      	movs	r2, #2
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	330c      	adds	r3, #12
 8006458:	0019      	movs	r1, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	0018      	movs	r0, r3
 8006460:	f000 f902 	bl	8006668 <USBD_CtlSendData>
    break;
 8006464:	e006      	b.n	8006474 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	0011      	movs	r1, r2
 800646c:	0018      	movs	r0, r3
 800646e:	f000 f87c 	bl	800656a <USBD_CtlError>
    break;
 8006472:	46c0      	nop			; (mov r8, r8)
  }
}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	46bd      	mov	sp, r7
 8006478:	b002      	add	sp, #8
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	885b      	ldrh	r3, [r3, #2]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d108      	bne.n	80064a0 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	239f      	movs	r3, #159	; 0x9f
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	2101      	movs	r1, #1
 8006496:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	0018      	movs	r0, r3
 800649c:	f000 f94e 	bl	800673c <USBD_CtlSendStatus>
  }

}
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b002      	add	sp, #8
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	239d      	movs	r3, #157	; 0x9d
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	5cd3      	ldrb	r3, [r2, r3]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d80d      	bhi.n	80064dc <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d110      	bne.n	80064ea <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	239f      	movs	r3, #159	; 0x9f
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	2100      	movs	r1, #0
 80064d0:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f000 f931 	bl	800673c <USBD_CtlSendStatus>
    }
    break;
 80064da:	e006      	b.n	80064ea <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	0011      	movs	r1, r2
 80064e2:	0018      	movs	r0, r3
 80064e4:	f000 f841 	bl	800656a <USBD_CtlError>
    break;
 80064e8:	e000      	b.n	80064ec <USBD_ClrFeature+0x44>
    break;
 80064ea:	46c0      	nop			; (mov r8, r8)
  }
}
 80064ec:	46c0      	nop			; (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b002      	add	sp, #8
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785a      	ldrb	r2, [r3, #1]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	3302      	adds	r3, #2
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	b29a      	uxth	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	3303      	adds	r3, #3
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	b29b      	uxth	r3, r3
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	b29a      	uxth	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	3304      	adds	r3, #4
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b29a      	uxth	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	3305      	adds	r3, #5
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	b29b      	uxth	r3, r3
 800653e:	18d3      	adds	r3, r2, r3
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	3306      	adds	r3, #6
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3307      	adds	r3, #7
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	b29b      	uxth	r3, r3
 800655a:	18d3      	adds	r3, r2, r3
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	80da      	strh	r2, [r3, #6]

}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	46bd      	mov	sp, r7
 8006566:	b002      	add	sp, #8
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	0018      	movs	r0, r3
 800657a:	f000 fd8e 	bl	800709a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2100      	movs	r1, #0
 8006582:	0018      	movs	r0, r3
 8006584:	f000 fd89 	bl	800709a <USBD_LL_StallEP>
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b002      	add	sp, #8
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800659c:	2317      	movs	r3, #23
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d03d      	beq.n	8006626 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 f83e 	bl	800662e <USBD_GetLen>
 80065b2:	0003      	movs	r3, r0
 80065b4:	3301      	adds	r3, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	18db      	adds	r3, r3, r3
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80065c0:	2017      	movs	r0, #23
 80065c2:	183b      	adds	r3, r7, r0
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	183a      	adds	r2, r7, r0
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	7011      	strb	r1, [r2, #0]
 80065cc:	001a      	movs	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	189b      	adds	r3, r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80065d8:	183b      	adds	r3, r7, r0
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	183a      	adds	r2, r7, r0
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	7011      	strb	r1, [r2, #0]
 80065e2:	001a      	movs	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	2203      	movs	r2, #3
 80065ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80065ec:	e017      	b.n	800661e <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	60fa      	str	r2, [r7, #12]
 80065f4:	2417      	movs	r4, #23
 80065f6:	193a      	adds	r2, r7, r4
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	1939      	adds	r1, r7, r4
 80065fc:	1c50      	adds	r0, r2, #1
 80065fe:	7008      	strb	r0, [r1, #0]
 8006600:	0011      	movs	r1, r2
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	1852      	adds	r2, r2, r1
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800660a:	193b      	adds	r3, r7, r4
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	193a      	adds	r2, r7, r4
 8006610:	1c59      	adds	r1, r3, #1
 8006612:	7011      	strb	r1, [r2, #0]
 8006614:	001a      	movs	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	189b      	adds	r3, r3, r2
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e3      	bne.n	80065ee <USBD_GetString+0x5e>
    }
  }
}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	46bd      	mov	sp, r7
 800662a:	b007      	add	sp, #28
 800662c:	bd90      	pop	{r4, r7, pc}

0800662e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006636:	230f      	movs	r3, #15
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2200      	movs	r2, #0
 800663c:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 800663e:	e008      	b.n	8006652 <USBD_GetLen+0x24>
    {
        len++;
 8006640:	210f      	movs	r1, #15
 8006642:	187b      	adds	r3, r7, r1
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	187b      	adds	r3, r7, r1
 8006648:	3201      	adds	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
        buf++;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3301      	adds	r3, #1
 8006650:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f2      	bne.n	8006640 <USBD_GetLen+0x12>
    }

    return len;
 800665a:	230f      	movs	r3, #15
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	781b      	ldrb	r3, [r3, #0]
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b004      	add	sp, #16
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	1dbb      	adds	r3, r7, #6
 8006674:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	239b      	movs	r3, #155	; 0x9b
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	2102      	movs	r1, #2
 800667e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006680:	1dbb      	adds	r3, r7, #6
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006688:	1dbb      	adds	r3, r7, #6
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	2100      	movs	r1, #0
 800669a:	f000 fdb3 	bl	8007204 <USBD_LL_Transmit>

  return USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b004      	add	sp, #16
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	1dbb      	adds	r3, r7, #6
 80066b4:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80066b6:	1dbb      	adds	r3, r7, #6
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	2100      	movs	r1, #0
 80066c0:	f000 fda0 	bl	8007204 <USBD_LL_Transmit>

  return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	0018      	movs	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b004      	add	sp, #16
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	1dbb      	adds	r3, r7, #6
 80066da:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	239b      	movs	r3, #155	; 0x9b
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	2103      	movs	r1, #3
 80066e4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80066e6:	1dbb      	adds	r3, r7, #6
 80066e8:	8819      	ldrh	r1, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	23a4      	movs	r3, #164	; 0xa4
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80066f2:	1dbb      	adds	r3, r7, #6
 80066f4:	8819      	ldrh	r1, [r3, #0]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	23a6      	movs	r3, #166	; 0xa6
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80066fe:	1dbb      	adds	r3, r7, #6
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	2100      	movs	r1, #0
 8006708:	f000 fdb4 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	0018      	movs	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	b004      	add	sp, #16
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	1dbb      	adds	r3, r7, #6
 8006722:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006724:	1dbb      	adds	r3, r7, #6
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	2100      	movs	r1, #0
 800672e:	f000 fda1 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	b004      	add	sp, #16
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	239b      	movs	r3, #155	; 0x9b
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	2104      	movs	r1, #4
 800674c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	2300      	movs	r3, #0
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	f000 fd55 	bl	8007204 <USBD_LL_Transmit>

  return USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	239b      	movs	r3, #155	; 0x9b
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	2105      	movs	r1, #5
 8006774:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	2300      	movs	r3, #0
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	f000 fd79 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	0018      	movs	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006790:	f7f9 fd46 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006794:	f000 f81c 	bl	80067d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006798:	f000 f890 	bl	80068bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800679c:	f000 fa86 	bl	8006cac <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <main+0x40>)
 80067a2:	2110      	movs	r1, #16
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7fa f83a 	bl	800081e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80067aa:	23fa      	movs	r3, #250	; 0xfa
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7f9 fda6 	bl	8000300 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80067b4:	23a0      	movs	r3, #160	; 0xa0
 80067b6:	05db      	lsls	r3, r3, #23
 80067b8:	2120      	movs	r1, #32
 80067ba:	0018      	movs	r0, r3
 80067bc:	f7fa f82f 	bl	800081e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80067c0:	23fa      	movs	r3, #250	; 0xfa
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7f9 fd9b 	bl	8000300 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80067ca:	e7e9      	b.n	80067a0 <main+0x14>
 80067cc:	50000400 	.word	0x50000400

080067d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067d0:	b590      	push	{r4, r7, lr}
 80067d2:	b09d      	sub	sp, #116	; 0x74
 80067d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067d6:	2438      	movs	r4, #56	; 0x38
 80067d8:	193b      	adds	r3, r7, r4
 80067da:	0018      	movs	r0, r3
 80067dc:	2338      	movs	r3, #56	; 0x38
 80067de:	001a      	movs	r2, r3
 80067e0:	2100      	movs	r1, #0
 80067e2:	f000 ff6b 	bl	80076bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067e6:	2324      	movs	r3, #36	; 0x24
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	0018      	movs	r0, r3
 80067ec:	2314      	movs	r3, #20
 80067ee:	001a      	movs	r2, r3
 80067f0:	2100      	movs	r1, #0
 80067f2:	f000 ff63 	bl	80076bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067f6:	003b      	movs	r3, r7
 80067f8:	0018      	movs	r0, r3
 80067fa:	2324      	movs	r3, #36	; 0x24
 80067fc:	001a      	movs	r2, r3
 80067fe:	2100      	movs	r1, #0
 8006800:	f000 ff5c 	bl	80076bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006804:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <SystemClock_Config+0xe4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2b      	ldr	r2, [pc, #172]	; (80068b8 <SystemClock_Config+0xe8>)
 800680a:	401a      	ands	r2, r3
 800680c:	4b29      	ldr	r3, [pc, #164]	; (80068b4 <SystemClock_Config+0xe4>)
 800680e:	2180      	movs	r1, #128	; 0x80
 8006810:	0109      	lsls	r1, r1, #4
 8006812:	430a      	orrs	r2, r1
 8006814:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006816:	0021      	movs	r1, r4
 8006818:	187b      	adds	r3, r7, r1
 800681a:	2222      	movs	r2, #34	; 0x22
 800681c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800681e:	187b      	adds	r3, r7, r1
 8006820:	2201      	movs	r2, #1
 8006822:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006824:	187b      	adds	r3, r7, r1
 8006826:	2210      	movs	r2, #16
 8006828:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800682a:	187b      	adds	r3, r7, r1
 800682c:	2201      	movs	r2, #1
 800682e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006830:	187b      	adds	r3, r7, r1
 8006832:	2202      	movs	r2, #2
 8006834:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006836:	187b      	adds	r3, r7, r1
 8006838:	2200      	movs	r2, #0
 800683a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800683c:	187b      	adds	r3, r7, r1
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8006842:	187b      	adds	r3, r7, r1
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	0412      	lsls	r2, r2, #16
 8006848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800684a:	187b      	adds	r3, r7, r1
 800684c:	0018      	movs	r0, r3
 800684e:	f7fb fc8b 	bl	8002168 <HAL_RCC_OscConfig>
 8006852:	1e03      	subs	r3, r0, #0
 8006854:	d001      	beq.n	800685a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006856:	f000 f987 	bl	8006b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800685a:	2124      	movs	r1, #36	; 0x24
 800685c:	187b      	adds	r3, r7, r1
 800685e:	220f      	movs	r2, #15
 8006860:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006862:	187b      	adds	r3, r7, r1
 8006864:	2203      	movs	r2, #3
 8006866:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006868:	187b      	adds	r3, r7, r1
 800686a:	2200      	movs	r2, #0
 800686c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800686e:	187b      	adds	r3, r7, r1
 8006870:	2200      	movs	r2, #0
 8006872:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006874:	187b      	adds	r3, r7, r1
 8006876:	2200      	movs	r2, #0
 8006878:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800687a:	187b      	adds	r3, r7, r1
 800687c:	2100      	movs	r1, #0
 800687e:	0018      	movs	r0, r3
 8006880:	f7fc f832 	bl	80028e8 <HAL_RCC_ClockConfig>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d001      	beq.n	800688c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006888:	f000 f96e 	bl	8006b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800688c:	003b      	movs	r3, r7
 800688e:	2240      	movs	r2, #64	; 0x40
 8006890:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006892:	003b      	movs	r3, r7
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	04d2      	lsls	r2, r2, #19
 8006898:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800689a:	003b      	movs	r3, r7
 800689c:	0018      	movs	r0, r3
 800689e:	f7fc f9d1 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d001      	beq.n	80068aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80068a6:	f000 f95f 	bl	8006b68 <Error_Handler>
  }
}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b01d      	add	sp, #116	; 0x74
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	40007000 	.word	0x40007000
 80068b8:	ffffe7ff 	.word	0xffffe7ff

080068bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b08b      	sub	sp, #44	; 0x2c
 80068c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c2:	2414      	movs	r4, #20
 80068c4:	193b      	adds	r3, r7, r4
 80068c6:	0018      	movs	r0, r3
 80068c8:	2314      	movs	r3, #20
 80068ca:	001a      	movs	r2, r3
 80068cc:	2100      	movs	r1, #0
 80068ce:	f000 fef5 	bl	80076bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068d2:	4b9f      	ldr	r3, [pc, #636]	; (8006b50 <MX_GPIO_Init+0x294>)
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	4b9e      	ldr	r3, [pc, #632]	; (8006b50 <MX_GPIO_Init+0x294>)
 80068d8:	2104      	movs	r1, #4
 80068da:	430a      	orrs	r2, r1
 80068dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80068de:	4b9c      	ldr	r3, [pc, #624]	; (8006b50 <MX_GPIO_Init+0x294>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	2204      	movs	r2, #4
 80068e4:	4013      	ands	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068ea:	4b99      	ldr	r3, [pc, #612]	; (8006b50 <MX_GPIO_Init+0x294>)
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4b98      	ldr	r3, [pc, #608]	; (8006b50 <MX_GPIO_Init+0x294>)
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	430a      	orrs	r2, r1
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80068f6:	4b96      	ldr	r3, [pc, #600]	; (8006b50 <MX_GPIO_Init+0x294>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	4013      	ands	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006902:	4b93      	ldr	r3, [pc, #588]	; (8006b50 <MX_GPIO_Init+0x294>)
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	4b92      	ldr	r3, [pc, #584]	; (8006b50 <MX_GPIO_Init+0x294>)
 8006908:	2101      	movs	r1, #1
 800690a:	430a      	orrs	r2, r1
 800690c:	62da      	str	r2, [r3, #44]	; 0x2c
 800690e:	4b90      	ldr	r3, [pc, #576]	; (8006b50 <MX_GPIO_Init+0x294>)
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	2201      	movs	r2, #1
 8006914:	4013      	ands	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800691a:	4b8d      	ldr	r3, [pc, #564]	; (8006b50 <MX_GPIO_Init+0x294>)
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	4b8c      	ldr	r3, [pc, #560]	; (8006b50 <MX_GPIO_Init+0x294>)
 8006920:	2102      	movs	r1, #2
 8006922:	430a      	orrs	r2, r1
 8006924:	62da      	str	r2, [r3, #44]	; 0x2c
 8006926:	4b8a      	ldr	r3, [pc, #552]	; (8006b50 <MX_GPIO_Init+0x294>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	2202      	movs	r2, #2
 800692c:	4013      	ands	r3, r2
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8006932:	23a0      	movs	r3, #160	; 0xa0
 8006934:	05db      	lsls	r3, r3, #23
 8006936:	2200      	movs	r2, #0
 8006938:	2120      	movs	r1, #32
 800693a:	0018      	movs	r0, r3
 800693c:	f7f9 ff52 	bl	80007e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8006940:	4984      	ldr	r1, [pc, #528]	; (8006b54 <MX_GPIO_Init+0x298>)
 8006942:	4b85      	ldr	r3, [pc, #532]	; (8006b58 <MX_GPIO_Init+0x29c>)
 8006944:	2200      	movs	r2, #0
 8006946:	0018      	movs	r0, r3
 8006948:	f7f9 ff4c 	bl	80007e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800694c:	193b      	adds	r3, r7, r4
 800694e:	2280      	movs	r2, #128	; 0x80
 8006950:	0192      	lsls	r2, r2, #6
 8006952:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006954:	193b      	adds	r3, r7, r4
 8006956:	4a81      	ldr	r2, [pc, #516]	; (8006b5c <MX_GPIO_Init+0x2a0>)
 8006958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695a:	193b      	adds	r3, r7, r4
 800695c:	2200      	movs	r2, #0
 800695e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8006960:	193b      	adds	r3, r7, r4
 8006962:	4a7f      	ldr	r2, [pc, #508]	; (8006b60 <MX_GPIO_Init+0x2a4>)
 8006964:	0019      	movs	r1, r3
 8006966:	0010      	movs	r0, r2
 8006968:	f7f9 fdc6 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800696c:	193b      	adds	r3, r7, r4
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006972:	193b      	adds	r3, r7, r4
 8006974:	4a7b      	ldr	r2, [pc, #492]	; (8006b64 <MX_GPIO_Init+0x2a8>)
 8006976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006978:	193b      	adds	r3, r7, r4
 800697a:	2200      	movs	r2, #0
 800697c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800697e:	193a      	adds	r2, r7, r4
 8006980:	23a0      	movs	r3, #160	; 0xa0
 8006982:	05db      	lsls	r3, r3, #23
 8006984:	0011      	movs	r1, r2
 8006986:	0018      	movs	r0, r3
 8006988:	f7f9 fdb6 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 800698c:	193b      	adds	r3, r7, r4
 800698e:	2281      	movs	r2, #129	; 0x81
 8006990:	0052      	lsls	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006994:	193b      	adds	r3, r7, r4
 8006996:	2200      	movs	r2, #0
 8006998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699a:	193b      	adds	r3, r7, r4
 800699c:	2200      	movs	r2, #0
 800699e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069a0:	193a      	adds	r2, r7, r4
 80069a2:	23a0      	movs	r3, #160	; 0xa0
 80069a4:	05db      	lsls	r3, r3, #23
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7f9 fda5 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80069ae:	193b      	adds	r3, r7, r4
 80069b0:	22cc      	movs	r2, #204	; 0xcc
 80069b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b4:	193b      	adds	r3, r7, r4
 80069b6:	2202      	movs	r2, #2
 80069b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	193b      	adds	r3, r7, r4
 80069bc:	2200      	movs	r2, #0
 80069be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c0:	193b      	adds	r3, r7, r4
 80069c2:	2200      	movs	r2, #0
 80069c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80069c6:	193b      	adds	r3, r7, r4
 80069c8:	2203      	movs	r2, #3
 80069ca:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069cc:	193a      	adds	r2, r7, r4
 80069ce:	23a0      	movs	r3, #160	; 0xa0
 80069d0:	05db      	lsls	r3, r3, #23
 80069d2:	0011      	movs	r1, r2
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7f9 fd8f 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80069da:	193b      	adds	r3, r7, r4
 80069dc:	2220      	movs	r2, #32
 80069de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e0:	193b      	adds	r3, r7, r4
 80069e2:	2201      	movs	r2, #1
 80069e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e6:	193b      	adds	r3, r7, r4
 80069e8:	2200      	movs	r2, #0
 80069ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ec:	193b      	adds	r3, r7, r4
 80069ee:	2200      	movs	r2, #0
 80069f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80069f2:	193a      	adds	r2, r7, r4
 80069f4:	23a0      	movs	r3, #160	; 0xa0
 80069f6:	05db      	lsls	r3, r3, #23
 80069f8:	0011      	movs	r1, r2
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7f9 fd7c 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a00:	0021      	movs	r1, r4
 8006a02:	187b      	adds	r3, r7, r1
 8006a04:	2203      	movs	r2, #3
 8006a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a0e:	187b      	adds	r3, r7, r1
 8006a10:	2200      	movs	r2, #0
 8006a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a14:	187b      	adds	r3, r7, r1
 8006a16:	2200      	movs	r2, #0
 8006a18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8006a1a:	187b      	adds	r3, r7, r1
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a20:	000c      	movs	r4, r1
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	4a4c      	ldr	r2, [pc, #304]	; (8006b58 <MX_GPIO_Init+0x29c>)
 8006a26:	0019      	movs	r1, r3
 8006a28:	0010      	movs	r0, r2
 8006a2a:	f7f9 fd65 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8006a2e:	0021      	movs	r1, r4
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	4a48      	ldr	r2, [pc, #288]	; (8006b54 <MX_GPIO_Init+0x298>)
 8006a34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a36:	187b      	adds	r3, r7, r1
 8006a38:	2201      	movs	r2, #1
 8006a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	2200      	movs	r2, #0
 8006a46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a48:	000c      	movs	r4, r1
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <MX_GPIO_Init+0x29c>)
 8006a4e:	0019      	movs	r1, r3
 8006a50:	0010      	movs	r0, r2
 8006a52:	f7f9 fd51 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_NSS_Pin NFC_SCK_Pin NFC_MISO_Pin NFC_MOSI_Pin */
  GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8006a56:	0021      	movs	r1, r4
 8006a58:	187b      	adds	r3, r7, r1
 8006a5a:	22f0      	movs	r2, #240	; 0xf0
 8006a5c:	0212      	lsls	r2, r2, #8
 8006a5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	2202      	movs	r2, #2
 8006a64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a66:	187b      	adds	r3, r7, r1
 8006a68:	2200      	movs	r2, #0
 8006a6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a6c:	187b      	adds	r3, r7, r1
 8006a6e:	2203      	movs	r2, #3
 8006a70:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006a72:	187b      	adds	r3, r7, r1
 8006a74:	2200      	movs	r2, #0
 8006a76:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a78:	000c      	movs	r4, r1
 8006a7a:	187b      	adds	r3, r7, r1
 8006a7c:	4a36      	ldr	r2, [pc, #216]	; (8006b58 <MX_GPIO_Init+0x29c>)
 8006a7e:	0019      	movs	r1, r3
 8006a80:	0010      	movs	r0, r2
 8006a82:	f7f9 fd39 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006a86:	0021      	movs	r1, r4
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	22c0      	movs	r2, #192	; 0xc0
 8006a8c:	00d2      	lsls	r2, r2, #3
 8006a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a90:	187b      	adds	r3, r7, r1
 8006a92:	2202      	movs	r2, #2
 8006a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a9c:	187b      	adds	r3, r7, r1
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa8:	000c      	movs	r4, r1
 8006aaa:	187a      	adds	r2, r7, r1
 8006aac:	23a0      	movs	r3, #160	; 0xa0
 8006aae:	05db      	lsls	r3, r3, #23
 8006ab0:	0011      	movs	r1, r2
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7f9 fd20 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ePD1_CS_Pin */
  GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8006ab8:	0021      	movs	r1, r4
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	0212      	lsls	r2, r2, #8
 8006ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac2:	000c      	movs	r4, r1
 8006ac4:	193b      	adds	r3, r7, r4
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aca:	193b      	adds	r3, r7, r4
 8006acc:	2200      	movs	r2, #0
 8006ace:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad0:	193b      	adds	r3, r7, r4
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006ad6:	193b      	adds	r3, r7, r4
 8006ad8:	2200      	movs	r2, #0
 8006ada:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8006adc:	193a      	adds	r2, r7, r4
 8006ade:	23a0      	movs	r3, #160	; 0xa0
 8006ae0:	05db      	lsls	r3, r3, #23
 8006ae2:	0011      	movs	r1, r2
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f7f9 fd07 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_SCK_Pin ePD1_MOSI_Pin */
  GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8006aea:	0021      	movs	r1, r4
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	2228      	movs	r2, #40	; 0x28
 8006af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	2202      	movs	r2, #2
 8006af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	2200      	movs	r2, #0
 8006b02:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	2200      	movs	r2, #0
 8006b08:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b0a:	000c      	movs	r4, r1
 8006b0c:	187b      	adds	r3, r7, r1
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <MX_GPIO_Init+0x29c>)
 8006b10:	0019      	movs	r1, r3
 8006b12:	0010      	movs	r0, r2
 8006b14:	f7f9 fcf0 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_I2C_SCL_Pin MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8006b18:	0021      	movs	r1, r4
 8006b1a:	187b      	adds	r3, r7, r1
 8006b1c:	22c0      	movs	r2, #192	; 0xc0
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b22:	187b      	adds	r3, r7, r1
 8006b24:	2212      	movs	r2, #18
 8006b26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b28:	187b      	adds	r3, r7, r1
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2e:	187b      	adds	r3, r7, r1
 8006b30:	2203      	movs	r2, #3
 8006b32:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b34:	187b      	adds	r3, r7, r1
 8006b36:	2204      	movs	r2, #4
 8006b38:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b3a:	187b      	adds	r3, r7, r1
 8006b3c:	4a06      	ldr	r2, [pc, #24]	; (8006b58 <MX_GPIO_Init+0x29c>)
 8006b3e:	0019      	movs	r1, r3
 8006b40:	0010      	movs	r0, r2
 8006b42:	f7f9 fcd9 	bl	80004f8 <HAL_GPIO_Init>

}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b00b      	add	sp, #44	; 0x2c
 8006b4c:	bd90      	pop	{r4, r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	40021000 	.word	0x40021000
 8006b54:	00000c14 	.word	0x00000c14
 8006b58:	50000400 	.word	0x50000400
 8006b5c:	10110000 	.word	0x10110000
 8006b60:	50000800 	.word	0x50000800
 8006b64:	10120000 	.word	0x10120000

08006b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006b6c:	46c0      	nop			; (mov r8, r8)
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <HAL_MspInit+0x24>)
 8006b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_MspInit+0x24>)
 8006b7e:	2101      	movs	r1, #1
 8006b80:	430a      	orrs	r2, r1
 8006b82:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <HAL_MspInit+0x24>)
 8006b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <HAL_MspInit+0x24>)
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	0549      	lsls	r1, r1, #21
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000

08006b9c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ba0:	f7f9 fb92 	bl	80002c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006bb0:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USB_IRQHandler+0x14>)
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7f9 ff84 	bl	8000ac0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8006bb8:	46c0      	nop			; (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	20000494 	.word	0x20000494

08006bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006bcc:	4a14      	ldr	r2, [pc, #80]	; (8006c20 <_sbrk+0x5c>)
 8006bce:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <_sbrk+0x60>)
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006bd8:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <_sbrk+0x64>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <_sbrk+0x64>)
 8006be2:	4a12      	ldr	r2, [pc, #72]	; (8006c2c <_sbrk+0x68>)
 8006be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <_sbrk+0x64>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	18d3      	adds	r3, r2, r3
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d207      	bcs.n	8006c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006bf4:	f000 fd24 	bl	8007640 <__errno>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	220c      	movs	r2, #12
 8006bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	425b      	negs	r3, r3
 8006c02:	e009      	b.n	8006c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c04:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <_sbrk+0x64>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <_sbrk+0x64>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	18d2      	adds	r2, r2, r3
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <_sbrk+0x64>)
 8006c14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006c16:	68fb      	ldr	r3, [r7, #12]
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b006      	add	sp, #24
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20002000 	.word	0x20002000
 8006c24:	00000400 	.word	0x00000400
 8006c28:	200001e8 	.word	0x200001e8
 8006c2c:	20000990 	.word	0x20000990

08006c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006c34:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <SystemInit+0x64>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <SystemInit+0x64>)
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	0049      	lsls	r1, r1, #1
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <SystemInit+0x64>)
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <SystemInit+0x64>)
 8006c48:	4913      	ldr	r1, [pc, #76]	; (8006c98 <SystemInit+0x68>)
 8006c4a:	400a      	ands	r2, r1
 8006c4c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006c4e:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <SystemInit+0x64>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <SystemInit+0x64>)
 8006c54:	4911      	ldr	r1, [pc, #68]	; (8006c9c <SystemInit+0x6c>)
 8006c56:	400a      	ands	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <SystemInit+0x64>)
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <SystemInit+0x64>)
 8006c60:	2101      	movs	r1, #1
 8006c62:	438a      	bics	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <SystemInit+0x64>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <SystemInit+0x64>)
 8006c6c:	490c      	ldr	r1, [pc, #48]	; (8006ca0 <SystemInit+0x70>)
 8006c6e:	400a      	ands	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <SystemInit+0x64>)
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <SystemInit+0x64>)
 8006c78:	490a      	ldr	r1, [pc, #40]	; (8006ca4 <SystemInit+0x74>)
 8006c7a:	400a      	ands	r2, r1
 8006c7c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <SystemInit+0x64>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c84:	4b08      	ldr	r3, [pc, #32]	; (8006ca8 <SystemInit+0x78>)
 8006c86:	2280      	movs	r2, #128	; 0x80
 8006c88:	0512      	lsls	r2, r2, #20
 8006c8a:	609a      	str	r2, [r3, #8]
#endif
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	40021000 	.word	0x40021000
 8006c98:	88ff400c 	.word	0x88ff400c
 8006c9c:	fef6fff6 	.word	0xfef6fff6
 8006ca0:	fffbffff 	.word	0xfffbffff
 8006ca4:	ff02ffff 	.word	0xff02ffff
 8006ca8:	e000ed00 	.word	0xe000ed00

08006cac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cb0:	4914      	ldr	r1, [pc, #80]	; (8006d04 <MX_USB_DEVICE_Init+0x58>)
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <MX_USB_DEVICE_Init+0x5c>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f7fe fbfa 	bl	80054b0 <USBD_Init>
 8006cbc:	1e03      	subs	r3, r0, #0
 8006cbe:	d001      	beq.n	8006cc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cc0:	f7ff ff52 	bl	8006b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006cc4:	4a11      	ldr	r2, [pc, #68]	; (8006d0c <MX_USB_DEVICE_Init+0x60>)
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <MX_USB_DEVICE_Init+0x5c>)
 8006cc8:	0011      	movs	r1, r2
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f7fe fc21 	bl	8005512 <USBD_RegisterClass>
 8006cd0:	1e03      	subs	r3, r0, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006cd4:	f7ff ff48 	bl	8006b68 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <MX_USB_DEVICE_Init+0x64>)
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <MX_USB_DEVICE_Init+0x5c>)
 8006cdc:	0011      	movs	r1, r2
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7fe fbca 	bl	8005478 <USBD_CUSTOM_HID_RegisterInterface>
 8006ce4:	1e03      	subs	r3, r0, #0
 8006ce6:	d001      	beq.n	8006cec <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006ce8:	f7ff ff3e 	bl	8006b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <MX_USB_DEVICE_Init+0x5c>)
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7fe fc30 	bl	8005554 <USBD_Start>
 8006cf4:	1e03      	subs	r3, r0, #0
 8006cf6:	d001      	beq.n	8006cfc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8006cf8:	f7ff ff36 	bl	8006b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cfc:	46c0      	nop			; (mov r8, r8)
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	20000114 	.word	0x20000114
 8006d08:	200001f8 	.word	0x200001f8
 8006d0c:	20000008 	.word	0x20000008
 8006d10:	20000104 	.word	0x20000104

08006d14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0a      	ldr	r2, [pc, #40]	; (8006d4c <HAL_PCD_MspInit+0x38>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d10e      	bne.n	8006d44 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d26:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <HAL_PCD_MspInit+0x3c>)
 8006d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <HAL_PCD_MspInit+0x3c>)
 8006d2c:	2180      	movs	r1, #128	; 0x80
 8006d2e:	0409      	lsls	r1, r1, #16
 8006d30:	430a      	orrs	r2, r1
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006d34:	2200      	movs	r2, #0
 8006d36:	2100      	movs	r1, #0
 8006d38:	201f      	movs	r0, #31
 8006d3a:	f7f9 fbab 	bl	8000494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006d3e:	201f      	movs	r0, #31
 8006d40:	f7f9 fbbd 	bl	80004be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d44:	46c0      	nop			; (mov r8, r8)
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40005c00 	.word	0x40005c00
 8006d50:	40021000 	.word	0x40021000

08006d54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	23bc      	movs	r3, #188	; 0xbc
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	58d2      	ldr	r2, [r2, r3]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	21ac      	movs	r1, #172	; 0xac
 8006d68:	0089      	lsls	r1, r1, #2
 8006d6a:	468c      	mov	ip, r1
 8006d6c:	4463      	add	r3, ip
 8006d6e:	0019      	movs	r1, r3
 8006d70:	0010      	movs	r0, r2
 8006d72:	f7fe fc43 	bl	80055fc <USBD_LL_SetupStage>
}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b002      	add	sp, #8
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d7e:	b590      	push	{r4, r7, lr}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	000a      	movs	r2, r1
 8006d88:	1cfb      	adds	r3, r7, #3
 8006d8a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	23bc      	movs	r3, #188	; 0xbc
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	58d4      	ldr	r4, [r2, r3]
 8006d94:	1cfb      	adds	r3, r7, #3
 8006d96:	781a      	ldrb	r2, [r3, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	23be      	movs	r3, #190	; 0xbe
 8006d9c:	0059      	lsls	r1, r3, #1
 8006d9e:	0013      	movs	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	18c3      	adds	r3, r0, r3
 8006da8:	185b      	adds	r3, r3, r1
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	1cfb      	adds	r3, r7, #3
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	0019      	movs	r1, r3
 8006db2:	0020      	movs	r0, r4
 8006db4:	f7fe fc7e 	bl	80056b4 <USBD_LL_DataOutStage>
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b003      	add	sp, #12
 8006dbe:	bd90      	pop	{r4, r7, pc}

08006dc0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	000a      	movs	r2, r1
 8006dca:	1cfb      	adds	r3, r7, #3
 8006dcc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	23bc      	movs	r3, #188	; 0xbc
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	58d0      	ldr	r0, [r2, r3]
 8006dd6:	1cfb      	adds	r3, r7, #3
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	0013      	movs	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	189b      	adds	r3, r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	18cb      	adds	r3, r1, r3
 8006de6:	333c      	adds	r3, #60	; 0x3c
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	1cfb      	adds	r3, r7, #3
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	0019      	movs	r1, r3
 8006df0:	f7fe fce2 	bl	80057b8 <USBD_LL_DataInStage>
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	23bc      	movs	r3, #188	; 0xbc
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	58d3      	ldr	r3, [r2, r3]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7fe fe13 	bl	8005a38 <USBD_LL_SOF>
}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b002      	add	sp, #8
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e22:	230f      	movs	r3, #15
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d001      	beq.n	8006e36 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8006e32:	f7ff fe99 	bl	8006b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	23bc      	movs	r3, #188	; 0xbc
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	58d2      	ldr	r2, [r2, r3]
 8006e3e:	230f      	movs	r3, #15
 8006e40:	18fb      	adds	r3, r7, r3
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	0019      	movs	r1, r3
 8006e46:	0010      	movs	r0, r2
 8006e48:	f7fe fdbb 	bl	80059c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	23bc      	movs	r3, #188	; 0xbc
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	58d3      	ldr	r3, [r2, r3]
 8006e54:	0018      	movs	r0, r3
 8006e56:	f7fe fd6c 	bl	8005932 <USBD_LL_Reset>
}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b004      	add	sp, #16
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	23bc      	movs	r3, #188	; 0xbc
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	58d3      	ldr	r3, [r2, r3]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7fe fdb5 	bl	80059e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HAL_PCD_SuspendCallback+0x34>)
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <HAL_PCD_SuspendCallback+0x34>)
 8006e88:	2106      	movs	r1, #6
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b002      	add	sp, #8
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	e000ed00 	.word	0xe000ed00

08006e9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <HAL_PCD_ResumeCallback+0x38>)
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <HAL_PCD_ResumeCallback+0x38>)
 8006eb2:	2106      	movs	r1, #6
 8006eb4:	438a      	bics	r2, r1
 8006eb6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8006eb8:	f000 fa14 	bl	80072e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	23bc      	movs	r3, #188	; 0xbc
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f7fe fda5 	bl	8005a14 <USBD_LL_Resume>
}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	e000ed00 	.word	0xe000ed00

08006ed8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ee0:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006ee2:	23bc      	movs	r3, #188	; 0xbc
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	23a6      	movs	r3, #166	; 0xa6
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4923      	ldr	r1, [pc, #140]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006ef2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8006ef4:	4b22      	ldr	r3, [pc, #136]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006ef6:	4a23      	ldr	r2, [pc, #140]	; (8006f84 <USBD_LL_Init+0xac>)
 8006ef8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006efa:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006efc:	2208      	movs	r2, #8
 8006efe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f00:	4b1f      	ldr	r3, [pc, #124]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006f02:	2202      	movs	r2, #2
 8006f04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f06:	4b1e      	ldr	r3, [pc, #120]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006f08:	2202      	movs	r2, #2
 8006f0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f12:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f18:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f1e:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <USBD_LL_Init+0xa8>)
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7f9 fc97 	bl	8000854 <HAL_PCD_Init>
 8006f26:	1e03      	subs	r3, r0, #0
 8006f28:	d001      	beq.n	8006f2e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8006f2a:	f7ff fe1d 	bl	8006b68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	23a6      	movs	r3, #166	; 0xa6
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	58d0      	ldr	r0, [r2, r3]
 8006f36:	2318      	movs	r3, #24
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	f7fb f890 	bl	8002060 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	23a6      	movs	r3, #166	; 0xa6
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	58d0      	ldr	r0, [r2, r3]
 8006f48:	2358      	movs	r3, #88	; 0x58
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	f7fb f887 	bl	8002060 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	23a6      	movs	r3, #166	; 0xa6
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	58d0      	ldr	r0, [r2, r3]
 8006f5a:	2398      	movs	r3, #152	; 0x98
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2181      	movs	r1, #129	; 0x81
 8006f60:	f7fb f87e 	bl	8002060 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	23a6      	movs	r3, #166	; 0xa6
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	58d0      	ldr	r0, [r2, r3]
 8006f6c:	23d8      	movs	r3, #216	; 0xd8
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2101      	movs	r1, #1
 8006f72:	f7fb f875 	bl	8002060 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000494 	.word	0x20000494
 8006f84:	40005c00 	.word	0x40005c00

08006f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f90:	210f      	movs	r1, #15
 8006f92:	187b      	adds	r3, r7, r1
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f98:	260e      	movs	r6, #14
 8006f9a:	19bb      	adds	r3, r7, r6
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	23a6      	movs	r3, #166	; 0xa6
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	58d3      	ldr	r3, [r2, r3]
 8006fa8:	000d      	movs	r5, r1
 8006faa:	187c      	adds	r4, r7, r1
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7f9 fd61 	bl	8000a74 <HAL_PCD_Start>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb6:	19bc      	adds	r4, r7, r6
 8006fb8:	0029      	movs	r1, r5
 8006fba:	187b      	adds	r3, r7, r1
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f000 f997 	bl	80072f2 <USBD_Get_USB_Status>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8006fc8:	19bb      	adds	r3, r7, r6
 8006fca:	781b      	ldrb	r3, [r3, #0]
}
 8006fcc:	0018      	movs	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b005      	add	sp, #20
 8006fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fd4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	000c      	movs	r4, r1
 8006fde:	0010      	movs	r0, r2
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	1cfb      	adds	r3, r7, #3
 8006fe4:	1c22      	adds	r2, r4, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	1cbb      	adds	r3, r7, #2
 8006fea:	1c02      	adds	r2, r0, #0
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	003b      	movs	r3, r7
 8006ff0:	1c0a      	adds	r2, r1, #0
 8006ff2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff4:	260f      	movs	r6, #15
 8006ff6:	19bb      	adds	r3, r7, r6
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ffc:	250e      	movs	r5, #14
 8006ffe:	197b      	adds	r3, r7, r5
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	23a6      	movs	r3, #166	; 0xa6
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	58d0      	ldr	r0, [r2, r3]
 800700c:	19bc      	adds	r4, r7, r6
 800700e:	1cbb      	adds	r3, r7, #2
 8007010:	781d      	ldrb	r5, [r3, #0]
 8007012:	003b      	movs	r3, r7
 8007014:	881a      	ldrh	r2, [r3, #0]
 8007016:	1cfb      	adds	r3, r7, #3
 8007018:	7819      	ldrb	r1, [r3, #0]
 800701a:	002b      	movs	r3, r5
 800701c:	f7f9 fef7 	bl	8000e0e <HAL_PCD_EP_Open>
 8007020:	0003      	movs	r3, r0
 8007022:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007024:	250e      	movs	r5, #14
 8007026:	197c      	adds	r4, r7, r5
 8007028:	19bb      	adds	r3, r7, r6
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 f960 	bl	80072f2 <USBD_Get_USB_Status>
 8007032:	0003      	movs	r3, r0
 8007034:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007036:	197b      	adds	r3, r7, r5
 8007038:	781b      	ldrb	r3, [r3, #0]
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b005      	add	sp, #20
 8007040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	000a      	movs	r2, r1
 800704c:	1cfb      	adds	r3, r7, #3
 800704e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	210f      	movs	r1, #15
 8007052:	187b      	adds	r3, r7, r1
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007058:	260e      	movs	r6, #14
 800705a:	19bb      	adds	r3, r7, r6
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	23a6      	movs	r3, #166	; 0xa6
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	58d2      	ldr	r2, [r2, r3]
 8007068:	000d      	movs	r5, r1
 800706a:	187c      	adds	r4, r7, r1
 800706c:	1cfb      	adds	r3, r7, #3
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	0019      	movs	r1, r3
 8007072:	0010      	movs	r0, r2
 8007074:	f7f9 ff43 	bl	8000efe <HAL_PCD_EP_Close>
 8007078:	0003      	movs	r3, r0
 800707a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800707c:	19bc      	adds	r4, r7, r6
 800707e:	0029      	movs	r1, r5
 8007080:	187b      	adds	r3, r7, r1
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 f934 	bl	80072f2 <USBD_Get_USB_Status>
 800708a:	0003      	movs	r3, r0
 800708c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800708e:	19bb      	adds	r3, r7, r6
 8007090:	781b      	ldrb	r3, [r3, #0]
}
 8007092:	0018      	movs	r0, r3
 8007094:	46bd      	mov	sp, r7
 8007096:	b005      	add	sp, #20
 8007098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800709a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800709a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	000a      	movs	r2, r1
 80070a4:	1cfb      	adds	r3, r7, #3
 80070a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a8:	210f      	movs	r1, #15
 80070aa:	187b      	adds	r3, r7, r1
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b0:	260e      	movs	r6, #14
 80070b2:	19bb      	adds	r3, r7, r6
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	23a6      	movs	r3, #166	; 0xa6
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	58d2      	ldr	r2, [r2, r3]
 80070c0:	000d      	movs	r5, r1
 80070c2:	187c      	adds	r4, r7, r1
 80070c4:	1cfb      	adds	r3, r7, #3
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	0019      	movs	r1, r3
 80070ca:	0010      	movs	r0, r2
 80070cc:	f7f9 fff5 	bl	80010ba <HAL_PCD_EP_SetStall>
 80070d0:	0003      	movs	r3, r0
 80070d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070d4:	19bc      	adds	r4, r7, r6
 80070d6:	0029      	movs	r1, r5
 80070d8:	187b      	adds	r3, r7, r1
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	0018      	movs	r0, r3
 80070de:	f000 f908 	bl	80072f2 <USBD_Get_USB_Status>
 80070e2:	0003      	movs	r3, r0
 80070e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80070e6:	19bb      	adds	r3, r7, r6
 80070e8:	781b      	ldrb	r3, [r3, #0]
}
 80070ea:	0018      	movs	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b005      	add	sp, #20
 80070f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	000a      	movs	r2, r1
 80070fc:	1cfb      	adds	r3, r7, #3
 80070fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007100:	210f      	movs	r1, #15
 8007102:	187b      	adds	r3, r7, r1
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007108:	260e      	movs	r6, #14
 800710a:	19bb      	adds	r3, r7, r6
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	23a6      	movs	r3, #166	; 0xa6
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	58d2      	ldr	r2, [r2, r3]
 8007118:	000d      	movs	r5, r1
 800711a:	187c      	adds	r4, r7, r1
 800711c:	1cfb      	adds	r3, r7, #3
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	0019      	movs	r1, r3
 8007122:	0010      	movs	r0, r2
 8007124:	f7fa f825 	bl	8001172 <HAL_PCD_EP_ClrStall>
 8007128:	0003      	movs	r3, r0
 800712a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800712c:	19bc      	adds	r4, r7, r6
 800712e:	0029      	movs	r1, r5
 8007130:	187b      	adds	r3, r7, r1
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f8dc 	bl	80072f2 <USBD_Get_USB_Status>
 800713a:	0003      	movs	r3, r0
 800713c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800713e:	19bb      	adds	r3, r7, r6
 8007140:	781b      	ldrb	r3, [r3, #0]
}
 8007142:	0018      	movs	r0, r3
 8007144:	46bd      	mov	sp, r7
 8007146:	b005      	add	sp, #20
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800714a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	000a      	movs	r2, r1
 8007154:	1cfb      	adds	r3, r7, #3
 8007156:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	23a6      	movs	r3, #166	; 0xa6
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	58d3      	ldr	r3, [r2, r3]
 8007160:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007162:	1cfb      	adds	r3, r7, #3
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b25b      	sxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	da0d      	bge.n	8007188 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800716c:	1cfb      	adds	r3, r7, #3
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	227f      	movs	r2, #127	; 0x7f
 8007172:	4013      	ands	r3, r2
 8007174:	68f9      	ldr	r1, [r7, #12]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	0013      	movs	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	189b      	adds	r3, r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	18cb      	adds	r3, r1, r3
 8007182:	3302      	adds	r3, #2
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	e00d      	b.n	80071a4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007188:	1cfb      	adds	r3, r7, #3
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	227f      	movs	r2, #127	; 0x7f
 800718e:	401a      	ands	r2, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	23b5      	movs	r3, #181	; 0xb5
 8007194:	0059      	lsls	r1, r3, #1
 8007196:	0013      	movs	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	189b      	adds	r3, r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	18c3      	adds	r3, r0, r3
 80071a0:	185b      	adds	r3, r3, r1
 80071a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071a4:	0018      	movs	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b004      	add	sp, #16
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	000a      	movs	r2, r1
 80071b6:	1cfb      	adds	r3, r7, #3
 80071b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ba:	210f      	movs	r1, #15
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c2:	260e      	movs	r6, #14
 80071c4:	19bb      	adds	r3, r7, r6
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	23a6      	movs	r3, #166	; 0xa6
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	58d2      	ldr	r2, [r2, r3]
 80071d2:	000d      	movs	r5, r1
 80071d4:	187c      	adds	r4, r7, r1
 80071d6:	1cfb      	adds	r3, r7, #3
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	0019      	movs	r1, r3
 80071dc:	0010      	movs	r0, r2
 80071de:	f7f9 fdeb 	bl	8000db8 <HAL_PCD_SetAddress>
 80071e2:	0003      	movs	r3, r0
 80071e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071e6:	19bc      	adds	r4, r7, r6
 80071e8:	0029      	movs	r1, r5
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	0018      	movs	r0, r3
 80071f0:	f000 f87f 	bl	80072f2 <USBD_Get_USB_Status>
 80071f4:	0003      	movs	r3, r0
 80071f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80071f8:	19bb      	adds	r3, r7, r6
 80071fa:	781b      	ldrb	r3, [r3, #0]
}
 80071fc:	0018      	movs	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	b005      	add	sp, #20
 8007202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007204 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	0008      	movs	r0, r1
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	0019      	movs	r1, r3
 8007212:	230b      	movs	r3, #11
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	1c02      	adds	r2, r0, #0
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	2408      	movs	r4, #8
 800721c:	193b      	adds	r3, r7, r4
 800721e:	1c0a      	adds	r2, r1, #0
 8007220:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007222:	2117      	movs	r1, #23
 8007224:	187b      	adds	r3, r7, r1
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800722a:	2516      	movs	r5, #22
 800722c:	197b      	adds	r3, r7, r5
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	23a6      	movs	r3, #166	; 0xa6
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	58d0      	ldr	r0, [r2, r3]
 800723a:	193b      	adds	r3, r7, r4
 800723c:	881d      	ldrh	r5, [r3, #0]
 800723e:	000e      	movs	r6, r1
 8007240:	187c      	adds	r4, r7, r1
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	230b      	movs	r3, #11
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	7819      	ldrb	r1, [r3, #0]
 800724a:	002b      	movs	r3, r5
 800724c:	f7f9 feec 	bl	8001028 <HAL_PCD_EP_Transmit>
 8007250:	0003      	movs	r3, r0
 8007252:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007254:	2516      	movs	r5, #22
 8007256:	197c      	adds	r4, r7, r5
 8007258:	0031      	movs	r1, r6
 800725a:	187b      	adds	r3, r7, r1
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	0018      	movs	r0, r3
 8007260:	f000 f847 	bl	80072f2 <USBD_Get_USB_Status>
 8007264:	0003      	movs	r3, r0
 8007266:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007268:	197b      	adds	r3, r7, r5
 800726a:	781b      	ldrb	r3, [r3, #0]
}
 800726c:	0018      	movs	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	b007      	add	sp, #28
 8007272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007274 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	0008      	movs	r0, r1
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	0019      	movs	r1, r3
 8007282:	230b      	movs	r3, #11
 8007284:	18fb      	adds	r3, r7, r3
 8007286:	1c02      	adds	r2, r0, #0
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	2408      	movs	r4, #8
 800728c:	193b      	adds	r3, r7, r4
 800728e:	1c0a      	adds	r2, r1, #0
 8007290:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007292:	2117      	movs	r1, #23
 8007294:	187b      	adds	r3, r7, r1
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729a:	2516      	movs	r5, #22
 800729c:	197b      	adds	r3, r7, r5
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	23a6      	movs	r3, #166	; 0xa6
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	58d0      	ldr	r0, [r2, r3]
 80072aa:	193b      	adds	r3, r7, r4
 80072ac:	881d      	ldrh	r5, [r3, #0]
 80072ae:	000e      	movs	r6, r1
 80072b0:	187c      	adds	r4, r7, r1
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	230b      	movs	r3, #11
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	7819      	ldrb	r1, [r3, #0]
 80072ba:	002b      	movs	r3, r5
 80072bc:	f7f9 fe70 	bl	8000fa0 <HAL_PCD_EP_Receive>
 80072c0:	0003      	movs	r3, r0
 80072c2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072c4:	2516      	movs	r5, #22
 80072c6:	197c      	adds	r4, r7, r5
 80072c8:	0031      	movs	r1, r6
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	0018      	movs	r0, r3
 80072d0:	f000 f80f 	bl	80072f2 <USBD_Get_USB_Status>
 80072d4:	0003      	movs	r3, r0
 80072d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80072d8:	197b      	adds	r3, r7, r5
 80072da:	781b      	ldrb	r3, [r3, #0]
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b007      	add	sp, #28
 80072e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80072e8:	f7ff fa72 	bl	80067d0 <SystemClock_Config>
}
 80072ec:	46c0      	nop			; (mov r8, r8)
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	0002      	movs	r2, r0
 80072fa:	1dfb      	adds	r3, r7, #7
 80072fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072fe:	230f      	movs	r3, #15
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007306:	1dfb      	adds	r3, r7, #7
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d00d      	beq.n	800732a <USBD_Get_USB_Status+0x38>
 800730e:	dc02      	bgt.n	8007316 <USBD_Get_USB_Status+0x24>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <USBD_Get_USB_Status+0x2e>
 8007314:	e018      	b.n	8007348 <USBD_Get_USB_Status+0x56>
 8007316:	2b02      	cmp	r3, #2
 8007318:	d00c      	beq.n	8007334 <USBD_Get_USB_Status+0x42>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d00f      	beq.n	800733e <USBD_Get_USB_Status+0x4c>
 800731e:	e013      	b.n	8007348 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007320:	230f      	movs	r3, #15
 8007322:	18fb      	adds	r3, r7, r3
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
    break;
 8007328:	e013      	b.n	8007352 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800732a:	230f      	movs	r3, #15
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	2202      	movs	r2, #2
 8007330:	701a      	strb	r2, [r3, #0]
    break;
 8007332:	e00e      	b.n	8007352 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007334:	230f      	movs	r3, #15
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
    break;
 800733c:	e009      	b.n	8007352 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800733e:	230f      	movs	r3, #15
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
    break;
 8007346:	e004      	b.n	8007352 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007348:	230f      	movs	r3, #15
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2202      	movs	r2, #2
 800734e:	701a      	strb	r2, [r3, #0]
    break;
 8007350:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007352:	230f      	movs	r3, #15
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	781b      	ldrb	r3, [r3, #0]
}
 8007358:	0018      	movs	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	b004      	add	sp, #16
 800735e:	bd80      	pop	{r7, pc}

08007360 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007366:	0018      	movs	r0, r3
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007370:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	0002      	movs	r2, r0
 8007380:	1dfb      	adds	r3, r7, #7
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	1dbb      	adds	r3, r7, #6
 8007386:	1c0a      	adds	r2, r1, #0
 8007388:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800738a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b002      	add	sp, #8
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	0002      	movs	r2, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2212      	movs	r2, #18
 80073a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073aa:	0018      	movs	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	b002      	add	sp, #8
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	20000130 	.word	0x20000130

080073b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	0002      	movs	r2, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	1dfb      	adds	r3, r7, #7
 80073c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2204      	movs	r2, #4
 80073ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073cc:	4b02      	ldr	r3, [pc, #8]	; (80073d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b002      	add	sp, #8
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	20000144 	.word	0x20000144

080073dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	0002      	movs	r2, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	1dfb      	adds	r3, r7, #7
 80073e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80073ea:	1dfb      	adds	r3, r7, #7
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	4908      	ldr	r1, [pc, #32]	; (8007418 <USBD_FS_ProductStrDescriptor+0x3c>)
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <USBD_FS_ProductStrDescriptor+0x40>)
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7ff f8c9 	bl	8006590 <USBD_GetString>
 80073fe:	e005      	b.n	800740c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4905      	ldr	r1, [pc, #20]	; (8007418 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <USBD_FS_ProductStrDescriptor+0x40>)
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff f8c2 	bl	8006590 <USBD_GetString>
  }
  return USBD_StrDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800740e:	0018      	movs	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	b002      	add	sp, #8
 8007414:	bd80      	pop	{r7, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	20000788 	.word	0x20000788
 800741c:	0800785c 	.word	0x0800785c

08007420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	0002      	movs	r2, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	1dfb      	adds	r3, r7, #7
 800742c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4904      	ldr	r1, [pc, #16]	; (8007444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007434:	0018      	movs	r0, r3
 8007436:	f7ff f8ab 	bl	8006590 <USBD_GetString>
  return USBD_StrDesc;
 800743a:	4b02      	ldr	r3, [pc, #8]	; (8007444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800743c:	0018      	movs	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	b002      	add	sp, #8
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000788 	.word	0x20000788
 8007448:	0800787c 	.word	0x0800787c

0800744c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	0002      	movs	r2, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	1dfb      	adds	r3, r7, #7
 8007458:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	221a      	movs	r2, #26
 800745e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007460:	f000 f84c 	bl	80074fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007464:	4b02      	ldr	r3, [pc, #8]	; (8007470 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007466:	0018      	movs	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	b002      	add	sp, #8
 800746c:	bd80      	pop	{r7, pc}
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	20000148 	.word	0x20000148

08007474 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	0002      	movs	r2, r0
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	1dfb      	adds	r3, r7, #7
 8007480:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007482:	1dfb      	adds	r3, r7, #7
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	4908      	ldr	r1, [pc, #32]	; (80074b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007490:	0018      	movs	r0, r3
 8007492:	f7ff f87d 	bl	8006590 <USBD_GetString>
 8007496:	e005      	b.n	80074a4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	4905      	ldr	r1, [pc, #20]	; (80074b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 800749e:	0018      	movs	r0, r3
 80074a0:	f7ff f876 	bl	8006590 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074a4:	4b02      	ldr	r3, [pc, #8]	; (80074b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80074a6:	0018      	movs	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	b002      	add	sp, #8
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	20000788 	.word	0x20000788
 80074b4:	08007890 	.word	0x08007890

080074b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	0002      	movs	r2, r0
 80074c0:	6039      	str	r1, [r7, #0]
 80074c2:	1dfb      	adds	r3, r7, #7
 80074c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	4908      	ldr	r1, [pc, #32]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80074d4:	0018      	movs	r0, r3
 80074d6:	f7ff f85b 	bl	8006590 <USBD_GetString>
 80074da:	e005      	b.n	80074e8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	4905      	ldr	r1, [pc, #20]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80074e2:	0018      	movs	r0, r3
 80074e4:	f7ff f854 	bl	8006590 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80074ea:	0018      	movs	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b002      	add	sp, #8
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	20000788 	.word	0x20000788
 80074f8:	080078a4 	.word	0x080078a4

080074fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <Get_SerialNum+0x48>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <Get_SerialNum+0x4c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <Get_SerialNum+0x50>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	18d3      	adds	r3, r2, r3
 800751a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007522:	490b      	ldr	r1, [pc, #44]	; (8007550 <Get_SerialNum+0x54>)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2208      	movs	r2, #8
 8007528:	0018      	movs	r0, r3
 800752a:	f000 f815 	bl	8007558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800752e:	4909      	ldr	r1, [pc, #36]	; (8007554 <Get_SerialNum+0x58>)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2204      	movs	r2, #4
 8007534:	0018      	movs	r0, r3
 8007536:	f000 f80f 	bl	8007558 <IntToUnicode>
  }
}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b004      	add	sp, #16
 8007540:	bd80      	pop	{r7, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	1ff80050 	.word	0x1ff80050
 8007548:	1ff80054 	.word	0x1ff80054
 800754c:	1ff80058 	.word	0x1ff80058
 8007550:	2000014a 	.word	0x2000014a
 8007554:	2000015a 	.word	0x2000015a

08007558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	1dfb      	adds	r3, r7, #7
 8007564:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007566:	2117      	movs	r1, #23
 8007568:	187b      	adds	r3, r7, r1
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800756e:	187b      	adds	r3, r7, r1
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	e02f      	b.n	80075d6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	0f1b      	lsrs	r3, r3, #28
 800757a:	2b09      	cmp	r3, #9
 800757c:	d80d      	bhi.n	800759a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	0f1b      	lsrs	r3, r3, #28
 8007582:	b2da      	uxtb	r2, r3
 8007584:	2317      	movs	r3, #23
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	0019      	movs	r1, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	185b      	adds	r3, r3, r1
 8007592:	3230      	adds	r2, #48	; 0x30
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	e00c      	b.n	80075b4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	0f1b      	lsrs	r3, r3, #28
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	2317      	movs	r3, #23
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	0019      	movs	r1, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	185b      	adds	r3, r3, r1
 80075ae:	3237      	adds	r2, #55	; 0x37
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075ba:	2117      	movs	r1, #23
 80075bc:	187b      	adds	r3, r7, r1
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	3301      	adds	r3, #1
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	18d3      	adds	r3, r2, r3
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075cc:	187b      	adds	r3, r7, r1
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	187b      	adds	r3, r7, r1
 80075d2:	3201      	adds	r2, #1
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	2317      	movs	r3, #23
 80075d8:	18fa      	adds	r2, r7, r3
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3c8      	bcc.n	8007576 <IntToUnicode+0x1e>
  }
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b006      	add	sp, #24
 80075ea:	bd80      	pop	{r7, pc}

080075ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80075ec:	480d      	ldr	r0, [pc, #52]	; (8007624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80075ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80075f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075f2:	e003      	b.n	80075fc <LoopCopyDataInit>

080075f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80075f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075fa:	3104      	adds	r1, #4

080075fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80075fc:	480b      	ldr	r0, [pc, #44]	; (800762c <LoopForever+0xa>)
  ldr  r3, =_edata
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007604:	d3f6      	bcc.n	80075f4 <CopyDataInit>
  ldr  r2, =_sbss
 8007606:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <LoopForever+0x12>)
  b  LoopFillZerobss
 8007608:	e002      	b.n	8007610 <LoopFillZerobss>

0800760a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800760a:	2300      	movs	r3, #0
  str  r3, [r2]
 800760c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800760e:	3204      	adds	r2, #4

08007610 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <LoopForever+0x16>)
  cmp  r2, r3
 8007612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007614:	d3f9      	bcc.n	800760a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007616:	f7ff fb0b 	bl	8006c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800761a:	f000 f817 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800761e:	f7ff f8b5 	bl	800678c <main>

08007622 <LoopForever>:

LoopForever:
    b LoopForever
 8007622:	e7fe      	b.n	8007622 <LoopForever>
  ldr   r0, =_estack
 8007624:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8007628:	08007970 	.word	0x08007970
  ldr  r0, =_sdata
 800762c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007630:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8007634:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8007638:	2000098c 	.word	0x2000098c

0800763c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800763c:	e7fe      	b.n	800763c <ADC1_COMP_IRQHandler>
	...

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	; (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	20000164 	.word	0x20000164

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	2600      	movs	r6, #0
 8007650:	4d0c      	ldr	r5, [pc, #48]	; (8007684 <__libc_init_array+0x38>)
 8007652:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007654:	1b64      	subs	r4, r4, r5
 8007656:	10a4      	asrs	r4, r4, #2
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	2600      	movs	r6, #0
 800765e:	f000 f8f1 	bl	8007844 <_init>
 8007662:	4d0a      	ldr	r5, [pc, #40]	; (800768c <__libc_init_array+0x40>)
 8007664:	4c0a      	ldr	r4, [pc, #40]	; (8007690 <__libc_init_array+0x44>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	00b3      	lsls	r3, r6, #2
 8007672:	58eb      	ldr	r3, [r5, r3]
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	00b3      	lsls	r3, r6, #2
 800767c:	58eb      	ldr	r3, [r5, r3]
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	08007968 	.word	0x08007968
 8007688:	08007968 	.word	0x08007968
 800768c:	08007968 	.word	0x08007968
 8007690:	0800796c 	.word	0x0800796c

08007694 <malloc>:
 8007694:	b510      	push	{r4, lr}
 8007696:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <malloc+0x10>)
 8007698:	0001      	movs	r1, r0
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	f000 f860 	bl	8007760 <_malloc_r>
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	20000164 	.word	0x20000164

080076a8 <free>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <free+0x10>)
 80076ac:	0001      	movs	r1, r0
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	f000 f80c 	bl	80076cc <_free_r>
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	20000164 	.word	0x20000164

080076bc <memset>:
 80076bc:	0003      	movs	r3, r0
 80076be:	1812      	adds	r2, r2, r0
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d100      	bne.n	80076c6 <memset+0xa>
 80076c4:	4770      	bx	lr
 80076c6:	7019      	strb	r1, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	e7f9      	b.n	80076c0 <memset+0x4>

080076cc <_free_r>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	0005      	movs	r5, r0
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d010      	beq.n	80076f6 <_free_r+0x2a>
 80076d4:	1f0c      	subs	r4, r1, #4
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da00      	bge.n	80076de <_free_r+0x12>
 80076dc:	18e4      	adds	r4, r4, r3
 80076de:	0028      	movs	r0, r5
 80076e0:	f000 f8ae 	bl	8007840 <__malloc_lock>
 80076e4:	4a1d      	ldr	r2, [pc, #116]	; (800775c <_free_r+0x90>)
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <_free_r+0x2c>
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	6014      	str	r4, [r2, #0]
 80076f0:	0028      	movs	r0, r5
 80076f2:	f000 f8a6 	bl	8007842 <__malloc_unlock>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d909      	bls.n	8007710 <_free_r+0x44>
 80076fc:	6821      	ldr	r1, [r4, #0]
 80076fe:	1860      	adds	r0, r4, r1
 8007700:	4283      	cmp	r3, r0
 8007702:	d1f3      	bne.n	80076ec <_free_r+0x20>
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	1841      	adds	r1, r0, r1
 800770a:	6021      	str	r1, [r4, #0]
 800770c:	e7ee      	b.n	80076ec <_free_r+0x20>
 800770e:	0013      	movs	r3, r2
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	2a00      	cmp	r2, #0
 8007714:	d001      	beq.n	800771a <_free_r+0x4e>
 8007716:	42a2      	cmp	r2, r4
 8007718:	d9f9      	bls.n	800770e <_free_r+0x42>
 800771a:	6819      	ldr	r1, [r3, #0]
 800771c:	1858      	adds	r0, r3, r1
 800771e:	42a0      	cmp	r0, r4
 8007720:	d10b      	bne.n	800773a <_free_r+0x6e>
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	1809      	adds	r1, r1, r0
 8007726:	1858      	adds	r0, r3, r1
 8007728:	6019      	str	r1, [r3, #0]
 800772a:	4282      	cmp	r2, r0
 800772c:	d1e0      	bne.n	80076f0 <_free_r+0x24>
 800772e:	6810      	ldr	r0, [r2, #0]
 8007730:	6852      	ldr	r2, [r2, #4]
 8007732:	1841      	adds	r1, r0, r1
 8007734:	6019      	str	r1, [r3, #0]
 8007736:	605a      	str	r2, [r3, #4]
 8007738:	e7da      	b.n	80076f0 <_free_r+0x24>
 800773a:	42a0      	cmp	r0, r4
 800773c:	d902      	bls.n	8007744 <_free_r+0x78>
 800773e:	230c      	movs	r3, #12
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	e7d5      	b.n	80076f0 <_free_r+0x24>
 8007744:	6821      	ldr	r1, [r4, #0]
 8007746:	1860      	adds	r0, r4, r1
 8007748:	4282      	cmp	r2, r0
 800774a:	d103      	bne.n	8007754 <_free_r+0x88>
 800774c:	6810      	ldr	r0, [r2, #0]
 800774e:	6852      	ldr	r2, [r2, #4]
 8007750:	1841      	adds	r1, r0, r1
 8007752:	6021      	str	r1, [r4, #0]
 8007754:	6062      	str	r2, [r4, #4]
 8007756:	605c      	str	r4, [r3, #4]
 8007758:	e7ca      	b.n	80076f0 <_free_r+0x24>
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	200001ec 	.word	0x200001ec

08007760 <_malloc_r>:
 8007760:	2303      	movs	r3, #3
 8007762:	b570      	push	{r4, r5, r6, lr}
 8007764:	1ccd      	adds	r5, r1, #3
 8007766:	439d      	bics	r5, r3
 8007768:	3508      	adds	r5, #8
 800776a:	0006      	movs	r6, r0
 800776c:	2d0c      	cmp	r5, #12
 800776e:	d21e      	bcs.n	80077ae <_malloc_r+0x4e>
 8007770:	250c      	movs	r5, #12
 8007772:	42a9      	cmp	r1, r5
 8007774:	d81d      	bhi.n	80077b2 <_malloc_r+0x52>
 8007776:	0030      	movs	r0, r6
 8007778:	f000 f862 	bl	8007840 <__malloc_lock>
 800777c:	4a25      	ldr	r2, [pc, #148]	; (8007814 <_malloc_r+0xb4>)
 800777e:	6814      	ldr	r4, [r2, #0]
 8007780:	0021      	movs	r1, r4
 8007782:	2900      	cmp	r1, #0
 8007784:	d119      	bne.n	80077ba <_malloc_r+0x5a>
 8007786:	4c24      	ldr	r4, [pc, #144]	; (8007818 <_malloc_r+0xb8>)
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <_malloc_r+0x36>
 800778e:	0030      	movs	r0, r6
 8007790:	f000 f844 	bl	800781c <_sbrk_r>
 8007794:	6020      	str	r0, [r4, #0]
 8007796:	0029      	movs	r1, r5
 8007798:	0030      	movs	r0, r6
 800779a:	f000 f83f 	bl	800781c <_sbrk_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d12b      	bne.n	80077fa <_malloc_r+0x9a>
 80077a2:	230c      	movs	r3, #12
 80077a4:	0030      	movs	r0, r6
 80077a6:	6033      	str	r3, [r6, #0]
 80077a8:	f000 f84b 	bl	8007842 <__malloc_unlock>
 80077ac:	e003      	b.n	80077b6 <_malloc_r+0x56>
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	dadf      	bge.n	8007772 <_malloc_r+0x12>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	2000      	movs	r0, #0
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	680b      	ldr	r3, [r1, #0]
 80077bc:	1b5b      	subs	r3, r3, r5
 80077be:	d419      	bmi.n	80077f4 <_malloc_r+0x94>
 80077c0:	2b0b      	cmp	r3, #11
 80077c2:	d903      	bls.n	80077cc <_malloc_r+0x6c>
 80077c4:	600b      	str	r3, [r1, #0]
 80077c6:	18cc      	adds	r4, r1, r3
 80077c8:	6025      	str	r5, [r4, #0]
 80077ca:	e003      	b.n	80077d4 <_malloc_r+0x74>
 80077cc:	684b      	ldr	r3, [r1, #4]
 80077ce:	428c      	cmp	r4, r1
 80077d0:	d10d      	bne.n	80077ee <_malloc_r+0x8e>
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	0030      	movs	r0, r6
 80077d6:	f000 f834 	bl	8007842 <__malloc_unlock>
 80077da:	0020      	movs	r0, r4
 80077dc:	2207      	movs	r2, #7
 80077de:	300b      	adds	r0, #11
 80077e0:	1d23      	adds	r3, r4, #4
 80077e2:	4390      	bics	r0, r2
 80077e4:	1ac3      	subs	r3, r0, r3
 80077e6:	d0e7      	beq.n	80077b8 <_malloc_r+0x58>
 80077e8:	425a      	negs	r2, r3
 80077ea:	50e2      	str	r2, [r4, r3]
 80077ec:	e7e4      	b.n	80077b8 <_malloc_r+0x58>
 80077ee:	6063      	str	r3, [r4, #4]
 80077f0:	000c      	movs	r4, r1
 80077f2:	e7ef      	b.n	80077d4 <_malloc_r+0x74>
 80077f4:	000c      	movs	r4, r1
 80077f6:	6849      	ldr	r1, [r1, #4]
 80077f8:	e7c3      	b.n	8007782 <_malloc_r+0x22>
 80077fa:	2303      	movs	r3, #3
 80077fc:	1cc4      	adds	r4, r0, #3
 80077fe:	439c      	bics	r4, r3
 8007800:	42a0      	cmp	r0, r4
 8007802:	d0e1      	beq.n	80077c8 <_malloc_r+0x68>
 8007804:	1a21      	subs	r1, r4, r0
 8007806:	0030      	movs	r0, r6
 8007808:	f000 f808 	bl	800781c <_sbrk_r>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d1db      	bne.n	80077c8 <_malloc_r+0x68>
 8007810:	e7c7      	b.n	80077a2 <_malloc_r+0x42>
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	200001ec 	.word	0x200001ec
 8007818:	200001f0 	.word	0x200001f0

0800781c <_sbrk_r>:
 800781c:	2300      	movs	r3, #0
 800781e:	b570      	push	{r4, r5, r6, lr}
 8007820:	4c06      	ldr	r4, [pc, #24]	; (800783c <_sbrk_r+0x20>)
 8007822:	0005      	movs	r5, r0
 8007824:	0008      	movs	r0, r1
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	f7ff f9cc 	bl	8006bc4 <_sbrk>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d103      	bne.n	8007838 <_sbrk_r+0x1c>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d000      	beq.n	8007838 <_sbrk_r+0x1c>
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	bd70      	pop	{r4, r5, r6, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	20000988 	.word	0x20000988

08007840 <__malloc_lock>:
 8007840:	4770      	bx	lr

08007842 <__malloc_unlock>:
 8007842:	4770      	bx	lr

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
