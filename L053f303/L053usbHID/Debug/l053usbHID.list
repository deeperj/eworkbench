
l053usbHID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008954  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b28  08008b28  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b30  08008b30  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b34  08008b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000164  08008c9c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08008c9c  00020af0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f85  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003262  00000000  00000000  00037111  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  0003a378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  0003b550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e97  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115f6  00000000  00000000  00053437  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000806f9  00000000  00000000  00064a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f78  00000000  00000000  000e51a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080089fc 	.word	0x080089fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	080089fc 	.word	0x080089fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fce4 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f82a 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f000 f9c6 	bl	80007d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000448:	f000 f8a2 	bl	8000590 <MX_I2C1_Init>
  MX_SPI1_Init();
 800044c:	f000 f8e0 	bl	8000610 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000450:	f000 f916 	bl	8000680 <MX_SPI2_Init>
  MX_TSC_Init();
 8000454:	f000 f94a 	bl	80006ec <MX_TSC_Init>
  MX_USART1_UART_Init();
 8000458:	f000 f98c 	bl	8000774 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800045c:	f007 fe1c 	bl	8008098 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  buffer[1]=100;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <main+0x58>)
 8000462:	2264      	movs	r2, #100	; 0x64
 8000464:	705a      	strb	r2, [r3, #1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==GPIO_PIN_SET){
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	019a      	lsls	r2, r3, #6
 800046a:	23a0      	movs	r3, #160	; 0xa0
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 ffab 	bl	80013cc <HAL_GPIO_ReadPin>
 8000476:	0003      	movs	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	d1f4      	bne.n	8000466 <main+0x2e>
		  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 800047c:	4904      	ldr	r1, [pc, #16]	; (8000490 <main+0x58>)
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <main+0x5c>)
 8000480:	2204      	movs	r2, #4
 8000482:	0018      	movs	r0, r3
 8000484:	f006 fc4e 	bl	8006d24 <USBD_HID_SendReport>
		  HAL_Delay(100);
 8000488:	2064      	movs	r0, #100	; 0x64
 800048a:	f000 fd2d 	bl	8000ee8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==GPIO_PIN_SET){
 800048e:	e7ea      	b.n	8000466 <main+0x2e>
 8000490:	200002bc 	.word	0x200002bc
 8000494:	20000360 	.word	0x20000360

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b09d      	sub	sp, #116	; 0x74
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	2438      	movs	r4, #56	; 0x38
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2338      	movs	r3, #56	; 0x38
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f008 fa9f 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	2324      	movs	r3, #36	; 0x24
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f008 fa97 	bl	80089ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004be:	003b      	movs	r3, r7
 80004c0:	0018      	movs	r0, r3
 80004c2:	2324      	movs	r3, #36	; 0x24
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f008 fa90 	bl	80089ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <SystemClock_Config+0xf0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a2e      	ldr	r2, [pc, #184]	; (800058c <SystemClock_Config+0xf4>)
 80004d2:	401a      	ands	r2, r3
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <SystemClock_Config+0xf0>)
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0109      	lsls	r1, r1, #4
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2221      	movs	r2, #33	; 0x21
 80004e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	22a0      	movs	r2, #160	; 0xa0
 80004ea:	02d2      	lsls	r2, r2, #11
 80004ec:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0252      	lsls	r2, r2, #9
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	0352      	lsls	r2, r2, #13
 8000508:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	0412      	lsls	r2, r2, #16
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	187b      	adds	r3, r7, r1
 8000514:	0018      	movs	r0, r3
 8000516:	f002 fd4b 	bl	8002fb0 <HAL_RCC_OscConfig>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800051e:	f000 fa09 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000522:	2124      	movs	r1, #36	; 0x24
 8000524:	187b      	adds	r3, r7, r1
 8000526:	220f      	movs	r2, #15
 8000528:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2203      	movs	r2, #3
 800052e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2101      	movs	r1, #1
 8000546:	0018      	movs	r0, r3
 8000548:	f003 f8f2 	bl	8003730 <HAL_RCC_ClockConfig>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000550:	f000 f9f0 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000554:	003b      	movs	r3, r7
 8000556:	2249      	movs	r2, #73	; 0x49
 8000558:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800055a:	003b      	movs	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000566:	003b      	movs	r3, r7
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	04d2      	lsls	r2, r2, #19
 800056c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	f003 fac1 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800057a:	f000 f9db 	bl	8000934 <Error_Handler>
  }
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b01d      	add	sp, #116	; 0x74
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40007000 	.word	0x40007000
 800058c:	ffffe7ff 	.word	0xffffe7ff

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_I2C1_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_I2C1_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_I2C1_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_I2C1_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C1_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 ff37 	bl	8001440 <HAL_I2C_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f000 f9ad 	bl	8000934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C1_Init+0x74>)
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 ffc4 	bl	800156c <HAL_I2CEx_ConfigAnalogFilter>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 f9a4 	bl	8000934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f807 	bl	8001604 <HAL_I2CEx_ConfigDigitalFilter>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f99b 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001f0 	.word	0x200001f0
 8000608:	40005400 	.word	0x40005400
 800060c:	00707cbb 	.word	0x00707cbb

08000610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_SPI1_Init+0x68>)
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <MX_SPI1_Init+0x6c>)
 8000618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_SPI1_Init+0x68>)
 800061c:	2282      	movs	r2, #130	; 0x82
 800061e:	0052      	lsls	r2, r2, #1
 8000620:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_SPI1_Init+0x68>)
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0212      	lsls	r2, r2, #8
 8000628:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_SPI1_Init+0x68>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_SPI1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_SPI1_Init+0x68>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_SPI1_Init+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_SPI1_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_SPI1_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_SPI1_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_SPI1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_SPI1_Init+0x68>)
 800065c:	2207      	movs	r2, #7
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <MX_SPI1_Init+0x68>)
 8000662:	0018      	movs	r0, r3
 8000664:	f003 fbac 	bl	8003dc0 <HAL_SPI_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800066c:	f000 f962 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	200002c0 	.word	0x200002c0
 800067c:	40013000 	.word	0x40013000

08000680 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_SPI2_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <MX_SPI2_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_SPI2_Init+0x64>)
 800068c:	2282      	movs	r2, #130	; 0x82
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_SPI2_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_SPI2_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_SPI2_Init+0x64>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f003 fb75 	bl	8003dc0 <HAL_SPI_Init>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 f92b 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000198 	.word	0x20000198
 80006e8:	40003800 	.word	0x40003800

080006ec <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TSC_Init+0x80>)
 80006f2:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <MX_TSC_Init+0x84>)
 80006f4:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_TSC_Init+0x80>)
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_TSC_Init+0x80>)
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0452      	lsls	r2, r2, #17
 8000704:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_TSC_Init+0x80>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_TSC_Init+0x80>)
 800070e:	2201      	movs	r2, #1
 8000710:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_TSC_Init+0x80>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_TSC_Init+0x80>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0192      	lsls	r2, r2, #6
 800071e:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_TSC_Init+0x80>)
 8000722:	22a0      	movs	r2, #160	; 0xa0
 8000724:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_TSC_Init+0x80>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_TSC_Init+0x80>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_TSC_Init+0x80>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_TSC_Init+0x80>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_TSC_Init+0x80>)
 8000740:	2291      	movs	r2, #145	; 0x91
 8000742:	0092      	lsls	r2, r2, #2
 8000744:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_TSC_Init+0x80>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_TSC_Init+0x80>)
 800074e:	2291      	movs	r2, #145	; 0x91
 8000750:	00d2      	lsls	r2, r2, #3
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_TSC_Init+0x80>)
 8000756:	0018      	movs	r0, r3
 8000758:	f003 fb9c 	bl	8003e94 <HAL_TSC_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_TSC_Init+0x78>
  {
    Error_Handler();
 8000760:	f000 f8e8 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000318 	.word	0x20000318
 8000770:	40024000 	.word	0x40024000

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000780:	22e1      	movs	r2, #225	; 0xe1
 8000782:	0252      	lsls	r2, r2, #9
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f003 fc11 	bl	8003fe0 <HAL_UART_Init>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f8b7 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000023c 	.word	0x2000023c
 80007d0:	40013800 	.word	0x40013800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	2414      	movs	r4, #20
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2314      	movs	r3, #20
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f008 f901 	bl	80089ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b4c      	ldr	r3, [pc, #304]	; (800091c <MX_GPIO_Init+0x148>)
 80007ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ee:	4b4b      	ldr	r3, [pc, #300]	; (800091c <MX_GPIO_Init+0x148>)
 80007f0:	2104      	movs	r1, #4
 80007f2:	430a      	orrs	r2, r1
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <MX_GPIO_Init+0x148>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	2204      	movs	r2, #4
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <MX_GPIO_Init+0x148>)
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4b45      	ldr	r3, [pc, #276]	; (800091c <MX_GPIO_Init+0x148>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
 800080e:	4b43      	ldr	r3, [pc, #268]	; (800091c <MX_GPIO_Init+0x148>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b40      	ldr	r3, [pc, #256]	; (800091c <MX_GPIO_Init+0x148>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b3f      	ldr	r3, [pc, #252]	; (800091c <MX_GPIO_Init+0x148>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <MX_GPIO_Init+0x148>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b3a      	ldr	r3, [pc, #232]	; (800091c <MX_GPIO_Init+0x148>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b39      	ldr	r3, [pc, #228]	; (800091c <MX_GPIO_Init+0x148>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <MX_GPIO_Init+0x148>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 800084a:	23a0      	movs	r3, #160	; 0xa0
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fdd7 	bl	8001406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000858:	4931      	ldr	r1, [pc, #196]	; (8000920 <MX_GPIO_Init+0x14c>)
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <MX_GPIO_Init+0x150>)
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fdd1 	bl	8001406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0192      	lsls	r2, r2, #6
 800086a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <MX_GPIO_Init+0x154>)
 8000870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000878:	193b      	adds	r3, r7, r4
 800087a:	4a2c      	ldr	r2, [pc, #176]	; (800092c <MX_GPIO_Init+0x158>)
 800087c:	0019      	movs	r1, r3
 800087e:	0010      	movs	r0, r2
 8000880:	f000 fc2e 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	4a28      	ldr	r2, [pc, #160]	; (8000930 <MX_GPIO_Init+0x15c>)
 800088e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	193a      	adds	r2, r7, r4
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fc1e 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2281      	movs	r2, #129	; 0x81
 80008a8:	0052      	lsls	r2, r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	193a      	adds	r2, r7, r4
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fc0d 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2220      	movs	r2, #32
 80008ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2201      	movs	r2, #1
 80008d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80008de:	193a      	adds	r2, r7, r4
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fbfa 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <MX_GPIO_Init+0x14c>)
 80008f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	187b      	adds	r3, r7, r1
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <MX_GPIO_Init+0x150>)
 800090a:	0019      	movs	r1, r3
 800090c:	0010      	movs	r0, r2
 800090e:	f000 fbe7 	bl	80010e0 <HAL_GPIO_Init>

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b00b      	add	sp, #44	; 0x2c
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40021000 	.word	0x40021000
 8000920:	00000c14 	.word	0x00000c14
 8000924:	50000400 	.word	0x50000400
 8000928:	10110000 	.word	0x10110000
 800092c:	50000800 	.word	0x50000800
 8000930:	10120000 	.word	0x10120000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_MspInit+0x24>)
 8000946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x24>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <HAL_MspInit+0x24>)
 8000952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_MspInit+0x24>)
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	0549      	lsls	r1, r1, #21
 800095a:	430a      	orrs	r2, r1
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	230c      	movs	r3, #12
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	0018      	movs	r0, r3
 8000976:	2314      	movs	r3, #20
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f008 f836 	bl	80089ec <memset>
  if(hi2c->Instance==I2C1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d129      	bne.n	80009de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_I2C_MspInit+0x84>)
 800098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_I2C_MspInit+0x84>)
 8000990:	2102      	movs	r1, #2
 8000992:	430a      	orrs	r2, r1
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_I2C_MspInit+0x84>)
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	2202      	movs	r2, #2
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 80009a2:	210c      	movs	r1, #12
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	22c0      	movs	r2, #192	; 0xc0
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2212      	movs	r2, #18
 80009b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2201      	movs	r2, #1
 80009b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2203      	movs	r2, #3
 80009bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2204      	movs	r2, #4
 80009c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_I2C_MspInit+0x88>)
 80009c8:	0019      	movs	r1, r3
 80009ca:	0010      	movs	r0, r2
 80009cc:	f000 fb88 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_I2C_MspInit+0x84>)
 80009d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_I2C_MspInit+0x84>)
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	0389      	lsls	r1, r1, #14
 80009da:	430a      	orrs	r2, r1
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b008      	add	sp, #32
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40005400 	.word	0x40005400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	50000400 	.word	0x50000400

080009f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b08b      	sub	sp, #44	; 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	2314      	movs	r3, #20
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	0018      	movs	r0, r3
 8000a02:	2314      	movs	r3, #20
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f007 fff0 	bl	80089ec <memset>
  if(hspi->Instance==SPI1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a42      	ldr	r2, [pc, #264]	; (8000b1c <HAL_SPI_MspInit+0x128>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d14e      	bne.n	8000ab4 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0149      	lsls	r1, r1, #5
 8000a20:	430a      	orrs	r2, r1
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a30:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	2201      	movs	r2, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b38      	ldr	r3, [pc, #224]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a42:	2102      	movs	r1, #2
 8000a44:	430a      	orrs	r2, r1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a48:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	4013      	ands	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000a54:	2114      	movs	r1, #20
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0212      	lsls	r2, r2, #8
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	000c      	movs	r4, r1
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2202      	movs	r2, #2
 8000a64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a78:	193a      	adds	r2, r7, r4
 8000a7a:	23a0      	movs	r3, #160	; 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fb2d 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000a86:	0021      	movs	r1, r4
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2228      	movs	r2, #40	; 0x28
 8000a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2202      	movs	r2, #2
 8000a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	4a1e      	ldr	r2, [pc, #120]	; (8000b24 <HAL_SPI_MspInit+0x130>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f000 fb17 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ab2:	e02e      	b.n	8000b12 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_SPI_MspInit+0x134>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d129      	bne.n	8000b12 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	01c9      	lsls	r1, r1, #7
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_SPI_MspInit+0x12c>)
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	2202      	movs	r2, #2
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000ae4:	2114      	movs	r1, #20
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	22f0      	movs	r2, #240	; 0xf0
 8000aea:	0212      	lsls	r2, r2, #8
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2203      	movs	r2, #3
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_SPI_MspInit+0x130>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f000 fae7 	bl	80010e0 <HAL_GPIO_Init>
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b00b      	add	sp, #44	; 0x2c
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	50000400 	.word	0x50000400
 8000b28:	40003800 	.word	0x40003800

08000b2c <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2314      	movs	r3, #20
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f007 ff54 	bl	80089ec <memset>
  if(htsc->Instance==TSC)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a43      	ldr	r2, [pc, #268]	; (8000c58 <HAL_TSC_MspInit+0x12c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d17f      	bne.n	8000c4e <HAL_TSC_MspInit+0x122>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000b4e:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0249      	lsls	r1, r1, #9
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b5c:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b88:	2102      	movs	r1, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_TSC_MspInit+0x130>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	2202      	movs	r2, #2
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000b9a:	2414      	movs	r4, #20
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2244      	movs	r2, #68	; 0x44
 8000ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	193a      	adds	r2, r7, r4
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 fa8c 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2288      	movs	r2, #136	; 0x88
 8000bcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2212      	movs	r2, #18
 8000bd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2203      	movs	r2, #3
 8000be4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	193a      	adds	r2, r7, r4
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fa76 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2202      	movs	r2, #2
 8000c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2203      	movs	r2, #3
 8000c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	000c      	movs	r4, r1
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <HAL_TSC_MspInit+0x134>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f000 fa5f 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c22:	0021      	movs	r1, r4
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2202      	movs	r2, #2
 8000c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2212      	movs	r2, #18
 8000c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_TSC_MspInit+0x134>)
 8000c46:	0019      	movs	r1, r3
 8000c48:	0010      	movs	r0, r2
 8000c4a:	f000 fa49 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b00b      	add	sp, #44	; 0x2c
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40024000 	.word	0x40024000
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	50000400 	.word	0x50000400

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f007 feb8 	bl	80089ec <memset>
  if(huart->Instance==USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x80>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12a      	bne.n	8000cdc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	01c9      	lsls	r1, r1, #7
 8000c90:	430a      	orrs	r2, r1
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cac:	210c      	movs	r1, #12
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	22c0      	movs	r2, #192	; 0xc0
 8000cb2:	00d2      	lsls	r2, r2, #3
 8000cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2202      	movs	r2, #2
 8000cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2204      	movs	r2, #4
 8000ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	187a      	adds	r2, r7, r1
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fa02 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b008      	add	sp, #32
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40021000 	.word	0x40021000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f8cc 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <USB_IRQHandler+0x14>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fdee 	bl	8001908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200007fc 	.word	0x200007fc

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <SystemInit+0x64>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <SystemInit+0x64>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0049      	lsls	r1, r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <SystemInit+0x64>)
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <SystemInit+0x64>)
 8000d50:	4913      	ldr	r1, [pc, #76]	; (8000da0 <SystemInit+0x68>)
 8000d52:	400a      	ands	r2, r1
 8000d54:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <SystemInit+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <SystemInit+0x64>)
 8000d5c:	4911      	ldr	r1, [pc, #68]	; (8000da4 <SystemInit+0x6c>)
 8000d5e:	400a      	ands	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <SystemInit+0x64>)
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <SystemInit+0x64>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	438a      	bics	r2, r1
 8000d6c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <SystemInit+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemInit+0x64>)
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <SystemInit+0x70>)
 8000d76:	400a      	ands	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x64>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <SystemInit+0x64>)
 8000d80:	490a      	ldr	r1, [pc, #40]	; (8000dac <SystemInit+0x74>)
 8000d82:	400a      	ands	r2, r1
 8000d84:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SystemInit+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SystemInit+0x78>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	0512      	lsls	r2, r2, #20
 8000d92:	609a      	str	r2, [r3, #8]
#endif
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	88ff400c 	.word	0x88ff400c
 8000da4:	fef6fff6 	.word	0xfef6fff6
 8000da8:	fffbffff 	.word	0xfffbffff
 8000dac:	ff02ffff 	.word	0xff02ffff
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopForever+0x12>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000dd4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd6:	3204      	adds	r2, #4

08000dd8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopForever+0x16>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dde:	f7ff ffab 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f007 fddf 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fb27 	bl	8000438 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   r0, =_estack
 8000dec:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000df0:	08008b38 	.word	0x08008b38
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	20000164 	.word	0x20000164
  ldr  r2, =_sbss
 8000dfc:	20000164 	.word	0x20000164
  ldr  r3, = _ebss
 8000e00:	20000af0 	.word	0x20000af0

08000e04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_COMP_IRQHandler>
	...

08000e08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x3c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_Init+0x3c>)
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 f811 	bl	8000e48 <HAL_InitTick>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e001      	b.n	8000e36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e32:	f7ff fd85 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e52:	681c      	ldr	r4, [r3, #0]
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_InitTick+0x60>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0019      	movs	r1, r3
 8000e5a:	23fa      	movs	r3, #250	; 0xfa
 8000e5c:	0098      	lsls	r0, r3, #2
 8000e5e:	f7ff f953 	bl	8000108 <__udivsi3>
 8000e62:	0003      	movs	r3, r0
 8000e64:	0019      	movs	r1, r3
 8000e66:	0020      	movs	r0, r4
 8000e68:	f7ff f94e 	bl	8000108 <__udivsi3>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f929 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e00f      	b.n	8000e9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d80b      	bhi.n	8000e9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f8f6 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_InitTick+0x64>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	18d2      	adds	r2, r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	2000035c 	.word	0x2000035c

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	2000035c 	.word	0x2000035c

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_Delay+0x40>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	001a      	movs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	189b      	adds	r3, r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b004      	add	sp, #16
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008

08000f2c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	231f      	movs	r3, #31
 8000f40:	401a      	ands	r2, r3
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <NVIC_EnableIRQ+0x28>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	4091      	lsls	r1, r2
 8000f48:	000a      	movs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b002      	add	sp, #8
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6c:	d932      	bls.n	8000fd4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <NVIC_SetPriority+0xd4>)
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	0019      	movs	r1, r3
 8000f76:	230f      	movs	r3, #15
 8000f78:	400b      	ands	r3, r1
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	1dfa      	adds	r2, r7, #7
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	2203      	movs	r2, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	00d2      	lsls	r2, r2, #3
 8000f94:	21ff      	movs	r1, #255	; 0xff
 8000f96:	4091      	lsls	r1, r2
 8000f98:	000a      	movs	r2, r1
 8000f9a:	43d2      	mvns	r2, r2
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	019b      	lsls	r3, r3, #6
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	0018      	movs	r0, r3
 8000fae:	2303      	movs	r3, #3
 8000fb0:	4003      	ands	r3, r0
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <NVIC_SetPriority+0xd4>)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001c      	movs	r4, r3
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	4023      	ands	r3, r4
 8000fc2:	3b08      	subs	r3, #8
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	3306      	adds	r3, #6
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	18c3      	adds	r3, r0, r3
 8000fce:	3304      	adds	r3, #4
 8000fd0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fd2:	e027      	b.n	8001024 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4a16      	ldr	r2, [pc, #88]	; (8001030 <NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	33c0      	adds	r3, #192	; 0xc0
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	589b      	ldr	r3, [r3, r2]
 8000fe4:	1dfa      	adds	r2, r7, #7
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	0011      	movs	r1, r2
 8000fea:	2203      	movs	r2, #3
 8000fec:	400a      	ands	r2, r1
 8000fee:	00d2      	lsls	r2, r2, #3
 8000ff0:	21ff      	movs	r1, #255	; 0xff
 8000ff2:	4091      	lsls	r1, r2
 8000ff4:	000a      	movs	r2, r1
 8000ff6:	43d2      	mvns	r2, r2
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	22ff      	movs	r2, #255	; 0xff
 8001002:	401a      	ands	r2, r3
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	0018      	movs	r0, r3
 800100a:	2303      	movs	r3, #3
 800100c:	4003      	ands	r3, r0
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <NVIC_SetPriority+0xd8>)
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	430a      	orrs	r2, r1
 800101e:	33c0      	adds	r3, #192	; 0xc0
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	501a      	str	r2, [r3, r0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b003      	add	sp, #12
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	e000e100 	.word	0xe000e100

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <SysTick_Config+0x40>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d901      	bls.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e010      	b.n	800106c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <SysTick_Config+0x44>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	3a01      	subs	r2, #1
 8001050:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	2103      	movs	r1, #3
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff7d 	bl	8000f58 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SysTick_Config+0x44>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x44>)
 8001066:	2207      	movs	r2, #7
 8001068:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106a:	2300      	movs	r3, #0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	00ffffff 	.word	0x00ffffff
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	210f      	movs	r1, #15
 8001088:	187b      	adds	r3, r7, r1
 800108a:	1c02      	adds	r2, r0, #0
 800108c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	187b      	adds	r3, r7, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <NVIC_SetPriority>
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	0002      	movs	r2, r0
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff ff37 	bl	8000f2c <NVIC_EnableIRQ>
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ffaf 	bl	8001034 <SysTick_Config>
 80010d6:	0003      	movs	r3, r0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010f6:	e14f      	b.n	8001398 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_Init+0x30>
 800110e:	e140      	b.n	8001392 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00b      	beq.n	8001130 <HAL_GPIO_Init+0x50>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001124:	2b11      	cmp	r3, #17
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b12      	cmp	r3, #18
 800112e:	d130      	bne.n	8001192 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	409a      	lsls	r2, r3
 800113e:	0013      	movs	r3, r2
 8001140:	43da      	mvns	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001166:	2201      	movs	r2, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	2201      	movs	r2, #1
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0xf2>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d123      	bne.n	800121a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	58d3      	ldr	r3, [r2, r3]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2207      	movs	r2, #7
 80011e4:	4013      	ands	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2107      	movs	r1, #7
 80011fe:	400b      	ands	r3, r1
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	401a      	ands	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	055b      	lsls	r3, r3, #21
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_GPIO_Init+0x17c>
 800125a:	e09a      	b.n	8001392 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125c:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 800125e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x2d4>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x1ea>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x1e6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a46      	ldr	r2, [pc, #280]	; (80013bc <HAL_GPIO_Init+0x2dc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a45      	ldr	r2, [pc, #276]	; (80013c0 <HAL_GPIO_Init+0x2e0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x1de>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <HAL_GPIO_Init+0x2e4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x1da>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012ca:	2300      	movs	r3, #0
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	2103      	movs	r1, #3
 80012d0:	400a      	ands	r2, r1
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x2d4>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	025b      	lsls	r3, r3, #9
 8001302:	4013      	ands	r3, r2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	035b      	lsls	r3, r3, #13
 8001356:	4013      	ands	r3, r2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	4013      	ands	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	40da      	lsrs	r2, r3
 80013a0:	1e13      	subs	r3, r2, #0
 80013a2:	d000      	beq.n	80013a6 <HAL_GPIO_Init+0x2c6>
 80013a4:	e6a8      	b.n	80010f8 <HAL_GPIO_Init+0x18>
  }
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b006      	add	sp, #24
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	50000400 	.word	0x50000400
 80013bc:	50000800 	.word	0x50000800
 80013c0:	50000c00 	.word	0x50000c00
 80013c4:	50001c00 	.word	0x50001c00
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	000a      	movs	r2, r1
 80013d6:	1cbb      	adds	r3, r7, #2
 80013d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	1cba      	adds	r2, r7, #2
 80013e0:	8812      	ldrh	r2, [r2, #0]
 80013e2:	4013      	ands	r3, r2
 80013e4:	d004      	beq.n	80013f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013e6:	230f      	movs	r3, #15
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f0:	230f      	movs	r3, #15
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	0008      	movs	r0, r1
 8001410:	0011      	movs	r1, r2
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	1c02      	adds	r2, r0, #0
 8001416:	801a      	strh	r2, [r3, #0]
 8001418:	1c7b      	adds	r3, r7, #1
 800141a:	1c0a      	adds	r2, r1, #0
 800141c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141e:	1c7b      	adds	r3, r7, #1
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	1cbb      	adds	r3, r7, #2
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800142e:	e003      	b.n	8001438 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001430:	1cbb      	adds	r3, r7, #2
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e082      	b.n	8001558 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2241      	movs	r2, #65	; 0x41
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	2100      	movs	r1, #0
 8001464:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fa7d 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2241      	movs	r2, #65	; 0x41
 8001472:	2124      	movs	r1, #36	; 0x24
 8001474:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	438a      	bics	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_I2C_Init+0x120>)
 8001490:	400a      	ands	r2, r1
 8001492:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4931      	ldr	r1, [pc, #196]	; (8001564 <HAL_I2C_Init+0x124>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	0209      	lsls	r1, r1, #8
 80014b8:	430a      	orrs	r2, r1
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e007      	b.n	80014ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2184      	movs	r1, #132	; 0x84
 80014c8:	0209      	lsls	r1, r1, #8
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d104      	bne.n	80014e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	491f      	ldr	r1, [pc, #124]	; (8001568 <HAL_I2C_Init+0x128>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	491a      	ldr	r1, [pc, #104]	; (8001564 <HAL_I2C_Init+0x124>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	431a      	orrs	r2, r3
 800150a:	0011      	movs	r1, r2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	021a      	lsls	r2, r3, #8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69d9      	ldr	r1, [r3, #28]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1a      	ldr	r2, [r3, #32]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2241      	movs	r2, #65	; 0x41
 8001544:	2120      	movs	r1, #32
 8001546:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2242      	movs	r2, #66	; 0x42
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	f0ffffff 	.word	0xf0ffffff
 8001564:	ffff7fff 	.word	0xffff7fff
 8001568:	02008000 	.word	0x02008000

0800156c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2241      	movs	r2, #65	; 0x41
 800157a:	5c9b      	ldrb	r3, [r3, r2]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b20      	cmp	r3, #32
 8001580:	d138      	bne.n	80015f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2240      	movs	r2, #64	; 0x40
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800158c:	2302      	movs	r3, #2
 800158e:	e032      	b.n	80015f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	2101      	movs	r1, #1
 8001596:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2241      	movs	r2, #65	; 0x41
 800159c:	2124      	movs	r1, #36	; 0x24
 800159e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2101      	movs	r1, #1
 80015ac:	438a      	bics	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4911      	ldr	r1, [pc, #68]	; (8001600 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2241      	movs	r2, #65	; 0x41
 80015e4:	2120      	movs	r1, #32
 80015e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	2100      	movs	r1, #0
 80015ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e000      	b.n	80015f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
  }
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	ffffefff 	.word	0xffffefff

08001604 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2241      	movs	r2, #65	; 0x41
 8001612:	5c9b      	ldrb	r3, [r3, r2]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	d139      	bne.n	800168e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2240      	movs	r2, #64	; 0x40
 800161e:	5c9b      	ldrb	r3, [r3, r2]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001624:	2302      	movs	r3, #2
 8001626:	e033      	b.n	8001690 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2240      	movs	r2, #64	; 0x40
 800162c:	2101      	movs	r1, #1
 800162e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2241      	movs	r2, #65	; 0x41
 8001634:	2124      	movs	r1, #36	; 0x24
 8001636:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2101      	movs	r1, #1
 8001644:	438a      	bics	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2241      	movs	r2, #65	; 0x41
 800167e:	2120      	movs	r1, #32
 8001680:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
  }
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b004      	add	sp, #16
 8001696:	bd80      	pop	{r7, pc}
 8001698:	fffff0ff 	.word	0xfffff0ff

0800169c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	af06      	add	r7, sp, #24
 80016a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e100      	b.n	80018b0 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a81      	ldr	r2, [pc, #516]	; (80018b8 <HAL_PCD_Init+0x21c>)
 80016b2:	5c9b      	ldrb	r3, [r3, r2]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	23aa      	movs	r3, #170	; 0xaa
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	2100      	movs	r1, #0
 80016c2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	0018      	movs	r0, r3
 80016c8:	f006 fe3a 	bl	8008340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_PCD_Init+0x21c>)
 80016d0:	2103      	movs	r1, #3
 80016d2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f003 f947 	bl	800496c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016de:	230f      	movs	r3, #15
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e058      	b.n	800179a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016e8:	200f      	movs	r0, #15
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	0013      	movs	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	18cb      	adds	r3, r1, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001702:	183b      	adds	r3, r7, r0
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	0013      	movs	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	189b      	adds	r3, r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	183a      	adds	r2, r7, r0
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001718:	183b      	adds	r3, r7, r0
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	0004      	movs	r4, r0
 800171e:	183b      	adds	r3, r7, r0
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b298      	uxth	r0, r3
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	0013      	movs	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	189b      	adds	r3, r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	18cb      	adds	r3, r1, r3
 8001730:	3336      	adds	r3, #54	; 0x36
 8001732:	1c02      	adds	r2, r0, #0
 8001734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001736:	193b      	adds	r3, r7, r4
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	0013      	movs	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	189b      	adds	r3, r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	18cb      	adds	r3, r1, r3
 8001748:	3303      	adds	r3, #3
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800174e:	193b      	adds	r3, r7, r4
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	0013      	movs	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	189b      	adds	r3, r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	18cb      	adds	r3, r1, r3
 800175e:	3338      	adds	r3, #56	; 0x38
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	0013      	movs	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	189b      	adds	r3, r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	18cb      	adds	r3, r1, r3
 8001774:	333c      	adds	r3, #60	; 0x3c
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	0013      	movs	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	189b      	adds	r3, r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	18cb      	adds	r3, r1, r3
 800178a:	3340      	adds	r3, #64	; 0x40
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001790:	193b      	adds	r3, r7, r4
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	193b      	adds	r3, r7, r4
 8001796:	3201      	adds	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	230f      	movs	r3, #15
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781a      	ldrb	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d39f      	bcc.n	80016e8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a8:	230f      	movs	r3, #15
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e056      	b.n	8001860 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017b2:	240f      	movs	r4, #15
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	236a      	movs	r3, #106	; 0x6a
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	0019      	movs	r1, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	18c3      	adds	r3, r0, r3
 80017ca:	185b      	adds	r3, r3, r1
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	23b4      	movs	r3, #180	; 0xb4
 80017d8:	0059      	lsls	r1, r3, #1
 80017da:	0013      	movs	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	189b      	adds	r3, r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	18c3      	adds	r3, r0, r3
 80017e4:	185b      	adds	r3, r3, r1
 80017e6:	193a      	adds	r2, r7, r4
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	236c      	movs	r3, #108	; 0x6c
 80017f4:	33ff      	adds	r3, #255	; 0xff
 80017f6:	0019      	movs	r1, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	18c3      	adds	r3, r0, r3
 8001802:	185b      	adds	r3, r3, r1
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001808:	193b      	adds	r3, r7, r4
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	23bc      	movs	r3, #188	; 0xbc
 8001810:	0059      	lsls	r1, r3, #1
 8001812:	0013      	movs	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	189b      	adds	r3, r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	18c3      	adds	r3, r0, r3
 800181c:	185b      	adds	r3, r3, r1
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001822:	193b      	adds	r3, r7, r4
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	23be      	movs	r3, #190	; 0xbe
 800182a:	0059      	lsls	r1, r3, #1
 800182c:	0013      	movs	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	189b      	adds	r3, r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	18c3      	adds	r3, r0, r3
 8001836:	185b      	adds	r3, r3, r1
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800183c:	193b      	adds	r3, r7, r4
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	23c0      	movs	r3, #192	; 0xc0
 8001844:	0059      	lsls	r1, r3, #1
 8001846:	0013      	movs	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	189b      	adds	r3, r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	18c3      	adds	r3, r0, r3
 8001850:	185b      	adds	r3, r3, r1
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	193b      	adds	r3, r7, r4
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	193b      	adds	r3, r7, r4
 800185c:	3201      	adds	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3a1      	bcc.n	80017b2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	466a      	mov	r2, sp
 8001876:	0011      	movs	r1, r2
 8001878:	001a      	movs	r2, r3
 800187a:	3210      	adds	r2, #16
 800187c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800187e:	c170      	stmia	r1!, {r4, r5, r6}
 8001880:	ca30      	ldmia	r2!, {r4, r5}
 8001882:	c130      	stmia	r1!, {r4, r5}
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 f889 	bl	80049a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2224      	movs	r2, #36	; 0x24
 8001892:	2100      	movs	r1, #0
 8001894:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_PCD_Init+0x21c>)
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d103      	bne.n	80018ae <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f001 fb4b 	bl	8002f44 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b005      	add	sp, #20
 80018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b8:	000002a9 	.word	0x000002a9

080018bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	23aa      	movs	r3, #170	; 0xaa
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_PCD_Start+0x18>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e014      	b.n	80018fe <HAL_PCD_Start+0x42>
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	23aa      	movs	r3, #170	; 0xaa
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	2101      	movs	r1, #1
 80018dc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f003 f82c 	bl	8004940 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f005 f805 	bl	80068fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	23aa      	movs	r3, #170	; 0xaa
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	2100      	movs	r1, #0
 80018fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f005 f807 	bl	8006928 <USB_ReadInterrupts>
 800191a:	0002      	movs	r2, r0
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	401a      	ands	r2, r3
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	429a      	cmp	r2, r3
 8001928:	d103      	bne.n	8001932 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f000 fba3 	bl	8002078 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0018      	movs	r0, r3
 8001938:	f004 fff6 	bl	8006928 <USB_ReadInterrupts>
 800193c:	0002      	movs	r2, r0
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	401a      	ands	r2, r3
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	429a      	cmp	r2, r3
 800194a:	d114      	bne.n	8001976 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2244      	movs	r2, #68	; 0x44
 8001952:	5a9b      	ldrh	r3, [r3, r2]
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	49a2      	ldr	r1, [pc, #648]	; (8001be4 <HAL_PCD_IRQHandler+0x2dc>)
 800195c:	400a      	ands	r2, r1
 800195e:	b291      	uxth	r1, r2
 8001960:	2244      	movs	r2, #68	; 0x44
 8001962:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f006 fd6d 	bl	8008446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2100      	movs	r1, #0
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f945 	bl	8001c00 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	0018      	movs	r0, r3
 800197c:	f004 ffd4 	bl	8006928 <USB_ReadInterrupts>
 8001980:	0002      	movs	r2, r0
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	01db      	lsls	r3, r3, #7
 8001986:	401a      	ands	r2, r3
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	01db      	lsls	r3, r3, #7
 800198c:	429a      	cmp	r2, r3
 800198e:	d10b      	bne.n	80019a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2244      	movs	r2, #68	; 0x44
 8001996:	5a9b      	ldrh	r3, [r3, r2]
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4992      	ldr	r1, [pc, #584]	; (8001be8 <HAL_PCD_IRQHandler+0x2e0>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	b291      	uxth	r1, r2
 80019a4:	2244      	movs	r2, #68	; 0x44
 80019a6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f004 ffbb 	bl	8006928 <USB_ReadInterrupts>
 80019b2:	0002      	movs	r2, r0
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	401a      	ands	r2, r3
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	429a      	cmp	r2, r3
 80019c0:	d10b      	bne.n	80019da <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2244      	movs	r2, #68	; 0x44
 80019c8:	5a9b      	ldrh	r3, [r3, r2]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4986      	ldr	r1, [pc, #536]	; (8001bec <HAL_PCD_IRQHandler+0x2e4>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	b291      	uxth	r1, r2
 80019d6:	2244      	movs	r2, #68	; 0x44
 80019d8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0018      	movs	r0, r3
 80019e0:	f004 ffa2 	bl	8006928 <USB_ReadInterrupts>
 80019e4:	0002      	movs	r2, r0
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	401a      	ands	r2, r3
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d137      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	5a9b      	ldrh	r3, [r3, r2]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2104      	movs	r1, #4
 8001a04:	438a      	bics	r2, r1
 8001a06:	b291      	uxth	r1, r2
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	5a9b      	ldrh	r3, [r3, r2]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	b291      	uxth	r1, r2
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	23b8      	movs	r3, #184	; 0xb8
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d109      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	23b8      	movs	r3, #184	; 0xb8
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	2100      	movs	r1, #0
 8001a38:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 faaa 	bl	8002f98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f006 fd3e 	bl	80084c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2244      	movs	r2, #68	; 0x44
 8001a52:	5a9b      	ldrh	r3, [r3, r2]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4965      	ldr	r1, [pc, #404]	; (8001bf0 <HAL_PCD_IRQHandler+0x2e8>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	b291      	uxth	r1, r2
 8001a60:	2244      	movs	r2, #68	; 0x44
 8001a62:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f004 ff5d 	bl	8006928 <USB_ReadInterrupts>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	401a      	ands	r2, r3
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d127      	bne.n	8001ace <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	5a9b      	ldrh	r3, [r3, r2]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	b291      	uxth	r1, r2
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2244      	movs	r2, #68	; 0x44
 8001a9c:	5a9b      	ldrh	r3, [r3, r2]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4953      	ldr	r1, [pc, #332]	; (8001bf4 <HAL_PCD_IRQHandler+0x2ec>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	b291      	uxth	r1, r2
 8001aaa:	2244      	movs	r2, #68	; 0x44
 8001aac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	5a9b      	ldrh	r3, [r3, r2]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2104      	movs	r1, #4
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	b291      	uxth	r1, r2
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f006 fce1 	bl	8008490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f004 ff28 	bl	8006928 <USB_ReadInterrupts>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b80      	cmp	r3, #128	; 0x80
 8001ae0:	d145      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2244      	movs	r2, #68	; 0x44
 8001ae8:	5a9b      	ldrh	r3, [r3, r2]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	438a      	bics	r2, r1
 8001af4:	b291      	uxth	r1, r2
 8001af6:	2244      	movs	r2, #68	; 0x44
 8001af8:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	23b8      	movs	r3, #184	; 0xb8
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d12f      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	5a9b      	ldrh	r3, [r3, r2]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2104      	movs	r1, #4
 8001b16:	430a      	orrs	r2, r1
 8001b18:	b291      	uxth	r1, r2
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	5a9b      	ldrh	r3, [r3, r2]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	b291      	uxth	r1, r2
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	23b8      	movs	r3, #184	; 0xb8
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2254      	movs	r2, #84	; 0x54
 8001b46:	5a9b      	ldrh	r3, [r3, r2]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	223c      	movs	r2, #60	; 0x3c
 8001b4e:	4013      	ands	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	23b9      	movs	r3, #185	; 0xb9
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f001 fa1a 	bl	8002f98 <HAL_PCDEx_LPM_Callback>
 8001b64:	e003      	b.n	8001b6e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f006 fc91 	bl	8008490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f004 fed8 	bl	8006928 <USB_ReadInterrupts>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10f      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2244      	movs	r2, #68	; 0x44
 8001b8e:	5a9b      	ldrh	r3, [r3, r2]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4918      	ldr	r1, [pc, #96]	; (8001bf8 <HAL_PCD_IRQHandler+0x2f0>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	b291      	uxth	r1, r2
 8001b9c:	2244      	movs	r2, #68	; 0x44
 8001b9e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f006 fc40 	bl	8008428 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f004 febb 	bl	8006928 <USB_ReadInterrupts>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	401a      	ands	r2, r3
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d10b      	bne.n	8001bda <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2244      	movs	r2, #68	; 0x44
 8001bc8:	5a9b      	ldrh	r3, [r3, r2]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_PCD_IRQHandler+0x2f4>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	b291      	uxth	r1, r2
 8001bd6:	2244      	movs	r2, #68	; 0x44
 8001bd8:	5299      	strh	r1, [r3, r2]
  }
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	fffffbff 	.word	0xfffffbff
 8001be8:	ffffbfff 	.word	0xffffbfff
 8001bec:	ffffdfff 	.word	0xffffdfff
 8001bf0:	ffffefff 	.word	0xffffefff
 8001bf4:	fffff7ff 	.word	0xfffff7ff
 8001bf8:	fffffdff 	.word	0xfffffdff
 8001bfc:	fffffeff 	.word	0xfffffeff

08001c00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	000a      	movs	r2, r1
 8001c0a:	1cfb      	adds	r3, r7, #3
 8001c0c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	23aa      	movs	r3, #170	; 0xaa
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_SetAddress+0x1e>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e017      	b.n	8001c4e <HAL_PCD_SetAddress+0x4e>
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	23aa      	movs	r3, #170	; 0xaa
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	2101      	movs	r1, #1
 8001c26:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1cfa      	adds	r2, r7, #3
 8001c2c:	2124      	movs	r1, #36	; 0x24
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	1cfb      	adds	r3, r7, #3
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	f004 fe49 	bl	80068d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	23aa      	movs	r3, #170	; 0xaa
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	2100      	movs	r1, #0
 8001c4a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c56:	b590      	push	{r4, r7, lr}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	000c      	movs	r4, r1
 8001c60:	0010      	movs	r0, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	1cfb      	adds	r3, r7, #3
 8001c66:	1c22      	adds	r2, r4, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	003b      	movs	r3, r7
 8001c6c:	1c02      	adds	r2, r0, #0
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	1c0a      	adds	r2, r1, #0
 8001c74:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c76:	230b      	movs	r3, #11
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c7e:	1cfb      	adds	r3, r7, #3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da0f      	bge.n	8001ca8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	1cfb      	adds	r3, r7, #3
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	4013      	ands	r3, r2
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	0013      	movs	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	189b      	adds	r3, r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	705a      	strb	r2, [r3, #1]
 8001ca6:	e00f      	b.n	8001cc8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	1cfb      	adds	r3, r7, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	401a      	ands	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	189b      	adds	r3, r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	3369      	adds	r3, #105	; 0x69
 8001cba:	33ff      	adds	r3, #255	; 0xff
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	18d3      	adds	r3, r2, r3
 8001cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc8:	1cfb      	adds	r3, r7, #3
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2207      	movs	r2, #7
 8001cce:	4013      	ands	r3, r2
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cd6:	003b      	movs	r3, r7
 8001cd8:	881a      	ldrh	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1cba      	adds	r2, r7, #2
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cf8:	1cbb      	adds	r3, r7, #2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	23aa      	movs	r3, #170	; 0xaa
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_EP_Open+0xc0>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e013      	b.n	8001d3e <HAL_PCD_EP_Open+0xe8>
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	23aa      	movs	r3, #170	; 0xaa
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	0011      	movs	r1, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f002 fe65 	bl	80049f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	23aa      	movs	r3, #170	; 0xaa
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	2100      	movs	r1, #0
 8001d36:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001d38:	230b      	movs	r3, #11
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b005      	add	sp, #20
 8001d44:	bd90      	pop	{r4, r7, pc}

08001d46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	000a      	movs	r2, r1
 8001d50:	1cfb      	adds	r3, r7, #3
 8001d52:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d54:	1cfb      	adds	r3, r7, #3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da0f      	bge.n	8001d7e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	1cfb      	adds	r3, r7, #3
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2207      	movs	r2, #7
 8001d64:	4013      	ands	r3, r2
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	0013      	movs	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	705a      	strb	r2, [r3, #1]
 8001d7c:	e00f      	b.n	8001d9e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	1cfb      	adds	r3, r7, #3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2207      	movs	r2, #7
 8001d84:	401a      	ands	r2, r3
 8001d86:	0013      	movs	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	189b      	adds	r3, r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	3369      	adds	r3, #105	; 0x69
 8001d90:	33ff      	adds	r3, #255	; 0xff
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	18d3      	adds	r3, r2, r3
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d9e:	1cfb      	adds	r3, r7, #3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	23aa      	movs	r3, #170	; 0xaa
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_PCD_EP_Close+0x76>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e011      	b.n	8001de0 <HAL_PCD_EP_Close+0x9a>
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	23aa      	movs	r3, #170	; 0xaa
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f003 f968 	bl	80050a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	23aa      	movs	r3, #170	; 0xaa
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	2100      	movs	r1, #0
 8001ddc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	200b      	movs	r0, #11
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	1c0a      	adds	r2, r1, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfc:	0001      	movs	r1, r0
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2207      	movs	r2, #7
 8001e04:	401a      	ands	r2, r3
 8001e06:	0013      	movs	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	189b      	adds	r3, r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	3369      	adds	r3, #105	; 0x69
 8001e10:	33ff      	adds	r3, #255	; 0xff
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2207      	movs	r2, #7
 8001e36:	4013      	ands	r3, r2
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	4013      	ands	r3, r2
 8001e46:	d107      	bne.n	8001e58 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	0011      	movs	r1, r2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f003 fae7 	bl	8005424 <USB_EPStartXfer>
 8001e56:	e006      	b.n	8001e66 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	0018      	movs	r0, r3
 8001e62:	f003 fadf 	bl	8005424 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	200b      	movs	r0, #11
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	1c0a      	adds	r2, r1, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2207      	movs	r2, #7
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	0013      	movs	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	189b      	adds	r3, r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	2101      	movs	r1, #1
 8001eae:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec2:	183b      	adds	r3, r7, r0
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d107      	bne.n	8001eea <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f003 fa9e 	bl	8005424 <USB_EPStartXfer>
 8001ee8:	e006      	b.n	8001ef8 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f003 fa96 	bl	8005424 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b006      	add	sp, #24
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	000a      	movs	r2, r1
 8001f0c:	1cfb      	adds	r3, r7, #3
 8001f0e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f10:	1cfb      	adds	r3, r7, #3
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2207      	movs	r2, #7
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d901      	bls.n	8001f24 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e046      	b.n	8001fb2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f24:	1cfb      	adds	r3, r7, #3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da0f      	bge.n	8001f4e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	1cfb      	adds	r3, r7, #3
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2207      	movs	r2, #7
 8001f34:	4013      	ands	r3, r2
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	0013      	movs	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	189b      	adds	r3, r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00d      	b.n	8001f6a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f4e:	1cfb      	adds	r3, r7, #3
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	0013      	movs	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	3369      	adds	r3, #105	; 0x69
 8001f5c:	33ff      	adds	r3, #255	; 0xff
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	18d3      	adds	r3, r2, r3
 8001f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f70:	1cfb      	adds	r3, r7, #3
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2207      	movs	r2, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	23aa      	movs	r3, #170	; 0xaa
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_EP_SetStall+0x8c>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e011      	b.n	8001fb2 <HAL_PCD_EP_SetStall+0xb0>
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	23aa      	movs	r3, #170	; 0xaa
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	2101      	movs	r1, #1
 8001f96:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f004 fb95 	bl	80066d0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	23aa      	movs	r3, #170	; 0xaa
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	2100      	movs	r1, #0
 8001fae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	000a      	movs	r2, r1
 8001fc4:	1cfb      	adds	r3, r7, #3
 8001fc6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc8:	1cfb      	adds	r3, r7, #3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	220f      	movs	r2, #15
 8001fce:	401a      	ands	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d901      	bls.n	8001fdc <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e048      	b.n	800206e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fdc:	1cfb      	adds	r3, r7, #3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da0f      	bge.n	8002006 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	1cfb      	adds	r3, r7, #3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2207      	movs	r2, #7
 8001fec:	4013      	ands	r3, r2
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	189b      	adds	r3, r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	18d3      	adds	r3, r2, r3
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	705a      	strb	r2, [r3, #1]
 8002004:	e00f      	b.n	8002026 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002006:	1cfb      	adds	r3, r7, #3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2207      	movs	r2, #7
 800200c:	401a      	ands	r2, r3
 800200e:	0013      	movs	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	189b      	adds	r3, r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	3369      	adds	r3, #105	; 0x69
 8002018:	33ff      	adds	r3, #255	; 0xff
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	18d3      	adds	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	1cfb      	adds	r3, r7, #3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2207      	movs	r2, #7
 8002032:	4013      	ands	r3, r2
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	23aa      	movs	r3, #170	; 0xaa
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_PCD_EP_ClrStall+0x90>
 8002046:	2302      	movs	r3, #2
 8002048:	e011      	b.n	800206e <HAL_PCD_EP_ClrStall+0xb4>
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	23aa      	movs	r3, #170	; 0xaa
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	2101      	movs	r1, #1
 8002052:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f004 fb87 	bl	8006770 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	23aa      	movs	r3, #170	; 0xaa
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	2100      	movs	r1, #0
 800206a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b08f      	sub	sp, #60	; 0x3c
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002080:	e323      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	202e      	movs	r0, #46	; 0x2e
 8002088:	183b      	adds	r3, r7, r0
 800208a:	2144      	movs	r1, #68	; 0x44
 800208c:	5a52      	ldrh	r2, [r2, r1]
 800208e:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002090:	183b      	adds	r3, r7, r0
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	202d      	movs	r0, #45	; 0x2d
 8002098:	183b      	adds	r3, r7, r0
 800209a:	210f      	movs	r1, #15
 800209c:	400a      	ands	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80020a0:	183b      	adds	r3, r7, r0
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d000      	beq.n	80020aa <PCD_EP_ISR_Handler+0x32>
 80020a8:	e15e      	b.n	8002368 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020aa:	232e      	movs	r3, #46	; 0x2e
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	4013      	ands	r3, r2
 80020b4:	d152      	bne.n	800215c <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	200e      	movs	r0, #14
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	49db      	ldr	r1, [pc, #876]	; (8002430 <PCD_EP_ISR_Handler+0x3b8>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	183a      	adds	r2, r7, r0
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	49d8      	ldr	r1, [pc, #864]	; (8002434 <PCD_EP_ISR_Handler+0x3bc>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	b292      	uxth	r2, r2
 80020d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3328      	adds	r3, #40	; 0x28
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2250      	movs	r2, #80	; 0x50
 80020e4:	5a9b      	ldrh	r3, [r3, r2]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	001a      	movs	r2, r3
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	18d2      	adds	r2, r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	4acf      	ldr	r2, [pc, #828]	; (8002438 <PCD_EP_ISR_Handler+0x3c0>)
 80020fa:	4694      	mov	ip, r2
 80020fc:	4463      	add	r3, ip
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	059b      	lsls	r3, r3, #22
 8002102:	0d9a      	lsrs	r2, r3, #22
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	18d2      	adds	r2, r2, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2100      	movs	r1, #0
 800211a:	0018      	movs	r0, r3
 800211c:	f006 f966 	bl	80083ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d100      	bne.n	800212e <PCD_EP_ISR_Handler+0xb6>
 800212c:	e2cd      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d000      	beq.n	8002138 <PCD_EP_ISR_Handler+0xc0>
 8002136:	e2c8      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	4252      	negs	r2, r2
 8002144:	4313      	orrs	r3, r2
 8002146:	b2da      	uxtb	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b291      	uxth	r1, r2
 800214e:	224c      	movs	r2, #76	; 0x4c
 8002150:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2224      	movs	r2, #36	; 0x24
 8002156:	2100      	movs	r1, #0
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	e2b6      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3369      	adds	r3, #105	; 0x69
 8002160:	33ff      	adds	r3, #255	; 0xff
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	212a      	movs	r1, #42	; 0x2a
 800216a:	187b      	adds	r3, r7, r1
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002170:	187b      	adds	r3, r7, r1
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4013      	ands	r3, r2
 800217a:	d037      	beq.n	80021ec <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2250      	movs	r2, #80	; 0x50
 8002182:	5a9b      	ldrh	r3, [r3, r2]
 8002184:	b29b      	uxth	r3, r3
 8002186:	001a      	movs	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	18d2      	adds	r2, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	18d3      	adds	r3, r2, r3
 8002196:	4aa9      	ldr	r2, [pc, #676]	; (800243c <PCD_EP_ISR_Handler+0x3c4>)
 8002198:	4694      	mov	ip, r2
 800219a:	4463      	add	r3, ip
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	059b      	lsls	r3, r3, #22
 80021a0:	0d9a      	lsrs	r2, r3, #22
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	22ac      	movs	r2, #172	; 0xac
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	1899      	adds	r1, r3, r2
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f004 fc05 	bl	80069ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2010      	movs	r0, #16
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	499c      	ldr	r1, [pc, #624]	; (8002440 <PCD_EP_ISR_Handler+0x3c8>)
 80021ce:	400a      	ands	r2, r1
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	183a      	adds	r2, r7, r0
 80021d8:	8812      	ldrh	r2, [r2, #0]
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	430a      	orrs	r2, r1
 80021de:	b292      	uxth	r2, r2
 80021e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f006 f8cb 	bl	8008380 <HAL_PCD_SetupStageCallback>
 80021ea:	e26e      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021ec:	232a      	movs	r3, #42	; 0x2a
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	5e9b      	ldrsh	r3, [r3, r2]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db00      	blt.n	80021fa <PCD_EP_ISR_Handler+0x182>
 80021f8:	e267      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29a      	uxth	r2, r3
 8002202:	201c      	movs	r0, #28
 8002204:	183b      	adds	r3, r7, r0
 8002206:	498e      	ldr	r1, [pc, #568]	; (8002440 <PCD_EP_ISR_Handler+0x3c8>)
 8002208:	400a      	ands	r2, r1
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	183a      	adds	r2, r7, r0
 8002212:	8812      	ldrh	r2, [r2, #0]
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	430a      	orrs	r2, r1
 8002218:	b292      	uxth	r2, r2
 800221a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2250      	movs	r2, #80	; 0x50
 8002222:	5a9b      	ldrh	r3, [r3, r2]
 8002224:	b29b      	uxth	r3, r3
 8002226:	001a      	movs	r2, r3
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	18d2      	adds	r2, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	4a81      	ldr	r2, [pc, #516]	; (800243c <PCD_EP_ISR_Handler+0x3c4>)
 8002238:	4694      	mov	ip, r2
 800223a:	4463      	add	r3, ip
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	059b      	lsls	r3, r3, #22
 8002240:	0d9a      	lsrs	r2, r3, #22
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01a      	beq.n	8002284 <PCD_EP_ISR_Handler+0x20c>
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	6959      	ldr	r1, [r3, #20]
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002266:	b29b      	uxth	r3, r3
 8002268:	f004 fbaf 	bl	80069ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	18d2      	adds	r2, r2, r3
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2100      	movs	r1, #0
 800227e:	0018      	movs	r0, r3
 8002280:	f006 f893 	bl	80083aa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2250      	movs	r2, #80	; 0x50
 8002290:	5a9b      	ldrh	r3, [r3, r2]
 8002292:	b29b      	uxth	r3, r3
 8002294:	001a      	movs	r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	189b      	adds	r3, r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4a67      	ldr	r2, [pc, #412]	; (800243c <PCD_EP_ISR_Handler+0x3c4>)
 80022a0:	4694      	mov	ip, r2
 80022a2:	4463      	add	r3, ip
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d110      	bne.n	80022d0 <PCD_EP_ISR_Handler+0x258>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4a63      	ldr	r2, [pc, #396]	; (8002444 <PCD_EP_ISR_Handler+0x3cc>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4a5b      	ldr	r2, [pc, #364]	; (8002434 <PCD_EP_ISR_Handler+0x3bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	e02b      	b.n	8002328 <PCD_EP_ISR_Handler+0x2b0>
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b3e      	cmp	r3, #62	; 0x3e
 80022d6:	d812      	bhi.n	80022fe <PCD_EP_ISR_Handler+0x286>
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d002      	beq.n	80022f0 <PCD_EP_ISR_Handler+0x278>
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	3301      	adds	r3, #1
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	e014      	b.n	8002328 <PCD_EP_ISR_Handler+0x2b0>
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	221f      	movs	r2, #31
 800230c:	4013      	ands	r3, r2
 800230e:	d102      	bne.n	8002316 <PCD_EP_ISR_Handler+0x29e>
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	3b01      	subs	r3, #1
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	b29b      	uxth	r3, r3
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	b29b      	uxth	r3, r3
 800231e:	4a45      	ldr	r2, [pc, #276]	; (8002434 <PCD_EP_ISR_Handler+0x3bc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	b29a      	uxth	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2012      	movs	r0, #18
 8002332:	183b      	adds	r3, r7, r0
 8002334:	4944      	ldr	r1, [pc, #272]	; (8002448 <PCD_EP_ISR_Handler+0x3d0>)
 8002336:	400a      	ands	r2, r1
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	183b      	adds	r3, r7, r0
 800233c:	183a      	adds	r2, r7, r0
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0149      	lsls	r1, r1, #5
 8002344:	404a      	eors	r2, r1
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	183b      	adds	r3, r7, r0
 800234a:	183a      	adds	r2, r7, r0
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	0189      	lsls	r1, r1, #6
 8002352:	404a      	eors	r2, r1
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	183a      	adds	r2, r7, r0
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	493b      	ldr	r1, [pc, #236]	; (800244c <PCD_EP_ISR_Handler+0x3d4>)
 8002360:	430a      	orrs	r2, r1
 8002362:	b292      	uxth	r2, r2
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	e1b0      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	232d      	movs	r3, #45	; 0x2d
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	18d2      	adds	r2, r2, r3
 8002378:	212a      	movs	r1, #42	; 0x2a
 800237a:	187b      	adds	r3, r7, r1
 800237c:	8812      	ldrh	r2, [r2, #0]
 800237e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002380:	187b      	adds	r3, r7, r1
 8002382:	2200      	movs	r2, #0
 8002384:	5e9b      	ldrsh	r3, [r3, r2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db00      	blt.n	800238c <PCD_EP_ISR_Handler+0x314>
 800238a:	e10f      	b.n	80025ac <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	001a      	movs	r2, r3
 8002392:	202d      	movs	r0, #45	; 0x2d
 8002394:	183b      	adds	r3, r7, r0
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	18d3      	adds	r3, r2, r3
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2428      	movs	r4, #40	; 0x28
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	4926      	ldr	r1, [pc, #152]	; (8002440 <PCD_EP_ISR_Handler+0x3c8>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	001a      	movs	r2, r3
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	18d3      	adds	r3, r2, r3
 80023b8:	193a      	adds	r2, r7, r4
 80023ba:	8812      	ldrh	r2, [r2, #0]
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	430a      	orrs	r2, r1
 80023c0:	b292      	uxth	r2, r2
 80023c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	0013      	movs	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	3369      	adds	r3, #105	; 0x69
 80023d2:	33ff      	adds	r3, #255	; 0xff
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	18d3      	adds	r3, r2, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	7b1b      	ldrb	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d136      	bne.n	8002450 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2250      	movs	r2, #80	; 0x50
 80023e8:	5a9b      	ldrh	r3, [r3, r2]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	001a      	movs	r2, r3
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	18d2      	adds	r2, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	18d3      	adds	r3, r2, r3
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <PCD_EP_ISR_Handler+0x3c4>)
 80023fe:	4694      	mov	ip, r2
 8002400:	4463      	add	r3, ip
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	2136      	movs	r1, #54	; 0x36
 8002406:	187b      	adds	r3, r7, r1
 8002408:	0592      	lsls	r2, r2, #22
 800240a:	0d92      	lsrs	r2, r2, #22
 800240c:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800240e:	187b      	adds	r3, r7, r1
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <PCD_EP_ISR_Handler+0x3a0>
 8002416:	e0a0      	b.n	800255a <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	6959      	ldr	r1, [r3, #20]
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	88da      	ldrh	r2, [r3, #6]
 8002424:	2336      	movs	r3, #54	; 0x36
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f004 face 	bl	80069ca <USB_ReadPMA>
 800242e:	e094      	b.n	800255a <PCD_EP_ISR_Handler+0x4e2>
 8002430:	ffff8f0f 	.word	0xffff8f0f
 8002434:	ffff8000 	.word	0xffff8000
 8002438:	00000402 	.word	0x00000402
 800243c:	00000406 	.word	0x00000406
 8002440:	00000f8f 	.word	0x00000f8f
 8002444:	ffff83ff 	.word	0xffff83ff
 8002448:	ffffbf8f 	.word	0xffffbf8f
 800244c:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d10c      	bne.n	8002472 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002458:	2336      	movs	r3, #54	; 0x36
 800245a:	18fc      	adds	r4, r7, r3
 800245c:	232a      	movs	r3, #42	; 0x2a
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f94a 	bl	8002700 <HAL_PCD_EP_DB_Receive>
 800246c:	0003      	movs	r3, r0
 800246e:	8023      	strh	r3, [r4, #0]
 8002470:	e073      	b.n	800255a <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	001a      	movs	r2, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	18d3      	adds	r3, r2, r3
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29a      	uxth	r2, r3
 8002484:	2022      	movs	r0, #34	; 0x22
 8002486:	183b      	adds	r3, r7, r0
 8002488:	4997      	ldr	r1, [pc, #604]	; (80026e8 <PCD_EP_ISR_Handler+0x670>)
 800248a:	400a      	ands	r2, r1
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	001a      	movs	r2, r3
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	183a      	adds	r2, r7, r0
 800249e:	8812      	ldrh	r2, [r2, #0]
 80024a0:	4992      	ldr	r1, [pc, #584]	; (80026ec <PCD_EP_ISR_Handler+0x674>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	b292      	uxth	r2, r2
 80024a6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	001a      	movs	r2, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	001a      	movs	r2, r3
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	d025      	beq.n	8002510 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2250      	movs	r2, #80	; 0x50
 80024ca:	5a9b      	ldrh	r3, [r3, r2]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	001a      	movs	r2, r3
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	18d2      	adds	r2, r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	18d3      	adds	r3, r2, r3
 80024de:	4a84      	ldr	r2, [pc, #528]	; (80026f0 <PCD_EP_ISR_Handler+0x678>)
 80024e0:	4694      	mov	ip, r2
 80024e2:	4463      	add	r3, ip
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	2136      	movs	r1, #54	; 0x36
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	0592      	lsls	r2, r2, #22
 80024ec:	0d92      	lsrs	r2, r2, #22
 80024ee:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d030      	beq.n	800255a <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	6959      	ldr	r1, [r3, #20]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	891a      	ldrh	r2, [r3, #8]
 8002504:	2336      	movs	r3, #54	; 0x36
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f004 fa5e 	bl	80069ca <USB_ReadPMA>
 800250e:	e024      	b.n	800255a <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2250      	movs	r2, #80	; 0x50
 8002516:	5a9b      	ldrh	r3, [r3, r2]
 8002518:	b29b      	uxth	r3, r3
 800251a:	001a      	movs	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	18d2      	adds	r2, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	18d3      	adds	r3, r2, r3
 800252a:	4a72      	ldr	r2, [pc, #456]	; (80026f4 <PCD_EP_ISR_Handler+0x67c>)
 800252c:	4694      	mov	ip, r2
 800252e:	4463      	add	r3, ip
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	2136      	movs	r1, #54	; 0x36
 8002534:	187b      	adds	r3, r7, r1
 8002536:	0592      	lsls	r2, r2, #22
 8002538:	0d92      	lsrs	r2, r2, #22
 800253a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800253c:	187b      	adds	r3, r7, r1
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	6959      	ldr	r1, [r3, #20]
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	895a      	ldrh	r2, [r3, #10]
 8002550:	2336      	movs	r3, #54	; 0x36
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f004 fa38 	bl	80069ca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	2136      	movs	r1, #54	; 0x36
 8002560:	187b      	adds	r3, r7, r1
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	18d2      	adds	r2, r2, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	187b      	adds	r3, r7, r1
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	18d2      	adds	r2, r2, r3
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <PCD_EP_ISR_Handler+0x516>
 8002580:	2336      	movs	r3, #54	; 0x36
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	429a      	cmp	r2, r3
 800258c:	d207      	bcs.n	800259e <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0011      	movs	r1, r2
 8002596:	0018      	movs	r0, r3
 8002598:	f005 ff07 	bl	80083aa <HAL_PCD_DataOutStageCallback>
 800259c:	e006      	b.n	80025ac <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	0011      	movs	r1, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f002 ff3c 	bl	8005424 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025ac:	232a      	movs	r3, #42	; 0x2a
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <PCD_EP_ISR_Handler+0x542>
 80025b8:	e087      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 80025ba:	202d      	movs	r0, #45	; 0x2d
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	0013      	movs	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	001a      	movs	r2, r3
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	18d3      	adds	r3, r2, r3
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	2420      	movs	r4, #32
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	4944      	ldr	r1, [pc, #272]	; (80026f8 <PCD_EP_ISR_Handler+0x680>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	001a      	movs	r2, r3
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	18d3      	adds	r3, r2, r3
 80025fa:	193a      	adds	r2, r7, r4
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	493f      	ldr	r1, [pc, #252]	; (80026fc <PCD_EP_ISR_Handler+0x684>)
 8002600:	430a      	orrs	r2, r1
 8002602:	b292      	uxth	r2, r2
 8002604:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d10a      	bne.n	8002624 <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002612:	2b02      	cmp	r3, #2
 8002614:	d151      	bne.n	80026ba <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002616:	232a      	movs	r3, #42	; 0x2a
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4013      	ands	r3, r2
 8002622:	d14a      	bne.n	80026ba <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2250      	movs	r2, #80	; 0x50
 800262a:	5a9b      	ldrh	r3, [r3, r2]
 800262c:	b29b      	uxth	r3, r3
 800262e:	001a      	movs	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	18d2      	adds	r2, r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <PCD_EP_ISR_Handler+0x678>)
 8002640:	4694      	mov	ip, r2
 8002642:	4463      	add	r3, ip
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	211e      	movs	r1, #30
 8002648:	187b      	adds	r3, r7, r1
 800264a:	0592      	lsls	r2, r2, #22
 800264c:	0d92      	lsrs	r2, r2, #22
 800264e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	187b      	adds	r3, r7, r1
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d908      	bls.n	800266e <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	231e      	movs	r3, #30
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	e002      	b.n	8002674 <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0011      	movs	r1, r2
 8002684:	0018      	movs	r0, r3
 8002686:	f005 feb1 	bl	80083ec <HAL_PCD_DataInStageCallback>
 800268a:	e01e      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	211e      	movs	r1, #30
 8002692:	187b      	adds	r3, r7, r1
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	18d2      	adds	r2, r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	18d2      	adds	r2, r2, r3
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	0011      	movs	r1, r2
 80026b2:	0018      	movs	r0, r3
 80026b4:	f002 feb6 	bl	8005424 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026b8:	e007      	b.n	80026ca <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ba:	232a      	movs	r3, #42	; 0x2a
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f93b 	bl	8002940 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2244      	movs	r2, #68	; 0x44
 80026d0:	5a9b      	ldrh	r3, [r3, r2]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da00      	bge.n	80026dc <PCD_EP_ISR_Handler+0x664>
 80026da:	e4d2      	b.n	8002082 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b00f      	add	sp, #60	; 0x3c
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	ffff8f8f 	.word	0xffff8f8f
 80026ec:	ffff80c0 	.word	0xffff80c0
 80026f0:	00000402 	.word	0x00000402
 80026f4:	00000406 	.word	0x00000406
 80026f8:	ffff8f0f 	.word	0xffff8f0f
 80026fc:	ffff8000 	.word	0xffff8000

08002700 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	1dbb      	adds	r3, r7, #6
 800270c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800270e:	1dbb      	adds	r3, r7, #6
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	4013      	ands	r3, r2
 8002718:	d100      	bne.n	800271c <HAL_PCD_EP_DB_Receive+0x1c>
 800271a:	e07f      	b.n	800281c <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2250      	movs	r2, #80	; 0x50
 8002722:	5a9b      	ldrh	r3, [r3, r2]
 8002724:	b29b      	uxth	r3, r3
 8002726:	001a      	movs	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	18d2      	adds	r2, r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <HAL_PCD_EP_DB_Receive+0x228>)
 8002738:	4694      	mov	ip, r2
 800273a:	4463      	add	r3, ip
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	211a      	movs	r1, #26
 8002740:	187b      	adds	r3, r7, r1
 8002742:	0592      	lsls	r2, r2, #22
 8002744:	0d92      	lsrs	r2, r2, #22
 8002746:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	187b      	adds	r3, r7, r1
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d308      	bcc.n	8002766 <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	231a      	movs	r3, #26
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	619a      	str	r2, [r3, #24]
 8002764:	e002      	b.n	800276c <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d121      	bne.n	80027b8 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	001a      	movs	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29a      	uxth	r2, r3
 8002786:	2018      	movs	r0, #24
 8002788:	183b      	adds	r3, r7, r0
 800278a:	4968      	ldr	r1, [pc, #416]	; (800292c <HAL_PCD_EP_DB_Receive+0x22c>)
 800278c:	400a      	ands	r2, r1
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	183b      	adds	r3, r7, r0
 8002792:	183a      	adds	r2, r7, r0
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	0189      	lsls	r1, r1, #6
 800279a:	404a      	eors	r2, r1
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	001a      	movs	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	183a      	adds	r2, r7, r0
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	495f      	ldr	r1, [pc, #380]	; (8002930 <HAL_PCD_EP_DB_Receive+0x230>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	b292      	uxth	r2, r2
 80027b6:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	2240      	movs	r2, #64	; 0x40
 80027be:	4013      	ands	r3, r2
 80027c0:	d01a      	beq.n	80027f8 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	001a      	movs	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	18d3      	adds	r3, r2, r3
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2016      	movs	r0, #22
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	4956      	ldr	r1, [pc, #344]	; (8002934 <HAL_PCD_EP_DB_Receive+0x234>)
 80027da:	400a      	ands	r2, r1
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	001a      	movs	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	18d3      	adds	r3, r2, r3
 80027ec:	183a      	adds	r2, r7, r0
 80027ee:	8812      	ldrh	r2, [r2, #0]
 80027f0:	4951      	ldr	r1, [pc, #324]	; (8002938 <HAL_PCD_EP_DB_Receive+0x238>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	b292      	uxth	r2, r2
 80027f6:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80027f8:	231a      	movs	r3, #26
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d100      	bne.n	8002804 <HAL_PCD_EP_DB_Receive+0x104>
 8002802:	e089      	b.n	8002918 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6959      	ldr	r1, [r3, #20]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	891a      	ldrh	r2, [r3, #8]
 8002810:	231a      	movs	r3, #26
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	f004 f8d8 	bl	80069ca <USB_ReadPMA>
 800281a:	e07d      	b.n	8002918 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2250      	movs	r2, #80	; 0x50
 8002822:	5a9b      	ldrh	r3, [r3, r2]
 8002824:	b29b      	uxth	r3, r3
 8002826:	001a      	movs	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	18d2      	adds	r2, r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	4a41      	ldr	r2, [pc, #260]	; (800293c <HAL_PCD_EP_DB_Receive+0x23c>)
 8002838:	4694      	mov	ip, r2
 800283a:	4463      	add	r3, ip
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	211a      	movs	r1, #26
 8002840:	187b      	adds	r3, r7, r1
 8002842:	0592      	lsls	r2, r2, #22
 8002844:	0d92      	lsrs	r2, r2, #22
 8002846:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	187b      	adds	r3, r7, r1
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d308      	bcc.n	8002866 <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	231a      	movs	r3, #26
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	1ad2      	subs	r2, r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	619a      	str	r2, [r3, #24]
 8002864:	e002      	b.n	800286c <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d121      	bne.n	80028b8 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	001a      	movs	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	18d3      	adds	r3, r2, r3
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
 8002886:	201e      	movs	r0, #30
 8002888:	183b      	adds	r3, r7, r0
 800288a:	4928      	ldr	r1, [pc, #160]	; (800292c <HAL_PCD_EP_DB_Receive+0x22c>)
 800288c:	400a      	ands	r2, r1
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	183b      	adds	r3, r7, r0
 8002892:	183a      	adds	r2, r7, r0
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	0189      	lsls	r1, r1, #6
 800289a:	404a      	eors	r2, r1
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	001a      	movs	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	18d3      	adds	r3, r2, r3
 80028ac:	183a      	adds	r2, r7, r0
 80028ae:	8812      	ldrh	r2, [r2, #0]
 80028b0:	491f      	ldr	r1, [pc, #124]	; (8002930 <HAL_PCD_EP_DB_Receive+0x230>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	b292      	uxth	r2, r2
 80028b6:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	4013      	ands	r3, r2
 80028c0:	d11a      	bne.n	80028f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	001a      	movs	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	18d3      	adds	r3, r2, r3
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	201c      	movs	r0, #28
 80028d6:	183b      	adds	r3, r7, r0
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_PCD_EP_DB_Receive+0x234>)
 80028da:	400a      	ands	r2, r1
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	001a      	movs	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	18d3      	adds	r3, r2, r3
 80028ec:	183a      	adds	r2, r7, r0
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	4911      	ldr	r1, [pc, #68]	; (8002938 <HAL_PCD_EP_DB_Receive+0x238>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	b292      	uxth	r2, r2
 80028f6:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80028f8:	231a      	movs	r3, #26
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6959      	ldr	r1, [r3, #20]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	895a      	ldrh	r2, [r3, #10]
 800290e:	231a      	movs	r3, #26
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	f004 f859 	bl	80069ca <USB_ReadPMA>
    }
  }

  return count;
 8002918:	231a      	movs	r3, #26
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	881b      	ldrh	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b008      	add	sp, #32
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	00000402 	.word	0x00000402
 800292c:	ffffbf8f 	.word	0xffffbf8f
 8002930:	ffff8080 	.word	0xffff8080
 8002934:	ffff8f8f 	.word	0xffff8f8f
 8002938:	ffff80c0 	.word	0xffff80c0
 800293c:	00000406 	.word	0x00000406

08002940 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	1dbb      	adds	r3, r7, #6
 800294c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800294e:	1dbb      	adds	r3, r7, #6
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	4013      	ands	r3, r2
 8002956:	d100      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002958:	e12f      	b.n	8002bba <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2250      	movs	r2, #80	; 0x50
 8002960:	5a9b      	ldrh	r3, [r3, r2]
 8002962:	b29b      	uxth	r3, r3
 8002964:	001a      	movs	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	18d2      	adds	r2, r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	18d3      	adds	r3, r2, r3
 8002974:	4abc      	ldr	r2, [pc, #752]	; (8002c68 <HAL_PCD_EP_DB_Transmit+0x328>)
 8002976:	4694      	mov	ip, r2
 8002978:	4463      	add	r3, ip
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	212e      	movs	r1, #46	; 0x2e
 800297e:	187b      	adds	r3, r7, r1
 8002980:	0592      	lsls	r2, r2, #22
 8002982:	0d92      	lsrs	r2, r2, #22
 8002984:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	187b      	adds	r3, r7, r1
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d908      	bls.n	80029a4 <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	232e      	movs	r3, #46	; 0x2e
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	619a      	str	r2, [r3, #24]
 80029a2:	e002      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d129      	bne.n	8002a06 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f005 fd16 	bl	80083ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029c0:	1dbb      	adds	r3, r7, #6
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	01db      	lsls	r3, r3, #7
 80029c8:	4013      	ands	r3, r2
 80029ca:	d100      	bne.n	80029ce <HAL_PCD_EP_DB_Transmit+0x8e>
 80029cc:	e231      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	001a      	movs	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	18d3      	adds	r3, r2, r3
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	2012      	movs	r0, #18
 80029e2:	183b      	adds	r3, r7, r0
 80029e4:	49a1      	ldr	r1, [pc, #644]	; (8002c6c <HAL_PCD_EP_DB_Transmit+0x32c>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	001a      	movs	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	18d3      	adds	r3, r2, r3
 80029f8:	183a      	adds	r2, r7, r0
 80029fa:	8812      	ldrh	r2, [r2, #0]
 80029fc:	499c      	ldr	r1, [pc, #624]	; (8002c70 <HAL_PCD_EP_DB_Transmit+0x330>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
 8002a04:	e215      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a06:	1dbb      	adds	r3, r7, #6
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	01db      	lsls	r3, r3, #7
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d01a      	beq.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	001a      	movs	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	2024      	movs	r0, #36	; 0x24
 8002a26:	183b      	adds	r3, r7, r0
 8002a28:	4990      	ldr	r1, [pc, #576]	; (8002c6c <HAL_PCD_EP_DB_Transmit+0x32c>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	001a      	movs	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	18d3      	adds	r3, r2, r3
 8002a3c:	183a      	adds	r2, r7, r0
 8002a3e:	8812      	ldrh	r2, [r2, #0]
 8002a40:	498b      	ldr	r1, [pc, #556]	; (8002c70 <HAL_PCD_EP_DB_Transmit+0x330>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	b292      	uxth	r2, r2
 8002a46:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d000      	beq.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x114>
 8002a52:	e1ee      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	212e      	movs	r1, #46	; 0x2e
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	18d2      	adds	r2, r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	18d2      	adds	r2, r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d309      	bcc.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	621a      	str	r2, [r3, #32]
 8002a90:	e016      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8002a9a:	232e      	movs	r3, #46	; 0x2e
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2224      	movs	r2, #36	; 0x24
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
 8002aaa:	e009      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d150      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x22a>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2250      	movs	r2, #80	; 0x50
 8002ad4:	5a9b      	ldrh	r3, [r3, r2]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	001a      	movs	r2, r3
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00da      	lsls	r2, r3, #3
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <HAL_PCD_EP_DB_Transmit+0x328>)
 8002aec:	4694      	mov	ip, r2
 8002aee:	4463      	add	r3, ip
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d110      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x1da>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <HAL_PCD_EP_DB_Transmit+0x334>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e044      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b1e:	d810      	bhi.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d002      	beq.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	3301      	adds	r3, #1
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e030      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d102      	bne.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x216>
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	029b      	lsls	r3, r3, #10
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e01c      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d118      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2250      	movs	r2, #80	; 0x50
 8002b7e:	5a9b      	ldrh	r3, [r3, r2]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	001a      	movs	r2, r3
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	189b      	adds	r3, r3, r2
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	00da      	lsls	r2, r3, #3
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_PCD_EP_DB_Transmit+0x328>)
 8002b96:	4694      	mov	ip, r2
 8002b98:	4463      	add	r3, ip
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	891a      	ldrh	r2, [r3, #8]
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f003 fec6 	bl	8006944 <USB_WritePMA>
 8002bb8:	e13b      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2250      	movs	r2, #80	; 0x50
 8002bc0:	5a9b      	ldrh	r3, [r3, r2]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	18d2      	adds	r2, r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	18d3      	adds	r3, r2, r3
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <HAL_PCD_EP_DB_Transmit+0x33c>)
 8002bd6:	4694      	mov	ip, r2
 8002bd8:	4463      	add	r3, ip
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	212e      	movs	r1, #46	; 0x2e
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	0592      	lsls	r2, r2, #22
 8002be2:	0d92      	lsrs	r2, r2, #22
 8002be4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d308      	bcc.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	232e      	movs	r3, #46	; 0x2e
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	1ad2      	subs	r2, r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	e002      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d136      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0011      	movs	r1, r2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f005 fbe6 	bl	80083ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	881a      	ldrh	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d000      	beq.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002c2c:	e101      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	001a      	movs	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	18d3      	adds	r3, r2, r3
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	2026      	movs	r0, #38	; 0x26
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	4909      	ldr	r1, [pc, #36]	; (8002c6c <HAL_PCD_EP_DB_Transmit+0x32c>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	001a      	movs	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	183a      	adds	r2, r7, r0
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	4904      	ldr	r1, [pc, #16]	; (8002c70 <HAL_PCD_EP_DB_Transmit+0x330>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	b292      	uxth	r2, r2
 8002c62:	801a      	strh	r2, [r3, #0]
 8002c64:	e0e5      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	00000402 	.word	0x00000402
 8002c6c:	ffff8f8f 	.word	0xffff8f8f
 8002c70:	ffffc080 	.word	0xffffc080
 8002c74:	ffff83ff 	.word	0xffff83ff
 8002c78:	ffff8000 	.word	0xffff8000
 8002c7c:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	01db      	lsls	r3, r3, #7
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d11a      	bne.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	001a      	movs	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	18d3      	adds	r3, r2, r3
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	202c      	movs	r0, #44	; 0x2c
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	497a      	ldr	r1, [pc, #488]	; (8002e8c <HAL_PCD_EP_DB_Transmit+0x54c>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	001a      	movs	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	183a      	adds	r2, r7, r0
 8002cb8:	8812      	ldrh	r2, [r2, #0]
 8002cba:	4975      	ldr	r1, [pc, #468]	; (8002e90 <HAL_PCD_EP_DB_Transmit+0x550>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2224      	movs	r2, #36	; 0x24
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d000      	beq.n	8002cce <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ccc:	e0b1      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	212e      	movs	r1, #46	; 0x2e
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	18d2      	adds	r2, r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	18d2      	adds	r2, r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d309      	bcc.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	621a      	str	r2, [r3, #32]
 8002d0a:	e016      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d108      	bne.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 8002d14:	232e      	movs	r3, #46	; 0x2e
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]
 8002d24:	e009      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2224      	movs	r2, #36	; 0x24
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d150      	bne.n	8002dea <HAL_PCD_EP_DB_Transmit+0x4aa>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2250      	movs	r2, #80	; 0x50
 8002d54:	5a9b      	ldrh	r3, [r3, r2]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	001a      	movs	r2, r3
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d68:	18d3      	adds	r3, r2, r3
 8002d6a:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <HAL_PCD_EP_DB_Transmit+0x554>)
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	4463      	add	r3, ip
 8002d70:	643b      	str	r3, [r7, #64]	; 0x40
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d110      	bne.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x45a>
 8002d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4a46      	ldr	r2, [pc, #280]	; (8002e98 <HAL_PCD_EP_DB_Transmit+0x558>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e041      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d9e:	d810      	bhi.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d002      	beq.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x474>
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	3301      	adds	r3, #1
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e02d      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	221f      	movs	r2, #31
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d102      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x496>
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	e019      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d115      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2250      	movs	r2, #80	; 0x50
 8002df8:	5a9b      	ldrh	r3, [r3, r2]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	00da      	lsls	r2, r3, #3
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <HAL_PCD_EP_DB_Transmit+0x554>)
 8002e10:	4694      	mov	ip, r2
 8002e12:	4463      	add	r3, ip
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6959      	ldr	r1, [r3, #20]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	895a      	ldrh	r2, [r3, #10]
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f003 fd89 	bl	8006944 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	001a      	movs	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	2010      	movs	r0, #16
 8002e46:	183b      	adds	r3, r7, r0
 8002e48:	4915      	ldr	r1, [pc, #84]	; (8002ea0 <HAL_PCD_EP_DB_Transmit+0x560>)
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	183b      	adds	r3, r7, r0
 8002e50:	183a      	adds	r2, r7, r0
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	2110      	movs	r1, #16
 8002e56:	404a      	eors	r2, r1
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	183a      	adds	r2, r7, r0
 8002e5e:	8812      	ldrh	r2, [r2, #0]
 8002e60:	2120      	movs	r1, #32
 8002e62:	404a      	eors	r2, r1
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	18d3      	adds	r3, r2, r3
 8002e74:	183a      	adds	r2, r7, r0
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <HAL_PCD_EP_DB_Transmit+0x564>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b012      	add	sp, #72	; 0x48
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	ffff8f8f 	.word	0xffff8f8f
 8002e90:	ffffc080 	.word	0xffffc080
 8002e94:	00000406 	.word	0x00000406
 8002e98:	ffff83ff 	.word	0xffff83ff
 8002e9c:	ffff8000 	.word	0xffff8000
 8002ea0:	ffff8fbf 	.word	0xffff8fbf
 8002ea4:	ffff8080 	.word	0xffff8080

08002ea8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	0008      	movs	r0, r1
 8002eb2:	0011      	movs	r1, r2
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	240a      	movs	r4, #10
 8002eb8:	193b      	adds	r3, r7, r4
 8002eba:	1c02      	adds	r2, r0, #0
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	1c0a      	adds	r2, r1, #0
 8002ec4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	230a      	movs	r3, #10
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	2207      	movs	r2, #7
 8002edc:	4013      	ands	r3, r2
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	18d3      	adds	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e00b      	b.n	8002f08 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef0:	230a      	movs	r3, #10
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	3369      	adds	r3, #105	; 0x69
 8002f00:	33ff      	adds	r3, #255	; 0xff
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	18d3      	adds	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f08:	2308      	movs	r3, #8
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	80da      	strh	r2, [r3, #6]
 8002f20:	e00b      	b.n	8002f3a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2201      	movs	r2, #1
 8002f26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b007      	add	sp, #28
 8002f42:	bd90      	pop	{r4, r7, pc}

08002f44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	23ba      	movs	r3, #186	; 0xba
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	2101      	movs	r1, #1
 8002f5a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	23b8      	movs	r3, #184	; 0xb8
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	2100      	movs	r1, #0
 8002f64:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2254      	movs	r2, #84	; 0x54
 8002f6a:	5a9b      	ldrh	r3, [r3, r2]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	b299      	uxth	r1, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2254      	movs	r2, #84	; 0x54
 8002f78:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2254      	movs	r2, #84	; 0x54
 8002f7e:	5a9b      	ldrh	r3, [r3, r2]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2202      	movs	r2, #2
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b299      	uxth	r1, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2254      	movs	r2, #84	; 0x54
 8002f8c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	000a      	movs	r2, r1
 8002fa2:	1cfb      	adds	r3, r7, #3
 8002fa4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f000 fbab 	bl	800371a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc4:	4bce      	ldr	r3, [pc, #824]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	220c      	movs	r2, #12
 8002fca:	4013      	ands	r3, r2
 8002fcc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fce:	4bcc      	ldr	r3, [pc, #816]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	025b      	lsls	r3, r3, #9
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x36>
 8002fe4:	e07e      	b.n	80030e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d007      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x68>
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	025b      	lsls	r3, r3, #9
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d10d      	bne.n	8003018 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	4bc0      	ldr	r3, [pc, #768]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	029b      	lsls	r3, r3, #10
 8003004:	4013      	ands	r3, r2
 8003006:	d100      	bne.n	800300a <HAL_RCC_OscConfig+0x5a>
 8003008:	e06b      	b.n	80030e2 <HAL_RCC_OscConfig+0x132>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d167      	bne.n	80030e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f000 fb81 	bl	800371a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	025b      	lsls	r3, r3, #9
 8003020:	429a      	cmp	r2, r3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x84>
 8003024:	4bb6      	ldr	r3, [pc, #728]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4bb5      	ldr	r3, [pc, #724]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	0249      	lsls	r1, r1, #9
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e027      	b.n	8003084 <HAL_RCC_OscConfig+0xd4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	23a0      	movs	r3, #160	; 0xa0
 800303a:	02db      	lsls	r3, r3, #11
 800303c:	429a      	cmp	r2, r3
 800303e:	d10e      	bne.n	800305e <HAL_RCC_OscConfig+0xae>
 8003040:	4baf      	ldr	r3, [pc, #700]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4bae      	ldr	r3, [pc, #696]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	02c9      	lsls	r1, r1, #11
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	4bac      	ldr	r3, [pc, #688]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4bab      	ldr	r3, [pc, #684]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	0249      	lsls	r1, r1, #9
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e012      	b.n	8003084 <HAL_RCC_OscConfig+0xd4>
 800305e:	4ba8      	ldr	r3, [pc, #672]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4ba7      	ldr	r3, [pc, #668]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003064:	49a7      	ldr	r1, [pc, #668]	; (8003304 <HAL_RCC_OscConfig+0x354>)
 8003066:	400a      	ands	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	4ba5      	ldr	r3, [pc, #660]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	025b      	lsls	r3, r3, #9
 8003072:	4013      	ands	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4ba1      	ldr	r3, [pc, #644]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4ba0      	ldr	r3, [pc, #640]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800307e:	49a2      	ldr	r1, [pc, #648]	; (8003308 <HAL_RCC_OscConfig+0x358>)
 8003080:	400a      	ands	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fd ff22 	bl	8000ed4 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003094:	e009      	b.n	80030aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003096:	f7fd ff1d 	bl	8000ed4 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b64      	cmp	r3, #100	; 0x64
 80030a2:	d902      	bls.n	80030aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	f000 fb38 	bl	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030aa:	4b95      	ldr	r3, [pc, #596]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	029b      	lsls	r3, r3, #10
 80030b2:	4013      	ands	r3, r2
 80030b4:	d0ef      	beq.n	8003096 <HAL_RCC_OscConfig+0xe6>
 80030b6:	e015      	b.n	80030e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd ff0c 	bl	8000ed4 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c2:	f7fd ff07 	bl	8000ed4 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b64      	cmp	r3, #100	; 0x64
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e322      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030d4:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	4013      	ands	r3, r2
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x112>
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d100      	bne.n	80030f0 <HAL_RCC_OscConfig+0x140>
 80030ee:	e08a      	b.n	8003206 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d13d      	bne.n	800317e <HAL_RCC_OscConfig+0x1ce>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d13a      	bne.n	800317e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003108:	4b7d      	ldr	r3, [pc, #500]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2204      	movs	r2, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_RCC_OscConfig+0x16c>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e2fe      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b78      	ldr	r3, [pc, #480]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a7a      	ldr	r2, [pc, #488]	; (800330c <HAL_RCC_OscConfig+0x35c>)
 8003122:	4013      	ands	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	4b74      	ldr	r3, [pc, #464]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003132:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2209      	movs	r2, #9
 8003138:	4393      	bics	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	4b70      	ldr	r3, [pc, #448]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003144:	f000 fc1e 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003148:	0001      	movs	r1, r0
 800314a:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	220f      	movs	r2, #15
 8003152:	4013      	ands	r3, r2
 8003154:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x360>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	000a      	movs	r2, r1
 800315a:	40da      	lsrs	r2, r3
 800315c:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <HAL_RCC_OscConfig+0x364>)
 800315e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003160:	2513      	movs	r5, #19
 8003162:	197c      	adds	r4, r7, r5
 8003164:	2000      	movs	r0, #0
 8003166:	f7fd fe6f 	bl	8000e48 <HAL_InitTick>
 800316a:	0003      	movs	r3, r0
 800316c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800316e:	197b      	adds	r3, r7, r5
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d047      	beq.n	8003206 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8003176:	2313      	movs	r3, #19
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	e2cd      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d027      	beq.n	80031d4 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2209      	movs	r2, #9
 800318a:	4393      	bics	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	4b5c      	ldr	r3, [pc, #368]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fd fe9d 	bl	8000ed4 <HAL_GetTick>
 800319a:	0003      	movs	r3, r0
 800319c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a0:	f7fd fe98 	bl	8000ed4 <HAL_GetTick>
 80031a4:	0002      	movs	r2, r0
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e2b3      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b2:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2204      	movs	r2, #4
 80031b8:	4013      	ands	r3, r2
 80031ba:	d0f1      	beq.n	80031a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCC_OscConfig+0x35c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e018      	b.n	8003206 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b49      	ldr	r3, [pc, #292]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fe78 	bl	8000ed4 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ea:	f7fd fe73 	bl	8000ed4 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e28e      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2204      	movs	r2, #4
 8003202:	4013      	ands	r3, r2
 8003204:	d1f1      	bne.n	80031ea <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2210      	movs	r2, #16
 800320c:	4013      	ands	r3, r2
 800320e:	d100      	bne.n	8003212 <HAL_RCC_OscConfig+0x262>
 8003210:	e09e      	b.n	8003350 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d13f      	bne.n	8003298 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003218:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x280>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e274      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_RCC_OscConfig+0x368>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323e:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003244:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	0a19      	lsrs	r1, r3, #8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	061a      	lsls	r2, r3, #24
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	0b5b      	lsrs	r3, r3, #13
 800325e:	3301      	adds	r3, #1
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	0212      	lsls	r2, r2, #8
 8003264:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	210f      	movs	r1, #15
 800326e:	400b      	ands	r3, r1
 8003270:	4927      	ldr	r1, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x360>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_OscConfig+0x364>)
 8003278:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800327a:	2513      	movs	r5, #19
 800327c:	197c      	adds	r4, r7, r5
 800327e:	2000      	movs	r0, #0
 8003280:	f7fd fde2 	bl	8000e48 <HAL_InitTick>
 8003284:	0003      	movs	r3, r0
 8003286:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003288:	197b      	adds	r3, r7, r5
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d05f      	beq.n	8003350 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8003290:	2313      	movs	r3, #19
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	e240      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03d      	beq.n	800331c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	0049      	lsls	r1, r1, #1
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fd fe11 	bl	8000ed4 <HAL_GetTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032b8:	f7fd fe0c 	bl	8000ed4 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e227      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4013      	ands	r3, r2
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HAL_RCC_OscConfig+0x368>)
 80032dc:	4013      	ands	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	0a19      	lsrs	r1, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	061a      	lsls	r2, r3, #24
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <HAL_RCC_OscConfig+0x350>)
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e027      	b.n	8003350 <HAL_RCC_OscConfig+0x3a0>
 8003300:	40021000 	.word	0x40021000
 8003304:	fffeffff 	.word	0xfffeffff
 8003308:	fffbffff 	.word	0xfffbffff
 800330c:	ffffe0ff 	.word	0xffffe0ff
 8003310:	08008a5c 	.word	0x08008a5c
 8003314:	20000000 	.word	0x20000000
 8003318:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800331c:	4bbd      	ldr	r3, [pc, #756]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4bbc      	ldr	r3, [pc, #752]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003322:	49bd      	ldr	r1, [pc, #756]	; (8003618 <HAL_RCC_OscConfig+0x668>)
 8003324:	400a      	ands	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd fdd4 	bl	8000ed4 <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003332:	f7fd fdcf 	bl	8000ed4 <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1ea      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003344:	4bb3      	ldr	r3, [pc, #716]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4013      	ands	r3, r2
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2208      	movs	r2, #8
 8003356:	4013      	ands	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d019      	beq.n	8003396 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4bac      	ldr	r3, [pc, #688]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003366:	4bab      	ldr	r3, [pc, #684]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fd fdb1 	bl	8000ed4 <HAL_GetTick>
 8003372:	0003      	movs	r3, r0
 8003374:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003378:	f7fd fdac 	bl	8000ed4 <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1c7      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800338a:	4ba2      	ldr	r3, [pc, #648]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d0f1      	beq.n	8003378 <HAL_RCC_OscConfig+0x3c8>
 8003394:	e018      	b.n	80033c8 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003396:	4b9f      	ldr	r3, [pc, #636]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339a:	4b9e      	ldr	r3, [pc, #632]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800339c:	2101      	movs	r1, #1
 800339e:	438a      	bics	r2, r1
 80033a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fd fd97 	bl	8000ed4 <HAL_GetTick>
 80033a6:	0003      	movs	r3, r0
 80033a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fd fd92 	bl	8000ed4 <HAL_GetTick>
 80033b0:	0002      	movs	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1ad      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033be:	4b95      	ldr	r3, [pc, #596]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d1f1      	bne.n	80033ac <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2204      	movs	r2, #4
 80033ce:	4013      	ands	r3, r2
 80033d0:	d100      	bne.n	80033d4 <HAL_RCC_OscConfig+0x424>
 80033d2:	e0af      	b.n	8003534 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d4:	2327      	movs	r3, #39	; 0x27
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033dc:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80033de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	055b      	lsls	r3, r3, #21
 80033e4:	4013      	ands	r3, r2
 80033e6:	d10a      	bne.n	80033fe <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b8a      	ldr	r3, [pc, #552]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80033ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ec:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	0549      	lsls	r1, r1, #21
 80033f2:	430a      	orrs	r2, r1
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033f6:	2327      	movs	r3, #39	; 0x27
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b87      	ldr	r3, [pc, #540]	; (800361c <HAL_RCC_OscConfig+0x66c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4013      	ands	r3, r2
 8003408:	d11a      	bne.n	8003440 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340a:	4b84      	ldr	r3, [pc, #528]	; (800361c <HAL_RCC_OscConfig+0x66c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b83      	ldr	r3, [pc, #524]	; (800361c <HAL_RCC_OscConfig+0x66c>)
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	0049      	lsls	r1, r1, #1
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003418:	f7fd fd5c 	bl	8000ed4 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003422:	f7fd fd57 	bl	8000ed4 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	; 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e172      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCC_OscConfig+0x66c>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	429a      	cmp	r2, r3
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x4ac>
 800344c:	4b71      	ldr	r3, [pc, #452]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800344e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003450:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	0049      	lsls	r1, r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	651a      	str	r2, [r3, #80]	; 0x50
 800345a:	e031      	b.n	80034c0 <HAL_RCC_OscConfig+0x510>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10c      	bne.n	800347e <HAL_RCC_OscConfig+0x4ce>
 8003464:	4b6b      	ldr	r3, [pc, #428]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003468:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800346a:	496b      	ldr	r1, [pc, #428]	; (8003618 <HAL_RCC_OscConfig+0x668>)
 800346c:	400a      	ands	r2, r1
 800346e:	651a      	str	r2, [r3, #80]	; 0x50
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003474:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003476:	496a      	ldr	r1, [pc, #424]	; (8003620 <HAL_RCC_OscConfig+0x670>)
 8003478:	400a      	ands	r2, r1
 800347a:	651a      	str	r2, [r3, #80]	; 0x50
 800347c:	e020      	b.n	80034c0 <HAL_RCC_OscConfig+0x510>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	23a0      	movs	r3, #160	; 0xa0
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	429a      	cmp	r2, r3
 8003488:	d10e      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4f8>
 800348a:	4b62      	ldr	r3, [pc, #392]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800348c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	00c9      	lsls	r1, r1, #3
 8003494:	430a      	orrs	r2, r1
 8003496:	651a      	str	r2, [r3, #80]	; 0x50
 8003498:	4b5e      	ldr	r3, [pc, #376]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800349a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800349c:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	0049      	lsls	r1, r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	651a      	str	r2, [r3, #80]	; 0x50
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x510>
 80034a8:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80034aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ac:	4b59      	ldr	r3, [pc, #356]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80034ae:	495a      	ldr	r1, [pc, #360]	; (8003618 <HAL_RCC_OscConfig+0x668>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	651a      	str	r2, [r3, #80]	; 0x50
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80034b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034b8:	4b56      	ldr	r3, [pc, #344]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80034ba:	4959      	ldr	r1, [pc, #356]	; (8003620 <HAL_RCC_OscConfig+0x670>)
 80034bc:	400a      	ands	r2, r1
 80034be:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c8:	f7fd fd04 	bl	8000ed4 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d0:	e009      	b.n	80034e6 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fd fcff 	bl	8000ed4 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	4a51      	ldr	r2, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x674>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e119      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034e6:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80034e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	d0ef      	beq.n	80034d2 <HAL_RCC_OscConfig+0x522>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fd fcee 	bl	8000ed4 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd fce9 	bl	8000ed4 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	4a46      	ldr	r2, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x674>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e103      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003512:	4b40      	ldr	r3, [pc, #256]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d1ef      	bne.n	80034fe <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800351e:	2327      	movs	r3, #39	; 0x27
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800352a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352c:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800352e:	493e      	ldr	r1, [pc, #248]	; (8003628 <HAL_RCC_OscConfig+0x678>)
 8003530:	400a      	ands	r2, r1
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2220      	movs	r2, #32
 800353a:	4013      	ands	r3, r2
 800353c:	d049      	beq.n	80035d2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d026      	beq.n	8003594 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800354c:	2101      	movs	r1, #1
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003558:	2101      	movs	r1, #1
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
 800355e:	4b33      	ldr	r3, [pc, #204]	; (800362c <HAL_RCC_OscConfig+0x67c>)
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	4b32      	ldr	r3, [pc, #200]	; (800362c <HAL_RCC_OscConfig+0x67c>)
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	0189      	lsls	r1, r1, #6
 8003568:	430a      	orrs	r2, r1
 800356a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fcb2 	bl	8000ed4 <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003576:	f7fd fcad 	bl	8000ed4 <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0c8      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2202      	movs	r2, #2
 800358e:	4013      	ands	r3, r2
 8003590:	d0f1      	beq.n	8003576 <HAL_RCC_OscConfig+0x5c6>
 8003592:	e01e      	b.n	80035d2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 800359a:	2101      	movs	r1, #1
 800359c:	438a      	bics	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_OscConfig+0x67c>)
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x67c>)
 80035a6:	4922      	ldr	r1, [pc, #136]	; (8003630 <HAL_RCC_OscConfig+0x680>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fd fc92 	bl	8000ed4 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b6:	f7fd fc8d 	bl	8000ed4 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0a8      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2202      	movs	r2, #2
 80035ce:	4013      	ands	r3, r2
 80035d0:	d1f1      	bne.n	80035b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d100      	bne.n	80035dc <HAL_RCC_OscConfig+0x62c>
 80035da:	e09d      	b.n	8003718 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d100      	bne.n	80035e4 <HAL_RCC_OscConfig+0x634>
 80035e2:	e076      	b.n	80036d2 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d157      	bne.n	800369c <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_OscConfig+0x664>)
 80035f2:	4910      	ldr	r1, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x684>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd fc6c 	bl	8000ed4 <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003600:	e01a      	b.n	8003638 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd fc67 	bl	8000ed4 <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d913      	bls.n	8003638 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e082      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
 8003614:	40021000 	.word	0x40021000
 8003618:	fffffeff 	.word	0xfffffeff
 800361c:	40007000 	.word	0x40007000
 8003620:	fffffbff 	.word	0xfffffbff
 8003624:	00001388 	.word	0x00001388
 8003628:	efffffff 	.word	0xefffffff
 800362c:	40010000 	.word	0x40010000
 8003630:	ffffdfff 	.word	0xffffdfff
 8003634:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	049b      	lsls	r3, r3, #18
 8003640:	4013      	ands	r3, r2
 8003642:	d1de      	bne.n	8003602 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003644:	4b37      	ldr	r3, [pc, #220]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a37      	ldr	r2, [pc, #220]	; (8003728 <HAL_RCC_OscConfig+0x778>)
 800364a:	4013      	ands	r3, r2
 800364c:	0019      	movs	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365c:	431a      	orrs	r2, r3
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b2f      	ldr	r3, [pc, #188]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	0449      	lsls	r1, r1, #17
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fd fc2f 	bl	8000ed4 <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fd fc2a 	bl	8000ed4 <HAL_GetTick>
 8003680:	0002      	movs	r2, r0
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e045      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800368e:	4b25      	ldr	r3, [pc, #148]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	049b      	lsls	r3, r3, #18
 8003696:	4013      	ands	r3, r2
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x6cc>
 800369a:	e03d      	b.n	8003718 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 80036a2:	4922      	ldr	r1, [pc, #136]	; (800372c <HAL_RCC_OscConfig+0x77c>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fd fc14 	bl	8000ed4 <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd fc0f 	bl	8000ed4 <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e02a      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036c4:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	049b      	lsls	r3, r3, #18
 80036cc:	4013      	ands	r3, r2
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x702>
 80036d0:	e022      	b.n	8003718 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01d      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCC_OscConfig+0x774>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	025b      	lsls	r3, r3, #9
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d10f      	bne.n	8003714 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	23f0      	movs	r3, #240	; 0xf0
 80036f8:	039b      	lsls	r3, r3, #14
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d107      	bne.n	8003714 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	23c0      	movs	r3, #192	; 0xc0
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	401a      	ands	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b00a      	add	sp, #40	; 0x28
 8003720:	bdb0      	pop	{r4, r5, r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40021000 	.word	0x40021000
 8003728:	ff02ffff 	.word	0xff02ffff
 800372c:	feffffff 	.word	0xfeffffff

08003730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b5b0      	push	{r4, r5, r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e10d      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2201      	movs	r2, #1
 800374a:	4013      	ands	r3, r2
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d911      	bls.n	8003776 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	4393      	bics	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	4b82      	ldr	r3, [pc, #520]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003764:	4b80      	ldr	r3, [pc, #512]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d001      	beq.n	8003776 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0f4      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b7a      	ldr	r3, [pc, #488]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	22f0      	movs	r2, #240	; 0xf0
 8003786:	4393      	bics	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	4b77      	ldr	r3, [pc, #476]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d100      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x70>
 800379e:	e089      	b.n	80038b4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a8:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	4013      	ands	r3, r2
 80037b2:	d120      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d3      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	049b      	lsls	r3, r3, #18
 80037c8:	4013      	ands	r3, r2
 80037ca:	d114      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0c7      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d8:	4b64      	ldr	r3, [pc, #400]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2204      	movs	r2, #4
 80037de:	4013      	ands	r3, r2
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0bc      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0b4      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2203      	movs	r2, #3
 80037fc:	4393      	bics	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380a:	f7fd fb63 	bl	8000ed4 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d111      	bne.n	800383e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800381a:	e009      	b.n	8003830 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fd fb5a 	bl	8000ed4 <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x240>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e097      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003830:	4b4e      	ldr	r3, [pc, #312]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	220c      	movs	r2, #12
 8003836:	4013      	ands	r3, r2
 8003838:	2b08      	cmp	r3, #8
 800383a:	d1ef      	bne.n	800381c <HAL_RCC_ClockConfig+0xec>
 800383c:	e03a      	b.n	80038b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d111      	bne.n	800386a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003846:	e009      	b.n	800385c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fd fb44 	bl	8000ed4 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	4a47      	ldr	r2, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x240>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e081      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	220c      	movs	r2, #12
 8003862:	4013      	ands	r3, r2
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d1ef      	bne.n	8003848 <HAL_RCC_ClockConfig+0x118>
 8003868:	e024      	b.n	80038b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d11b      	bne.n	80038aa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003872:	e009      	b.n	8003888 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fd fb2e 	bl	8000ed4 <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <HAL_RCC_ClockConfig+0x240>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e06b      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003888:	4b38      	ldr	r3, [pc, #224]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	220c      	movs	r2, #12
 800388e:	4013      	ands	r3, r2
 8003890:	2b04      	cmp	r3, #4
 8003892:	d1ef      	bne.n	8003874 <HAL_RCC_ClockConfig+0x144>
 8003894:	e00e      	b.n	80038b4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003896:	f7fd fb1d 	bl	8000ed4 <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	4a33      	ldr	r2, [pc, #204]	; (8003970 <HAL_RCC_ClockConfig+0x240>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e05a      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	220c      	movs	r2, #12
 80038b0:	4013      	ands	r3, r2
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d211      	bcs.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	4393      	bics	r3, r2
 80038ca:	0019      	movs	r1, r3
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_RCC_ClockConfig+0x238>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e03c      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <HAL_RCC_ClockConfig+0x244>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	4013      	ands	r3, r2
 800390c:	d00a      	beq.n	8003924 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x248>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	00da      	lsls	r2, r3, #3
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003924:	f000 f82e 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003928:	0001      	movs	r1, r0
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_ClockConfig+0x23c>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	220f      	movs	r2, #15
 8003932:	4013      	ands	r3, r2
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <HAL_RCC_ClockConfig+0x24c>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	000a      	movs	r2, r1
 800393a:	40da      	lsrs	r2, r3
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_ClockConfig+0x250>)
 800393e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003940:	250b      	movs	r5, #11
 8003942:	197c      	adds	r4, r7, r5
 8003944:	2000      	movs	r0, #0
 8003946:	f7fd fa7f 	bl	8000e48 <HAL_InitTick>
 800394a:	0003      	movs	r3, r0
 800394c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800394e:	197b      	adds	r3, r7, r5
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8003956:	230b      	movs	r3, #11
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	e000      	b.n	8003960 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b004      	add	sp, #16
 8003966:	bdb0      	pop	{r4, r5, r7, pc}
 8003968:	40022000 	.word	0x40022000
 800396c:	40021000 	.word	0x40021000
 8003970:	00001388 	.word	0x00001388
 8003974:	fffff8ff 	.word	0xfffff8ff
 8003978:	ffffc7ff 	.word	0xffffc7ff
 800397c:	08008a5c 	.word	0x08008a5c
 8003980:	20000000 	.word	0x20000000

08003984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	220c      	movs	r2, #12
 8003994:	4013      	ands	r3, r2
 8003996:	2b08      	cmp	r3, #8
 8003998:	d00e      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x34>
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d00f      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0x3a>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d157      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039a2:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2210      	movs	r2, #16
 80039a8:	4013      	ands	r3, r2
 80039aa:	d002      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039b0:	e05d      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80039b2:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039b4:	613b      	str	r3, [r7, #16]
      break;
 80039b6:	e05a      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x100>)
 80039ba:	613b      	str	r3, [r7, #16]
      break;
 80039bc:	e057      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	0c9b      	lsrs	r3, r3, #18
 80039c2:	220f      	movs	r2, #15
 80039c4:	4013      	ands	r3, r2
 80039c6:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	0d9b      	lsrs	r3, r3, #22
 80039d0:	2203      	movs	r2, #3
 80039d2:	4013      	ands	r3, r2
 80039d4:	3301      	adds	r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	025b      	lsls	r3, r3, #9
 80039e0:	4013      	ands	r3, r2
 80039e2:	d00f      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	000a      	movs	r2, r1
 80039e8:	0152      	lsls	r2, r2, #5
 80039ea:	1a52      	subs	r2, r2, r1
 80039ec:	0193      	lsls	r3, r2, #6
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	185b      	adds	r3, r3, r1
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fc fb85 	bl	8000108 <__udivsi3>
 80039fe:	0003      	movs	r3, r0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e023      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	000a      	movs	r2, r1
 8003a12:	0152      	lsls	r2, r2, #5
 8003a14:	1a52      	subs	r2, r2, r1
 8003a16:	0193      	lsls	r3, r2, #6
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	185b      	adds	r3, r3, r1
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7fc fb70 	bl	8000108 <__udivsi3>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e00e      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	000a      	movs	r2, r1
 8003a32:	0152      	lsls	r2, r2, #5
 8003a34:	1a52      	subs	r2, r2, r1
 8003a36:	0193      	lsls	r3, r2, #6
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	185b      	adds	r3, r3, r1
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fc fb60 	bl	8000108 <__udivsi3>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
      break;
 8003a50:	e00d      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	2207      	movs	r2, #7
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	0212      	lsls	r2, r2, #8
 8003a66:	409a      	lsls	r2, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
      break;
 8003a6c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a6e:	693b      	ldr	r3, [r7, #16]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b006      	add	sp, #24
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	003d0900 	.word	0x003d0900
 8003a80:	00f42400 	.word	0x00f42400
 8003a84:	007a1200 	.word	0x007a1200
 8003a88:	08008a74 	.word	0x08008a74

08003a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa4:	f7ff fff2 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003aa8:	0001      	movs	r1, r0
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	40d9      	lsrs	r1, r3
 8003aba:	000b      	movs	r3, r1
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	08008a6c 	.word	0x08008a6c

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad0:	f7ff ffdc 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003ad4:	0001      	movs	r1, r0
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	0adb      	lsrs	r3, r3, #11
 8003adc:	2207      	movs	r2, #7
 8003ade:	4013      	ands	r3, r2
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	40d9      	lsrs	r1, r3
 8003ae6:	000b      	movs	r3, r1
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08008a6c 	.word	0x08008a6c

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2220      	movs	r2, #32
 8003b06:	4013      	ands	r3, r2
 8003b08:	d106      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4013      	ands	r3, r2
 8003b14:	d100      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003b16:	e0dd      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003b18:	2317      	movs	r3, #23
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b20:	4b9c      	ldr	r3, [pc, #624]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	055b      	lsls	r3, r3, #21
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d10a      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b30:	4b98      	ldr	r3, [pc, #608]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	0549      	lsls	r1, r1, #21
 8003b36:	430a      	orrs	r2, r1
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b3a:	2317      	movs	r3, #23
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b95      	ldr	r3, [pc, #596]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d11a      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b92      	ldr	r3, [pc, #584]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b91      	ldr	r3, [pc, #580]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	0049      	lsls	r1, r1, #1
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5c:	f7fd f9ba 	bl	8000ed4 <HAL_GetTick>
 8003b60:	0003      	movs	r3, r0
 8003b62:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	e008      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fd f9b5 	bl	8000ed4 <HAL_GetTick>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e108      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	4b87      	ldr	r3, [pc, #540]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b84:	4b83      	ldr	r3, [pc, #524]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	23c0      	movs	r3, #192	; 0xc0
 8003b8a:	039b      	lsls	r3, r3, #14
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	23c0      	movs	r3, #192	; 0xc0
 8003b96:	039b      	lsls	r3, r3, #14
 8003b98:	4013      	ands	r3, r2
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	23c0      	movs	r3, #192	; 0xc0
 8003ba6:	039b      	lsls	r3, r3, #14
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	23c0      	movs	r3, #192	; 0xc0
 8003bb6:	029b      	lsls	r3, r3, #10
 8003bb8:	401a      	ands	r2, r3
 8003bba:	23c0      	movs	r3, #192	; 0xc0
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bc2:	4b74      	ldr	r3, [pc, #464]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	401a      	ands	r2, r3
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0d8      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003bd8:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bdc:	23c0      	movs	r3, #192	; 0xc0
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d049      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	23c0      	movs	r3, #192	; 0xc0
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d004      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	4013      	ands	r3, r2
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	23c0      	movs	r3, #192	; 0xc0
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d034      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d02e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c20:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	4a5d      	ldr	r2, [pc, #372]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c2e:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	0309      	lsls	r1, r1, #12
 8003c34:	430a      	orrs	r2, r1
 8003c36:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c38:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c3e:	4958      	ldr	r1, [pc, #352]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4013      	ands	r3, r2
 8003c52:	d014      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd f93e 	bl	8000ed4 <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c5c:	e009      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd f939 	bl	8000ed4 <HAL_GetTick>
 8003c62:	0002      	movs	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	4a4e      	ldr	r2, [pc, #312]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e08b      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d0ef      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	23c0      	movs	r3, #192	; 0xc0
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	401a      	ands	r2, r3
 8003c88:	23c0      	movs	r3, #192	; 0xc0
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	23c0      	movs	r3, #192	; 0xc0
 8003ca0:	039b      	lsls	r3, r3, #14
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	23c0      	movs	r3, #192	; 0xc0
 8003cb4:	029b      	lsls	r3, r3, #10
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cbe:	2317      	movs	r3, #23
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cce:	4937      	ldr	r1, [pc, #220]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	220c      	movs	r2, #12
 8003d02:	4393      	bics	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2204      	movs	r2, #4
 8003d16:	4013      	ands	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2208      	movs	r2, #8
 8003d34:	4013      	ands	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	0019      	movs	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2240      	movs	r2, #64	; 0x40
 8003d52:	4013      	ands	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	0019      	movs	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d66:	430a      	orrs	r2, r1
 8003d68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	4013      	ands	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003d74:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b006      	add	sp, #24
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	fffcffff 	.word	0xfffcffff
 8003da0:	fff7ffff 	.word	0xfff7ffff
 8003da4:	00001388 	.word	0x00001388
 8003da8:	ffcfffff 	.word	0xffcfffff
 8003dac:	efffffff 	.word	0xefffffff
 8003db0:	fffff3ff 	.word	0xfffff3ff
 8003db4:	ffffcfff 	.word	0xffffcfff
 8003db8:	fbffffff 	.word	0xfbffffff
 8003dbc:	fff3ffff 	.word	0xfff3ffff

08003dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e059      	b.n	8003e86 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2251      	movs	r2, #81	; 0x51
 8003ddc:	5c9b      	ldrb	r3, [r3, r2]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2250      	movs	r2, #80	; 0x50
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7fc fe00 	bl	80009f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2251      	movs	r2, #81	; 0x51
 8003df8:	2102      	movs	r1, #2
 8003dfa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2140      	movs	r1, #64	; 0x40
 8003e08:	438a      	bics	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6999      	ldr	r1, [r3, #24]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	400b      	ands	r3, r1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	0011      	movs	r1, r2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	2204      	movs	r2, #4
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4907      	ldr	r1, [pc, #28]	; (8003e90 <HAL_SPI_Init+0xd0>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2251      	movs	r2, #81	; 0x51
 8003e80:	2101      	movs	r1, #1
 8003e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	fffff7ff 	.word	0xfffff7ff

08003e94 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e075      	b.n	8003f92 <HAL_TSC_Init+0xfe>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223c      	movs	r2, #60	; 0x3c
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223d      	movs	r2, #61	; 0x3d
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fc fe35 	bl	8000b2c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223c      	movs	r2, #60	; 0x3c
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003ee0:	431a      	orrs	r2, r3
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003ee8:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003eee:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003ef4:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8003efa:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003f00:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8003f06:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_TSC_Init+0x98>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	0249      	lsls	r1, r1, #9
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	43d2      	mvns	r2, r2
 8003f42:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681c      	ldr	r4, [r3, #0]
 8003f66:	0010      	movs	r0, r2
 8003f68:	f000 f817 	bl	8003f9a <TSC_extract_groups>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2203      	movs	r2, #3
 8003f86:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223c      	movs	r2, #60	; 0x3c
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b003      	add	sp, #12
 8003f98:	bd90      	pop	{r4, r7, pc}

08003f9a <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	e011      	b.n	8003fd0 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d006      	beq.n	8003fca <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	d9ea      	bls.n	8003fac <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b004      	add	sp, #16
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e044      	b.n	800407c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2270      	movs	r2, #112	; 0x70
 8003ffe:	2100      	movs	r1, #0
 8004000:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0018      	movs	r0, r3
 8004006:	f7fc fe2d 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2224      	movs	r2, #36	; 0x24
 800400e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	438a      	bics	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 f830 	bl	8004088 <UART_SetConfig>
 8004028:	0003      	movs	r3, r0
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e024      	b.n	800407c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 fb3b 	bl	80046b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	490d      	ldr	r1, [pc, #52]	; (8004084 <HAL_UART_Init+0xa4>)
 800404e:	400a      	ands	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	212a      	movs	r1, #42	; 0x2a
 800405e:	438a      	bics	r2, r1
 8004060:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 fbd3 	bl	8004820 <UART_CheckIdleState>
 800407a:	0003      	movs	r3, r0
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}
 8004084:	ffffb7ff 	.word	0xffffb7ff

08004088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b08e      	sub	sp, #56	; 0x38
 800408c:	af00      	add	r7, sp, #0
 800408e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004090:	231b      	movs	r3, #27
 8004092:	2218      	movs	r2, #24
 8004094:	4694      	mov	ip, r2
 8004096:	44bc      	add	ip, r7
 8004098:	4463      	add	r3, ip
 800409a:	2210      	movs	r2, #16
 800409c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a2:	2313      	movs	r3, #19
 80040a4:	2218      	movs	r2, #24
 80040a6:	4694      	mov	ip, r2
 80040a8:	44bc      	add	ip, r7
 80040aa:	4463      	add	r3, ip
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	431a      	orrs	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4ac8      	ldr	r2, [pc, #800]	; (80043f4 <UART_SetConfig+0x36c>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040de:	430a      	orrs	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4ac3      	ldr	r2, [pc, #780]	; (80043f8 <UART_SetConfig+0x370>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4abd      	ldr	r2, [pc, #756]	; (80043fc <UART_SetConfig+0x374>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004110:	4313      	orrs	r3, r2
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4ab9      	ldr	r2, [pc, #740]	; (8004400 <UART_SetConfig+0x378>)
 800411c:	4013      	ands	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4ab5      	ldr	r2, [pc, #724]	; (8004404 <UART_SetConfig+0x37c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d134      	bne.n	800419e <UART_SetConfig+0x116>
 8004134:	4bb4      	ldr	r3, [pc, #720]	; (8004408 <UART_SetConfig+0x380>)
 8004136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004138:	2203      	movs	r2, #3
 800413a:	4013      	ands	r3, r2
 800413c:	2b01      	cmp	r3, #1
 800413e:	d015      	beq.n	800416c <UART_SetConfig+0xe4>
 8004140:	d304      	bcc.n	800414c <UART_SetConfig+0xc4>
 8004142:	2b02      	cmp	r3, #2
 8004144:	d00a      	beq.n	800415c <UART_SetConfig+0xd4>
 8004146:	2b03      	cmp	r3, #3
 8004148:	d018      	beq.n	800417c <UART_SetConfig+0xf4>
 800414a:	e01f      	b.n	800418c <UART_SetConfig+0x104>
 800414c:	231b      	movs	r3, #27
 800414e:	2218      	movs	r2, #24
 8004150:	4694      	mov	ip, r2
 8004152:	44bc      	add	ip, r7
 8004154:	4463      	add	r3, ip
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e0ab      	b.n	80042b4 <UART_SetConfig+0x22c>
 800415c:	231b      	movs	r3, #27
 800415e:	2218      	movs	r2, #24
 8004160:	4694      	mov	ip, r2
 8004162:	44bc      	add	ip, r7
 8004164:	4463      	add	r3, ip
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e0a3      	b.n	80042b4 <UART_SetConfig+0x22c>
 800416c:	231b      	movs	r3, #27
 800416e:	2218      	movs	r2, #24
 8004170:	4694      	mov	ip, r2
 8004172:	44bc      	add	ip, r7
 8004174:	4463      	add	r3, ip
 8004176:	2204      	movs	r2, #4
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	e09b      	b.n	80042b4 <UART_SetConfig+0x22c>
 800417c:	231b      	movs	r3, #27
 800417e:	2218      	movs	r2, #24
 8004180:	4694      	mov	ip, r2
 8004182:	44bc      	add	ip, r7
 8004184:	4463      	add	r3, ip
 8004186:	2208      	movs	r2, #8
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	e093      	b.n	80042b4 <UART_SetConfig+0x22c>
 800418c:	231b      	movs	r3, #27
 800418e:	2218      	movs	r2, #24
 8004190:	4694      	mov	ip, r2
 8004192:	44bc      	add	ip, r7
 8004194:	4463      	add	r3, ip
 8004196:	2210      	movs	r2, #16
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	e08a      	b.n	80042b4 <UART_SetConfig+0x22c>
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a9a      	ldr	r2, [pc, #616]	; (800440c <UART_SetConfig+0x384>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d137      	bne.n	8004218 <UART_SetConfig+0x190>
 80041a8:	4b97      	ldr	r3, [pc, #604]	; (8004408 <UART_SetConfig+0x380>)
 80041aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ac:	220c      	movs	r2, #12
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d018      	beq.n	80041e6 <UART_SetConfig+0x15e>
 80041b4:	d802      	bhi.n	80041bc <UART_SetConfig+0x134>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <UART_SetConfig+0x13e>
 80041ba:	e024      	b.n	8004206 <UART_SetConfig+0x17e>
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d00a      	beq.n	80041d6 <UART_SetConfig+0x14e>
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d018      	beq.n	80041f6 <UART_SetConfig+0x16e>
 80041c4:	e01f      	b.n	8004206 <UART_SetConfig+0x17e>
 80041c6:	231b      	movs	r3, #27
 80041c8:	2218      	movs	r2, #24
 80041ca:	4694      	mov	ip, r2
 80041cc:	44bc      	add	ip, r7
 80041ce:	4463      	add	r3, ip
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e06e      	b.n	80042b4 <UART_SetConfig+0x22c>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2218      	movs	r2, #24
 80041da:	4694      	mov	ip, r2
 80041dc:	44bc      	add	ip, r7
 80041de:	4463      	add	r3, ip
 80041e0:	2202      	movs	r2, #2
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e066      	b.n	80042b4 <UART_SetConfig+0x22c>
 80041e6:	231b      	movs	r3, #27
 80041e8:	2218      	movs	r2, #24
 80041ea:	4694      	mov	ip, r2
 80041ec:	44bc      	add	ip, r7
 80041ee:	4463      	add	r3, ip
 80041f0:	2204      	movs	r2, #4
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e05e      	b.n	80042b4 <UART_SetConfig+0x22c>
 80041f6:	231b      	movs	r3, #27
 80041f8:	2218      	movs	r2, #24
 80041fa:	4694      	mov	ip, r2
 80041fc:	44bc      	add	ip, r7
 80041fe:	4463      	add	r3, ip
 8004200:	2208      	movs	r2, #8
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	e056      	b.n	80042b4 <UART_SetConfig+0x22c>
 8004206:	231b      	movs	r3, #27
 8004208:	2218      	movs	r2, #24
 800420a:	4694      	mov	ip, r2
 800420c:	44bc      	add	ip, r7
 800420e:	4463      	add	r3, ip
 8004210:	2210      	movs	r2, #16
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	e04d      	b.n	80042b4 <UART_SetConfig+0x22c>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a77      	ldr	r2, [pc, #476]	; (80043fc <UART_SetConfig+0x374>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d141      	bne.n	80042a6 <UART_SetConfig+0x21e>
 8004222:	4b79      	ldr	r3, [pc, #484]	; (8004408 <UART_SetConfig+0x380>)
 8004224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004226:	23c0      	movs	r3, #192	; 0xc0
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4013      	ands	r3, r2
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	00d2      	lsls	r2, r2, #3
 8004230:	4293      	cmp	r3, r2
 8004232:	d01f      	beq.n	8004274 <UART_SetConfig+0x1ec>
 8004234:	2280      	movs	r2, #128	; 0x80
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	4293      	cmp	r3, r2
 800423a:	d802      	bhi.n	8004242 <UART_SetConfig+0x1ba>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <UART_SetConfig+0x1cc>
 8004240:	e028      	b.n	8004294 <UART_SetConfig+0x20c>
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	4293      	cmp	r3, r2
 8004248:	d00c      	beq.n	8004264 <UART_SetConfig+0x1dc>
 800424a:	22c0      	movs	r2, #192	; 0xc0
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <UART_SetConfig+0x1fc>
 8004252:	e01f      	b.n	8004294 <UART_SetConfig+0x20c>
 8004254:	231b      	movs	r3, #27
 8004256:	2218      	movs	r2, #24
 8004258:	4694      	mov	ip, r2
 800425a:	44bc      	add	ip, r7
 800425c:	4463      	add	r3, ip
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e027      	b.n	80042b4 <UART_SetConfig+0x22c>
 8004264:	231b      	movs	r3, #27
 8004266:	2218      	movs	r2, #24
 8004268:	4694      	mov	ip, r2
 800426a:	44bc      	add	ip, r7
 800426c:	4463      	add	r3, ip
 800426e:	2202      	movs	r2, #2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e01f      	b.n	80042b4 <UART_SetConfig+0x22c>
 8004274:	231b      	movs	r3, #27
 8004276:	2218      	movs	r2, #24
 8004278:	4694      	mov	ip, r2
 800427a:	44bc      	add	ip, r7
 800427c:	4463      	add	r3, ip
 800427e:	2204      	movs	r2, #4
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e017      	b.n	80042b4 <UART_SetConfig+0x22c>
 8004284:	231b      	movs	r3, #27
 8004286:	2218      	movs	r2, #24
 8004288:	4694      	mov	ip, r2
 800428a:	44bc      	add	ip, r7
 800428c:	4463      	add	r3, ip
 800428e:	2208      	movs	r2, #8
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e00f      	b.n	80042b4 <UART_SetConfig+0x22c>
 8004294:	231b      	movs	r3, #27
 8004296:	2218      	movs	r2, #24
 8004298:	4694      	mov	ip, r2
 800429a:	44bc      	add	ip, r7
 800429c:	4463      	add	r3, ip
 800429e:	2210      	movs	r2, #16
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	e006      	b.n	80042b4 <UART_SetConfig+0x22c>
 80042a6:	231b      	movs	r3, #27
 80042a8:	2218      	movs	r2, #24
 80042aa:	4694      	mov	ip, r2
 80042ac:	44bc      	add	ip, r7
 80042ae:	4463      	add	r3, ip
 80042b0:	2210      	movs	r2, #16
 80042b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a50      	ldr	r2, [pc, #320]	; (80043fc <UART_SetConfig+0x374>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d000      	beq.n	80042c0 <UART_SetConfig+0x238>
 80042be:	e083      	b.n	80043c8 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c0:	231b      	movs	r3, #27
 80042c2:	2218      	movs	r2, #24
 80042c4:	4694      	mov	ip, r2
 80042c6:	44bc      	add	ip, r7
 80042c8:	4463      	add	r3, ip
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d00d      	beq.n	80042ec <UART_SetConfig+0x264>
 80042d0:	dc02      	bgt.n	80042d8 <UART_SetConfig+0x250>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <UART_SetConfig+0x25a>
 80042d6:	e01d      	b.n	8004314 <UART_SetConfig+0x28c>
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d012      	beq.n	8004302 <UART_SetConfig+0x27a>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d015      	beq.n	800430c <UART_SetConfig+0x284>
 80042e0:	e018      	b.n	8004314 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80042e2:	f7ff fbdd 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 80042e6:	0003      	movs	r3, r0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042ea:	e01b      	b.n	8004324 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <UART_SetConfig+0x380>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	4013      	ands	r3, r2
 80042f4:	d002      	beq.n	80042fc <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80042f6:	4b46      	ldr	r3, [pc, #280]	; (8004410 <UART_SetConfig+0x388>)
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80042fa:	e013      	b.n	8004324 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <UART_SetConfig+0x38c>)
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004300:	e010      	b.n	8004324 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004302:	f7ff fb3f 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8004306:	0003      	movs	r3, r0
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800430a:	e00b      	b.n	8004324 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004312:	e007      	b.n	8004324 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004314:	2313      	movs	r3, #19
 8004316:	2218      	movs	r2, #24
 8004318:	4694      	mov	ip, r2
 800431a:	44bc      	add	ip, r7
 800431c:	4463      	add	r3, ip
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
        break;
 8004322:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d100      	bne.n	800432c <UART_SetConfig+0x2a4>
 800432a:	e1a6      	b.n	800467a <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	0013      	movs	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	189b      	adds	r3, r3, r2
 8004336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004338:	429a      	cmp	r2, r3
 800433a:	d305      	bcc.n	8004348 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	429a      	cmp	r2, r3
 8004346:	d907      	bls.n	8004358 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8004348:	2313      	movs	r3, #19
 800434a:	2218      	movs	r2, #24
 800434c:	4694      	mov	ip, r2
 800434e:	44bc      	add	ip, r7
 8004350:	4463      	add	r3, ip
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e190      	b.n	800467a <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	6939      	ldr	r1, [r7, #16]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	000b      	movs	r3, r1
 8004366:	0e1b      	lsrs	r3, r3, #24
 8004368:	0010      	movs	r0, r2
 800436a:	0205      	lsls	r5, r0, #8
 800436c:	431d      	orrs	r5, r3
 800436e:	000b      	movs	r3, r1
 8004370:	021c      	lsls	r4, r3, #8
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	1900      	adds	r0, r0, r4
 8004384:	4169      	adcs	r1, r5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f7fb ff44 	bl	8000220 <__aeabi_uldivmod>
 8004398:	0003      	movs	r3, r0
 800439a:	000c      	movs	r4, r1
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <UART_SetConfig+0x390>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d908      	bls.n	80043b8 <UART_SetConfig+0x330>
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <UART_SetConfig+0x394>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d804      	bhi.n	80043b8 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e160      	b.n	800467a <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 80043b8:	2313      	movs	r3, #19
 80043ba:	2218      	movs	r2, #24
 80043bc:	4694      	mov	ip, r2
 80043be:	44bc      	add	ip, r7
 80043c0:	4463      	add	r3, ip
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e158      	b.n	800467a <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d000      	beq.n	80043d6 <UART_SetConfig+0x34e>
 80043d4:	e0c3      	b.n	800455e <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 80043d6:	231b      	movs	r3, #27
 80043d8:	2218      	movs	r2, #24
 80043da:	4694      	mov	ip, r2
 80043dc:	44bc      	add	ip, r7
 80043de:	4463      	add	r3, ip
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d900      	bls.n	80043e8 <UART_SetConfig+0x360>
 80043e6:	e086      	b.n	80044f6 <UART_SetConfig+0x46e>
 80043e8:	009a      	lsls	r2, r3, #2
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <UART_SetConfig+0x398>)
 80043ec:	18d3      	adds	r3, r2, r3
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	469f      	mov	pc, r3
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	efff69f3 	.word	0xefff69f3
 80043f8:	ffffcfff 	.word	0xffffcfff
 80043fc:	40004800 	.word	0x40004800
 8004400:	fffff4ff 	.word	0xfffff4ff
 8004404:	40013800 	.word	0x40013800
 8004408:	40021000 	.word	0x40021000
 800440c:	40004400 	.word	0x40004400
 8004410:	003d0900 	.word	0x003d0900
 8004414:	00f42400 	.word	0x00f42400
 8004418:	000002ff 	.word	0x000002ff
 800441c:	000fffff 	.word	0x000fffff
 8004420:	08008a80 	.word	0x08008a80
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004424:	f7ff fb3c 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8004428:	0003      	movs	r3, r0
 800442a:	005a      	lsls	r2, r3, #1
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	18d2      	adds	r2, r2, r3
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0019      	movs	r1, r3
 800443a:	0010      	movs	r0, r2
 800443c:	f7fb fe64 	bl	8000108 <__udivsi3>
 8004440:	0003      	movs	r3, r0
 8004442:	b29b      	uxth	r3, r3
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004446:	e05e      	b.n	8004506 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004448:	f7ff fb40 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 800444c:	0003      	movs	r3, r0
 800444e:	005a      	lsls	r2, r3, #1
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	18d2      	adds	r2, r2, r3
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0019      	movs	r1, r3
 800445e:	0010      	movs	r0, r2
 8004460:	f7fb fe52 	bl	8000108 <__udivsi3>
 8004464:	0003      	movs	r3, r0
 8004466:	b29b      	uxth	r3, r3
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800446a:	e04c      	b.n	8004506 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800446c:	4b8b      	ldr	r3, [pc, #556]	; (800469c <UART_SetConfig+0x614>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2210      	movs	r2, #16
 8004472:	4013      	ands	r3, r2
 8004474:	d00e      	beq.n	8004494 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	4a88      	ldr	r2, [pc, #544]	; (80046a0 <UART_SetConfig+0x618>)
 800447e:	189a      	adds	r2, r3, r2
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0019      	movs	r1, r3
 8004486:	0010      	movs	r0, r2
 8004488:	f7fb fe3e 	bl	8000108 <__udivsi3>
 800448c:	0003      	movs	r3, r0
 800448e:	b29b      	uxth	r3, r3
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004492:	e038      	b.n	8004506 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	4a82      	ldr	r2, [pc, #520]	; (80046a4 <UART_SetConfig+0x61c>)
 800449c:	189a      	adds	r2, r3, r2
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	0019      	movs	r1, r3
 80044a4:	0010      	movs	r0, r2
 80044a6:	f7fb fe2f 	bl	8000108 <__udivsi3>
 80044aa:	0003      	movs	r3, r0
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044b0:	e029      	b.n	8004506 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044b2:	f7ff fa67 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 80044b6:	0003      	movs	r3, r0
 80044b8:	005a      	lsls	r2, r3, #1
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	18d2      	adds	r2, r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	0019      	movs	r1, r3
 80044c8:	0010      	movs	r0, r2
 80044ca:	f7fb fe1d 	bl	8000108 <__udivsi3>
 80044ce:	0003      	movs	r3, r0
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044d4:	e017      	b.n	8004506 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	0252      	lsls	r2, r2, #9
 80044e0:	189a      	adds	r2, r3, r2
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0019      	movs	r1, r3
 80044e8:	0010      	movs	r0, r2
 80044ea:	f7fb fe0d 	bl	8000108 <__udivsi3>
 80044ee:	0003      	movs	r3, r0
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044f4:	e007      	b.n	8004506 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044f6:	2313      	movs	r3, #19
 80044f8:	2218      	movs	r2, #24
 80044fa:	4694      	mov	ip, r2
 80044fc:	44bc      	add	ip, r7
 80044fe:	4463      	add	r3, ip
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
        break;
 8004504:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d920      	bls.n	800454e <UART_SetConfig+0x4c6>
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	4a66      	ldr	r2, [pc, #408]	; (80046a8 <UART_SetConfig+0x620>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d81c      	bhi.n	800454e <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	b29a      	uxth	r2, r3
 8004518:	200a      	movs	r0, #10
 800451a:	2418      	movs	r4, #24
 800451c:	193b      	adds	r3, r7, r4
 800451e:	181b      	adds	r3, r3, r0
 8004520:	210f      	movs	r1, #15
 8004522:	438a      	bics	r2, r1
 8004524:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	2207      	movs	r2, #7
 800452e:	4013      	ands	r3, r2
 8004530:	b299      	uxth	r1, r3
 8004532:	193b      	adds	r3, r7, r4
 8004534:	181b      	adds	r3, r3, r0
 8004536:	193a      	adds	r2, r7, r4
 8004538:	1812      	adds	r2, r2, r0
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	193a      	adds	r2, r7, r4
 8004546:	1812      	adds	r2, r2, r0
 8004548:	8812      	ldrh	r2, [r2, #0]
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e095      	b.n	800467a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800454e:	2313      	movs	r3, #19
 8004550:	2218      	movs	r2, #24
 8004552:	4694      	mov	ip, r2
 8004554:	44bc      	add	ip, r7
 8004556:	4463      	add	r3, ip
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e08d      	b.n	800467a <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 800455e:	231b      	movs	r3, #27
 8004560:	2218      	movs	r2, #24
 8004562:	4694      	mov	ip, r2
 8004564:	44bc      	add	ip, r7
 8004566:	4463      	add	r3, ip
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b08      	cmp	r3, #8
 800456c:	d86a      	bhi.n	8004644 <UART_SetConfig+0x5bc>
 800456e:	009a      	lsls	r2, r3, #2
 8004570:	4b4e      	ldr	r3, [pc, #312]	; (80046ac <UART_SetConfig+0x624>)
 8004572:	18d3      	adds	r3, r2, r3
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004578:	f7ff fa92 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 800457c:	0002      	movs	r2, r0
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	18d2      	adds	r2, r2, r3
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0019      	movs	r1, r3
 800458c:	0010      	movs	r0, r2
 800458e:	f7fb fdbb 	bl	8000108 <__udivsi3>
 8004592:	0003      	movs	r3, r0
 8004594:	b29b      	uxth	r3, r3
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004598:	e05c      	b.n	8004654 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800459a:	f7ff fa97 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 800459e:	0002      	movs	r2, r0
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	18d2      	adds	r2, r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0019      	movs	r1, r3
 80045ae:	0010      	movs	r0, r2
 80045b0:	f7fb fdaa 	bl	8000108 <__udivsi3>
 80045b4:	0003      	movs	r3, r0
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ba:	e04b      	b.n	8004654 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045bc:	4b37      	ldr	r3, [pc, #220]	; (800469c <UART_SetConfig+0x614>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2210      	movs	r2, #16
 80045c2:	4013      	ands	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	4a38      	ldr	r2, [pc, #224]	; (80046b0 <UART_SetConfig+0x628>)
 80045ce:	189a      	adds	r2, r3, r2
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0019      	movs	r1, r3
 80045d6:	0010      	movs	r0, r2
 80045d8:	f7fb fd96 	bl	8000108 <__udivsi3>
 80045dc:	0003      	movs	r3, r0
 80045de:	b29b      	uxth	r3, r3
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80045e2:	e037      	b.n	8004654 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	4a32      	ldr	r2, [pc, #200]	; (80046b4 <UART_SetConfig+0x62c>)
 80045ec:	189a      	adds	r2, r3, r2
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f7fb fd87 	bl	8000108 <__udivsi3>
 80045fa:	0003      	movs	r3, r0
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004600:	e028      	b.n	8004654 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004602:	f7ff f9bf 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8004606:	0002      	movs	r2, r0
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	18d2      	adds	r2, r2, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	0019      	movs	r1, r3
 8004616:	0010      	movs	r0, r2
 8004618:	f7fb fd76 	bl	8000108 <__udivsi3>
 800461c:	0003      	movs	r3, r0
 800461e:	b29b      	uxth	r3, r3
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004622:	e017      	b.n	8004654 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	0212      	lsls	r2, r2, #8
 800462e:	189a      	adds	r2, r3, r2
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	0019      	movs	r1, r3
 8004636:	0010      	movs	r0, r2
 8004638:	f7fb fd66 	bl	8000108 <__udivsi3>
 800463c:	0003      	movs	r3, r0
 800463e:	b29b      	uxth	r3, r3
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004642:	e007      	b.n	8004654 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004644:	2313      	movs	r3, #19
 8004646:	2218      	movs	r2, #24
 8004648:	4694      	mov	ip, r2
 800464a:	44bc      	add	ip, r7
 800464c:	4463      	add	r3, ip
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
        break;
 8004652:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d908      	bls.n	800466c <UART_SetConfig+0x5e4>
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <UART_SetConfig+0x620>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d804      	bhi.n	800466c <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	e006      	b.n	800467a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800466c:	2313      	movs	r3, #19
 800466e:	2218      	movs	r2, #24
 8004670:	4694      	mov	ip, r2
 8004672:	44bc      	add	ip, r7
 8004674:	4463      	add	r3, ip
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2200      	movs	r2, #0
 800467e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2200      	movs	r2, #0
 8004684:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004686:	2313      	movs	r3, #19
 8004688:	2218      	movs	r2, #24
 800468a:	4694      	mov	ip, r2
 800468c:	44bc      	add	ip, r7
 800468e:	4463      	add	r3, ip
 8004690:	781b      	ldrb	r3, [r3, #0]
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b00e      	add	sp, #56	; 0x38
 8004698:	bdb0      	pop	{r4, r5, r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	40021000 	.word	0x40021000
 80046a0:	007a1200 	.word	0x007a1200
 80046a4:	01e84800 	.word	0x01e84800
 80046a8:	0000ffff 	.word	0x0000ffff
 80046ac:	08008aa4 	.word	0x08008aa4
 80046b0:	003d0900 	.word	0x003d0900
 80046b4:	00f42400 	.word	0x00f42400

080046b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <UART_AdvFeatureConfig+0x144>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2202      	movs	r2, #2
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00b      	beq.n	8004704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a43      	ldr	r2, [pc, #268]	; (8004800 <UART_AdvFeatureConfig+0x148>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2204      	movs	r2, #4
 800470a:	4013      	ands	r3, r2
 800470c:	d00b      	beq.n	8004726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <UART_AdvFeatureConfig+0x14c>)
 8004716:	4013      	ands	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2208      	movs	r2, #8
 800472c:	4013      	ands	r3, r2
 800472e:	d00b      	beq.n	8004748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4a34      	ldr	r2, [pc, #208]	; (8004808 <UART_AdvFeatureConfig+0x150>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2210      	movs	r2, #16
 800474e:	4013      	ands	r3, r2
 8004750:	d00b      	beq.n	800476a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a2c      	ldr	r2, [pc, #176]	; (800480c <UART_AdvFeatureConfig+0x154>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2220      	movs	r2, #32
 8004770:	4013      	ands	r3, r2
 8004772:	d00b      	beq.n	800478c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4a25      	ldr	r2, [pc, #148]	; (8004810 <UART_AdvFeatureConfig+0x158>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	4013      	ands	r3, r2
 8004794:	d01d      	beq.n	80047d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <UART_AdvFeatureConfig+0x15c>)
 800479e:	4013      	ands	r3, r2
 80047a0:	0019      	movs	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	035b      	lsls	r3, r3, #13
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d10b      	bne.n	80047d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <UART_AdvFeatureConfig+0x160>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	4013      	ands	r3, r2
 80047da:	d00b      	beq.n	80047f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4a0e      	ldr	r2, [pc, #56]	; (800481c <UART_AdvFeatureConfig+0x164>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	fffdffff 	.word	0xfffdffff
 8004800:	fffeffff 	.word	0xfffeffff
 8004804:	fffbffff 	.word	0xfffbffff
 8004808:	ffff7fff 	.word	0xffff7fff
 800480c:	ffffefff 	.word	0xffffefff
 8004810:	ffffdfff 	.word	0xffffdfff
 8004814:	ffefffff 	.word	0xffefffff
 8004818:	ff9fffff 	.word	0xff9fffff
 800481c:	fff7ffff 	.word	0xfff7ffff

08004820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af02      	add	r7, sp, #8
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800482e:	f7fc fb51 	bl	8000ed4 <HAL_GetTick>
 8004832:	0003      	movs	r3, r0
 8004834:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2208      	movs	r2, #8
 800483e:	4013      	ands	r3, r2
 8004840:	2b08      	cmp	r3, #8
 8004842:	d10d      	bne.n	8004860 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	0399      	lsls	r1, r3, #14
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <UART_CheckIdleState+0x88>)
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	0013      	movs	r3, r2
 8004852:	2200      	movs	r2, #0
 8004854:	f000 f82a 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e01f      	b.n	80048a0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2204      	movs	r2, #4
 8004868:	4013      	ands	r3, r2
 800486a:	2b04      	cmp	r3, #4
 800486c:	d10d      	bne.n	800488a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	03d9      	lsls	r1, r3, #15
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <UART_CheckIdleState+0x88>)
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	0013      	movs	r3, r2
 800487c:	2200      	movs	r2, #0
 800487e:	f000 f815 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 8004882:	1e03      	subs	r3, r0, #0
 8004884:	d001      	beq.n	800488a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e00a      	b.n	80048a0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2270      	movs	r2, #112	; 0x70
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b004      	add	sp, #16
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	01ffffff 	.word	0x01ffffff

080048ac <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	1dfb      	adds	r3, r7, #7
 80048ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048bc:	e029      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	3301      	adds	r3, #1
 80048c2:	d026      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c4:	f7fc fb06 	bl	8000ed4 <HAL_GetTick>
 80048c8:	0002      	movs	r2, r0
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <UART_WaitOnFlagUntilTimeout+0x2e>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11b      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4915      	ldr	r1, [pc, #84]	; (800493c <UART_WaitOnFlagUntilTimeout+0x90>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2101      	movs	r1, #1
 80048f6:	438a      	bics	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2270      	movs	r2, #112	; 0x70
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00f      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	425a      	negs	r2, r3
 8004922:	4153      	adcs	r3, r2
 8004924:	b2db      	uxtb	r3, r3
 8004926:	001a      	movs	r2, r3
 8004928:	1dfb      	adds	r3, r7, #7
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d0c6      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	fffffe5f 	.word	0xfffffe5f

08004940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2244      	movs	r2, #68	; 0x44
 800494c:	2100      	movs	r1, #0
 800494e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <USB_EnableGlobalInt+0x28>)
 8004952:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	b299      	uxth	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2240      	movs	r2, #64	; 0x40
 800495c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b004      	add	sp, #16
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0000bf80 	.word	0x0000bf80

0800496c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <USB_DisableGlobalInt+0x30>)
 8004976:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	5a9b      	ldrh	r3, [r3, r2]
 800497e:	b29b      	uxth	r3, r3
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	b292      	uxth	r2, r2
 8004984:	43d2      	mvns	r2, r2
 8004986:	b292      	uxth	r2, r2
 8004988:	4013      	ands	r3, r2
 800498a:	b299      	uxth	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b004      	add	sp, #16
 800499a:	bd80      	pop	{r7, pc}
 800499c:	0000bf80 	.word	0x0000bf80

080049a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049a0:	b084      	sub	sp, #16
 80049a2:	b590      	push	{r4, r7, lr}
 80049a4:	46c6      	mov	lr, r8
 80049a6:	b500      	push	{lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	2004      	movs	r0, #4
 80049b0:	2410      	movs	r4, #16
 80049b2:	46a4      	mov	ip, r4
 80049b4:	2408      	movs	r4, #8
 80049b6:	46a0      	mov	r8, r4
 80049b8:	44b8      	add	r8, r7
 80049ba:	44c4      	add	ip, r8
 80049bc:	4460      	add	r0, ip
 80049be:	6001      	str	r1, [r0, #0]
 80049c0:	6042      	str	r2, [r0, #4]
 80049c2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	2101      	movs	r1, #1
 80049ca:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2240      	movs	r2, #64	; 0x40
 80049d0:	2100      	movs	r1, #0
 80049d2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2244      	movs	r2, #68	; 0x44
 80049d8:	2100      	movs	r1, #0
 80049da:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2250      	movs	r2, #80	; 0x50
 80049e0:	2100      	movs	r1, #0
 80049e2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b002      	add	sp, #8
 80049ec:	bc04      	pop	{r2}
 80049ee:	4690      	mov	r8, r2
 80049f0:	bc90      	pop	{r4, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	b004      	add	sp, #16
 80049f6:	4718      	bx	r3

080049f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b09a      	sub	sp, #104	; 0x68
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a02:	2367      	movs	r3, #103	; 0x67
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	18d3      	adds	r3, r2, r3
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	2364      	movs	r3, #100	; 0x64
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	49cf      	ldr	r1, [pc, #828]	; (8004d5c <USB_ActivateEndpoint+0x364>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	78db      	ldrb	r3, [r3, #3]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d020      	beq.n	8004a6c <USB_ActivateEndpoint+0x74>
 8004a2a:	dc02      	bgt.n	8004a32 <USB_ActivateEndpoint+0x3a>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <USB_ActivateEndpoint+0x44>
 8004a30:	e025      	b.n	8004a7e <USB_ActivateEndpoint+0x86>
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d00b      	beq.n	8004a4e <USB_ActivateEndpoint+0x56>
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d00f      	beq.n	8004a5a <USB_ActivateEndpoint+0x62>
 8004a3a:	e020      	b.n	8004a7e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a3c:	2264      	movs	r2, #100	; 0x64
 8004a3e:	18bb      	adds	r3, r7, r2
 8004a40:	18ba      	adds	r2, r7, r2
 8004a42:	8812      	ldrh	r2, [r2, #0]
 8004a44:	2180      	movs	r1, #128	; 0x80
 8004a46:	0089      	lsls	r1, r1, #2
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	801a      	strh	r2, [r3, #0]
      break;
 8004a4c:	e01c      	b.n	8004a88 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004a4e:	2264      	movs	r2, #100	; 0x64
 8004a50:	18bb      	adds	r3, r7, r2
 8004a52:	18ba      	adds	r2, r7, r2
 8004a54:	8812      	ldrh	r2, [r2, #0]
 8004a56:	801a      	strh	r2, [r3, #0]
      break;
 8004a58:	e016      	b.n	8004a88 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a5a:	2264      	movs	r2, #100	; 0x64
 8004a5c:	18bb      	adds	r3, r7, r2
 8004a5e:	18ba      	adds	r2, r7, r2
 8004a60:	8812      	ldrh	r2, [r2, #0]
 8004a62:	21c0      	movs	r1, #192	; 0xc0
 8004a64:	00c9      	lsls	r1, r1, #3
 8004a66:	430a      	orrs	r2, r1
 8004a68:	801a      	strh	r2, [r3, #0]
      break;
 8004a6a:	e00d      	b.n	8004a88 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a6c:	2264      	movs	r2, #100	; 0x64
 8004a6e:	18bb      	adds	r3, r7, r2
 8004a70:	18ba      	adds	r2, r7, r2
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	00c9      	lsls	r1, r1, #3
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	801a      	strh	r2, [r3, #0]
      break;
 8004a7c:	e004      	b.n	8004a88 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004a7e:	2367      	movs	r3, #103	; 0x67
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	18d3      	adds	r3, r2, r3
 8004a92:	2264      	movs	r2, #100	; 0x64
 8004a94:	18ba      	adds	r2, r7, r2
 8004a96:	8812      	ldrh	r2, [r2, #0]
 8004a98:	49b1      	ldr	r1, [pc, #708]	; (8004d60 <USB_ActivateEndpoint+0x368>)
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	4aac      	ldr	r2, [pc, #688]	; (8004d64 <USB_ActivateEndpoint+0x36c>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	b21a      	sxth	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b21b      	sxth	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b21a      	sxth	r2, r3
 8004ac0:	215e      	movs	r1, #94	; 0x5e
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	18d3      	adds	r3, r2, r3
 8004ad0:	187a      	adds	r2, r7, r1
 8004ad2:	8812      	ldrh	r2, [r2, #0]
 8004ad4:	49a2      	ldr	r1, [pc, #648]	; (8004d60 <USB_ActivateEndpoint+0x368>)
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	7b1b      	ldrb	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d000      	beq.n	8004ae6 <USB_ActivateEndpoint+0xee>
 8004ae4:	e150      	b.n	8004d88 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d100      	bne.n	8004af0 <USB_ActivateEndpoint+0xf8>
 8004aee:	e07a      	b.n	8004be6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2250      	movs	r2, #80	; 0x50
 8004af8:	5a9b      	ldrh	r3, [r3, r2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	001a      	movs	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	00da      	lsls	r2, r3, #3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	18d3      	adds	r3, r2, r3
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	00d2      	lsls	r2, r2, #3
 8004b12:	4694      	mov	ip, r2
 8004b14:	4463      	add	r3, ip
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	88db      	ldrh	r3, [r3, #6]
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	18db      	adds	r3, r3, r3
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	18d2      	adds	r2, r2, r3
 8004b32:	210e      	movs	r1, #14
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	4013      	ands	r3, r2
 8004b42:	d016      	beq.n	8004b72 <USB_ActivateEndpoint+0x17a>
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	200c      	movs	r0, #12
 8004b54:	183b      	adds	r3, r7, r0
 8004b56:	4983      	ldr	r1, [pc, #524]	; (8004d64 <USB_ActivateEndpoint+0x36c>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	183a      	adds	r2, r7, r0
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	497f      	ldr	r1, [pc, #508]	; (8004d68 <USB_ActivateEndpoint+0x370>)
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	78db      	ldrb	r3, [r3, #3]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d01d      	beq.n	8004bb6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	18d3      	adds	r3, r2, r3
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	2008      	movs	r0, #8
 8004b8a:	183b      	adds	r3, r7, r0
 8004b8c:	4977      	ldr	r1, [pc, #476]	; (8004d6c <USB_ActivateEndpoint+0x374>)
 8004b8e:	400a      	ands	r2, r1
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	183b      	adds	r3, r7, r0
 8004b94:	183a      	adds	r2, r7, r0
 8004b96:	8812      	ldrh	r2, [r2, #0]
 8004b98:	2120      	movs	r1, #32
 8004b9a:	404a      	eors	r2, r1
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	18d3      	adds	r3, r2, r3
 8004ba8:	183a      	adds	r2, r7, r0
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	496c      	ldr	r1, [pc, #432]	; (8004d60 <USB_ActivateEndpoint+0x368>)
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	e25e      	b.n	8005074 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	18d3      	adds	r3, r2, r3
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	200a      	movs	r0, #10
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	4968      	ldr	r1, [pc, #416]	; (8004d6c <USB_ActivateEndpoint+0x374>)
 8004bca:	400a      	ands	r2, r1
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	183a      	adds	r2, r7, r0
 8004bda:	8812      	ldrh	r2, [r2, #0]
 8004bdc:	4960      	ldr	r1, [pc, #384]	; (8004d60 <USB_ActivateEndpoint+0x368>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	b292      	uxth	r2, r2
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	e246      	b.n	8005074 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2250      	movs	r2, #80	; 0x50
 8004bee:	5a9b      	ldrh	r3, [r3, r2]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	00da      	lsls	r2, r3, #3
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	18d3      	adds	r3, r2, r3
 8004c04:	4a5a      	ldr	r2, [pc, #360]	; (8004d70 <USB_ActivateEndpoint+0x378>)
 8004c06:	4694      	mov	ip, r2
 8004c08:	4463      	add	r3, ip
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	88db      	ldrh	r3, [r3, #6]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	18db      	adds	r3, r3, r3
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2250      	movs	r2, #80	; 0x50
 8004c24:	5a9b      	ldrh	r3, [r3, r2]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	001a      	movs	r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	00da      	lsls	r2, r3, #3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	18d3      	adds	r3, r2, r3
 8004c3a:	4a4e      	ldr	r2, [pc, #312]	; (8004d74 <USB_ActivateEndpoint+0x37c>)
 8004c3c:	4694      	mov	ip, r2
 8004c3e:	4463      	add	r3, ip
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d110      	bne.n	8004c6c <USB_ActivateEndpoint+0x274>
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4a49      	ldr	r2, [pc, #292]	; (8004d78 <USB_ActivateEndpoint+0x380>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4a46      	ldr	r2, [pc, #280]	; (8004d7c <USB_ActivateEndpoint+0x384>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	e02b      	b.n	8004cc4 <USB_ActivateEndpoint+0x2cc>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b3e      	cmp	r3, #62	; 0x3e
 8004c72:	d812      	bhi.n	8004c9a <USB_ActivateEndpoint+0x2a2>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2201      	movs	r2, #1
 8004c82:	4013      	ands	r3, r2
 8004c84:	d002      	beq.n	8004c8c <USB_ActivateEndpoint+0x294>
 8004c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c88:	3301      	adds	r3, #1
 8004c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	e014      	b.n	8004cc4 <USB_ActivateEndpoint+0x2cc>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d102      	bne.n	8004cb2 <USB_ActivateEndpoint+0x2ba>
 8004cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	4a30      	ldr	r2, [pc, #192]	; (8004d7c <USB_ActivateEndpoint+0x384>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	18d2      	adds	r2, r2, r3
 8004cce:	211e      	movs	r1, #30
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	8812      	ldrh	r2, [r2, #0]
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d016      	beq.n	8004d10 <USB_ActivateEndpoint+0x318>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	18d3      	adds	r3, r2, r3
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	201c      	movs	r0, #28
 8004cf2:	183b      	adds	r3, r7, r0
 8004cf4:	491b      	ldr	r1, [pc, #108]	; (8004d64 <USB_ActivateEndpoint+0x36c>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	18d3      	adds	r3, r2, r3
 8004d04:	183a      	adds	r2, r7, r0
 8004d06:	8812      	ldrh	r2, [r2, #0]
 8004d08:	491d      	ldr	r1, [pc, #116]	; (8004d80 <USB_ActivateEndpoint+0x388>)
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	201a      	movs	r0, #26
 8004d20:	183b      	adds	r3, r7, r0
 8004d22:	4918      	ldr	r1, [pc, #96]	; (8004d84 <USB_ActivateEndpoint+0x38c>)
 8004d24:	400a      	ands	r2, r1
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	183b      	adds	r3, r7, r0
 8004d2a:	183a      	adds	r2, r7, r0
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	0149      	lsls	r1, r1, #5
 8004d32:	404a      	eors	r2, r1
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	183a      	adds	r2, r7, r0
 8004d3a:	8812      	ldrh	r2, [r2, #0]
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	0189      	lsls	r1, r1, #6
 8004d40:	404a      	eors	r2, r1
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	18d3      	adds	r3, r2, r3
 8004d4e:	183a      	adds	r2, r7, r0
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	4903      	ldr	r1, [pc, #12]	; (8004d60 <USB_ActivateEndpoint+0x368>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	b292      	uxth	r2, r2
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	e18b      	b.n	8005074 <USB_ActivateEndpoint+0x67c>
 8004d5c:	ffff898f 	.word	0xffff898f
 8004d60:	ffff8080 	.word	0xffff8080
 8004d64:	ffff8f8f 	.word	0xffff8f8f
 8004d68:	ffff80c0 	.word	0xffff80c0
 8004d6c:	ffff8fbf 	.word	0xffff8fbf
 8004d70:	00000404 	.word	0x00000404
 8004d74:	00000406 	.word	0x00000406
 8004d78:	ffff83ff 	.word	0xffff83ff
 8004d7c:	ffff8000 	.word	0xffff8000
 8004d80:	ffffc080 	.word	0xffffc080
 8004d84:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	18d3      	adds	r3, r2, r3
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	205c      	movs	r0, #92	; 0x5c
 8004d98:	183b      	adds	r3, r7, r0
 8004d9a:	49ba      	ldr	r1, [pc, #744]	; (8005084 <USB_ActivateEndpoint+0x68c>)
 8004d9c:	400a      	ands	r2, r1
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	183a      	adds	r2, r7, r0
 8004dac:	8812      	ldrh	r2, [r2, #0]
 8004dae:	49b6      	ldr	r1, [pc, #728]	; (8005088 <USB_ActivateEndpoint+0x690>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	b292      	uxth	r2, r2
 8004db4:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2250      	movs	r2, #80	; 0x50
 8004dbe:	5a9b      	ldrh	r3, [r3, r2]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	00da      	lsls	r2, r3, #3
 8004dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd2:	18d3      	adds	r3, r2, r3
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	4694      	mov	ip, r2
 8004dda:	4463      	add	r3, ip
 8004ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	891b      	ldrh	r3, [r3, #8]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	653b      	str	r3, [r7, #80]	; 0x50
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2250      	movs	r2, #80	; 0x50
 8004df6:	5a9b      	ldrh	r3, [r3, r2]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfe:	189b      	adds	r3, r3, r2
 8004e00:	653b      	str	r3, [r7, #80]	; 0x50
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	00da      	lsls	r2, r3, #3
 8004e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0a:	18d3      	adds	r3, r2, r3
 8004e0c:	4a9f      	ldr	r2, [pc, #636]	; (800508c <USB_ActivateEndpoint+0x694>)
 8004e0e:	4694      	mov	ip, r2
 8004e10:	4463      	add	r3, ip
 8004e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	895b      	ldrh	r3, [r3, #10]
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	18db      	adds	r3, r3, r3
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d000      	beq.n	8004e2e <USB_ActivateEndpoint+0x436>
 8004e2c:	e087      	b.n	8004f3e <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	18d2      	adds	r2, r2, r3
 8004e38:	213c      	movs	r1, #60	; 0x3c
 8004e3a:	187b      	adds	r3, r7, r1
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	01db      	lsls	r3, r3, #7
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d016      	beq.n	8004e7a <USB_ActivateEndpoint+0x482>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	18d3      	adds	r3, r2, r3
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	203a      	movs	r0, #58	; 0x3a
 8004e5c:	183b      	adds	r3, r7, r0
 8004e5e:	4989      	ldr	r1, [pc, #548]	; (8005084 <USB_ActivateEndpoint+0x68c>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	18d3      	adds	r3, r2, r3
 8004e6e:	183a      	adds	r2, r7, r0
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	4987      	ldr	r1, [pc, #540]	; (8005090 <USB_ActivateEndpoint+0x698>)
 8004e74:	430a      	orrs	r2, r1
 8004e76:	b292      	uxth	r2, r2
 8004e78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	18d2      	adds	r2, r2, r3
 8004e84:	2138      	movs	r1, #56	; 0x38
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	8812      	ldrh	r2, [r2, #0]
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	4013      	ands	r3, r2
 8004e94:	d016      	beq.n	8004ec4 <USB_ActivateEndpoint+0x4cc>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	18d3      	adds	r3, r2, r3
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	2036      	movs	r0, #54	; 0x36
 8004ea6:	183b      	adds	r3, r7, r0
 8004ea8:	4976      	ldr	r1, [pc, #472]	; (8005084 <USB_ActivateEndpoint+0x68c>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	18d3      	adds	r3, r2, r3
 8004eb8:	183a      	adds	r2, r7, r0
 8004eba:	8812      	ldrh	r2, [r2, #0]
 8004ebc:	4975      	ldr	r1, [pc, #468]	; (8005094 <USB_ActivateEndpoint+0x69c>)
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	18d3      	adds	r3, r2, r3
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	2034      	movs	r0, #52	; 0x34
 8004ed4:	183b      	adds	r3, r7, r0
 8004ed6:	4970      	ldr	r1, [pc, #448]	; (8005098 <USB_ActivateEndpoint+0x6a0>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	183b      	adds	r3, r7, r0
 8004ede:	183a      	adds	r2, r7, r0
 8004ee0:	8812      	ldrh	r2, [r2, #0]
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	0149      	lsls	r1, r1, #5
 8004ee6:	404a      	eors	r2, r1
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	183a      	adds	r2, r7, r0
 8004eee:	8812      	ldrh	r2, [r2, #0]
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	0189      	lsls	r1, r1, #6
 8004ef4:	404a      	eors	r2, r1
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	18d3      	adds	r3, r2, r3
 8004f02:	183a      	adds	r2, r7, r0
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	4965      	ldr	r1, [pc, #404]	; (800509c <USB_ActivateEndpoint+0x6a4>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	18d3      	adds	r3, r2, r3
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	2032      	movs	r0, #50	; 0x32
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	495f      	ldr	r1, [pc, #380]	; (80050a0 <USB_ActivateEndpoint+0x6a8>)
 8004f22:	400a      	ands	r2, r1
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	18d3      	adds	r3, r2, r3
 8004f30:	183a      	adds	r2, r7, r0
 8004f32:	8812      	ldrh	r2, [r2, #0]
 8004f34:	4959      	ldr	r1, [pc, #356]	; (800509c <USB_ActivateEndpoint+0x6a4>)
 8004f36:	430a      	orrs	r2, r1
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	e09a      	b.n	8005074 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	18d2      	adds	r2, r2, r3
 8004f48:	214a      	movs	r1, #74	; 0x4a
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	01db      	lsls	r3, r3, #7
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d016      	beq.n	8004f8a <USB_ActivateEndpoint+0x592>
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	2048      	movs	r0, #72	; 0x48
 8004f6c:	183b      	adds	r3, r7, r0
 8004f6e:	4945      	ldr	r1, [pc, #276]	; (8005084 <USB_ActivateEndpoint+0x68c>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	183a      	adds	r2, r7, r0
 8004f80:	8812      	ldrh	r2, [r2, #0]
 8004f82:	4943      	ldr	r1, [pc, #268]	; (8005090 <USB_ActivateEndpoint+0x698>)
 8004f84:	430a      	orrs	r2, r1
 8004f86:	b292      	uxth	r2, r2
 8004f88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	18d2      	adds	r2, r2, r3
 8004f94:	2146      	movs	r1, #70	; 0x46
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	8812      	ldrh	r2, [r2, #0]
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	2240      	movs	r2, #64	; 0x40
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d016      	beq.n	8004fd4 <USB_ActivateEndpoint+0x5dc>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	2044      	movs	r0, #68	; 0x44
 8004fb6:	183b      	adds	r3, r7, r0
 8004fb8:	4932      	ldr	r1, [pc, #200]	; (8005084 <USB_ActivateEndpoint+0x68c>)
 8004fba:	400a      	ands	r2, r1
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	183a      	adds	r2, r7, r0
 8004fca:	8812      	ldrh	r2, [r2, #0]
 8004fcc:	4931      	ldr	r1, [pc, #196]	; (8005094 <USB_ActivateEndpoint+0x69c>)
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	78db      	ldrb	r3, [r3, #3]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d01d      	beq.n	8005018 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	2040      	movs	r0, #64	; 0x40
 8004fec:	183b      	adds	r3, r7, r0
 8004fee:	492c      	ldr	r1, [pc, #176]	; (80050a0 <USB_ActivateEndpoint+0x6a8>)
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	183b      	adds	r3, r7, r0
 8004ff6:	183a      	adds	r2, r7, r0
 8004ff8:	8812      	ldrh	r2, [r2, #0]
 8004ffa:	2120      	movs	r1, #32
 8004ffc:	404a      	eors	r2, r1
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	18d3      	adds	r3, r2, r3
 800500a:	183a      	adds	r2, r7, r0
 800500c:	8812      	ldrh	r2, [r2, #0]
 800500e:	4923      	ldr	r1, [pc, #140]	; (800509c <USB_ActivateEndpoint+0x6a4>)
 8005010:	430a      	orrs	r2, r1
 8005012:	b292      	uxth	r2, r2
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	e016      	b.n	8005046 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	18d3      	adds	r3, r2, r3
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29a      	uxth	r2, r3
 8005026:	2042      	movs	r0, #66	; 0x42
 8005028:	183b      	adds	r3, r7, r0
 800502a:	491d      	ldr	r1, [pc, #116]	; (80050a0 <USB_ActivateEndpoint+0x6a8>)
 800502c:	400a      	ands	r2, r1
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	18d3      	adds	r3, r2, r3
 800503a:	183a      	adds	r2, r7, r0
 800503c:	8812      	ldrh	r2, [r2, #0]
 800503e:	4917      	ldr	r1, [pc, #92]	; (800509c <USB_ActivateEndpoint+0x6a4>)
 8005040:	430a      	orrs	r2, r1
 8005042:	b292      	uxth	r2, r2
 8005044:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	18d3      	adds	r3, r2, r3
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29a      	uxth	r2, r3
 8005054:	203e      	movs	r0, #62	; 0x3e
 8005056:	183b      	adds	r3, r7, r0
 8005058:	490f      	ldr	r1, [pc, #60]	; (8005098 <USB_ActivateEndpoint+0x6a0>)
 800505a:	400a      	ands	r2, r1
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	18d3      	adds	r3, r2, r3
 8005068:	183a      	adds	r2, r7, r0
 800506a:	8812      	ldrh	r2, [r2, #0]
 800506c:	490b      	ldr	r1, [pc, #44]	; (800509c <USB_ActivateEndpoint+0x6a4>)
 800506e:	430a      	orrs	r2, r1
 8005070:	b292      	uxth	r2, r2
 8005072:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005074:	2367      	movs	r3, #103	; 0x67
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	781b      	ldrb	r3, [r3, #0]
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b01a      	add	sp, #104	; 0x68
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	ffff8f8f 	.word	0xffff8f8f
 8005088:	ffff8180 	.word	0xffff8180
 800508c:	00000404 	.word	0x00000404
 8005090:	ffffc080 	.word	0xffffc080
 8005094:	ffff80c0 	.word	0xffff80c0
 8005098:	ffffbf8f 	.word	0xffffbf8f
 800509c:	ffff8080 	.word	0xffff8080
 80050a0:	ffff8fbf 	.word	0xffff8fbf

080050a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	7b1b      	ldrb	r3, [r3, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d000      	beq.n	80050b8 <USB_DeactivateEndpoint+0x14>
 80050b6:	e07e      	b.n	80051b6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03c      	beq.n	800513a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	18d2      	adds	r2, r2, r3
 80050ca:	210c      	movs	r1, #12
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	8812      	ldrh	r2, [r2, #0]
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	2240      	movs	r2, #64	; 0x40
 80050d8:	4013      	ands	r3, r2
 80050da:	d016      	beq.n	800510a <USB_DeactivateEndpoint+0x66>
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	200a      	movs	r0, #10
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	49c7      	ldr	r1, [pc, #796]	; (800540c <USB_DeactivateEndpoint+0x368>)
 80050f0:	400a      	ands	r2, r1
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	18d3      	adds	r3, r2, r3
 80050fe:	183a      	adds	r2, r7, r0
 8005100:	8812      	ldrh	r2, [r2, #0]
 8005102:	49c3      	ldr	r1, [pc, #780]	; (8005410 <USB_DeactivateEndpoint+0x36c>)
 8005104:	430a      	orrs	r2, r1
 8005106:	b292      	uxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	18d3      	adds	r3, r2, r3
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29a      	uxth	r2, r3
 8005118:	2008      	movs	r0, #8
 800511a:	183b      	adds	r3, r7, r0
 800511c:	49bd      	ldr	r1, [pc, #756]	; (8005414 <USB_DeactivateEndpoint+0x370>)
 800511e:	400a      	ands	r2, r1
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	183a      	adds	r2, r7, r0
 800512e:	8812      	ldrh	r2, [r2, #0]
 8005130:	49b9      	ldr	r1, [pc, #740]	; (8005418 <USB_DeactivateEndpoint+0x374>)
 8005132:	430a      	orrs	r2, r1
 8005134:	b292      	uxth	r2, r2
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e163      	b.n	8005402 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	18d2      	adds	r2, r2, r3
 8005144:	2112      	movs	r1, #18
 8005146:	187b      	adds	r3, r7, r1
 8005148:	8812      	ldrh	r2, [r2, #0]
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	187b      	adds	r3, r7, r1
 800514e:	881a      	ldrh	r2, [r3, #0]
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	01db      	lsls	r3, r3, #7
 8005154:	4013      	ands	r3, r2
 8005156:	d016      	beq.n	8005186 <USB_DeactivateEndpoint+0xe2>
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	18d3      	adds	r3, r2, r3
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29a      	uxth	r2, r3
 8005166:	2010      	movs	r0, #16
 8005168:	183b      	adds	r3, r7, r0
 800516a:	49a8      	ldr	r1, [pc, #672]	; (800540c <USB_DeactivateEndpoint+0x368>)
 800516c:	400a      	ands	r2, r1
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	183a      	adds	r2, r7, r0
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	49a7      	ldr	r1, [pc, #668]	; (800541c <USB_DeactivateEndpoint+0x378>)
 8005180:	430a      	orrs	r2, r1
 8005182:	b292      	uxth	r2, r2
 8005184:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29a      	uxth	r2, r3
 8005194:	200e      	movs	r0, #14
 8005196:	183b      	adds	r3, r7, r0
 8005198:	49a1      	ldr	r1, [pc, #644]	; (8005420 <USB_DeactivateEndpoint+0x37c>)
 800519a:	400a      	ands	r2, r1
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	18d3      	adds	r3, r2, r3
 80051a8:	183a      	adds	r2, r7, r0
 80051aa:	8812      	ldrh	r2, [r2, #0]
 80051ac:	499a      	ldr	r1, [pc, #616]	; (8005418 <USB_DeactivateEndpoint+0x374>)
 80051ae:	430a      	orrs	r2, r1
 80051b0:	b292      	uxth	r2, r2
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e125      	b.n	8005402 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d000      	beq.n	80051c0 <USB_DeactivateEndpoint+0x11c>
 80051be:	e090      	b.n	80052e2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	18d2      	adds	r2, r2, r3
 80051ca:	2120      	movs	r1, #32
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	4013      	ands	r3, r2
 80051dc:	d016      	beq.n	800520c <USB_DeactivateEndpoint+0x168>
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	18d3      	adds	r3, r2, r3
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	201e      	movs	r0, #30
 80051ee:	183b      	adds	r3, r7, r0
 80051f0:	4986      	ldr	r1, [pc, #536]	; (800540c <USB_DeactivateEndpoint+0x368>)
 80051f2:	400a      	ands	r2, r1
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	183a      	adds	r2, r7, r0
 8005202:	8812      	ldrh	r2, [r2, #0]
 8005204:	4985      	ldr	r1, [pc, #532]	; (800541c <USB_DeactivateEndpoint+0x378>)
 8005206:	430a      	orrs	r2, r1
 8005208:	b292      	uxth	r2, r2
 800520a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	18d2      	adds	r2, r2, r3
 8005216:	211c      	movs	r1, #28
 8005218:	187b      	adds	r3, r7, r1
 800521a:	8812      	ldrh	r2, [r2, #0]
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	187b      	adds	r3, r7, r1
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	4013      	ands	r3, r2
 8005226:	d016      	beq.n	8005256 <USB_DeactivateEndpoint+0x1b2>
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	201a      	movs	r0, #26
 8005238:	183b      	adds	r3, r7, r0
 800523a:	4974      	ldr	r1, [pc, #464]	; (800540c <USB_DeactivateEndpoint+0x368>)
 800523c:	400a      	ands	r2, r1
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	18d3      	adds	r3, r2, r3
 800524a:	183a      	adds	r2, r7, r0
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	4970      	ldr	r1, [pc, #448]	; (8005410 <USB_DeactivateEndpoint+0x36c>)
 8005250:	430a      	orrs	r2, r1
 8005252:	b292      	uxth	r2, r2
 8005254:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	18d3      	adds	r3, r2, r3
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29a      	uxth	r2, r3
 8005264:	2018      	movs	r0, #24
 8005266:	183b      	adds	r3, r7, r0
 8005268:	4968      	ldr	r1, [pc, #416]	; (800540c <USB_DeactivateEndpoint+0x368>)
 800526a:	400a      	ands	r2, r1
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	183a      	adds	r2, r7, r0
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	4964      	ldr	r1, [pc, #400]	; (8005410 <USB_DeactivateEndpoint+0x36c>)
 800527e:	430a      	orrs	r2, r1
 8005280:	b292      	uxth	r2, r2
 8005282:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	2016      	movs	r0, #22
 8005294:	183b      	adds	r3, r7, r0
 8005296:	4962      	ldr	r1, [pc, #392]	; (8005420 <USB_DeactivateEndpoint+0x37c>)
 8005298:	400a      	ands	r2, r1
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	183a      	adds	r2, r7, r0
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	495b      	ldr	r1, [pc, #364]	; (8005418 <USB_DeactivateEndpoint+0x374>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	b292      	uxth	r2, r2
 80052b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29a      	uxth	r2, r3
 80052c0:	2014      	movs	r0, #20
 80052c2:	183b      	adds	r3, r7, r0
 80052c4:	4953      	ldr	r1, [pc, #332]	; (8005414 <USB_DeactivateEndpoint+0x370>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	183a      	adds	r2, r7, r0
 80052d6:	8812      	ldrh	r2, [r2, #0]
 80052d8:	494f      	ldr	r1, [pc, #316]	; (8005418 <USB_DeactivateEndpoint+0x374>)
 80052da:	430a      	orrs	r2, r1
 80052dc:	b292      	uxth	r2, r2
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	e08f      	b.n	8005402 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	18d2      	adds	r2, r2, r3
 80052ec:	212e      	movs	r1, #46	; 0x2e
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	8812      	ldrh	r2, [r2, #0]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	4013      	ands	r3, r2
 80052fe:	d016      	beq.n	800532e <USB_DeactivateEndpoint+0x28a>
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	18d3      	adds	r3, r2, r3
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29a      	uxth	r2, r3
 800530e:	202c      	movs	r0, #44	; 0x2c
 8005310:	183b      	adds	r3, r7, r0
 8005312:	493e      	ldr	r1, [pc, #248]	; (800540c <USB_DeactivateEndpoint+0x368>)
 8005314:	400a      	ands	r2, r1
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	183a      	adds	r2, r7, r0
 8005324:	8812      	ldrh	r2, [r2, #0]
 8005326:	493d      	ldr	r1, [pc, #244]	; (800541c <USB_DeactivateEndpoint+0x378>)
 8005328:	430a      	orrs	r2, r1
 800532a:	b292      	uxth	r2, r2
 800532c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	18d2      	adds	r2, r2, r3
 8005338:	212a      	movs	r1, #42	; 0x2a
 800533a:	187b      	adds	r3, r7, r1
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	187b      	adds	r3, r7, r1
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	4013      	ands	r3, r2
 8005348:	d016      	beq.n	8005378 <USB_DeactivateEndpoint+0x2d4>
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	2028      	movs	r0, #40	; 0x28
 800535a:	183b      	adds	r3, r7, r0
 800535c:	492b      	ldr	r1, [pc, #172]	; (800540c <USB_DeactivateEndpoint+0x368>)
 800535e:	400a      	ands	r2, r1
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	183a      	adds	r2, r7, r0
 800536e:	8812      	ldrh	r2, [r2, #0]
 8005370:	4927      	ldr	r1, [pc, #156]	; (8005410 <USB_DeactivateEndpoint+0x36c>)
 8005372:	430a      	orrs	r2, r1
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	2026      	movs	r0, #38	; 0x26
 8005388:	183b      	adds	r3, r7, r0
 800538a:	4920      	ldr	r1, [pc, #128]	; (800540c <USB_DeactivateEndpoint+0x368>)
 800538c:	400a      	ands	r2, r1
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	183a      	adds	r2, r7, r0
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	491f      	ldr	r1, [pc, #124]	; (800541c <USB_DeactivateEndpoint+0x378>)
 80053a0:	430a      	orrs	r2, r1
 80053a2:	b292      	uxth	r2, r2
 80053a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	18d3      	adds	r3, r2, r3
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	2024      	movs	r0, #36	; 0x24
 80053b6:	183b      	adds	r3, r7, r0
 80053b8:	4916      	ldr	r1, [pc, #88]	; (8005414 <USB_DeactivateEndpoint+0x370>)
 80053ba:	400a      	ands	r2, r1
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	18d3      	adds	r3, r2, r3
 80053c8:	183a      	adds	r2, r7, r0
 80053ca:	8812      	ldrh	r2, [r2, #0]
 80053cc:	4912      	ldr	r1, [pc, #72]	; (8005418 <USB_DeactivateEndpoint+0x374>)
 80053ce:	430a      	orrs	r2, r1
 80053d0:	b292      	uxth	r2, r2
 80053d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	2022      	movs	r0, #34	; 0x22
 80053e4:	183b      	adds	r3, r7, r0
 80053e6:	490e      	ldr	r1, [pc, #56]	; (8005420 <USB_DeactivateEndpoint+0x37c>)
 80053e8:	400a      	ands	r2, r1
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	183a      	adds	r2, r7, r0
 80053f8:	8812      	ldrh	r2, [r2, #0]
 80053fa:	4907      	ldr	r1, [pc, #28]	; (8005418 <USB_DeactivateEndpoint+0x374>)
 80053fc:	430a      	orrs	r2, r1
 80053fe:	b292      	uxth	r2, r2
 8005400:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	0018      	movs	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	b00c      	add	sp, #48	; 0x30
 800540a:	bd80      	pop	{r7, pc}
 800540c:	ffff8f8f 	.word	0xffff8f8f
 8005410:	ffff80c0 	.word	0xffff80c0
 8005414:	ffff8fbf 	.word	0xffff8fbf
 8005418:	ffff8080 	.word	0xffff8080
 800541c:	ffffc080 	.word	0xffffc080
 8005420:	ffffbf8f 	.word	0xffffbf8f

08005424 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005424:	b5b0      	push	{r4, r5, r7, lr}
 8005426:	b0c4      	sub	sp, #272	; 0x110
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <USB_EPStartXfer+0x16>
 8005436:	f000 fd63 	bl	8005f00 <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d906      	bls.n	8005454 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2286      	movs	r2, #134	; 0x86
 800544c:	0052      	lsls	r2, r2, #1
 800544e:	18ba      	adds	r2, r7, r2
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e005      	b.n	8005460 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2286      	movs	r2, #134	; 0x86
 800545a:	0052      	lsls	r2, r2, #1
 800545c:	18ba      	adds	r2, r7, r2
 800545e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	7b1b      	ldrb	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d125      	bne.n	80054b4 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6959      	ldr	r1, [r3, #20]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	88da      	ldrh	r2, [r3, #6]
 8005470:	2486      	movs	r4, #134	; 0x86
 8005472:	0064      	lsls	r4, r4, #1
 8005474:	193b      	adds	r3, r7, r4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 fa62 	bl	8006944 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2250      	movs	r2, #80	; 0x50
 8005488:	5a9b      	ldrh	r3, [r3, r2]
 800548a:	b29b      	uxth	r3, r3
 800548c:	001a      	movs	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	189b      	adds	r3, r3, r2
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00da      	lsls	r2, r3, #3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	18d3      	adds	r3, r2, r3
 800549e:	4ad4      	ldr	r2, [pc, #848]	; (80057f0 <USB_EPStartXfer+0x3cc>)
 80054a0:	4694      	mov	ip, r2
 80054a2:	4463      	add	r3, ip
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	193b      	adds	r3, r7, r4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	f000 fce4 	bl	8005e7c <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	78db      	ldrb	r3, [r3, #3]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d000      	beq.n	80054be <USB_EPStartXfer+0x9a>
 80054bc:	e358      	b.n	8005b70 <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d800      	bhi.n	80054cc <USB_EPStartXfer+0xa8>
 80054ca:	e2fe      	b.n	8005aca <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	18d3      	adds	r3, r2, r3
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	205a      	movs	r0, #90	; 0x5a
 80054dc:	183b      	adds	r3, r7, r0
 80054de:	49c5      	ldr	r1, [pc, #788]	; (80057f4 <USB_EPStartXfer+0x3d0>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	183a      	adds	r2, r7, r0
 80054f0:	8812      	ldrh	r2, [r2, #0]
 80054f2:	49c1      	ldr	r1, [pc, #772]	; (80057f8 <USB_EPStartXfer+0x3d4>)
 80054f4:	430a      	orrs	r2, r1
 80054f6:	b292      	uxth	r2, r2
 80054f8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	2386      	movs	r3, #134	; 0x86
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	001a      	movs	r2, r3
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	4013      	ands	r3, r2
 8005520:	d100      	bne.n	8005524 <USB_EPStartXfer+0x100>
 8005522:	e171      	b.n	8005808 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d16c      	bne.n	800560a <USB_EPStartXfer+0x1e6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2250      	movs	r2, #80	; 0x50
 8005538:	5a9b      	ldrh	r3, [r3, r2]
 800553a:	b29b      	uxth	r3, r3
 800553c:	001a      	movs	r2, r3
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	189b      	adds	r3, r3, r2
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	00da      	lsls	r2, r3, #3
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	18d3      	adds	r3, r2, r3
 800554e:	4aab      	ldr	r2, [pc, #684]	; (80057fc <USB_EPStartXfer+0x3d8>)
 8005550:	4694      	mov	ip, r2
 8005552:	4463      	add	r3, ip
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
 8005556:	2386      	movs	r3, #134	; 0x86
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d110      	bne.n	8005584 <USB_EPStartXfer+0x160>
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	4aa5      	ldr	r2, [pc, #660]	; (8005800 <USB_EPStartXfer+0x3dc>)
 800556a:	4013      	ands	r3, r2
 800556c:	b29a      	uxth	r2, r3
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	4aa2      	ldr	r2, [pc, #648]	; (8005804 <USB_EPStartXfer+0x3e0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	b29a      	uxth	r2, r3
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	e05e      	b.n	8005642 <USB_EPStartXfer+0x21e>
 8005584:	2386      	movs	r3, #134	; 0x86
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b3e      	cmp	r3, #62	; 0x3e
 800558e:	d81c      	bhi.n	80055ca <USB_EPStartXfer+0x1a6>
 8005590:	2286      	movs	r2, #134	; 0x86
 8005592:	0052      	lsls	r2, r2, #1
 8005594:	18bb      	adds	r3, r7, r2
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	1d79      	adds	r1, r7, #5
 800559c:	31ff      	adds	r1, #255	; 0xff
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	18bb      	adds	r3, r7, r2
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	4013      	ands	r3, r2
 80055a8:	d006      	beq.n	80055b8 <USB_EPStartXfer+0x194>
 80055aa:	1d7b      	adds	r3, r7, #5
 80055ac:	33ff      	adds	r3, #255	; 0xff
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	1d7a      	adds	r2, r7, #5
 80055b4:	32ff      	adds	r2, #255	; 0xff
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	1d7b      	adds	r3, r7, #5
 80055ba:	33ff      	adds	r3, #255	; 0xff
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	e03b      	b.n	8005642 <USB_EPStartXfer+0x21e>
 80055ca:	2286      	movs	r2, #134	; 0x86
 80055cc:	0052      	lsls	r2, r2, #1
 80055ce:	18bb      	adds	r3, r7, r2
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	1d79      	adds	r1, r7, #5
 80055d6:	31ff      	adds	r1, #255	; 0xff
 80055d8:	600b      	str	r3, [r1, #0]
 80055da:	18bb      	adds	r3, r7, r2
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	221f      	movs	r2, #31
 80055e0:	4013      	ands	r3, r2
 80055e2:	d106      	bne.n	80055f2 <USB_EPStartXfer+0x1ce>
 80055e4:	1d7b      	adds	r3, r7, #5
 80055e6:	33ff      	adds	r3, #255	; 0xff
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	1d7a      	adds	r2, r7, #5
 80055ee:	32ff      	adds	r2, #255	; 0xff
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	1d7b      	adds	r3, r7, #5
 80055f4:	33ff      	adds	r3, #255	; 0xff
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	029b      	lsls	r3, r3, #10
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	4a81      	ldr	r2, [pc, #516]	; (8005804 <USB_EPStartXfer+0x3e0>)
 8005600:	4313      	orrs	r3, r2
 8005602:	b29a      	uxth	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	e01b      	b.n	8005642 <USB_EPStartXfer+0x21e>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d117      	bne.n	8005642 <USB_EPStartXfer+0x21e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2250      	movs	r2, #80	; 0x50
 8005616:	5a9b      	ldrh	r3, [r3, r2]
 8005618:	b29b      	uxth	r3, r3
 800561a:	001a      	movs	r2, r3
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	189b      	adds	r3, r3, r2
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	00da      	lsls	r2, r3, #3
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	18d3      	adds	r3, r2, r3
 800562c:	4a73      	ldr	r2, [pc, #460]	; (80057fc <USB_EPStartXfer+0x3d8>)
 800562e:	4694      	mov	ip, r2
 8005630:	4463      	add	r3, ip
 8005632:	633b      	str	r3, [r7, #48]	; 0x30
 8005634:	2386      	movs	r3, #134	; 0x86
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005642:	2085      	movs	r0, #133	; 0x85
 8005644:	0040      	lsls	r0, r0, #1
 8005646:	183b      	adds	r3, r7, r0
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	8952      	ldrh	r2, [r2, #10]
 800564c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6959      	ldr	r1, [r3, #20]
 8005652:	2586      	movs	r5, #134	; 0x86
 8005654:	006d      	lsls	r5, r5, #1
 8005656:	197b      	adds	r3, r7, r5
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	b29c      	uxth	r4, r3
 800565c:	183b      	adds	r3, r7, r0
 800565e:	881a      	ldrh	r2, [r3, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	0023      	movs	r3, r4
 8005664:	f001 f96e 	bl	8006944 <USB_WritePMA>
            ep->xfer_buff += len;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	197b      	adds	r3, r7, r5
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	18d2      	adds	r2, r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d909      	bls.n	8005696 <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6a1a      	ldr	r2, [r3, #32]
 8005686:	2386      	movs	r3, #134	; 0x86
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	621a      	str	r2, [r3, #32]
 8005694:	e008      	b.n	80056a8 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	2286      	movs	r2, #134	; 0x86
 800569c:	0052      	lsls	r2, r2, #1
 800569e:	18ba      	adds	r2, r7, r2
 80056a0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d16c      	bne.n	800578a <USB_EPStartXfer+0x366>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2250      	movs	r2, #80	; 0x50
 80056b8:	5a9b      	ldrh	r3, [r3, r2]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	001a      	movs	r2, r3
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	00da      	lsls	r2, r3, #3
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	18d3      	adds	r3, r2, r3
 80056ce:	4a48      	ldr	r2, [pc, #288]	; (80057f0 <USB_EPStartXfer+0x3cc>)
 80056d0:	4694      	mov	ip, r2
 80056d2:	4463      	add	r3, ip
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	2386      	movs	r3, #134	; 0x86
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d110      	bne.n	8005704 <USB_EPStartXfer+0x2e0>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4a45      	ldr	r2, [pc, #276]	; (8005800 <USB_EPStartXfer+0x3dc>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4a42      	ldr	r2, [pc, #264]	; (8005804 <USB_EPStartXfer+0x3e0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e060      	b.n	80057c6 <USB_EPStartXfer+0x3a2>
 8005704:	2386      	movs	r3, #134	; 0x86
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b3e      	cmp	r3, #62	; 0x3e
 800570e:	d81c      	bhi.n	800574a <USB_EPStartXfer+0x326>
 8005710:	2286      	movs	r2, #134	; 0x86
 8005712:	0052      	lsls	r2, r2, #1
 8005714:	18bb      	adds	r3, r7, r2
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	1c79      	adds	r1, r7, #1
 800571c:	31ff      	adds	r1, #255	; 0xff
 800571e:	600b      	str	r3, [r1, #0]
 8005720:	18bb      	adds	r3, r7, r2
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	d006      	beq.n	8005738 <USB_EPStartXfer+0x314>
 800572a:	1c7b      	adds	r3, r7, #1
 800572c:	33ff      	adds	r3, #255	; 0xff
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	1c7a      	adds	r2, r7, #1
 8005734:	32ff      	adds	r2, #255	; 0xff
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	1c7b      	adds	r3, r7, #1
 800573a:	33ff      	adds	r3, #255	; 0xff
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	b29a      	uxth	r2, r3
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	e03d      	b.n	80057c6 <USB_EPStartXfer+0x3a2>
 800574a:	2286      	movs	r2, #134	; 0x86
 800574c:	0052      	lsls	r2, r2, #1
 800574e:	18bb      	adds	r3, r7, r2
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	1c79      	adds	r1, r7, #1
 8005756:	31ff      	adds	r1, #255	; 0xff
 8005758:	600b      	str	r3, [r1, #0]
 800575a:	18bb      	adds	r3, r7, r2
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	221f      	movs	r2, #31
 8005760:	4013      	ands	r3, r2
 8005762:	d106      	bne.n	8005772 <USB_EPStartXfer+0x34e>
 8005764:	1c7b      	adds	r3, r7, #1
 8005766:	33ff      	adds	r3, #255	; 0xff
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3b01      	subs	r3, #1
 800576c:	1c7a      	adds	r2, r7, #1
 800576e:	32ff      	adds	r2, #255	; 0xff
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	1c7b      	adds	r3, r7, #1
 8005774:	33ff      	adds	r3, #255	; 0xff
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <USB_EPStartXfer+0x3e0>)
 8005780:	4313      	orrs	r3, r2
 8005782:	b29a      	uxth	r2, r3
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e01d      	b.n	80057c6 <USB_EPStartXfer+0x3a2>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d119      	bne.n	80057c6 <USB_EPStartXfer+0x3a2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2250      	movs	r2, #80	; 0x50
 800579a:	5a9b      	ldrh	r3, [r3, r2]
 800579c:	b29b      	uxth	r3, r3
 800579e:	001a      	movs	r2, r3
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	00da      	lsls	r2, r3, #3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	18d3      	adds	r3, r2, r3
 80057b0:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <USB_EPStartXfer+0x3cc>)
 80057b2:	4694      	mov	ip, r2
 80057b4:	4463      	add	r3, ip
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	2386      	movs	r3, #134	; 0x86
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057c6:	2085      	movs	r0, #133	; 0x85
 80057c8:	0040      	lsls	r0, r0, #1
 80057ca:	183b      	adds	r3, r7, r0
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	8912      	ldrh	r2, [r2, #8]
 80057d0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6959      	ldr	r1, [r3, #20]
 80057d6:	2386      	movs	r3, #134	; 0x86
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	b29c      	uxth	r4, r3
 80057e0:	183b      	adds	r3, r7, r0
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	0023      	movs	r3, r4
 80057e8:	f001 f8ac 	bl	8006944 <USB_WritePMA>
 80057ec:	e346      	b.n	8005e7c <USB_EPStartXfer+0xa58>
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	00000402 	.word	0x00000402
 80057f4:	ffff8f8f 	.word	0xffff8f8f
 80057f8:	ffff8180 	.word	0xffff8180
 80057fc:	00000406 	.word	0x00000406
 8005800:	ffff83ff 	.word	0xffff83ff
 8005804:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d16a      	bne.n	80058e6 <USB_EPStartXfer+0x4c2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2250      	movs	r2, #80	; 0x50
 8005818:	5a9b      	ldrh	r3, [r3, r2]
 800581a:	b29b      	uxth	r3, r3
 800581c:	001a      	movs	r2, r3
 800581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005820:	189b      	adds	r3, r3, r2
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	00da      	lsls	r2, r3, #3
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	4aca      	ldr	r2, [pc, #808]	; (8005b58 <USB_EPStartXfer+0x734>)
 8005830:	4694      	mov	ip, r2
 8005832:	4463      	add	r3, ip
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48
 8005836:	2386      	movs	r3, #134	; 0x86
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d110      	bne.n	8005864 <USB_EPStartXfer+0x440>
 8005842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	4ac4      	ldr	r2, [pc, #784]	; (8005b5c <USB_EPStartXfer+0x738>)
 800584a:	4013      	ands	r3, r2
 800584c:	b29a      	uxth	r2, r3
 800584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	4ac1      	ldr	r2, [pc, #772]	; (8005b60 <USB_EPStartXfer+0x73c>)
 800585a:	4313      	orrs	r3, r2
 800585c:	b29a      	uxth	r2, r3
 800585e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e05e      	b.n	8005922 <USB_EPStartXfer+0x4fe>
 8005864:	2386      	movs	r3, #134	; 0x86
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b3e      	cmp	r3, #62	; 0x3e
 800586e:	d81b      	bhi.n	80058a8 <USB_EPStartXfer+0x484>
 8005870:	2286      	movs	r2, #134	; 0x86
 8005872:	0052      	lsls	r2, r2, #1
 8005874:	18bb      	adds	r3, r7, r2
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	21fc      	movs	r1, #252	; 0xfc
 800587c:	1879      	adds	r1, r7, r1
 800587e:	600b      	str	r3, [r1, #0]
 8005880:	18bb      	adds	r3, r7, r2
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
 8005888:	d005      	beq.n	8005896 <USB_EPStartXfer+0x472>
 800588a:	22fc      	movs	r2, #252	; 0xfc
 800588c:	18bb      	adds	r3, r7, r2
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	18ba      	adds	r2, r7, r2
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	23fc      	movs	r3, #252	; 0xfc
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e03c      	b.n	8005922 <USB_EPStartXfer+0x4fe>
 80058a8:	2286      	movs	r2, #134	; 0x86
 80058aa:	0052      	lsls	r2, r2, #1
 80058ac:	18bb      	adds	r3, r7, r2
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	21fc      	movs	r1, #252	; 0xfc
 80058b4:	1879      	adds	r1, r7, r1
 80058b6:	600b      	str	r3, [r1, #0]
 80058b8:	18bb      	adds	r3, r7, r2
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	221f      	movs	r2, #31
 80058be:	4013      	ands	r3, r2
 80058c0:	d105      	bne.n	80058ce <USB_EPStartXfer+0x4aa>
 80058c2:	22fc      	movs	r2, #252	; 0xfc
 80058c4:	18bb      	adds	r3, r7, r2
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	18ba      	adds	r2, r7, r2
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	23fc      	movs	r3, #252	; 0xfc
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4aa1      	ldr	r2, [pc, #644]	; (8005b60 <USB_EPStartXfer+0x73c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e01d      	b.n	8005922 <USB_EPStartXfer+0x4fe>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d119      	bne.n	8005922 <USB_EPStartXfer+0x4fe>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	657b      	str	r3, [r7, #84]	; 0x54
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2250      	movs	r2, #80	; 0x50
 80058f6:	5a9b      	ldrh	r3, [r3, r2]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	001a      	movs	r2, r3
 80058fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	657b      	str	r3, [r7, #84]	; 0x54
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	00da      	lsls	r2, r3, #3
 8005908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590a:	18d3      	adds	r3, r2, r3
 800590c:	4a92      	ldr	r2, [pc, #584]	; (8005b58 <USB_EPStartXfer+0x734>)
 800590e:	4694      	mov	ip, r2
 8005910:	4463      	add	r3, ip
 8005912:	653b      	str	r3, [r7, #80]	; 0x50
 8005914:	2386      	movs	r3, #134	; 0x86
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	b29a      	uxth	r2, r3
 800591e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005922:	2085      	movs	r0, #133	; 0x85
 8005924:	0040      	lsls	r0, r0, #1
 8005926:	183b      	adds	r3, r7, r0
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	8912      	ldrh	r2, [r2, #8]
 800592c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6959      	ldr	r1, [r3, #20]
 8005932:	2586      	movs	r5, #134	; 0x86
 8005934:	006d      	lsls	r5, r5, #1
 8005936:	197b      	adds	r3, r7, r5
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	b29c      	uxth	r4, r3
 800593c:	183b      	adds	r3, r7, r0
 800593e:	881a      	ldrh	r2, [r3, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	0023      	movs	r3, r4
 8005944:	f000 fffe 	bl	8006944 <USB_WritePMA>
            ep->xfer_buff += len;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	197b      	adds	r3, r7, r5
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	18d2      	adds	r2, r2, r3
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	429a      	cmp	r2, r3
 8005960:	d909      	bls.n	8005976 <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	2386      	movs	r3, #134	; 0x86
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	621a      	str	r2, [r3, #32]
 8005974:	e008      	b.n	8005988 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	2286      	movs	r2, #134	; 0x86
 800597c:	0052      	lsls	r2, r2, #1
 800597e:	18ba      	adds	r2, r7, r2
 8005980:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2200      	movs	r2, #0
 8005986:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d16a      	bne.n	8005a6a <USB_EPStartXfer+0x646>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2250      	movs	r2, #80	; 0x50
 800599c:	5a9b      	ldrh	r3, [r3, r2]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	001a      	movs	r2, r3
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	189b      	adds	r3, r3, r2
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	00da      	lsls	r2, r3, #3
 80059ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b0:	18d3      	adds	r3, r2, r3
 80059b2:	4a6c      	ldr	r2, [pc, #432]	; (8005b64 <USB_EPStartXfer+0x740>)
 80059b4:	4694      	mov	ip, r2
 80059b6:	4463      	add	r3, ip
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ba:	2386      	movs	r3, #134	; 0x86
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d110      	bne.n	80059e8 <USB_EPStartXfer+0x5c4>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4a63      	ldr	r2, [pc, #396]	; (8005b5c <USB_EPStartXfer+0x738>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4a60      	ldr	r2, [pc, #384]	; (8005b60 <USB_EPStartXfer+0x73c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e05c      	b.n	8005aa2 <USB_EPStartXfer+0x67e>
 80059e8:	2386      	movs	r3, #134	; 0x86
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b3e      	cmp	r3, #62	; 0x3e
 80059f2:	d81b      	bhi.n	8005a2c <USB_EPStartXfer+0x608>
 80059f4:	2286      	movs	r2, #134	; 0x86
 80059f6:	0052      	lsls	r2, r2, #1
 80059f8:	18bb      	adds	r3, r7, r2
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	21f8      	movs	r1, #248	; 0xf8
 8005a00:	1879      	adds	r1, r7, r1
 8005a02:	600b      	str	r3, [r1, #0]
 8005a04:	18bb      	adds	r3, r7, r2
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d005      	beq.n	8005a1a <USB_EPStartXfer+0x5f6>
 8005a0e:	22f8      	movs	r2, #248	; 0xf8
 8005a10:	18bb      	adds	r3, r7, r2
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	18ba      	adds	r2, r7, r2
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	23f8      	movs	r3, #248	; 0xf8
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e03a      	b.n	8005aa2 <USB_EPStartXfer+0x67e>
 8005a2c:	2286      	movs	r2, #134	; 0x86
 8005a2e:	0052      	lsls	r2, r2, #1
 8005a30:	18bb      	adds	r3, r7, r2
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	21f8      	movs	r1, #248	; 0xf8
 8005a38:	1879      	adds	r1, r7, r1
 8005a3a:	600b      	str	r3, [r1, #0]
 8005a3c:	18bb      	adds	r3, r7, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	221f      	movs	r2, #31
 8005a42:	4013      	ands	r3, r2
 8005a44:	d105      	bne.n	8005a52 <USB_EPStartXfer+0x62e>
 8005a46:	22f8      	movs	r2, #248	; 0xf8
 8005a48:	18bb      	adds	r3, r7, r2
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	18ba      	adds	r2, r7, r2
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	23f8      	movs	r3, #248	; 0xf8
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4a40      	ldr	r2, [pc, #256]	; (8005b60 <USB_EPStartXfer+0x73c>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e01b      	b.n	8005aa2 <USB_EPStartXfer+0x67e>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d117      	bne.n	8005aa2 <USB_EPStartXfer+0x67e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2250      	movs	r2, #80	; 0x50
 8005a76:	5a9b      	ldrh	r3, [r3, r2]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	189b      	adds	r3, r3, r2
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	00da      	lsls	r2, r3, #3
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	18d3      	adds	r3, r2, r3
 8005a8c:	4a35      	ldr	r2, [pc, #212]	; (8005b64 <USB_EPStartXfer+0x740>)
 8005a8e:	4694      	mov	ip, r2
 8005a90:	4463      	add	r3, ip
 8005a92:	643b      	str	r3, [r7, #64]	; 0x40
 8005a94:	2386      	movs	r3, #134	; 0x86
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aa2:	2085      	movs	r0, #133	; 0x85
 8005aa4:	0040      	lsls	r0, r0, #1
 8005aa6:	183b      	adds	r3, r7, r0
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	8952      	ldrh	r2, [r2, #10]
 8005aac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6959      	ldr	r1, [r3, #20]
 8005ab2:	2386      	movs	r3, #134	; 0x86
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	b29c      	uxth	r4, r3
 8005abc:	183b      	adds	r3, r7, r0
 8005abe:	881a      	ldrh	r2, [r3, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	0023      	movs	r3, r4
 8005ac4:	f000 ff3e 	bl	8006944 <USB_WritePMA>
 8005ac8:	e1d8      	b.n	8005e7c <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	2086      	movs	r0, #134	; 0x86
 8005ad0:	0040      	lsls	r0, r0, #1
 8005ad2:	183a      	adds	r2, r7, r0
 8005ad4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	18d3      	adds	r3, r2, r3
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	2466      	movs	r4, #102	; 0x66
 8005ae6:	193b      	adds	r3, r7, r4
 8005ae8:	491f      	ldr	r1, [pc, #124]	; (8005b68 <USB_EPStartXfer+0x744>)
 8005aea:	400a      	ands	r2, r1
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	18d3      	adds	r3, r2, r3
 8005af8:	193a      	adds	r2, r7, r4
 8005afa:	8812      	ldrh	r2, [r2, #0]
 8005afc:	491b      	ldr	r1, [pc, #108]	; (8005b6c <USB_EPStartXfer+0x748>)
 8005afe:	430a      	orrs	r2, r1
 8005b00:	b292      	uxth	r2, r2
 8005b02:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	663b      	str	r3, [r7, #96]	; 0x60
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2250      	movs	r2, #80	; 0x50
 8005b0c:	5a9b      	ldrh	r3, [r3, r2]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	001a      	movs	r2, r3
 8005b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	663b      	str	r3, [r7, #96]	; 0x60
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00da      	lsls	r2, r3, #3
 8005b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <USB_EPStartXfer+0x734>)
 8005b24:	4694      	mov	ip, r2
 8005b26:	4463      	add	r3, ip
 8005b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2a:	183b      	adds	r3, r7, r0
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b34:	2585      	movs	r5, #133	; 0x85
 8005b36:	006d      	lsls	r5, r5, #1
 8005b38:	197b      	adds	r3, r7, r5
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	8912      	ldrh	r2, [r2, #8]
 8005b3e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6959      	ldr	r1, [r3, #20]
 8005b44:	183b      	adds	r3, r7, r0
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b29c      	uxth	r4, r3
 8005b4a:	197b      	adds	r3, r7, r5
 8005b4c:	881a      	ldrh	r2, [r3, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	0023      	movs	r3, r4
 8005b52:	f000 fef7 	bl	8006944 <USB_WritePMA>
 8005b56:	e191      	b.n	8005e7c <USB_EPStartXfer+0xa58>
 8005b58:	00000402 	.word	0x00000402
 8005b5c:	ffff83ff 	.word	0xffff83ff
 8005b60:	ffff8000 	.word	0xffff8000
 8005b64:	00000406 	.word	0x00000406
 8005b68:	ffff8e8f 	.word	0xffff8e8f
 8005b6c:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	18d3      	adds	r3, r2, r3
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	001a      	movs	r2, r3
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	4013      	ands	r3, r2
 8005b84:	d100      	bne.n	8005b88 <USB_EPStartXfer+0x764>
 8005b86:	e093      	b.n	8005cb0 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d16a      	bne.n	8005c6a <USB_EPStartXfer+0x846>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	673b      	str	r3, [r7, #112]	; 0x70
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2250      	movs	r2, #80	; 0x50
 8005b9c:	5a9b      	ldrh	r3, [r3, r2]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ba4:	189b      	adds	r3, r3, r2
 8005ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	00da      	lsls	r2, r3, #3
 8005bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb0:	18d3      	adds	r3, r2, r3
 8005bb2:	4ae0      	ldr	r2, [pc, #896]	; (8005f34 <USB_EPStartXfer+0xb10>)
 8005bb4:	4694      	mov	ip, r2
 8005bb6:	4463      	add	r3, ip
 8005bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bba:	2386      	movs	r3, #134	; 0x86
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d110      	bne.n	8005be8 <USB_EPStartXfer+0x7c4>
 8005bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4ada      	ldr	r2, [pc, #872]	; (8005f38 <USB_EPStartXfer+0xb14>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4ad7      	ldr	r2, [pc, #860]	; (8005f3c <USB_EPStartXfer+0xb18>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e05c      	b.n	8005ca2 <USB_EPStartXfer+0x87e>
 8005be8:	2386      	movs	r3, #134	; 0x86
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf2:	d81b      	bhi.n	8005c2c <USB_EPStartXfer+0x808>
 8005bf4:	2286      	movs	r2, #134	; 0x86
 8005bf6:	0052      	lsls	r2, r2, #1
 8005bf8:	18bb      	adds	r3, r7, r2
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	21f4      	movs	r1, #244	; 0xf4
 8005c00:	1879      	adds	r1, r7, r1
 8005c02:	600b      	str	r3, [r1, #0]
 8005c04:	18bb      	adds	r3, r7, r2
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d005      	beq.n	8005c1a <USB_EPStartXfer+0x7f6>
 8005c0e:	22f4      	movs	r2, #244	; 0xf4
 8005c10:	18bb      	adds	r3, r7, r2
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	18ba      	adds	r2, r7, r2
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	23f4      	movs	r3, #244	; 0xf4
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e03a      	b.n	8005ca2 <USB_EPStartXfer+0x87e>
 8005c2c:	2286      	movs	r2, #134	; 0x86
 8005c2e:	0052      	lsls	r2, r2, #1
 8005c30:	18bb      	adds	r3, r7, r2
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	21f4      	movs	r1, #244	; 0xf4
 8005c38:	1879      	adds	r1, r7, r1
 8005c3a:	600b      	str	r3, [r1, #0]
 8005c3c:	18bb      	adds	r3, r7, r2
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	221f      	movs	r2, #31
 8005c42:	4013      	ands	r3, r2
 8005c44:	d105      	bne.n	8005c52 <USB_EPStartXfer+0x82e>
 8005c46:	22f4      	movs	r2, #244	; 0xf4
 8005c48:	18bb      	adds	r3, r7, r2
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	18ba      	adds	r2, r7, r2
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	23f4      	movs	r3, #244	; 0xf4
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4ab7      	ldr	r2, [pc, #732]	; (8005f3c <USB_EPStartXfer+0xb18>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e01b      	b.n	8005ca2 <USB_EPStartXfer+0x87e>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d117      	bne.n	8005ca2 <USB_EPStartXfer+0x87e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2250      	movs	r2, #80	; 0x50
 8005c76:	5a9b      	ldrh	r3, [r3, r2]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	00da      	lsls	r2, r3, #3
 8005c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8a:	18d3      	adds	r3, r2, r3
 8005c8c:	4aa9      	ldr	r2, [pc, #676]	; (8005f34 <USB_EPStartXfer+0xb10>)
 8005c8e:	4694      	mov	ip, r2
 8005c90:	4463      	add	r3, ip
 8005c92:	677b      	str	r3, [r7, #116]	; 0x74
 8005c94:	2386      	movs	r3, #134	; 0x86
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ca2:	2385      	movs	r3, #133	; 0x85
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	8952      	ldrh	r2, [r2, #10]
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e09f      	b.n	8005df0 <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d16f      	bne.n	8005d98 <USB_EPStartXfer+0x974>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	187a      	adds	r2, r7, r1
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2250      	movs	r2, #80	; 0x50
 8005cc4:	5a9b      	ldrh	r3, [r3, r2]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	001a      	movs	r2, r3
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	187a      	adds	r2, r7, r1
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	00da      	lsls	r2, r3, #3
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	18d3      	adds	r3, r2, r3
 8005ce0:	4a97      	ldr	r2, [pc, #604]	; (8005f40 <USB_EPStartXfer+0xb1c>)
 8005ce2:	4694      	mov	ip, r2
 8005ce4:	4463      	add	r3, ip
 8005ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ce8:	2386      	movs	r3, #134	; 0x86
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d110      	bne.n	8005d16 <USB_EPStartXfer+0x8f2>
 8005cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4a8f      	ldr	r2, [pc, #572]	; (8005f38 <USB_EPStartXfer+0xb14>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4a8c      	ldr	r2, [pc, #560]	; (8005f3c <USB_EPStartXfer+0xb18>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e066      	b.n	8005de4 <USB_EPStartXfer+0x9c0>
 8005d16:	2386      	movs	r3, #134	; 0x86
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d20:	d81b      	bhi.n	8005d5a <USB_EPStartXfer+0x936>
 8005d22:	2286      	movs	r2, #134	; 0x86
 8005d24:	0052      	lsls	r2, r2, #1
 8005d26:	18bb      	adds	r3, r7, r2
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	21f0      	movs	r1, #240	; 0xf0
 8005d2e:	1879      	adds	r1, r7, r1
 8005d30:	600b      	str	r3, [r1, #0]
 8005d32:	18bb      	adds	r3, r7, r2
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d005      	beq.n	8005d48 <USB_EPStartXfer+0x924>
 8005d3c:	22f0      	movs	r2, #240	; 0xf0
 8005d3e:	18bb      	adds	r3, r7, r2
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	18ba      	adds	r2, r7, r2
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	23f0      	movs	r3, #240	; 0xf0
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e044      	b.n	8005de4 <USB_EPStartXfer+0x9c0>
 8005d5a:	2286      	movs	r2, #134	; 0x86
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	18bb      	adds	r3, r7, r2
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	21f0      	movs	r1, #240	; 0xf0
 8005d66:	1879      	adds	r1, r7, r1
 8005d68:	600b      	str	r3, [r1, #0]
 8005d6a:	18bb      	adds	r3, r7, r2
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	221f      	movs	r2, #31
 8005d70:	4013      	ands	r3, r2
 8005d72:	d105      	bne.n	8005d80 <USB_EPStartXfer+0x95c>
 8005d74:	22f0      	movs	r2, #240	; 0xf0
 8005d76:	18bb      	adds	r3, r7, r2
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	18ba      	adds	r2, r7, r2
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	23f0      	movs	r3, #240	; 0xf0
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4a6b      	ldr	r2, [pc, #428]	; (8005f3c <USB_EPStartXfer+0xb18>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e025      	b.n	8005de4 <USB_EPStartXfer+0x9c0>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d121      	bne.n	8005de4 <USB_EPStartXfer+0x9c0>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2188      	movs	r1, #136	; 0x88
 8005da4:	187a      	adds	r2, r7, r1
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2250      	movs	r2, #80	; 0x50
 8005dac:	5a9b      	ldrh	r3, [r3, r2]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	001a      	movs	r2, r3
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	187a      	adds	r2, r7, r1
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00da      	lsls	r2, r3, #3
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	18d3      	adds	r3, r2, r3
 8005dc8:	4a5d      	ldr	r2, [pc, #372]	; (8005f40 <USB_EPStartXfer+0xb1c>)
 8005dca:	4694      	mov	ip, r2
 8005dcc:	4463      	add	r3, ip
 8005dce:	2184      	movs	r1, #132	; 0x84
 8005dd0:	187a      	adds	r2, r7, r1
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	2386      	movs	r3, #134	; 0x86
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005de4:	2385      	movs	r3, #133	; 0x85
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	8912      	ldrh	r2, [r2, #8]
 8005dee:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6959      	ldr	r1, [r3, #20]
 8005df4:	2386      	movs	r3, #134	; 0x86
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b29c      	uxth	r4, r3
 8005dfe:	2385      	movs	r3, #133	; 0x85
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	0023      	movs	r3, r4
 8005e0a:	f000 fd9b 	bl	8006944 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d117      	bne.n	8005e46 <USB_EPStartXfer+0xa22>
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	18d3      	adds	r3, r2, r3
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	2068      	movs	r0, #104	; 0x68
 8005e26:	183b      	adds	r3, r7, r0
 8005e28:	4946      	ldr	r1, [pc, #280]	; (8005f44 <USB_EPStartXfer+0xb20>)
 8005e2a:	400a      	ands	r2, r1
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	18d3      	adds	r3, r2, r3
 8005e38:	183a      	adds	r2, r7, r0
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	4942      	ldr	r1, [pc, #264]	; (8005f48 <USB_EPStartXfer+0xb24>)
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	b292      	uxth	r2, r2
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e01a      	b.n	8005e7c <USB_EPStartXfer+0xa58>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d116      	bne.n	8005e7c <USB_EPStartXfer+0xa58>
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	18d3      	adds	r3, r2, r3
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	206a      	movs	r0, #106	; 0x6a
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	4938      	ldr	r1, [pc, #224]	; (8005f44 <USB_EPStartXfer+0xb20>)
 8005e62:	400a      	ands	r2, r1
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	18d3      	adds	r3, r2, r3
 8005e70:	183a      	adds	r2, r7, r0
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	4935      	ldr	r1, [pc, #212]	; (8005f4c <USB_EPStartXfer+0xb28>)
 8005e76:	430a      	orrs	r2, r1
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <USB_EPStartXfer+0xb2c>)
 8005e8c:	2188      	movs	r1, #136	; 0x88
 8005e8e:	0049      	lsls	r1, r1, #1
 8005e90:	468c      	mov	ip, r1
 8005e92:	44bc      	add	ip, r7
 8005e94:	4463      	add	r3, ip
 8005e96:	492f      	ldr	r1, [pc, #188]	; (8005f54 <USB_EPStartXfer+0xb30>)
 8005e98:	400a      	ands	r2, r1
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	4b2c      	ldr	r3, [pc, #176]	; (8005f50 <USB_EPStartXfer+0xb2c>)
 8005e9e:	2288      	movs	r2, #136	; 0x88
 8005ea0:	0052      	lsls	r2, r2, #1
 8005ea2:	4694      	mov	ip, r2
 8005ea4:	44bc      	add	ip, r7
 8005ea6:	4463      	add	r3, ip
 8005ea8:	4a29      	ldr	r2, [pc, #164]	; (8005f50 <USB_EPStartXfer+0xb2c>)
 8005eaa:	2188      	movs	r1, #136	; 0x88
 8005eac:	0049      	lsls	r1, r1, #1
 8005eae:	468c      	mov	ip, r1
 8005eb0:	44bc      	add	ip, r7
 8005eb2:	4462      	add	r2, ip
 8005eb4:	8812      	ldrh	r2, [r2, #0]
 8005eb6:	2110      	movs	r1, #16
 8005eb8:	404a      	eors	r2, r1
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <USB_EPStartXfer+0xb2c>)
 8005ebe:	2288      	movs	r2, #136	; 0x88
 8005ec0:	0052      	lsls	r2, r2, #1
 8005ec2:	4694      	mov	ip, r2
 8005ec4:	44bc      	add	ip, r7
 8005ec6:	4463      	add	r3, ip
 8005ec8:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <USB_EPStartXfer+0xb2c>)
 8005eca:	2188      	movs	r1, #136	; 0x88
 8005ecc:	0049      	lsls	r1, r1, #1
 8005ece:	468c      	mov	ip, r1
 8005ed0:	44bc      	add	ip, r7
 8005ed2:	4462      	add	r2, ip
 8005ed4:	8812      	ldrh	r2, [r2, #0]
 8005ed6:	2120      	movs	r1, #32
 8005ed8:	404a      	eors	r2, r1
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	18d3      	adds	r3, r2, r3
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <USB_EPStartXfer+0xb2c>)
 8005ee8:	2188      	movs	r1, #136	; 0x88
 8005eea:	0049      	lsls	r1, r1, #1
 8005eec:	468c      	mov	ip, r1
 8005eee:	44bc      	add	ip, r7
 8005ef0:	4462      	add	r2, ip
 8005ef2:	8812      	ldrh	r2, [r2, #0]
 8005ef4:	4918      	ldr	r1, [pc, #96]	; (8005f58 <USB_EPStartXfer+0xb34>)
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	b292      	uxth	r2, r2
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	f000 fbdd 	bl	80066ba <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	7b1b      	ldrb	r3, [r3, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d000      	beq.n	8005f0a <USB_EPStartXfer+0xae6>
 8005f08:	e0ac      	b.n	8006064 <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d922      	bls.n	8005f5c <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2186      	movs	r1, #134	; 0x86
 8005f1c:	0049      	lsls	r1, r1, #1
 8005f1e:	187a      	adds	r2, r7, r1
 8005f20:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	187b      	adds	r3, r7, r1
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	619a      	str	r2, [r3, #24]
 8005f30:	e01d      	b.n	8005f6e <USB_EPStartXfer+0xb4a>
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	00000406 	.word	0x00000406
 8005f38:	ffff83ff 	.word	0xffff83ff
 8005f3c:	ffff8000 	.word	0xffff8000
 8005f40:	00000402 	.word	0x00000402
 8005f44:	ffff8f8f 	.word	0xffff8f8f
 8005f48:	ffff80c0 	.word	0xffff80c0
 8005f4c:	ffffc080 	.word	0xffffc080
 8005f50:	fffffefe 	.word	0xfffffefe
 8005f54:	ffff8fbf 	.word	0xffff8fbf
 8005f58:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2286      	movs	r2, #134	; 0x86
 8005f62:	0052      	lsls	r2, r2, #1
 8005f64:	18ba      	adds	r2, r7, r2
 8005f66:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2194      	movs	r1, #148	; 0x94
 8005f72:	187a      	adds	r2, r7, r1
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2250      	movs	r2, #80	; 0x50
 8005f7a:	5a9b      	ldrh	r3, [r3, r2]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	001a      	movs	r2, r3
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	189b      	adds	r3, r3, r2
 8005f86:	187a      	adds	r2, r7, r1
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	00da      	lsls	r2, r3, #3
 8005f90:	187b      	adds	r3, r7, r1
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	18d3      	adds	r3, r2, r3
 8005f96:	4ac2      	ldr	r2, [pc, #776]	; (80062a0 <USB_EPStartXfer+0xe7c>)
 8005f98:	4694      	mov	ip, r2
 8005f9a:	4463      	add	r3, ip
 8005f9c:	2290      	movs	r2, #144	; 0x90
 8005f9e:	18ba      	adds	r2, r7, r2
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	2386      	movs	r3, #134	; 0x86
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d115      	bne.n	8005fda <USB_EPStartXfer+0xbb6>
 8005fae:	2190      	movs	r1, #144	; 0x90
 8005fb0:	187b      	adds	r3, r7, r1
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4aba      	ldr	r2, [pc, #744]	; (80062a4 <USB_EPStartXfer+0xe80>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	187b      	adds	r3, r7, r1
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4ab6      	ldr	r2, [pc, #728]	; (80062a8 <USB_EPStartXfer+0xe84>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	187b      	adds	r3, r7, r1
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e34a      	b.n	8006670 <USB_EPStartXfer+0x124c>
 8005fda:	2386      	movs	r3, #134	; 0x86
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe4:	d81d      	bhi.n	8006022 <USB_EPStartXfer+0xbfe>
 8005fe6:	2286      	movs	r2, #134	; 0x86
 8005fe8:	0052      	lsls	r2, r2, #1
 8005fea:	18bb      	adds	r3, r7, r2
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	21ec      	movs	r1, #236	; 0xec
 8005ff2:	1879      	adds	r1, r7, r1
 8005ff4:	600b      	str	r3, [r1, #0]
 8005ff6:	18bb      	adds	r3, r7, r2
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d005      	beq.n	800600c <USB_EPStartXfer+0xbe8>
 8006000:	22ec      	movs	r2, #236	; 0xec
 8006002:	18bb      	adds	r3, r7, r2
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	18ba      	adds	r2, r7, r2
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	23ec      	movs	r3, #236	; 0xec
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	b29a      	uxth	r2, r3
 8006018:	2390      	movs	r3, #144	; 0x90
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	801a      	strh	r2, [r3, #0]
 8006020:	e326      	b.n	8006670 <USB_EPStartXfer+0x124c>
 8006022:	2286      	movs	r2, #134	; 0x86
 8006024:	0052      	lsls	r2, r2, #1
 8006026:	18bb      	adds	r3, r7, r2
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	21ec      	movs	r1, #236	; 0xec
 800602e:	1879      	adds	r1, r7, r1
 8006030:	600b      	str	r3, [r1, #0]
 8006032:	18bb      	adds	r3, r7, r2
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	221f      	movs	r2, #31
 8006038:	4013      	ands	r3, r2
 800603a:	d105      	bne.n	8006048 <USB_EPStartXfer+0xc24>
 800603c:	22ec      	movs	r2, #236	; 0xec
 800603e:	18bb      	adds	r3, r7, r2
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3b01      	subs	r3, #1
 8006044:	18ba      	adds	r2, r7, r2
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	23ec      	movs	r3, #236	; 0xec
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	029b      	lsls	r3, r3, #10
 8006052:	b29b      	uxth	r3, r3
 8006054:	4a94      	ldr	r2, [pc, #592]	; (80062a8 <USB_EPStartXfer+0xe84>)
 8006056:	4313      	orrs	r3, r2
 8006058:	b29a      	uxth	r2, r3
 800605a:	2390      	movs	r3, #144	; 0x90
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e305      	b.n	8006670 <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	78db      	ldrb	r3, [r3, #3]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d000      	beq.n	800606e <USB_EPStartXfer+0xc4a>
 800606c:	e182      	b.n	8006374 <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d000      	beq.n	8006078 <USB_EPStartXfer+0xc54>
 8006076:	e072      	b.n	800615e <USB_EPStartXfer+0xd3a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	21b0      	movs	r1, #176	; 0xb0
 800607c:	187a      	adds	r2, r7, r1
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2250      	movs	r2, #80	; 0x50
 8006084:	5a9b      	ldrh	r3, [r3, r2]
 8006086:	b29b      	uxth	r3, r3
 8006088:	001a      	movs	r2, r3
 800608a:	187b      	adds	r3, r7, r1
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	189b      	adds	r3, r3, r2
 8006090:	187a      	adds	r2, r7, r1
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	00da      	lsls	r2, r3, #3
 800609a:	187b      	adds	r3, r7, r1
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	4a82      	ldr	r2, [pc, #520]	; (80062ac <USB_EPStartXfer+0xe88>)
 80060a2:	4694      	mov	ip, r2
 80060a4:	4463      	add	r3, ip
 80060a6:	22ac      	movs	r2, #172	; 0xac
 80060a8:	18ba      	adds	r2, r7, r2
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d115      	bne.n	80060e0 <USB_EPStartXfer+0xcbc>
 80060b4:	21ac      	movs	r1, #172	; 0xac
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4a79      	ldr	r2, [pc, #484]	; (80062a4 <USB_EPStartXfer+0xe80>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	187b      	adds	r3, r7, r1
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	187b      	adds	r3, r7, r1
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4a75      	ldr	r2, [pc, #468]	; (80062a8 <USB_EPStartXfer+0xe84>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	187b      	adds	r3, r7, r1
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	e062      	b.n	80061a6 <USB_EPStartXfer+0xd82>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b3e      	cmp	r3, #62	; 0x3e
 80060e6:	d81b      	bhi.n	8006120 <USB_EPStartXfer+0xcfc>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	22e8      	movs	r2, #232	; 0xe8
 80060f0:	18ba      	adds	r2, r7, r2
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	d005      	beq.n	800610a <USB_EPStartXfer+0xce6>
 80060fe:	22e8      	movs	r2, #232	; 0xe8
 8006100:	18bb      	adds	r3, r7, r2
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	18ba      	adds	r2, r7, r2
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	23e8      	movs	r3, #232	; 0xe8
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29a      	uxth	r2, r3
 8006116:	23ac      	movs	r3, #172	; 0xac
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e042      	b.n	80061a6 <USB_EPStartXfer+0xd82>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	22e8      	movs	r2, #232	; 0xe8
 8006128:	18ba      	adds	r2, r7, r2
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	221f      	movs	r2, #31
 8006132:	4013      	ands	r3, r2
 8006134:	d105      	bne.n	8006142 <USB_EPStartXfer+0xd1e>
 8006136:	22e8      	movs	r2, #232	; 0xe8
 8006138:	18bb      	adds	r3, r7, r2
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	18ba      	adds	r2, r7, r2
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	23e8      	movs	r3, #232	; 0xe8
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	029b      	lsls	r3, r3, #10
 800614c:	b29b      	uxth	r3, r3
 800614e:	4a56      	ldr	r2, [pc, #344]	; (80062a8 <USB_EPStartXfer+0xe84>)
 8006150:	4313      	orrs	r3, r2
 8006152:	b29a      	uxth	r2, r3
 8006154:	23ac      	movs	r3, #172	; 0xac
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e023      	b.n	80061a6 <USB_EPStartXfer+0xd82>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d11f      	bne.n	80061a6 <USB_EPStartXfer+0xd82>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	21b8      	movs	r1, #184	; 0xb8
 800616a:	187a      	adds	r2, r7, r1
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2250      	movs	r2, #80	; 0x50
 8006172:	5a9b      	ldrh	r3, [r3, r2]
 8006174:	b29b      	uxth	r3, r3
 8006176:	001a      	movs	r2, r3
 8006178:	187b      	adds	r3, r7, r1
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	189b      	adds	r3, r3, r2
 800617e:	187a      	adds	r2, r7, r1
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	00da      	lsls	r2, r3, #3
 8006188:	187b      	adds	r3, r7, r1
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	18d3      	adds	r3, r2, r3
 800618e:	4a47      	ldr	r2, [pc, #284]	; (80062ac <USB_EPStartXfer+0xe88>)
 8006190:	4694      	mov	ip, r2
 8006192:	4463      	add	r3, ip
 8006194:	21b4      	movs	r1, #180	; 0xb4
 8006196:	187a      	adds	r2, r7, r1
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	187b      	adds	r3, r7, r1
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	22a8      	movs	r2, #168	; 0xa8
 80061aa:	18ba      	adds	r2, r7, r2
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d000      	beq.n	80061b8 <USB_EPStartXfer+0xd94>
 80061b6:	e07b      	b.n	80062b0 <USB_EPStartXfer+0xe8c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	21a0      	movs	r1, #160	; 0xa0
 80061bc:	187a      	adds	r2, r7, r1
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2250      	movs	r2, #80	; 0x50
 80061c4:	5a9b      	ldrh	r3, [r3, r2]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	001a      	movs	r2, r3
 80061ca:	187b      	adds	r3, r7, r1
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	187a      	adds	r2, r7, r1
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	00da      	lsls	r2, r3, #3
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	18d3      	adds	r3, r2, r3
 80061e0:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <USB_EPStartXfer+0xe7c>)
 80061e2:	4694      	mov	ip, r2
 80061e4:	4463      	add	r3, ip
 80061e6:	229c      	movs	r2, #156	; 0x9c
 80061e8:	18ba      	adds	r2, r7, r2
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d115      	bne.n	8006220 <USB_EPStartXfer+0xdfc>
 80061f4:	219c      	movs	r1, #156	; 0x9c
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	4a29      	ldr	r2, [pc, #164]	; (80062a4 <USB_EPStartXfer+0xe80>)
 8006200:	4013      	ands	r3, r2
 8006202:	b29a      	uxth	r2, r3
 8006204:	187b      	adds	r3, r7, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	187b      	adds	r3, r7, r1
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	4a25      	ldr	r2, [pc, #148]	; (80062a8 <USB_EPStartXfer+0xe84>)
 8006214:	4313      	orrs	r3, r2
 8006216:	b29a      	uxth	r2, r3
 8006218:	187b      	adds	r3, r7, r1
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	e068      	b.n	80062f2 <USB_EPStartXfer+0xece>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b3e      	cmp	r3, #62	; 0x3e
 8006226:	d81b      	bhi.n	8006260 <USB_EPStartXfer+0xe3c>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	22e4      	movs	r2, #228	; 0xe4
 8006230:	18ba      	adds	r2, r7, r2
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2201      	movs	r2, #1
 800623a:	4013      	ands	r3, r2
 800623c:	d005      	beq.n	800624a <USB_EPStartXfer+0xe26>
 800623e:	22e4      	movs	r2, #228	; 0xe4
 8006240:	18bb      	adds	r3, r7, r2
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	18ba      	adds	r2, r7, r2
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	23e4      	movs	r3, #228	; 0xe4
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	029b      	lsls	r3, r3, #10
 8006254:	b29a      	uxth	r2, r3
 8006256:	239c      	movs	r3, #156	; 0x9c
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	e048      	b.n	80062f2 <USB_EPStartXfer+0xece>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	22e4      	movs	r2, #228	; 0xe4
 8006268:	18ba      	adds	r2, r7, r2
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	221f      	movs	r2, #31
 8006272:	4013      	ands	r3, r2
 8006274:	d105      	bne.n	8006282 <USB_EPStartXfer+0xe5e>
 8006276:	22e4      	movs	r2, #228	; 0xe4
 8006278:	18bb      	adds	r3, r7, r2
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	18ba      	adds	r2, r7, r2
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	23e4      	movs	r3, #228	; 0xe4
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	4a06      	ldr	r2, [pc, #24]	; (80062a8 <USB_EPStartXfer+0xe84>)
 8006290:	4313      	orrs	r3, r2
 8006292:	b29a      	uxth	r2, r3
 8006294:	239c      	movs	r3, #156	; 0x9c
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e029      	b.n	80062f2 <USB_EPStartXfer+0xece>
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	00000406 	.word	0x00000406
 80062a4:	ffff83ff 	.word	0xffff83ff
 80062a8:	ffff8000 	.word	0xffff8000
 80062ac:	00000402 	.word	0x00000402
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d11c      	bne.n	80062f2 <USB_EPStartXfer+0xece>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2250      	movs	r2, #80	; 0x50
 80062bc:	5a9b      	ldrh	r3, [r3, r2]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	001a      	movs	r2, r3
 80062c2:	21a8      	movs	r1, #168	; 0xa8
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	189b      	adds	r3, r3, r2
 80062ca:	187a      	adds	r2, r7, r1
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	00da      	lsls	r2, r3, #3
 80062d4:	187b      	adds	r3, r7, r1
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	18d3      	adds	r3, r2, r3
 80062da:	4acc      	ldr	r2, [pc, #816]	; (800660c <USB_EPStartXfer+0x11e8>)
 80062dc:	4694      	mov	ip, r2
 80062de:	4463      	add	r3, ip
 80062e0:	21a4      	movs	r1, #164	; 0xa4
 80062e2:	187a      	adds	r2, r7, r1
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d100      	bne.n	80062fc <USB_EPStartXfer+0xed8>
 80062fa:	e1b9      	b.n	8006670 <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	18d2      	adds	r2, r2, r3
 8006306:	219a      	movs	r1, #154	; 0x9a
 8006308:	187b      	adds	r3, r7, r1
 800630a:	8812      	ldrh	r2, [r2, #0]
 800630c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800630e:	187b      	adds	r3, r7, r1
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	01db      	lsls	r3, r3, #7
 8006316:	4013      	ands	r3, r2
 8006318:	d005      	beq.n	8006326 <USB_EPStartXfer+0xf02>
 800631a:	239a      	movs	r3, #154	; 0x9a
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	2240      	movs	r2, #64	; 0x40
 8006322:	4013      	ands	r3, r2
 8006324:	d10e      	bne.n	8006344 <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006326:	239a      	movs	r3, #154	; 0x9a
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	881a      	ldrh	r2, [r3, #0]
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006332:	d000      	beq.n	8006336 <USB_EPStartXfer+0xf12>
 8006334:	e19c      	b.n	8006670 <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006336:	239a      	movs	r3, #154	; 0x9a
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	2240      	movs	r2, #64	; 0x40
 800633e:	4013      	ands	r3, r2
 8006340:	d000      	beq.n	8006344 <USB_EPStartXfer+0xf20>
 8006342:	e195      	b.n	8006670 <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	18d3      	adds	r3, r2, r3
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29a      	uxth	r2, r3
 8006352:	2098      	movs	r0, #152	; 0x98
 8006354:	183b      	adds	r3, r7, r0
 8006356:	49ae      	ldr	r1, [pc, #696]	; (8006610 <USB_EPStartXfer+0x11ec>)
 8006358:	400a      	ands	r2, r1
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	18d3      	adds	r3, r2, r3
 8006366:	183a      	adds	r2, r7, r0
 8006368:	8812      	ldrh	r2, [r2, #0]
 800636a:	49aa      	ldr	r1, [pc, #680]	; (8006614 <USB_EPStartXfer+0x11f0>)
 800636c:	430a      	orrs	r2, r1
 800636e:	b292      	uxth	r2, r2
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e17d      	b.n	8006670 <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	78db      	ldrb	r3, [r3, #3]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d000      	beq.n	800637e <USB_EPStartXfer+0xf5a>
 800637c:	e176      	b.n	800666c <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d90d      	bls.n	80063a6 <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2186      	movs	r1, #134	; 0x86
 8006390:	0049      	lsls	r1, r1, #1
 8006392:	187a      	adds	r2, r7, r1
 8006394:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	187b      	adds	r3, r7, r1
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	1ad2      	subs	r2, r2, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	619a      	str	r2, [r3, #24]
 80063a4:	e008      	b.n	80063b8 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2286      	movs	r2, #134	; 0x86
 80063ac:	0052      	lsls	r2, r2, #1
 80063ae:	18ba      	adds	r2, r7, r2
 80063b0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d000      	beq.n	80063c2 <USB_EPStartXfer+0xf9e>
 80063c0:	e07a      	b.n	80064b8 <USB_EPStartXfer+0x1094>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	21d0      	movs	r1, #208	; 0xd0
 80063c6:	187a      	adds	r2, r7, r1
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2250      	movs	r2, #80	; 0x50
 80063ce:	5a9b      	ldrh	r3, [r3, r2]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	001a      	movs	r2, r3
 80063d4:	187b      	adds	r3, r7, r1
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	187a      	adds	r2, r7, r1
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	00da      	lsls	r2, r3, #3
 80063e4:	187b      	adds	r3, r7, r1
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	18d3      	adds	r3, r2, r3
 80063ea:	4a8b      	ldr	r2, [pc, #556]	; (8006618 <USB_EPStartXfer+0x11f4>)
 80063ec:	4694      	mov	ip, r2
 80063ee:	4463      	add	r3, ip
 80063f0:	22cc      	movs	r2, #204	; 0xcc
 80063f2:	18ba      	adds	r2, r7, r2
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	2386      	movs	r3, #134	; 0x86
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d115      	bne.n	800642e <USB_EPStartXfer+0x100a>
 8006402:	21cc      	movs	r1, #204	; 0xcc
 8006404:	187b      	adds	r3, r7, r1
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	4a83      	ldr	r2, [pc, #524]	; (800661c <USB_EPStartXfer+0x11f8>)
 800640e:	4013      	ands	r3, r2
 8006410:	b29a      	uxth	r2, r3
 8006412:	187b      	adds	r3, r7, r1
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	801a      	strh	r2, [r3, #0]
 8006418:	187b      	adds	r3, r7, r1
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	4a7f      	ldr	r2, [pc, #508]	; (8006620 <USB_EPStartXfer+0x11fc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	b29a      	uxth	r2, r3
 8006426:	187b      	adds	r3, r7, r1
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e06a      	b.n	8006504 <USB_EPStartXfer+0x10e0>
 800642e:	2386      	movs	r3, #134	; 0x86
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b3e      	cmp	r3, #62	; 0x3e
 8006438:	d81d      	bhi.n	8006476 <USB_EPStartXfer+0x1052>
 800643a:	2286      	movs	r2, #134	; 0x86
 800643c:	0052      	lsls	r2, r2, #1
 800643e:	18bb      	adds	r3, r7, r2
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	21e0      	movs	r1, #224	; 0xe0
 8006446:	1879      	adds	r1, r7, r1
 8006448:	600b      	str	r3, [r1, #0]
 800644a:	18bb      	adds	r3, r7, r2
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2201      	movs	r2, #1
 8006450:	4013      	ands	r3, r2
 8006452:	d005      	beq.n	8006460 <USB_EPStartXfer+0x103c>
 8006454:	22e0      	movs	r2, #224	; 0xe0
 8006456:	18bb      	adds	r3, r7, r2
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	18ba      	adds	r2, r7, r2
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	23e0      	movs	r3, #224	; 0xe0
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29a      	uxth	r2, r3
 800646c:	23cc      	movs	r3, #204	; 0xcc
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	e046      	b.n	8006504 <USB_EPStartXfer+0x10e0>
 8006476:	2286      	movs	r2, #134	; 0x86
 8006478:	0052      	lsls	r2, r2, #1
 800647a:	18bb      	adds	r3, r7, r2
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	21e0      	movs	r1, #224	; 0xe0
 8006482:	1879      	adds	r1, r7, r1
 8006484:	600b      	str	r3, [r1, #0]
 8006486:	18bb      	adds	r3, r7, r2
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	221f      	movs	r2, #31
 800648c:	4013      	ands	r3, r2
 800648e:	d105      	bne.n	800649c <USB_EPStartXfer+0x1078>
 8006490:	22e0      	movs	r2, #224	; 0xe0
 8006492:	18bb      	adds	r3, r7, r2
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	18ba      	adds	r2, r7, r2
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	23e0      	movs	r3, #224	; 0xe0
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4a5d      	ldr	r2, [pc, #372]	; (8006620 <USB_EPStartXfer+0x11fc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	23cc      	movs	r3, #204	; 0xcc
 80064b0:	18fb      	adds	r3, r7, r3
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e025      	b.n	8006504 <USB_EPStartXfer+0x10e0>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d121      	bne.n	8006504 <USB_EPStartXfer+0x10e0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	21d8      	movs	r1, #216	; 0xd8
 80064c4:	187a      	adds	r2, r7, r1
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2250      	movs	r2, #80	; 0x50
 80064cc:	5a9b      	ldrh	r3, [r3, r2]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	001a      	movs	r2, r3
 80064d2:	187b      	adds	r3, r7, r1
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	187a      	adds	r2, r7, r1
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	00da      	lsls	r2, r3, #3
 80064e2:	187b      	adds	r3, r7, r1
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	18d3      	adds	r3, r2, r3
 80064e8:	4a4b      	ldr	r2, [pc, #300]	; (8006618 <USB_EPStartXfer+0x11f4>)
 80064ea:	4694      	mov	ip, r2
 80064ec:	4463      	add	r3, ip
 80064ee:	21d4      	movs	r1, #212	; 0xd4
 80064f0:	187a      	adds	r2, r7, r1
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	2386      	movs	r3, #134	; 0x86
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	22c8      	movs	r2, #200	; 0xc8
 8006508:	18ba      	adds	r2, r7, r2
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d000      	beq.n	8006516 <USB_EPStartXfer+0x10f2>
 8006514:	e086      	b.n	8006624 <USB_EPStartXfer+0x1200>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	21c0      	movs	r1, #192	; 0xc0
 800651a:	187a      	adds	r2, r7, r1
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2250      	movs	r2, #80	; 0x50
 8006522:	5a9b      	ldrh	r3, [r3, r2]
 8006524:	b29b      	uxth	r3, r3
 8006526:	001a      	movs	r2, r3
 8006528:	187b      	adds	r3, r7, r1
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	189b      	adds	r3, r3, r2
 800652e:	187a      	adds	r2, r7, r1
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	00da      	lsls	r2, r3, #3
 8006538:	187b      	adds	r3, r7, r1
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	18d3      	adds	r3, r2, r3
 800653e:	4a33      	ldr	r2, [pc, #204]	; (800660c <USB_EPStartXfer+0x11e8>)
 8006540:	4694      	mov	ip, r2
 8006542:	4463      	add	r3, ip
 8006544:	22bc      	movs	r2, #188	; 0xbc
 8006546:	18ba      	adds	r2, r7, r2
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	2386      	movs	r3, #134	; 0x86
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d115      	bne.n	8006582 <USB_EPStartXfer+0x115e>
 8006556:	21bc      	movs	r1, #188	; 0xbc
 8006558:	187b      	adds	r3, r7, r1
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	4a2e      	ldr	r2, [pc, #184]	; (800661c <USB_EPStartXfer+0x11f8>)
 8006562:	4013      	ands	r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	187b      	adds	r3, r7, r1
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	187b      	adds	r3, r7, r1
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	4a2a      	ldr	r2, [pc, #168]	; (8006620 <USB_EPStartXfer+0x11fc>)
 8006576:	4313      	orrs	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	187b      	adds	r3, r7, r1
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e076      	b.n	8006670 <USB_EPStartXfer+0x124c>
 8006582:	2386      	movs	r3, #134	; 0x86
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b3e      	cmp	r3, #62	; 0x3e
 800658c:	d81d      	bhi.n	80065ca <USB_EPStartXfer+0x11a6>
 800658e:	2286      	movs	r2, #134	; 0x86
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	18bb      	adds	r3, r7, r2
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	21dc      	movs	r1, #220	; 0xdc
 800659a:	1879      	adds	r1, r7, r1
 800659c:	600b      	str	r3, [r1, #0]
 800659e:	18bb      	adds	r3, r7, r2
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2201      	movs	r2, #1
 80065a4:	4013      	ands	r3, r2
 80065a6:	d005      	beq.n	80065b4 <USB_EPStartXfer+0x1190>
 80065a8:	22dc      	movs	r2, #220	; 0xdc
 80065aa:	18bb      	adds	r3, r7, r2
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	18ba      	adds	r2, r7, r2
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	23dc      	movs	r3, #220	; 0xdc
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	b29a      	uxth	r2, r3
 80065c0:	23bc      	movs	r3, #188	; 0xbc
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	e052      	b.n	8006670 <USB_EPStartXfer+0x124c>
 80065ca:	2286      	movs	r2, #134	; 0x86
 80065cc:	0052      	lsls	r2, r2, #1
 80065ce:	18bb      	adds	r3, r7, r2
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	21dc      	movs	r1, #220	; 0xdc
 80065d6:	1879      	adds	r1, r7, r1
 80065d8:	600b      	str	r3, [r1, #0]
 80065da:	18bb      	adds	r3, r7, r2
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	221f      	movs	r2, #31
 80065e0:	4013      	ands	r3, r2
 80065e2:	d105      	bne.n	80065f0 <USB_EPStartXfer+0x11cc>
 80065e4:	22dc      	movs	r2, #220	; 0xdc
 80065e6:	18bb      	adds	r3, r7, r2
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	18ba      	adds	r2, r7, r2
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	23dc      	movs	r3, #220	; 0xdc
 80065f2:	18fb      	adds	r3, r7, r3
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4a08      	ldr	r2, [pc, #32]	; (8006620 <USB_EPStartXfer+0x11fc>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	23bc      	movs	r3, #188	; 0xbc
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e031      	b.n	8006670 <USB_EPStartXfer+0x124c>
 800660c:	00000406 	.word	0x00000406
 8006610:	ffff8f8f 	.word	0xffff8f8f
 8006614:	ffff80c0 	.word	0xffff80c0
 8006618:	00000402 	.word	0x00000402
 800661c:	ffff83ff 	.word	0xffff83ff
 8006620:	ffff8000 	.word	0xffff8000
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d121      	bne.n	8006670 <USB_EPStartXfer+0x124c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2250      	movs	r2, #80	; 0x50
 8006630:	5a9b      	ldrh	r3, [r3, r2]
 8006632:	b29b      	uxth	r3, r3
 8006634:	001a      	movs	r2, r3
 8006636:	21c8      	movs	r1, #200	; 0xc8
 8006638:	187b      	adds	r3, r7, r1
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	189b      	adds	r3, r3, r2
 800663e:	187a      	adds	r2, r7, r1
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	00da      	lsls	r2, r3, #3
 8006648:	187b      	adds	r3, r7, r1
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	18d3      	adds	r3, r2, r3
 800664e:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <USB_EPStartXfer+0x12a0>)
 8006650:	4694      	mov	ip, r2
 8006652:	4463      	add	r3, ip
 8006654:	21c4      	movs	r1, #196	; 0xc4
 8006656:	187a      	adds	r2, r7, r1
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	2386      	movs	r3, #134	; 0x86
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	18fb      	adds	r3, r7, r3
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	b29a      	uxth	r2, r3
 8006664:	187b      	adds	r3, r7, r1
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e001      	b.n	8006670 <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e025      	b.n	80066bc <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	18d3      	adds	r3, r2, r3
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29a      	uxth	r2, r3
 800667e:	208e      	movs	r0, #142	; 0x8e
 8006680:	183b      	adds	r3, r7, r0
 8006682:	4911      	ldr	r1, [pc, #68]	; (80066c8 <USB_EPStartXfer+0x12a4>)
 8006684:	400a      	ands	r2, r1
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	183b      	adds	r3, r7, r0
 800668a:	183a      	adds	r2, r7, r0
 800668c:	8812      	ldrh	r2, [r2, #0]
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	0149      	lsls	r1, r1, #5
 8006692:	404a      	eors	r2, r1
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	183b      	adds	r3, r7, r0
 8006698:	183a      	adds	r2, r7, r0
 800669a:	8812      	ldrh	r2, [r2, #0]
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	0189      	lsls	r1, r1, #6
 80066a0:	404a      	eors	r2, r1
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	18d3      	adds	r3, r2, r3
 80066ae:	183a      	adds	r2, r7, r0
 80066b0:	8812      	ldrh	r2, [r2, #0]
 80066b2:	4906      	ldr	r1, [pc, #24]	; (80066cc <USB_EPStartXfer+0x12a8>)
 80066b4:	430a      	orrs	r2, r1
 80066b6:	b292      	uxth	r2, r2
 80066b8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b044      	add	sp, #272	; 0x110
 80066c2:	bdb0      	pop	{r4, r5, r7, pc}
 80066c4:	00000406 	.word	0x00000406
 80066c8:	ffffbf8f 	.word	0xffffbf8f
 80066cc:	ffff8080 	.word	0xffff8080

080066d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01d      	beq.n	800671e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	18d3      	adds	r3, r2, r3
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	200c      	movs	r0, #12
 80066f2:	183b      	adds	r3, r7, r0
 80066f4:	491b      	ldr	r1, [pc, #108]	; (8006764 <USB_EPSetStall+0x94>)
 80066f6:	400a      	ands	r2, r1
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	183b      	adds	r3, r7, r0
 80066fc:	183a      	adds	r2, r7, r0
 80066fe:	8812      	ldrh	r2, [r2, #0]
 8006700:	2110      	movs	r1, #16
 8006702:	404a      	eors	r2, r1
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	18d3      	adds	r3, r2, r3
 8006710:	183a      	adds	r2, r7, r0
 8006712:	8812      	ldrh	r2, [r2, #0]
 8006714:	4914      	ldr	r1, [pc, #80]	; (8006768 <USB_EPSetStall+0x98>)
 8006716:	430a      	orrs	r2, r1
 8006718:	b292      	uxth	r2, r2
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e01d      	b.n	800675a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	18d3      	adds	r3, r2, r3
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29a      	uxth	r2, r3
 800672c:	200e      	movs	r0, #14
 800672e:	183b      	adds	r3, r7, r0
 8006730:	490e      	ldr	r1, [pc, #56]	; (800676c <USB_EPSetStall+0x9c>)
 8006732:	400a      	ands	r2, r1
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	183b      	adds	r3, r7, r0
 8006738:	183a      	adds	r2, r7, r0
 800673a:	8812      	ldrh	r2, [r2, #0]
 800673c:	2180      	movs	r1, #128	; 0x80
 800673e:	0149      	lsls	r1, r1, #5
 8006740:	404a      	eors	r2, r1
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	18d3      	adds	r3, r2, r3
 800674e:	183a      	adds	r2, r7, r0
 8006750:	8812      	ldrh	r2, [r2, #0]
 8006752:	4905      	ldr	r1, [pc, #20]	; (8006768 <USB_EPSetStall+0x98>)
 8006754:	430a      	orrs	r2, r1
 8006756:	b292      	uxth	r2, r2
 8006758:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b004      	add	sp, #16
 8006762:	bd80      	pop	{r7, pc}
 8006764:	ffff8fbf 	.word	0xffff8fbf
 8006768:	ffff8080 	.word	0xffff8080
 800676c:	ffffbf8f 	.word	0xffffbf8f

08006770 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	7b1b      	ldrb	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d000      	beq.n	8006784 <USB_EPClearStall+0x14>
 8006782:	e095      	b.n	80068b0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d046      	beq.n	800681a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	18d2      	adds	r2, r2, r3
 8006796:	2110      	movs	r1, #16
 8006798:	187b      	adds	r3, r7, r1
 800679a:	8812      	ldrh	r2, [r2, #0]
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	187b      	adds	r3, r7, r1
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	2240      	movs	r2, #64	; 0x40
 80067a4:	4013      	ands	r3, r2
 80067a6:	d016      	beq.n	80067d6 <USB_EPClearStall+0x66>
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	18d3      	adds	r3, r2, r3
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	200e      	movs	r0, #14
 80067b8:	183b      	adds	r3, r7, r0
 80067ba:	4940      	ldr	r1, [pc, #256]	; (80068bc <USB_EPClearStall+0x14c>)
 80067bc:	400a      	ands	r2, r1
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	18d3      	adds	r3, r2, r3
 80067ca:	183a      	adds	r2, r7, r0
 80067cc:	8812      	ldrh	r2, [r2, #0]
 80067ce:	493c      	ldr	r1, [pc, #240]	; (80068c0 <USB_EPClearStall+0x150>)
 80067d0:	430a      	orrs	r2, r1
 80067d2:	b292      	uxth	r2, r2
 80067d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	78db      	ldrb	r3, [r3, #3]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d068      	beq.n	80068b0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	18d3      	adds	r3, r2, r3
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	200c      	movs	r0, #12
 80067ee:	183b      	adds	r3, r7, r0
 80067f0:	4934      	ldr	r1, [pc, #208]	; (80068c4 <USB_EPClearStall+0x154>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	183b      	adds	r3, r7, r0
 80067f8:	183a      	adds	r2, r7, r0
 80067fa:	8812      	ldrh	r2, [r2, #0]
 80067fc:	2120      	movs	r1, #32
 80067fe:	404a      	eors	r2, r1
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	18d3      	adds	r3, r2, r3
 800680c:	183a      	adds	r2, r7, r0
 800680e:	8812      	ldrh	r2, [r2, #0]
 8006810:	492d      	ldr	r1, [pc, #180]	; (80068c8 <USB_EPClearStall+0x158>)
 8006812:	430a      	orrs	r2, r1
 8006814:	b292      	uxth	r2, r2
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e04a      	b.n	80068b0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	18d2      	adds	r2, r2, r3
 8006824:	2116      	movs	r1, #22
 8006826:	187b      	adds	r3, r7, r1
 8006828:	8812      	ldrh	r2, [r2, #0]
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	187b      	adds	r3, r7, r1
 800682e:	881a      	ldrh	r2, [r3, #0]
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	01db      	lsls	r3, r3, #7
 8006834:	4013      	ands	r3, r2
 8006836:	d016      	beq.n	8006866 <USB_EPClearStall+0xf6>
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	18d3      	adds	r3, r2, r3
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29a      	uxth	r2, r3
 8006846:	2014      	movs	r0, #20
 8006848:	183b      	adds	r3, r7, r0
 800684a:	491c      	ldr	r1, [pc, #112]	; (80068bc <USB_EPClearStall+0x14c>)
 800684c:	400a      	ands	r2, r1
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	18d3      	adds	r3, r2, r3
 800685a:	183a      	adds	r2, r7, r0
 800685c:	8812      	ldrh	r2, [r2, #0]
 800685e:	491b      	ldr	r1, [pc, #108]	; (80068cc <USB_EPClearStall+0x15c>)
 8006860:	430a      	orrs	r2, r1
 8006862:	b292      	uxth	r2, r2
 8006864:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	18d3      	adds	r3, r2, r3
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29a      	uxth	r2, r3
 8006874:	2012      	movs	r0, #18
 8006876:	183b      	adds	r3, r7, r0
 8006878:	4915      	ldr	r1, [pc, #84]	; (80068d0 <USB_EPClearStall+0x160>)
 800687a:	400a      	ands	r2, r1
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	183b      	adds	r3, r7, r0
 8006880:	183a      	adds	r2, r7, r0
 8006882:	8812      	ldrh	r2, [r2, #0]
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	0149      	lsls	r1, r1, #5
 8006888:	404a      	eors	r2, r1
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	183b      	adds	r3, r7, r0
 800688e:	183a      	adds	r2, r7, r0
 8006890:	8812      	ldrh	r2, [r2, #0]
 8006892:	2180      	movs	r1, #128	; 0x80
 8006894:	0189      	lsls	r1, r1, #6
 8006896:	404a      	eors	r2, r1
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	18d3      	adds	r3, r2, r3
 80068a4:	183a      	adds	r2, r7, r0
 80068a6:	8812      	ldrh	r2, [r2, #0]
 80068a8:	4907      	ldr	r1, [pc, #28]	; (80068c8 <USB_EPClearStall+0x158>)
 80068aa:	430a      	orrs	r2, r1
 80068ac:	b292      	uxth	r2, r2
 80068ae:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b006      	add	sp, #24
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	ffff8f8f 	.word	0xffff8f8f
 80068c0:	ffff80c0 	.word	0xffff80c0
 80068c4:	ffff8fbf 	.word	0xffff8fbf
 80068c8:	ffff8080 	.word	0xffff8080
 80068cc:	ffffc080 	.word	0xffffc080
 80068d0:	ffffbf8f 	.word	0xffffbf8f

080068d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	000a      	movs	r2, r1
 80068de:	1cfb      	adds	r3, r7, #3
 80068e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80068e2:	1cfb      	adds	r3, r7, #3
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	224c      	movs	r2, #76	; 0x4c
 80068ee:	2180      	movs	r1, #128	; 0x80
 80068f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	0018      	movs	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b002      	add	sp, #8
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2258      	movs	r2, #88	; 0x58
 8006908:	5a9b      	ldrh	r3, [r3, r2]
 800690a:	b29b      	uxth	r3, r3
 800690c:	4a05      	ldr	r2, [pc, #20]	; (8006924 <USB_DevConnect+0x28>)
 800690e:	4313      	orrs	r3, r2
 8006910:	b299      	uxth	r1, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2258      	movs	r2, #88	; 0x58
 8006916:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b002      	add	sp, #8
 8006920:	bd80      	pop	{r7, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	ffff8000 	.word	0xffff8000

08006928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2244      	movs	r2, #68	; 0x44
 8006934:	5a9b      	ldrh	r3, [r3, r2]
 8006936:	b29b      	uxth	r3, r3
 8006938:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	0018      	movs	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	b004      	add	sp, #16
 8006942:	bd80      	pop	{r7, pc}

08006944 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08c      	sub	sp, #48	; 0x30
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	0019      	movs	r1, r3
 8006950:	1dbb      	adds	r3, r7, #6
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	1d3b      	adds	r3, r7, #4
 8006956:	1c0a      	adds	r2, r1, #0
 8006958:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800695a:	1d3b      	adds	r3, r7, #4
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800696c:	1dbb      	adds	r3, r7, #6
 800696e:	881a      	ldrh	r2, [r3, #0]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	18d3      	adds	r3, r2, r3
 8006974:	2280      	movs	r2, #128	; 0x80
 8006976:	00d2      	lsls	r2, r2, #3
 8006978:	4694      	mov	ip, r2
 800697a:	4463      	add	r3, ip
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006982:	e01b      	b.n	80069bc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	3301      	adds	r3, #1
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	b29b      	uxth	r3, r3
 800699a:	001a      	movs	r2, r3
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	3302      	adds	r3, #2
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	3301      	adds	r3, #1
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	3b01      	subs	r3, #1
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e0      	bne.n	8006984 <USB_WritePMA+0x40>
  }
}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b00c      	add	sp, #48	; 0x30
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b08a      	sub	sp, #40	; 0x28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	0019      	movs	r1, r3
 80069d6:	1dbb      	adds	r3, r7, #6
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	1c0a      	adds	r2, r1, #0
 80069de:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80069e0:	1d3b      	adds	r3, r7, #4
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069f2:	1dbb      	adds	r3, r7, #6
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	18d3      	adds	r3, r2, r3
 80069fa:	2280      	movs	r2, #128	; 0x80
 80069fc:	00d2      	lsls	r2, r2, #3
 80069fe:	4694      	mov	ip, r2
 8006a00:	4463      	add	r3, ip
 8006a02:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
 8006a08:	e018      	b.n	8006a3c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	3302      	adds	r3, #2
 8006a16:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	3301      	adds	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	3301      	adds	r3, #1
 8006a34:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	2201      	movs	r2, #1
 8006a48:	4013      	ands	r3, r2
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	701a      	strb	r2, [r3, #0]
  }
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b00a      	add	sp, #40	; 0x28
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	000a      	movs	r2, r1
 8006a72:	1cfb      	adds	r3, r7, #3
 8006a74:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	2304      	movs	r3, #4
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	2181      	movs	r1, #129	; 0x81
 8006a7e:	f001 fdb7 	bl	80085f0 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8006a88:	2010      	movs	r0, #16
 8006a8a:	f001 ff39 	bl	8008900 <USBD_static_malloc>
 8006a8e:	0001      	movs	r1, r0
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	23a4      	movs	r3, #164	; 0xa4
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	23a4      	movs	r3, #164	; 0xa4
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	58d3      	ldr	r3, [r2, r3]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e006      	b.n	8006ab6 <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	23a4      	movs	r3, #164	; 0xa4
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	58d3      	ldr	r3, [r2, r3]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b002      	add	sp, #8
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	000a      	movs	r2, r1
 8006ac8:	1cfb      	adds	r3, r7, #3
 8006aca:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2181      	movs	r1, #129	; 0x81
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f001 fdc4 	bl	800865e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	23a4      	movs	r3, #164	; 0xa4
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	58d3      	ldr	r3, [r2, r3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	23a4      	movs	r3, #164	; 0xa4
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	58d3      	ldr	r3, [r2, r3]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f001 ff11 	bl	8008918 <USBD_static_free>
    pdev->pClassData = NULL;
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	23a4      	movs	r3, #164	; 0xa4
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	2100      	movs	r1, #0
 8006afe:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b002      	add	sp, #8
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	23a4      	movs	r3, #164	; 0xa4
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	58d3      	ldr	r3, [r2, r3]
 8006b1e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006b20:	231e      	movs	r3, #30
 8006b22:	18fb      	adds	r3, r7, r3
 8006b24:	2200      	movs	r2, #0
 8006b26:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006b2c:	230e      	movs	r3, #14
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	2200      	movs	r2, #0
 8006b32:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b34:	2317      	movs	r3, #23
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	001a      	movs	r2, r3
 8006b42:	2360      	movs	r3, #96	; 0x60
 8006b44:	4013      	ands	r3, r2
 8006b46:	d039      	beq.n	8006bbc <USBD_HID_Setup+0xb0>
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d000      	beq.n	8006b4e <USBD_HID_Setup+0x42>
 8006b4c:	e0d3      	b.n	8006cf6 <USBD_HID_Setup+0x1ea>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d00e      	beq.n	8006b74 <USBD_HID_Setup+0x68>
 8006b56:	dc02      	bgt.n	8006b5e <USBD_HID_Setup+0x52>
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d01b      	beq.n	8006b94 <USBD_HID_Setup+0x88>
 8006b5c:	e022      	b.n	8006ba4 <USBD_HID_Setup+0x98>
 8006b5e:	2b0a      	cmp	r3, #10
 8006b60:	d00f      	beq.n	8006b82 <USBD_HID_Setup+0x76>
 8006b62:	2b0b      	cmp	r3, #11
 8006b64:	d11e      	bne.n	8006ba4 <USBD_HID_Setup+0x98>
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	885b      	ldrh	r3, [r3, #2]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	001a      	movs	r2, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	601a      	str	r2, [r3, #0]
      break;
 8006b72:	e022      	b.n	8006bba <USBD_HID_Setup+0xae>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006b74:	6939      	ldr	r1, [r7, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f001 fa1e 	bl	8007fbc <USBD_CtlSendData>
      break;
 8006b80:	e01b      	b.n	8006bba <USBD_HID_Setup+0xae>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	001a      	movs	r2, r3
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]
      break;
 8006b92:	e012      	b.n	8006bba <USBD_HID_Setup+0xae>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1d19      	adds	r1, r3, #4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f001 fa0d 	bl	8007fbc <USBD_CtlSendData>
      break;
 8006ba2:	e00a      	b.n	8006bba <USBD_HID_Setup+0xae>

    default:
      USBD_CtlError (pdev, req);
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0011      	movs	r1, r2
 8006baa:	0018      	movs	r0, r3
 8006bac:	f001 f987 	bl	8007ebe <USBD_CtlError>
      ret = USBD_FAIL;
 8006bb0:	2317      	movs	r3, #23
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	701a      	strb	r2, [r3, #0]
      break;
 8006bb8:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006bba:	e0a7      	b.n	8006d0c <USBD_HID_Setup+0x200>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b06      	cmp	r3, #6
 8006bc2:	d022      	beq.n	8006c0a <USBD_HID_Setup+0xfe>
 8006bc4:	dc02      	bgt.n	8006bcc <USBD_HID_Setup+0xc0>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <USBD_HID_Setup+0xcc>
 8006bca:	e088      	b.n	8006cde <USBD_HID_Setup+0x1d2>
 8006bcc:	2b0a      	cmp	r3, #10
 8006bce:	d054      	beq.n	8006c7a <USBD_HID_Setup+0x16e>
 8006bd0:	2b0b      	cmp	r3, #11
 8006bd2:	d100      	bne.n	8006bd6 <USBD_HID_Setup+0xca>
 8006bd4:	e06b      	b.n	8006cae <USBD_HID_Setup+0x1a2>
 8006bd6:	e082      	b.n	8006cde <USBD_HID_Setup+0x1d2>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	239d      	movs	r3, #157	; 0x9d
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	5cd3      	ldrb	r3, [r2, r3]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d107      	bne.n	8006bf4 <USBD_HID_Setup+0xe8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006be4:	230e      	movs	r3, #14
 8006be6:	18f9      	adds	r1, r7, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	0018      	movs	r0, r3
 8006bee:	f001 f9e5 	bl	8007fbc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006bf2:	e07f      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>
        USBD_CtlError (pdev, req);
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0011      	movs	r1, r2
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f001 f95f 	bl	8007ebe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c00:	2317      	movs	r3, #23
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	2202      	movs	r2, #2
 8006c06:	701a      	strb	r2, [r3, #0]
      break;
 8006c08:	e074      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>

    case USB_REQ_GET_DESCRIPTOR:
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b22      	cmp	r3, #34	; 0x22
 8006c14:	d10b      	bne.n	8006c2e <USBD_HID_Setup+0x122>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	88db      	ldrh	r3, [r3, #6]
 8006c1a:	221e      	movs	r2, #30
 8006c1c:	18ba      	adds	r2, r7, r2
 8006c1e:	b299      	uxth	r1, r3
 8006c20:	294a      	cmp	r1, #74	; 0x4a
 8006c22:	d900      	bls.n	8006c26 <USBD_HID_Setup+0x11a>
 8006c24:	234a      	movs	r3, #74	; 0x4a
 8006c26:	8013      	strh	r3, [r2, #0]
        pbuf = HID_MOUSE_ReportDesc;
 8006c28:	4b3c      	ldr	r3, [pc, #240]	; (8006d1c <USBD_HID_Setup+0x210>)
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	e01c      	b.n	8006c68 <USBD_HID_Setup+0x15c>
      }
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b21      	cmp	r3, #33	; 0x21
 8006c38:	d10b      	bne.n	8006c52 <USBD_HID_Setup+0x146>
      {
        pbuf = USBD_HID_Desc;
 8006c3a:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <USBD_HID_Setup+0x214>)
 8006c3c:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	88db      	ldrh	r3, [r3, #6]
 8006c42:	221e      	movs	r2, #30
 8006c44:	18ba      	adds	r2, r7, r2
 8006c46:	b299      	uxth	r1, r3
 8006c48:	2909      	cmp	r1, #9
 8006c4a:	d900      	bls.n	8006c4e <USBD_HID_Setup+0x142>
 8006c4c:	2309      	movs	r3, #9
 8006c4e:	8013      	strh	r3, [r2, #0]
 8006c50:	e00a      	b.n	8006c68 <USBD_HID_Setup+0x15c>
      }
      else
      {
        USBD_CtlError (pdev, req);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	0011      	movs	r1, r2
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f001 f930 	bl	8007ebe <USBD_CtlError>
        ret = USBD_FAIL;
 8006c5e:	2317      	movs	r3, #23
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2202      	movs	r2, #2
 8006c64:	701a      	strb	r2, [r3, #0]
        break;
 8006c66:	e045      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>
      }
      USBD_CtlSendData (pdev, pbuf, len);
 8006c68:	231e      	movs	r3, #30
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	881a      	ldrh	r2, [r3, #0]
 8006c6e:	69b9      	ldr	r1, [r7, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f001 f9a2 	bl	8007fbc <USBD_CtlSendData>
      break;
 8006c78:	e03c      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	239d      	movs	r3, #157	; 0x9d
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	5cd3      	ldrb	r3, [r2, r3]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d108      	bne.n	8006c98 <USBD_HID_Setup+0x18c>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	0018      	movs	r0, r3
 8006c92:	f001 f993 	bl	8007fbc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c96:	e02d      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>
        USBD_CtlError (pdev, req);
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0011      	movs	r1, r2
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f001 f90d 	bl	8007ebe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006ca4:	2317      	movs	r3, #23
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	2202      	movs	r2, #2
 8006caa:	701a      	strb	r2, [r3, #0]
      break;
 8006cac:	e022      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	239d      	movs	r3, #157	; 0x9d
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	5cd3      	ldrb	r3, [r2, r3]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d106      	bne.n	8006cc8 <USBD_HID_Setup+0x1bc>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	885b      	ldrh	r3, [r3, #2]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006cc6:	e015      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>
        USBD_CtlError (pdev, req);
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	0011      	movs	r1, r2
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f001 f8f5 	bl	8007ebe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006cd4:	2317      	movs	r3, #23
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	2202      	movs	r2, #2
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	e00a      	b.n	8006cf4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError (pdev, req);
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	0011      	movs	r1, r2
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f001 f8ea 	bl	8007ebe <USBD_CtlError>
      ret = USBD_FAIL;
 8006cea:	2317      	movs	r3, #23
 8006cec:	18fb      	adds	r3, r7, r3
 8006cee:	2202      	movs	r2, #2
 8006cf0:	701a      	strb	r2, [r3, #0]
      break;
 8006cf2:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006cf4:	e00a      	b.n	8006d0c <USBD_HID_Setup+0x200>

  default:
    USBD_CtlError (pdev, req);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f001 f8de 	bl	8007ebe <USBD_CtlError>
    ret = USBD_FAIL;
 8006d02:	2317      	movs	r3, #23
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]
    break;
 8006d0a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006d0c:	2317      	movs	r3, #23
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	781b      	ldrb	r3, [r3, #0]
}
 8006d12:	0018      	movs	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b008      	add	sp, #32
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	200000c8 	.word	0x200000c8
 8006d20:	200000b0 	.word	0x200000b0

08006d24 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	1dbb      	adds	r3, r7, #6
 8006d30:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	23a4      	movs	r3, #164	; 0xa4
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	58d3      	ldr	r3, [r2, r3]
 8006d3a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	239d      	movs	r3, #157	; 0x9d
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d10d      	bne.n	8006d64 <USBD_HID_SendReport+0x40>
  {
    if(hhid->state == HID_IDLE)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	7b1b      	ldrb	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d109      	bne.n	8006d64 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2201      	movs	r2, #1
 8006d54:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	2181      	movs	r1, #129	; 0x81
 8006d60:	f001 fd5e 	bl	8008820 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	0018      	movs	r0, r3
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b006      	add	sp, #24
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgFSDesc);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2222      	movs	r2, #34	; 0x22
 8006d7c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006d7e:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b002      	add	sp, #8
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000044 	.word	0x20000044

08006d8c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgHSDesc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2222      	movs	r2, #34	; 0x22
 8006d98:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006d9a:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000068 	.word	0x20000068

08006da8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2222      	movs	r2, #34	; 0x22
 8006db4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006db6:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8006db8:	0018      	movs	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	2000008c 	.word	0x2000008c

08006dc4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	000a      	movs	r2, r1
 8006dce:	1cfb      	adds	r3, r7, #3
 8006dd0:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	23a4      	movs	r3, #164	; 0xa4
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	58d3      	ldr	r3, [r2, r3]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b002      	add	sp, #8
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	220a      	movs	r2, #10
 8006df4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006df6:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200000bc 	.word	0x200000bc

08006e04 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	1dfb      	adds	r3, r7, #7
 8006e10:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e020      	b.n	8006e5e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	23a3      	movs	r3, #163	; 0xa3
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	58d3      	ldr	r3, [r2, r3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	23a3      	movs	r3, #163	; 0xa3
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	2100      	movs	r1, #0
 8006e30:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	23a2      	movs	r3, #162	; 0xa2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	239d      	movs	r3, #157	; 0x9d
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	2101      	movs	r1, #1
 8006e4a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	1dfa      	adds	r2, r7, #7
 8006e50:	7812      	ldrb	r2, [r2, #0]
 8006e52:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f001 fb54 	bl	8008504 <USBD_LL_Init>

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b004      	add	sp, #16
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006e70:	230f      	movs	r3, #15
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	23a3      	movs	r3, #163	; 0xa3
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006e88:	230f      	movs	r3, #15
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e003      	b.n	8006e9a <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e92:	230f      	movs	r3, #15
 8006e94:	18fb      	adds	r3, r7, r3
 8006e96:	2202      	movs	r2, #2
 8006e98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006e9a:	230f      	movs	r3, #15
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b004      	add	sp, #16
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f001 fb76 	bl	80085a4 <USBD_LL_Start>

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	0018      	movs	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b002      	add	sp, #8
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	0018      	movs	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	000a      	movs	r2, r1
 8006ede:	1cfb      	adds	r3, r7, #3
 8006ee0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006ee2:	230f      	movs	r3, #15
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	23a3      	movs	r3, #163	; 0xa3
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	58d3      	ldr	r3, [r2, r3]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00f      	beq.n	8006f16 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	23a3      	movs	r3, #163	; 0xa3
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	58d3      	ldr	r3, [r2, r3]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	1cfa      	adds	r2, r7, #3
 8006f02:	7811      	ldrb	r1, [r2, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	0010      	movs	r0, r2
 8006f08:	4798      	blx	r3
 8006f0a:	1e03      	subs	r3, r0, #0
 8006f0c:	d103      	bne.n	8006f16 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8006f0e:	230f      	movs	r3, #15
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006f16:	230f      	movs	r3, #15
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	781b      	ldrb	r3, [r3, #0]
}
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b004      	add	sp, #16
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	000a      	movs	r2, r1
 8006f2e:	1cfb      	adds	r3, r7, #3
 8006f30:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	23a3      	movs	r3, #163	; 0xa3
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	58d3      	ldr	r3, [r2, r3]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	1cfa      	adds	r2, r7, #3
 8006f3e:	7811      	ldrb	r1, [r2, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	0010      	movs	r0, r2
 8006f44:	4798      	blx	r3
  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b002      	add	sp, #8
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	22a0      	movs	r2, #160	; 0xa0
 8006f5e:	0092      	lsls	r2, r2, #2
 8006f60:	4694      	mov	ip, r2
 8006f62:	4463      	add	r3, ip
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	0011      	movs	r1, r2
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f000 ff6d 	bl	8007e48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	239b      	movs	r3, #155	; 0x9b
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	2101      	movs	r1, #1
 8006f76:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a22      	ldr	r2, [pc, #136]	; (8007004 <USBD_LL_SetupStage+0xb4>)
 8006f7c:	5a9b      	ldrh	r3, [r3, r2]
 8006f7e:	0019      	movs	r1, r3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	239c      	movs	r3, #156	; 0x9c
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	23a0      	movs	r3, #160	; 0xa0
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	5cd3      	ldrb	r3, [r2, r3]
 8006f90:	001a      	movs	r2, r3
 8006f92:	231f      	movs	r3, #31
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d00d      	beq.n	8006fb6 <USBD_LL_SetupStage+0x66>
 8006f9a:	d302      	bcc.n	8006fa2 <USBD_LL_SetupStage+0x52>
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d014      	beq.n	8006fca <USBD_LL_SetupStage+0x7a>
 8006fa0:	e01d      	b.n	8006fde <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	22a0      	movs	r2, #160	; 0xa0
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	189a      	adds	r2, r3, r2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	0011      	movs	r1, r2
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f000 fa0a 	bl	80073c8 <USBD_StdDevReq>
    break;
 8006fb4:	e020      	b.n	8006ff8 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	22a0      	movs	r2, #160	; 0xa0
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	189a      	adds	r2, r3, r2
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0011      	movs	r1, r2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fa72 	bl	80074ac <USBD_StdItfReq>
    break;
 8006fc8:	e016      	b.n	8006ff8 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	22a0      	movs	r2, #160	; 0xa0
 8006fce:	0092      	lsls	r2, r2, #2
 8006fd0:	189a      	adds	r2, r3, r2
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	0011      	movs	r1, r2
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 fabf 	bl	800755a <USBD_StdEPReq>
    break;
 8006fdc:	e00c      	b.n	8006ff8 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	23a0      	movs	r3, #160	; 0xa0
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	5cd3      	ldrb	r3, [r2, r3]
 8006fe6:	227f      	movs	r2, #127	; 0x7f
 8006fe8:	4393      	bics	r3, r2
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	0011      	movs	r1, r2
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f001 fb60 	bl	80086b6 <USBD_LL_StallEP>
    break;
 8006ff6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b002      	add	sp, #8
 8007000:	bd80      	pop	{r7, pc}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	00000286 	.word	0x00000286

08007008 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	200b      	movs	r0, #11
 8007014:	183b      	adds	r3, r7, r0
 8007016:	1c0a      	adds	r2, r1, #0
 8007018:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800701a:	183b      	adds	r3, r7, r0
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d154      	bne.n	80070cc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3341      	adds	r3, #65	; 0x41
 8007026:	33ff      	adds	r3, #255	; 0xff
 8007028:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	239b      	movs	r3, #155	; 0x9b
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	58d3      	ldr	r3, [r2, r3]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d139      	bne.n	80070aa <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	429a      	cmp	r2, r3
 8007040:	d919      	bls.n	8007076 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	1ad2      	subs	r2, r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007058:	429a      	cmp	r2, r3
 800705a:	d203      	bcs.n	8007064 <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007060:	b29b      	uxth	r3, r3
 8007062:	e002      	b.n	800706a <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007068:	b29b      	uxth	r3, r3
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	001a      	movs	r2, r3
 8007070:	f000 ffd7 	bl	8008022 <USBD_CtlContinueRx>
 8007074:	e045      	b.n	8007102 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	23a3      	movs	r3, #163	; 0xa3
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	58d3      	ldr	r3, [r2, r3]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	239d      	movs	r3, #157	; 0x9d
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800708c:	2b03      	cmp	r3, #3
 800708e:	d107      	bne.n	80070a0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	23a3      	movs	r3, #163	; 0xa3
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	58d3      	ldr	r3, [r2, r3]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	0010      	movs	r0, r2
 800709e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 ffd0 	bl	8008048 <USBD_CtlSendStatus>
 80070a8:	e02b      	b.n	8007102 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	239b      	movs	r3, #155	; 0x9b
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	58d3      	ldr	r3, [r2, r3]
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	d125      	bne.n	8007102 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	239b      	movs	r3, #155	; 0x9b
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	2100      	movs	r1, #0
 80070be:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2100      	movs	r1, #0
 80070c4:	0018      	movs	r0, r3
 80070c6:	f001 faf6 	bl	80086b6 <USBD_LL_StallEP>
 80070ca:	e01a      	b.n	8007102 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	23a3      	movs	r3, #163	; 0xa3
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	58d3      	ldr	r3, [r2, r3]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d011      	beq.n	80070fe <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	239d      	movs	r3, #157	; 0x9d
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d10b      	bne.n	80070fe <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	23a3      	movs	r3, #163	; 0xa3
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	58d3      	ldr	r3, [r2, r3]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	220b      	movs	r2, #11
 80070f2:	18ba      	adds	r2, r7, r2
 80070f4:	7811      	ldrb	r1, [r2, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	0010      	movs	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	e001      	b.n	8007102 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070fe:	2302      	movs	r3, #2
 8007100:	e000      	b.n	8007104 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	0018      	movs	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	b006      	add	sp, #24
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	200b      	movs	r0, #11
 8007118:	183b      	adds	r3, r7, r0
 800711a:	1c0a      	adds	r2, r1, #0
 800711c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800711e:	183b      	adds	r3, r7, r0
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d000      	beq.n	8007128 <USBD_LL_DataInStage+0x1c>
 8007126:	e08e      	b.n	8007246 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3314      	adds	r3, #20
 800712c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	239b      	movs	r3, #155	; 0x9b
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	58d3      	ldr	r3, [r2, r3]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d164      	bne.n	8007204 <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	429a      	cmp	r2, r3
 8007144:	d915      	bls.n	8007172 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	b29a      	uxth	r2, r3
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	0018      	movs	r0, r3
 8007160:	f000 ff4c 	bl	8007ffc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	f001 fb90 	bl	8008890 <USBD_LL_PrepareReceive>
 8007170:	e059      	b.n	8007226 <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	0019      	movs	r1, r3
 800717c:	0010      	movs	r0, r2
 800717e:	f7f9 f849 	bl	8000214 <__aeabi_uidivmod>
 8007182:	1e0b      	subs	r3, r1, #0
 8007184:	d11f      	bne.n	80071c6 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800718e:	429a      	cmp	r2, r3
 8007190:	d319      	bcc.n	80071c6 <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	239c      	movs	r3, #156	; 0x9c
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800719e:	429a      	cmp	r2, r3
 80071a0:	d211      	bcs.n	80071c6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	0018      	movs	r0, r3
 80071aa:	f000 ff27 	bl	8007ffc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	239c      	movs	r3, #156	; 0x9c
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	2100      	movs	r1, #0
 80071b6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	2300      	movs	r3, #0
 80071bc:	2200      	movs	r2, #0
 80071be:	2100      	movs	r1, #0
 80071c0:	f001 fb66 	bl	8008890 <USBD_LL_PrepareReceive>
 80071c4:	e02f      	b.n	8007226 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	23a3      	movs	r3, #163	; 0xa3
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	58d3      	ldr	r3, [r2, r3]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00d      	beq.n	80071f0 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	239d      	movs	r3, #157	; 0x9d
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d107      	bne.n	80071f0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	23a3      	movs	r3, #163	; 0xa3
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	58d3      	ldr	r3, [r2, r3]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	0010      	movs	r0, r2
 80071ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2180      	movs	r1, #128	; 0x80
 80071f4:	0018      	movs	r0, r3
 80071f6:	f001 fa5e 	bl	80086b6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 ff37 	bl	8008070 <USBD_CtlReceiveStatus>
 8007202:	e010      	b.n	8007226 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	239b      	movs	r3, #155	; 0x9b
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	58d3      	ldr	r3, [r2, r3]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d005      	beq.n	800721c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	239b      	movs	r3, #155	; 0x9b
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	0018      	movs	r0, r3
 8007222:	f001 fa48 	bl	80086b6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	239e      	movs	r3, #158	; 0x9e
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	5cd3      	ldrb	r3, [r2, r3]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d124      	bne.n	800727c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	0018      	movs	r0, r3
 8007236:	f7ff fe44 	bl	8006ec2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	239e      	movs	r3, #158	; 0x9e
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	2100      	movs	r1, #0
 8007242:	54d1      	strb	r1, [r2, r3]
 8007244:	e01a      	b.n	800727c <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	23a3      	movs	r3, #163	; 0xa3
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	58d3      	ldr	r3, [r2, r3]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d011      	beq.n	8007278 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	239d      	movs	r3, #157	; 0x9d
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 800725c:	2b03      	cmp	r3, #3
 800725e:	d10b      	bne.n	8007278 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	23a3      	movs	r3, #163	; 0xa3
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	58d3      	ldr	r3, [r2, r3]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	220b      	movs	r2, #11
 800726c:	18ba      	adds	r2, r7, r2
 800726e:	7811      	ldrb	r1, [r2, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	0010      	movs	r0, r2
 8007274:	4798      	blx	r3
 8007276:	e001      	b.n	800727c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007278:	2302      	movs	r3, #2
 800727a:	e000      	b.n	800727e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b006      	add	sp, #24
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	2200      	movs	r2, #0
 8007294:	2100      	movs	r1, #0
 8007296:	f001 f9ab 	bl	80085f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	23a2      	movs	r3, #162	; 0xa2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	2101      	movs	r1, #1
 80072a2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	23a8      	movs	r3, #168	; 0xa8
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	2140      	movs	r1, #64	; 0x40
 80072ac:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	2340      	movs	r3, #64	; 0x40
 80072b2:	2200      	movs	r2, #0
 80072b4:	2180      	movs	r1, #128	; 0x80
 80072b6:	f001 f99b 	bl	80085f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	239d      	movs	r3, #157	; 0x9d
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	2101      	movs	r1, #1
 80072ce:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	239b      	movs	r3, #155	; 0x9b
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	2100      	movs	r1, #0
 80072d8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	239f      	movs	r3, #159	; 0x9f
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	2100      	movs	r1, #0
 80072e8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	23a4      	movs	r3, #164	; 0xa4
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	58d3      	ldr	r3, [r2, r3]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	23a3      	movs	r3, #163	; 0xa3
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	58d3      	ldr	r3, [r2, r3]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	b2d9      	uxtb	r1, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	0018      	movs	r0, r3
 800730a:	4790      	blx	r2
  }

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	b002      	add	sp, #8
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	000a      	movs	r2, r1
 8007320:	1cfb      	adds	r3, r7, #3
 8007322:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	1cfa      	adds	r2, r7, #3
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	239d      	movs	r3, #157	; 0x9d
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	5cd1      	ldrb	r1, [r2, r3]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a06      	ldr	r2, [pc, #24]	; (8007364 <USBD_LL_Suspend+0x2c>)
 800734c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	239d      	movs	r3, #157	; 0x9d
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	2104      	movs	r1, #4
 8007356:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	b002      	add	sp, #8
 8007360:	bd80      	pop	{r7, pc}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	00000275 	.word	0x00000275

08007368 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a05      	ldr	r2, [pc, #20]	; (8007388 <USBD_LL_Resume+0x20>)
 8007374:	5c99      	ldrb	r1, [r3, r2]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	239d      	movs	r3, #157	; 0x9d
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	0018      	movs	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	b002      	add	sp, #8
 8007386:	bd80      	pop	{r7, pc}
 8007388:	00000275 	.word	0x00000275

0800738c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	239d      	movs	r3, #157	; 0x9d
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	5cd3      	ldrb	r3, [r2, r3]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d10e      	bne.n	80073be <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	23a3      	movs	r3, #163	; 0xa3
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	58d3      	ldr	r3, [r2, r3]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	23a3      	movs	r3, #163	; 0xa3
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	58d3      	ldr	r3, [r2, r3]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	0010      	movs	r0, r2
 80073bc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b002      	add	sp, #8
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	230f      	movs	r3, #15
 80073d4:	18fb      	adds	r3, r7, r3
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	001a      	movs	r2, r3
 80073e0:	2360      	movs	r3, #96	; 0x60
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d004      	beq.n	80073f2 <USBD_StdDevReq+0x2a>
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d002      	beq.n	80073f2 <USBD_StdDevReq+0x2a>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <USBD_StdDevReq+0x3e>
 80073f0:	e04b      	b.n	800748a <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	23a3      	movs	r3, #163	; 0xa3
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	58d3      	ldr	r3, [r2, r3]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	0010      	movs	r0, r2
 8007402:	4798      	blx	r3
    break;
 8007404:	e048      	b.n	8007498 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b09      	cmp	r3, #9
 800740c:	d835      	bhi.n	800747a <USBD_StdDevReq+0xb2>
 800740e:	009a      	lsls	r2, r3, #2
 8007410:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <USBD_StdDevReq+0xe0>)
 8007412:	18d3      	adds	r3, r2, r3
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	0011      	movs	r1, r2
 800741e:	0018      	movs	r0, r3
 8007420:	f000 fa58 	bl	80078d4 <USBD_GetDescriptor>
      break;
 8007424:	e030      	b.n	8007488 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	0011      	movs	r1, r2
 800742c:	0018      	movs	r0, r3
 800742e:	f000 fb63 	bl	8007af8 <USBD_SetAddress>
      break;
 8007432:	e029      	b.n	8007488 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	0011      	movs	r1, r2
 800743a:	0018      	movs	r0, r3
 800743c:	f000 fbb0 	bl	8007ba0 <USBD_SetConfig>
      break;
 8007440:	e022      	b.n	8007488 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0011      	movs	r1, r2
 8007448:	0018      	movs	r0, r3
 800744a:	f000 fc4d 	bl	8007ce8 <USBD_GetConfig>
      break;
 800744e:	e01b      	b.n	8007488 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	0011      	movs	r1, r2
 8007456:	0018      	movs	r0, r3
 8007458:	f000 fc80 	bl	8007d5c <USBD_GetStatus>
      break;
 800745c:	e014      	b.n	8007488 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	0011      	movs	r1, r2
 8007464:	0018      	movs	r0, r3
 8007466:	f000 fcb3 	bl	8007dd0 <USBD_SetFeature>
      break;
 800746a:	e00d      	b.n	8007488 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	0011      	movs	r1, r2
 8007472:	0018      	movs	r0, r3
 8007474:	f000 fcc2 	bl	8007dfc <USBD_ClrFeature>
      break;
 8007478:	e006      	b.n	8007488 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	0011      	movs	r1, r2
 8007480:	0018      	movs	r0, r3
 8007482:	f000 fd1c 	bl	8007ebe <USBD_CtlError>
      break;
 8007486:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8007488:	e006      	b.n	8007498 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	0011      	movs	r1, r2
 8007490:	0018      	movs	r0, r3
 8007492:	f000 fd14 	bl	8007ebe <USBD_CtlError>
    break;
 8007496:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007498:	230f      	movs	r3, #15
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	781b      	ldrb	r3, [r3, #0]
}
 800749e:	0018      	movs	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	b004      	add	sp, #16
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	08008ac8 	.word	0x08008ac8

080074ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b6:	230f      	movs	r3, #15
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	001a      	movs	r2, r3
 80074c4:	2360      	movs	r3, #96	; 0x60
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d003      	beq.n	80074d4 <USBD_StdItfReq+0x28>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d001      	beq.n	80074d4 <USBD_StdItfReq+0x28>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d136      	bne.n	8007542 <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	239d      	movs	r3, #157	; 0x9d
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	5cd3      	ldrb	r3, [r2, r3]
 80074dc:	3b01      	subs	r3, #1
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d826      	bhi.n	8007530 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	889b      	ldrh	r3, [r3, #4]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d81a      	bhi.n	8007522 <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	23a3      	movs	r3, #163	; 0xa3
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	58d3      	ldr	r3, [r2, r3]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	220f      	movs	r2, #15
 80074f8:	18bc      	adds	r4, r7, r2
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	0010      	movs	r0, r2
 8007500:	4798      	blx	r3
 8007502:	0003      	movs	r3, r0
 8007504:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	88db      	ldrh	r3, [r3, #6]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d117      	bne.n	800753e <USBD_StdItfReq+0x92>
 800750e:	230f      	movs	r3, #15
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d112      	bne.n	800753e <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	0018      	movs	r0, r3
 800751c:	f000 fd94 	bl	8008048 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007520:	e00d      	b.n	800753e <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0011      	movs	r1, r2
 8007528:	0018      	movs	r0, r3
 800752a:	f000 fcc8 	bl	8007ebe <USBD_CtlError>
      break;
 800752e:	e006      	b.n	800753e <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0011      	movs	r1, r2
 8007536:	0018      	movs	r0, r3
 8007538:	f000 fcc1 	bl	8007ebe <USBD_CtlError>
      break;
 800753c:	e000      	b.n	8007540 <USBD_StdItfReq+0x94>
      break;
 800753e:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8007540:	e006      	b.n	8007550 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	0011      	movs	r1, r2
 8007548:	0018      	movs	r0, r3
 800754a:	f000 fcb8 	bl	8007ebe <USBD_CtlError>
    break;
 800754e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	0018      	movs	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	b005      	add	sp, #20
 8007558:	bd90      	pop	{r4, r7, pc}

0800755a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800755a:	b5b0      	push	{r4, r5, r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007564:	230f      	movs	r3, #15
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	889a      	ldrh	r2, [r3, #4]
 8007570:	230e      	movs	r3, #14
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	001a      	movs	r2, r3
 800757c:	2360      	movs	r3, #96	; 0x60
 800757e:	4013      	ands	r3, r2
 8007580:	2b20      	cmp	r3, #32
 8007582:	d004      	beq.n	800758e <USBD_StdEPReq+0x34>
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d002      	beq.n	800758e <USBD_StdEPReq+0x34>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <USBD_StdEPReq+0x48>
 800758c:	e193      	b.n	80078b6 <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	23a3      	movs	r3, #163	; 0xa3
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	58d3      	ldr	r3, [r2, r3]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	0010      	movs	r0, r2
 800759e:	4798      	blx	r3
    break;
 80075a0:	e190      	b.n	80078c4 <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	001a      	movs	r2, r3
 80075a8:	2360      	movs	r3, #96	; 0x60
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d10f      	bne.n	80075d0 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	23a3      	movs	r3, #163	; 0xa3
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	58d3      	ldr	r3, [r2, r3]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	250f      	movs	r5, #15
 80075bc:	197c      	adds	r4, r7, r5
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	0010      	movs	r0, r2
 80075c4:	4798      	blx	r3
 80075c6:	0003      	movs	r3, r0
 80075c8:	7023      	strb	r3, [r4, #0]

      return ret;
 80075ca:	197b      	adds	r3, r7, r5
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	e17c      	b.n	80078ca <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d054      	beq.n	8007682 <USBD_StdEPReq+0x128>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d003      	beq.n	80075e4 <USBD_StdEPReq+0x8a>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d100      	bne.n	80075e2 <USBD_StdEPReq+0x88>
 80075e0:	e097      	b.n	8007712 <USBD_StdEPReq+0x1b8>
 80075e2:	e160      	b.n	80078a6 <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	239d      	movs	r3, #157	; 0x9d
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	5cd3      	ldrb	r3, [r2, r3]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d002      	beq.n	80075f6 <USBD_StdEPReq+0x9c>
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d01f      	beq.n	8007634 <USBD_StdEPReq+0xda>
 80075f4:	e03d      	b.n	8007672 <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f6:	230e      	movs	r3, #14
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d012      	beq.n	8007626 <USBD_StdEPReq+0xcc>
 8007600:	230e      	movs	r3, #14
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d00d      	beq.n	8007626 <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800760a:	230e      	movs	r3, #14
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	0011      	movs	r1, r2
 8007614:	0018      	movs	r0, r3
 8007616:	f001 f84e 	bl	80086b6 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2180      	movs	r1, #128	; 0x80
 800761e:	0018      	movs	r0, r3
 8007620:	f001 f849 	bl	80086b6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007624:	e02c      	b.n	8007680 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0011      	movs	r1, r2
 800762c:	0018      	movs	r0, r3
 800762e:	f000 fc46 	bl	8007ebe <USBD_CtlError>
        break;
 8007632:	e025      	b.n	8007680 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d115      	bne.n	8007668 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800763c:	230e      	movs	r3, #14
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <USBD_StdEPReq+0x10e>
 8007646:	230e      	movs	r3, #14
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d00b      	beq.n	8007668 <USBD_StdEPReq+0x10e>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	88db      	ldrh	r3, [r3, #6]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007658:	230e      	movs	r3, #14
 800765a:	18fb      	adds	r3, r7, r3
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	0011      	movs	r1, r2
 8007662:	0018      	movs	r0, r3
 8007664:	f001 f827 	bl	80086b6 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	0018      	movs	r0, r3
 800766c:	f000 fcec 	bl	8008048 <USBD_CtlSendStatus>

        break;
 8007670:	e006      	b.n	8007680 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	0011      	movs	r1, r2
 8007678:	0018      	movs	r0, r3
 800767a:	f000 fc20 	bl	8007ebe <USBD_CtlError>
        break;
 800767e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007680:	e118      	b.n	80078b4 <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	239d      	movs	r3, #157	; 0x9d
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	5cd3      	ldrb	r3, [r2, r3]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d002      	beq.n	8007694 <USBD_StdEPReq+0x13a>
 800768e:	2b03      	cmp	r3, #3
 8007690:	d01f      	beq.n	80076d2 <USBD_StdEPReq+0x178>
 8007692:	e035      	b.n	8007700 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007694:	230e      	movs	r3, #14
 8007696:	18fb      	adds	r3, r7, r3
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d012      	beq.n	80076c4 <USBD_StdEPReq+0x16a>
 800769e:	230e      	movs	r3, #14
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b80      	cmp	r3, #128	; 0x80
 80076a6:	d00d      	beq.n	80076c4 <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80076a8:	230e      	movs	r3, #14
 80076aa:	18fb      	adds	r3, r7, r3
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 ffff 	bl	80086b6 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	0018      	movs	r0, r3
 80076be:	f000 fffa 	bl	80086b6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076c2:	e025      	b.n	8007710 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 fbf7 	bl	8007ebe <USBD_CtlError>
        break;
 80076d0:	e01e      	b.n	8007710 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d119      	bne.n	800770e <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80076da:	230e      	movs	r3, #14
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	227f      	movs	r2, #127	; 0x7f
 80076e2:	4013      	ands	r3, r2
 80076e4:	d007      	beq.n	80076f6 <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80076e6:	230e      	movs	r3, #14
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	0011      	movs	r1, r2
 80076f0:	0018      	movs	r0, r3
 80076f2:	f001 f80c 	bl	800870e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 fca5 	bl	8008048 <USBD_CtlSendStatus>
        }
        break;
 80076fe:	e006      	b.n	800770e <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	0011      	movs	r1, r2
 8007706:	0018      	movs	r0, r3
 8007708:	f000 fbd9 	bl	8007ebe <USBD_CtlError>
        break;
 800770c:	e000      	b.n	8007710 <USBD_StdEPReq+0x1b6>
        break;
 800770e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007710:	e0d0      	b.n	80078b4 <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	239d      	movs	r3, #157	; 0x9d
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	5cd3      	ldrb	r3, [r2, r3]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d002      	beq.n	8007724 <USBD_StdEPReq+0x1ca>
 800771e:	2b03      	cmp	r3, #3
 8007720:	d03d      	beq.n	800779e <USBD_StdEPReq+0x244>
 8007722:	e0b8      	b.n	8007896 <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007724:	230e      	movs	r3, #14
 8007726:	18fb      	adds	r3, r7, r3
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <USBD_StdEPReq+0x1ec>
 800772e:	230e      	movs	r3, #14
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d006      	beq.n	8007746 <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	0011      	movs	r1, r2
 800773e:	0018      	movs	r0, r3
 8007740:	f000 fbbd 	bl	8007ebe <USBD_CtlError>
          break;
 8007744:	e0ae      	b.n	80078a4 <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007746:	230e      	movs	r3, #14
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b25b      	sxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	da0d      	bge.n	800776e <USBD_StdEPReq+0x214>
 8007752:	230e      	movs	r3, #14
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	227f      	movs	r2, #127	; 0x7f
 800775a:	401a      	ands	r2, r3
 800775c:	0013      	movs	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	189b      	adds	r3, r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3310      	adds	r3, #16
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	18d3      	adds	r3, r2, r3
 800776a:	3304      	adds	r3, #4
 800776c:	e00c      	b.n	8007788 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 800776e:	230e      	movs	r3, #14
 8007770:	18fb      	adds	r3, r7, r3
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	227f      	movs	r2, #127	; 0x7f
 8007776:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007778:	0013      	movs	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	189b      	adds	r3, r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	3341      	adds	r3, #65	; 0x41
 8007782:	33ff      	adds	r3, #255	; 0xff
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	18d3      	adds	r3, r2, r3
 8007788:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	0018      	movs	r0, r3
 8007798:	f000 fc10 	bl	8007fbc <USBD_CtlSendData>
          break;
 800779c:	e082      	b.n	80078a4 <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800779e:	230e      	movs	r3, #14
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da15      	bge.n	80077d6 <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077aa:	230e      	movs	r3, #14
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	220f      	movs	r2, #15
 80077b2:	401a      	ands	r2, r3
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	0013      	movs	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	189b      	adds	r3, r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	18cb      	adds	r3, r1, r3
 80077c0:	3318      	adds	r3, #24
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11e      	bne.n	8007806 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	0011      	movs	r1, r2
 80077ce:	0018      	movs	r0, r3
 80077d0:	f000 fb75 	bl	8007ebe <USBD_CtlError>
            break;
 80077d4:	e066      	b.n	80078a4 <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d6:	230e      	movs	r3, #14
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	220f      	movs	r2, #15
 80077de:	401a      	ands	r2, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	23a2      	movs	r3, #162	; 0xa2
 80077e4:	0059      	lsls	r1, r3, #1
 80077e6:	0013      	movs	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	18c3      	adds	r3, r0, r3
 80077f0:	185b      	adds	r3, r3, r1
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f000 fb5d 	bl	8007ebe <USBD_CtlError>
            break;
 8007804:	e04e      	b.n	80078a4 <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007806:	230e      	movs	r3, #14
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b25b      	sxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	da0d      	bge.n	800782e <USBD_StdEPReq+0x2d4>
 8007812:	230e      	movs	r3, #14
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	227f      	movs	r2, #127	; 0x7f
 800781a:	401a      	ands	r2, r3
 800781c:	0013      	movs	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	189b      	adds	r3, r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3310      	adds	r3, #16
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	18d3      	adds	r3, r2, r3
 800782a:	3304      	adds	r3, #4
 800782c:	e00c      	b.n	8007848 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 800782e:	230e      	movs	r3, #14
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	227f      	movs	r2, #127	; 0x7f
 8007836:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007838:	0013      	movs	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	189b      	adds	r3, r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	3341      	adds	r3, #65	; 0x41
 8007842:	33ff      	adds	r3, #255	; 0xff
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	18d3      	adds	r3, r2, r3
 8007848:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800784a:	230e      	movs	r3, #14
 800784c:	18fb      	adds	r3, r7, r3
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <USBD_StdEPReq+0x304>
 8007854:	230e      	movs	r3, #14
 8007856:	18fb      	adds	r3, r7, r3
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d103      	bne.n	8007866 <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e010      	b.n	8007888 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007866:	230e      	movs	r3, #14
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	781a      	ldrb	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	0011      	movs	r1, r2
 8007870:	0018      	movs	r0, r3
 8007872:	f000 ff78 	bl	8008766 <USBD_LL_IsStallEP>
 8007876:	1e03      	subs	r3, r0, #0
 8007878:	d003      	beq.n	8007882 <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	e002      	b.n	8007888 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	0018      	movs	r0, r3
 8007890:	f000 fb94 	bl	8007fbc <USBD_CtlSendData>
          break;
 8007894:	e006      	b.n	80078a4 <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	0011      	movs	r1, r2
 800789c:	0018      	movs	r0, r3
 800789e:	f000 fb0e 	bl	8007ebe <USBD_CtlError>
        break;
 80078a2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80078a4:	e006      	b.n	80078b4 <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0011      	movs	r1, r2
 80078ac:	0018      	movs	r0, r3
 80078ae:	f000 fb06 	bl	8007ebe <USBD_CtlError>
      break;
 80078b2:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80078b4:	e006      	b.n	80078c4 <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	0011      	movs	r1, r2
 80078bc:	0018      	movs	r0, r3
 80078be:	f000 fafe 	bl	8007ebe <USBD_CtlError>
    break;
 80078c2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80078c4:	230f      	movs	r3, #15
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	781b      	ldrb	r3, [r3, #0]
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b004      	add	sp, #16
 80078d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080078d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	885b      	ldrh	r3, [r3, #2]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b07      	cmp	r3, #7
 80078e8:	d900      	bls.n	80078ec <USBD_GetDescriptor+0x18>
 80078ea:	e0ce      	b.n	8007a8a <USBD_GetDescriptor+0x1b6>
 80078ec:	009a      	lsls	r2, r3, #2
 80078ee:	4b80      	ldr	r3, [pc, #512]	; (8007af0 <USBD_GetDescriptor+0x21c>)
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	23a2      	movs	r3, #162	; 0xa2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	58d3      	ldr	r3, [r2, r3]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	210a      	movs	r1, #10
 8007906:	1879      	adds	r1, r7, r1
 8007908:	0010      	movs	r0, r2
 800790a:	4798      	blx	r3
 800790c:	0003      	movs	r3, r0
 800790e:	60fb      	str	r3, [r7, #12]
    break;
 8007910:	e0c2      	b.n	8007a98 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10f      	bne.n	800793a <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	23a3      	movs	r3, #163	; 0xa3
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	58d3      	ldr	r3, [r2, r3]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	220a      	movs	r2, #10
 8007926:	18ba      	adds	r2, r7, r2
 8007928:	0010      	movs	r0, r2
 800792a:	4798      	blx	r3
 800792c:	0003      	movs	r3, r0
 800792e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	2202      	movs	r2, #2
 8007936:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007938:	e0ae      	b.n	8007a98 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	23a3      	movs	r3, #163	; 0xa3
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	58d3      	ldr	r3, [r2, r3]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	220a      	movs	r2, #10
 8007946:	18ba      	adds	r2, r7, r2
 8007948:	0010      	movs	r0, r2
 800794a:	4798      	blx	r3
 800794c:	0003      	movs	r3, r0
 800794e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	2202      	movs	r2, #2
 8007956:	701a      	strb	r2, [r3, #0]
    break;
 8007958:	e09e      	b.n	8007a98 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b05      	cmp	r3, #5
 8007962:	d858      	bhi.n	8007a16 <USBD_GetDescriptor+0x142>
 8007964:	009a      	lsls	r2, r3, #2
 8007966:	4b63      	ldr	r3, [pc, #396]	; (8007af4 <USBD_GetDescriptor+0x220>)
 8007968:	18d3      	adds	r3, r2, r3
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	23a2      	movs	r3, #162	; 0xa2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	58d3      	ldr	r3, [r2, r3]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	210a      	movs	r1, #10
 800797e:	1879      	adds	r1, r7, r1
 8007980:	0010      	movs	r0, r2
 8007982:	4798      	blx	r3
 8007984:	0003      	movs	r3, r0
 8007986:	60fb      	str	r3, [r7, #12]
      break;
 8007988:	e04c      	b.n	8007a24 <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	23a2      	movs	r3, #162	; 0xa2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	58d3      	ldr	r3, [r2, r3]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	7c12      	ldrb	r2, [r2, #16]
 8007998:	210a      	movs	r1, #10
 800799a:	1879      	adds	r1, r7, r1
 800799c:	0010      	movs	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	0003      	movs	r3, r0
 80079a2:	60fb      	str	r3, [r7, #12]
      break;
 80079a4:	e03e      	b.n	8007a24 <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	23a2      	movs	r3, #162	; 0xa2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	58d3      	ldr	r3, [r2, r3]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	210a      	movs	r1, #10
 80079b6:	1879      	adds	r1, r7, r1
 80079b8:	0010      	movs	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	0003      	movs	r3, r0
 80079be:	60fb      	str	r3, [r7, #12]
      break;
 80079c0:	e030      	b.n	8007a24 <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	23a2      	movs	r3, #162	; 0xa2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	58d3      	ldr	r3, [r2, r3]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	7c12      	ldrb	r2, [r2, #16]
 80079d0:	210a      	movs	r1, #10
 80079d2:	1879      	adds	r1, r7, r1
 80079d4:	0010      	movs	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	0003      	movs	r3, r0
 80079da:	60fb      	str	r3, [r7, #12]
      break;
 80079dc:	e022      	b.n	8007a24 <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	23a2      	movs	r3, #162	; 0xa2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	58d3      	ldr	r3, [r2, r3]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	210a      	movs	r1, #10
 80079ee:	1879      	adds	r1, r7, r1
 80079f0:	0010      	movs	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	0003      	movs	r3, r0
 80079f6:	60fb      	str	r3, [r7, #12]
      break;
 80079f8:	e014      	b.n	8007a24 <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	23a2      	movs	r3, #162	; 0xa2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	58d3      	ldr	r3, [r2, r3]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	210a      	movs	r1, #10
 8007a0a:	1879      	adds	r1, r7, r1
 8007a0c:	0010      	movs	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	0003      	movs	r3, r0
 8007a12:	60fb      	str	r3, [r7, #12]
      break;
 8007a14:	e006      	b.n	8007a24 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	0011      	movs	r1, r2
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 fa4e 	bl	8007ebe <USBD_CtlError>
      return;
 8007a22:	e061      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8007a24:	e038      	b.n	8007a98 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	7c1b      	ldrb	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	23a3      	movs	r3, #163	; 0xa3
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	58d3      	ldr	r3, [r2, r3]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	220a      	movs	r2, #10
 8007a3a:	18ba      	adds	r2, r7, r2
 8007a3c:	0010      	movs	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	0003      	movs	r3, r0
 8007a42:	60fb      	str	r3, [r7, #12]
      break;
 8007a44:	e028      	b.n	8007a98 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	0011      	movs	r1, r2
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 fa36 	bl	8007ebe <USBD_CtlError>
      return;
 8007a52:	e049      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	7c1b      	ldrb	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10f      	bne.n	8007a7c <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	23a3      	movs	r3, #163	; 0xa3
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	58d3      	ldr	r3, [r2, r3]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	220a      	movs	r2, #10
 8007a68:	18ba      	adds	r2, r7, r2
 8007a6a:	0010      	movs	r0, r2
 8007a6c:	4798      	blx	r3
 8007a6e:	0003      	movs	r3, r0
 8007a70:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	2207      	movs	r2, #7
 8007a78:	701a      	strb	r2, [r3, #0]
      break;
 8007a7a:	e00d      	b.n	8007a98 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0011      	movs	r1, r2
 8007a82:	0018      	movs	r0, r3
 8007a84:	f000 fa1b 	bl	8007ebe <USBD_CtlError>
      return;
 8007a88:	e02e      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f000 fa14 	bl	8007ebe <USBD_CtlError>
    return;
 8007a96:	e027      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007a98:	230a      	movs	r3, #10
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01a      	beq.n	8007ad8 <USBD_GetDescriptor+0x204>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88db      	ldrh	r3, [r3, #6]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	88da      	ldrh	r2, [r3, #6]
 8007aae:	230a      	movs	r3, #10
 8007ab0:	18fb      	adds	r3, r7, r3
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	1c18      	adds	r0, r3, #0
 8007ab6:	1c11      	adds	r1, r2, #0
 8007ab8:	b28a      	uxth	r2, r1
 8007aba:	b283      	uxth	r3, r0
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d900      	bls.n	8007ac2 <USBD_GetDescriptor+0x1ee>
 8007ac0:	1c01      	adds	r1, r0, #0
 8007ac2:	b28a      	uxth	r2, r1
 8007ac4:	210a      	movs	r1, #10
 8007ac6:	187b      	adds	r3, r7, r1
 8007ac8:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8007aca:	187b      	adds	r3, r7, r1
 8007acc:	881a      	ldrh	r2, [r3, #0]
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f000 fa72 	bl	8007fbc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	88db      	ldrh	r3, [r3, #6]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f000 fab0 	bl	8008048 <USBD_CtlSendStatus>
  }
}
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b004      	add	sp, #16
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	08008af0 	.word	0x08008af0
 8007af4:	08008b10 	.word	0x08008b10

08007af8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	889b      	ldrh	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d13d      	bne.n	8007b86 <USBD_SetAddress+0x8e>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	88db      	ldrh	r3, [r3, #6]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d139      	bne.n	8007b86 <USBD_SetAddress+0x8e>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	2b7f      	cmp	r3, #127	; 0x7f
 8007b18:	d835      	bhi.n	8007b86 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	230f      	movs	r3, #15
 8007b22:	18fb      	adds	r3, r7, r3
 8007b24:	217f      	movs	r1, #127	; 0x7f
 8007b26:	400a      	ands	r2, r1
 8007b28:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	239d      	movs	r3, #157	; 0x9d
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	5cd3      	ldrb	r3, [r2, r3]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d106      	bne.n	8007b44 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	0011      	movs	r1, r2
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 f9be 	bl	8007ebe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b42:	e026      	b.n	8007b92 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	240f      	movs	r4, #15
 8007b48:	193a      	adds	r2, r7, r4
 8007b4a:	4914      	ldr	r1, [pc, #80]	; (8007b9c <USBD_SetAddress+0xa4>)
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b50:	193b      	adds	r3, r7, r4
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	0011      	movs	r1, r2
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f000 fe35 	bl	80087c8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 fa71 	bl	8008048 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b66:	193b      	adds	r3, r7, r4
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	239d      	movs	r3, #157	; 0x9d
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	2102      	movs	r1, #2
 8007b76:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	e00b      	b.n	8007b92 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	239d      	movs	r3, #157	; 0x9d
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	2101      	movs	r1, #1
 8007b82:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	e005      	b.n	8007b92 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0011      	movs	r1, r2
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 f996 	bl	8007ebe <USBD_CtlError>
  }
}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b005      	add	sp, #20
 8007b98:	bd90      	pop	{r4, r7, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	00000276 	.word	0x00000276

08007ba0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	4b4c      	ldr	r3, [pc, #304]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007bb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bb4:	4b4b      	ldr	r3, [pc, #300]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d906      	bls.n	8007bca <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	0011      	movs	r1, r2
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f000 f97b 	bl	8007ebe <USBD_CtlError>
 8007bc8:	e088      	b.n	8007cdc <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	239d      	movs	r3, #157	; 0x9d
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	5cd3      	ldrb	r3, [r2, r3]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d002      	beq.n	8007bdc <USBD_SetConfig+0x3c>
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d029      	beq.n	8007c2e <USBD_SetConfig+0x8e>
 8007bda:	e071      	b.n	8007cc0 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007bdc:	4b41      	ldr	r3, [pc, #260]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01f      	beq.n	8007c24 <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 8007be4:	4b3f      	ldr	r3, [pc, #252]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	001a      	movs	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	239d      	movs	r3, #157	; 0x9d
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	2103      	movs	r1, #3
 8007bf6:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bf8:	4b3a      	ldr	r3, [pc, #232]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007bfa:	781a      	ldrb	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	0011      	movs	r1, r2
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7ff f967 	bl	8006ed4 <USBD_SetClassConfig>
 8007c06:	0003      	movs	r3, r0
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d106      	bne.n	8007c1a <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0011      	movs	r1, r2
 8007c12:	0018      	movs	r0, r3
 8007c14:	f000 f953 	bl	8007ebe <USBD_CtlError>
          return;
 8007c18:	e060      	b.n	8007cdc <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f000 fa13 	bl	8008048 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007c22:	e05b      	b.n	8007cdc <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	0018      	movs	r0, r3
 8007c28:	f000 fa0e 	bl	8008048 <USBD_CtlSendStatus>
      break;
 8007c2c:	e056      	b.n	8007cdc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d115      	bne.n	8007c62 <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	239d      	movs	r3, #157	; 0x9d
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8007c40:	4b28      	ldr	r3, [pc, #160]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	001a      	movs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c4a:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0011      	movs	r1, r2
 8007c52:	0018      	movs	r0, r3
 8007c54:	f7ff f966 	bl	8006f24 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f000 f9f4 	bl	8008048 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007c60:	e03c      	b.n	8007cdc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c62:	4b20      	ldr	r3, [pc, #128]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	001a      	movs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d022      	beq.n	8007cb6 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	0011      	movs	r1, r2
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f7ff f952 	bl	8006f24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c80:	4b18      	ldr	r3, [pc, #96]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	001a      	movs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c8a:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	0011      	movs	r1, r2
 8007c92:	0018      	movs	r0, r3
 8007c94:	f7ff f91e 	bl	8006ed4 <USBD_SetClassConfig>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d106      	bne.n	8007cac <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	0011      	movs	r1, r2
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f000 f90a 	bl	8007ebe <USBD_CtlError>
          return;
 8007caa:	e017      	b.n	8007cdc <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f000 f9ca 	bl	8008048 <USBD_CtlSendStatus>
      break;
 8007cb4:	e012      	b.n	8007cdc <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 f9c5 	bl	8008048 <USBD_CtlSendStatus>
      break;
 8007cbe:	e00d      	b.n	8007cdc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0011      	movs	r1, r2
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	f000 f8f9 	bl	8007ebe <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <USBD_SetConfig+0x144>)
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	0011      	movs	r1, r2
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f7ff f925 	bl	8006f24 <USBD_ClrClassConfig>
      break;
 8007cda:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b002      	add	sp, #8
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	20000180 	.word	0x20000180

08007ce8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	88db      	ldrh	r3, [r3, #6]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d006      	beq.n	8007d08 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0011      	movs	r1, r2
 8007d00:	0018      	movs	r0, r3
 8007d02:	f000 f8dc 	bl	8007ebe <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007d06:	e025      	b.n	8007d54 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	239d      	movs	r3, #157	; 0x9d
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	5cd3      	ldrb	r3, [r2, r3]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	db18      	blt.n	8007d46 <USBD_GetConfig+0x5e>
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	dd02      	ble.n	8007d1e <USBD_GetConfig+0x36>
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d00c      	beq.n	8007d36 <USBD_GetConfig+0x4e>
 8007d1c:	e013      	b.n	8007d46 <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3308      	adds	r3, #8
 8007d28:	0019      	movs	r1, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f000 f944 	bl	8007fbc <USBD_CtlSendData>
      break;
 8007d34:	e00e      	b.n	8007d54 <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	1d19      	adds	r1, r3, #4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f000 f93c 	bl	8007fbc <USBD_CtlSendData>
      break;
 8007d44:	e006      	b.n	8007d54 <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	0011      	movs	r1, r2
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 f8b6 	bl	8007ebe <USBD_CtlError>
      break;
 8007d52:	46c0      	nop			; (mov r8, r8)
}
 8007d54:	46c0      	nop			; (mov r8, r8)
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b002      	add	sp, #8
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	239d      	movs	r3, #157	; 0x9d
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	5cd3      	ldrb	r3, [r2, r3]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d822      	bhi.n	8007dba <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d006      	beq.n	8007d8a <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	0011      	movs	r1, r2
 8007d82:	0018      	movs	r0, r3
 8007d84:	f000 f89b 	bl	8007ebe <USBD_CtlError>
      break;
 8007d88:	e01e      	b.n	8007dc8 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	239f      	movs	r3, #159	; 0x9f
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	58d3      	ldr	r3, [r2, r3]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	2202      	movs	r2, #2
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	330c      	adds	r3, #12
 8007dac:	0019      	movs	r1, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	0018      	movs	r0, r3
 8007db4:	f000 f902 	bl	8007fbc <USBD_CtlSendData>
    break;
 8007db8:	e006      	b.n	8007dc8 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	0011      	movs	r1, r2
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f000 f87c 	bl	8007ebe <USBD_CtlError>
    break;
 8007dc6:	46c0      	nop			; (mov r8, r8)
  }
}
 8007dc8:	46c0      	nop			; (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	885b      	ldrh	r3, [r3, #2]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d108      	bne.n	8007df4 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	239f      	movs	r3, #159	; 0x9f
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	2101      	movs	r1, #1
 8007dea:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 f92a 	bl	8008048 <USBD_CtlSendStatus>
  }

}
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b002      	add	sp, #8
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	239d      	movs	r3, #157	; 0x9d
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	5cd3      	ldrb	r3, [r2, r3]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d80d      	bhi.n	8007e30 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	885b      	ldrh	r3, [r3, #2]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d110      	bne.n	8007e3e <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	239f      	movs	r3, #159	; 0x9f
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	2100      	movs	r1, #0
 8007e24:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f000 f90d 	bl	8008048 <USBD_CtlSendStatus>
    }
    break;
 8007e2e:	e006      	b.n	8007e3e <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	0011      	movs	r1, r2
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 f841 	bl	8007ebe <USBD_CtlError>
    break;
 8007e3c:	e000      	b.n	8007e40 <USBD_ClrFeature+0x44>
    break;
 8007e3e:	46c0      	nop			; (mov r8, r8)
  }
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	785a      	ldrb	r2, [r3, #1]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	3302      	adds	r3, #2
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	3303      	adds	r3, #3
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	18d3      	adds	r3, r2, r3
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	3304      	adds	r3, #4
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3305      	adds	r3, #5
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	18d3      	adds	r3, r2, r3
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3306      	adds	r3, #6
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	3307      	adds	r3, #7
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	18d3      	adds	r3, r2, r3
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	80da      	strh	r2, [r3, #6]

}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b002      	add	sp, #8
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f000 fbf2 	bl	80086b6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f000 fbed 	bl	80086b6 <USBD_LL_StallEP>
}
 8007edc:	46c0      	nop			; (mov r8, r8)
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ef0:	2317      	movs	r3, #23
 8007ef2:	18fb      	adds	r3, r7, r3
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d03d      	beq.n	8007f7a <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	0018      	movs	r0, r3
 8007f02:	f000 f83e 	bl	8007f82 <USBD_GetLen>
 8007f06:	0003      	movs	r3, r0
 8007f08:	3301      	adds	r3, #1
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	18db      	adds	r3, r3, r3
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f14:	2017      	movs	r0, #23
 8007f16:	183b      	adds	r3, r7, r0
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	183a      	adds	r2, r7, r0
 8007f1c:	1c59      	adds	r1, r3, #1
 8007f1e:	7011      	strb	r1, [r2, #0]
 8007f20:	001a      	movs	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	189b      	adds	r3, r3, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	7812      	ldrb	r2, [r2, #0]
 8007f2a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f2c:	183b      	adds	r3, r7, r0
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	183a      	adds	r2, r7, r0
 8007f32:	1c59      	adds	r1, r3, #1
 8007f34:	7011      	strb	r1, [r2, #0]
 8007f36:	001a      	movs	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	189b      	adds	r3, r3, r2
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f40:	e017      	b.n	8007f72 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	60fa      	str	r2, [r7, #12]
 8007f48:	2417      	movs	r4, #23
 8007f4a:	193a      	adds	r2, r7, r4
 8007f4c:	7812      	ldrb	r2, [r2, #0]
 8007f4e:	1939      	adds	r1, r7, r4
 8007f50:	1c50      	adds	r0, r2, #1
 8007f52:	7008      	strb	r0, [r1, #0]
 8007f54:	0011      	movs	r1, r2
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	1852      	adds	r2, r2, r1
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f5e:	193b      	adds	r3, r7, r4
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	193a      	adds	r2, r7, r4
 8007f64:	1c59      	adds	r1, r3, #1
 8007f66:	7011      	strb	r1, [r2, #0]
 8007f68:	001a      	movs	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	189b      	adds	r3, r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e3      	bne.n	8007f42 <USBD_GetString+0x5e>
    }
  }
}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b007      	add	sp, #28
 8007f80:	bd90      	pop	{r4, r7, pc}

08007f82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007f8a:	230f      	movs	r3, #15
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 8007f92:	e008      	b.n	8007fa6 <USBD_GetLen+0x24>
    {
        len++;
 8007f94:	210f      	movs	r1, #15
 8007f96:	187b      	adds	r3, r7, r1
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	187b      	adds	r3, r7, r1
 8007f9c:	3201      	adds	r2, #1
 8007f9e:	701a      	strb	r2, [r3, #0]
        buf++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f2      	bne.n	8007f94 <USBD_GetLen+0x12>
    }

    return len;
 8007fae:	230f      	movs	r3, #15
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	781b      	ldrb	r3, [r3, #0]
}
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	b004      	add	sp, #16
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	1dbb      	adds	r3, r7, #6
 8007fc8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	239b      	movs	r3, #155	; 0x9b
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007fd4:	1dbb      	adds	r3, r7, #6
 8007fd6:	881a      	ldrh	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fdc:	1dbb      	adds	r3, r7, #6
 8007fde:	881a      	ldrh	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007fe4:	1dbb      	adds	r3, r7, #6
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	2100      	movs	r1, #0
 8007fee:	f000 fc17 	bl	8008820 <USBD_LL_Transmit>

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	b004      	add	sp, #16
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	1dbb      	adds	r3, r7, #6
 8008008:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800800a:	1dbb      	adds	r3, r7, #6
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	2100      	movs	r1, #0
 8008014:	f000 fc04 	bl	8008820 <USBD_LL_Transmit>

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	0018      	movs	r0, r3
 800801c:	46bd      	mov	sp, r7
 800801e:	b004      	add	sp, #16
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	1dbb      	adds	r3, r7, #6
 800802e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008030:	1dbb      	adds	r3, r7, #6
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	2100      	movs	r1, #0
 800803a:	f000 fc29 	bl	8008890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b004      	add	sp, #16
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	239b      	movs	r3, #155	; 0x9b
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	2104      	movs	r1, #4
 8008058:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	2300      	movs	r3, #0
 800805e:	2200      	movs	r2, #0
 8008060:	2100      	movs	r1, #0
 8008062:	f000 fbdd 	bl	8008820 <USBD_LL_Transmit>

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b002      	add	sp, #8
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	239b      	movs	r3, #155	; 0x9b
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	2105      	movs	r1, #5
 8008080:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	2300      	movs	r3, #0
 8008086:	2200      	movs	r2, #0
 8008088:	2100      	movs	r1, #0
 800808a:	f000 fc01 	bl	8008890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	0018      	movs	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}

08008098 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800809c:	490f      	ldr	r1, [pc, #60]	; (80080dc <MX_USB_DEVICE_Init+0x44>)
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <MX_USB_DEVICE_Init+0x48>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	0018      	movs	r0, r3
 80080a4:	f7fe feae 	bl	8006e04 <USBD_Init>
 80080a8:	1e03      	subs	r3, r0, #0
 80080aa:	d001      	beq.n	80080b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080ac:	f7f8 fc42 	bl	8000934 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80080b0:	4a0c      	ldr	r2, [pc, #48]	; (80080e4 <MX_USB_DEVICE_Init+0x4c>)
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <MX_USB_DEVICE_Init+0x48>)
 80080b4:	0011      	movs	r1, r2
 80080b6:	0018      	movs	r0, r3
 80080b8:	f7fe fed5 	bl	8006e66 <USBD_RegisterClass>
 80080bc:	1e03      	subs	r3, r0, #0
 80080be:	d001      	beq.n	80080c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80080c0:	f7f8 fc38 	bl	8000934 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <MX_USB_DEVICE_Init+0x48>)
 80080c6:	0018      	movs	r0, r3
 80080c8:	f7fe feee 	bl	8006ea8 <USBD_Start>
 80080cc:	1e03      	subs	r3, r0, #0
 80080ce:	d001      	beq.n	80080d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080d0:	f7f8 fc30 	bl	8000934 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080d4:	46c0      	nop			; (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	20000114 	.word	0x20000114
 80080e0:	20000360 	.word	0x20000360
 80080e4:	2000000c 	.word	0x2000000c

080080e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	0002      	movs	r2, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	1dfb      	adds	r3, r7, #7
 80080f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2212      	movs	r2, #18
 80080fa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080fc:	4b02      	ldr	r3, [pc, #8]	; (8008108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080fe:	0018      	movs	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	b002      	add	sp, #8
 8008104:	bd80      	pop	{r7, pc}
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	20000130 	.word	0x20000130

0800810c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	0002      	movs	r2, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	1dfb      	adds	r3, r7, #7
 8008118:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2204      	movs	r2, #4
 800811e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008120:	4b02      	ldr	r3, [pc, #8]	; (800812c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008122:	0018      	movs	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	b002      	add	sp, #8
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	20000144 	.word	0x20000144

08008130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	0002      	movs	r2, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	1dfb      	adds	r3, r7, #7
 800813c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800813e:	1dfb      	adds	r3, r7, #7
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4908      	ldr	r1, [pc, #32]	; (800816c <USBD_FS_ProductStrDescriptor+0x3c>)
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <USBD_FS_ProductStrDescriptor+0x40>)
 800814c:	0018      	movs	r0, r3
 800814e:	f7ff fec9 	bl	8007ee4 <USBD_GetString>
 8008152:	e005      	b.n	8008160 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4905      	ldr	r1, [pc, #20]	; (800816c <USBD_FS_ProductStrDescriptor+0x3c>)
 8008158:	4b05      	ldr	r3, [pc, #20]	; (8008170 <USBD_FS_ProductStrDescriptor+0x40>)
 800815a:	0018      	movs	r0, r3
 800815c:	f7ff fec2 	bl	8007ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008162:	0018      	movs	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	b002      	add	sp, #8
 8008168:	bd80      	pop	{r7, pc}
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	200005fc 	.word	0x200005fc
 8008170:	08008a14 	.word	0x08008a14

08008174 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	0002      	movs	r2, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	1dfb      	adds	r3, r7, #7
 8008180:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4904      	ldr	r1, [pc, #16]	; (8008198 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff feab 	bl	8007ee4 <USBD_GetString>
  return USBD_StrDesc;
 800818e:	4b02      	ldr	r3, [pc, #8]	; (8008198 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008190:	0018      	movs	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	b002      	add	sp, #8
 8008196:	bd80      	pop	{r7, pc}
 8008198:	200005fc 	.word	0x200005fc
 800819c:	08008a2c 	.word	0x08008a2c

080081a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	0002      	movs	r2, r0
 80081a8:	6039      	str	r1, [r7, #0]
 80081aa:	1dfb      	adds	r3, r7, #7
 80081ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	221a      	movs	r2, #26
 80081b2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081b4:	f000 f84c 	bl	8008250 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80081ba:	0018      	movs	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	b002      	add	sp, #8
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	20000148 	.word	0x20000148

080081c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	0002      	movs	r2, r0
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	1dfb      	adds	r3, r7, #7
 80081d4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80081d6:	1dfb      	adds	r3, r7, #7
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4908      	ldr	r1, [pc, #32]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80081e2:	4b09      	ldr	r3, [pc, #36]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x40>)
 80081e4:	0018      	movs	r0, r3
 80081e6:	f7ff fe7d 	bl	8007ee4 <USBD_GetString>
 80081ea:	e005      	b.n	80081f8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	4905      	ldr	r1, [pc, #20]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x40>)
 80081f2:	0018      	movs	r0, r3
 80081f4:	f7ff fe76 	bl	8007ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f8:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80081fa:	0018      	movs	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b002      	add	sp, #8
 8008200:	bd80      	pop	{r7, pc}
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	200005fc 	.word	0x200005fc
 8008208:	08008a40 	.word	0x08008a40

0800820c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	0002      	movs	r2, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	1dfb      	adds	r3, r7, #7
 8008218:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800821a:	1dfb      	adds	r3, r7, #7
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4908      	ldr	r1, [pc, #32]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008226:	4b09      	ldr	r3, [pc, #36]	; (800824c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008228:	0018      	movs	r0, r3
 800822a:	f7ff fe5b 	bl	8007ee4 <USBD_GetString>
 800822e:	e005      	b.n	800823c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	4905      	ldr	r1, [pc, #20]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008236:	0018      	movs	r0, r3
 8008238:	f7ff fe54 	bl	8007ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800823e:	0018      	movs	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	b002      	add	sp, #8
 8008244:	bd80      	pop	{r7, pc}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	200005fc 	.word	0x200005fc
 800824c:	08008a4c 	.word	0x08008a4c

08008250 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008256:	4b10      	ldr	r3, [pc, #64]	; (8008298 <Get_SerialNum+0x48>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <Get_SerialNum+0x4c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008262:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <Get_SerialNum+0x50>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	18d3      	adds	r3, r2, r3
 800826e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00b      	beq.n	800828e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008276:	490b      	ldr	r1, [pc, #44]	; (80082a4 <Get_SerialNum+0x54>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2208      	movs	r2, #8
 800827c:	0018      	movs	r0, r3
 800827e:	f000 f815 	bl	80082ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008282:	4909      	ldr	r1, [pc, #36]	; (80082a8 <Get_SerialNum+0x58>)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2204      	movs	r2, #4
 8008288:	0018      	movs	r0, r3
 800828a:	f000 f80f 	bl	80082ac <IntToUnicode>
  }
}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	b004      	add	sp, #16
 8008294:	bd80      	pop	{r7, pc}
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	1ff80050 	.word	0x1ff80050
 800829c:	1ff80054 	.word	0x1ff80054
 80082a0:	1ff80058 	.word	0x1ff80058
 80082a4:	2000014a 	.word	0x2000014a
 80082a8:	2000015a 	.word	0x2000015a

080082ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	1dfb      	adds	r3, r7, #7
 80082b8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80082ba:	2117      	movs	r1, #23
 80082bc:	187b      	adds	r3, r7, r1
 80082be:	2200      	movs	r2, #0
 80082c0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80082c2:	187b      	adds	r3, r7, r1
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e02f      	b.n	800832a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	0f1b      	lsrs	r3, r3, #28
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	d80d      	bhi.n	80082ee <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	0f1b      	lsrs	r3, r3, #28
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	2317      	movs	r3, #23
 80082da:	18fb      	adds	r3, r7, r3
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	0019      	movs	r1, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	185b      	adds	r3, r3, r1
 80082e6:	3230      	adds	r2, #48	; 0x30
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	e00c      	b.n	8008308 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	0f1b      	lsrs	r3, r3, #28
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	2317      	movs	r3, #23
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	0019      	movs	r1, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	185b      	adds	r3, r3, r1
 8008302:	3237      	adds	r2, #55	; 0x37
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800830e:	2117      	movs	r1, #23
 8008310:	187b      	adds	r3, r7, r1
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	3301      	adds	r3, #1
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	18d3      	adds	r3, r2, r3
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008320:	187b      	adds	r3, r7, r1
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	187b      	adds	r3, r7, r1
 8008326:	3201      	adds	r2, #1
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	2317      	movs	r3, #23
 800832c:	18fa      	adds	r2, r7, r3
 800832e:	1dfb      	adds	r3, r7, #7
 8008330:	7812      	ldrb	r2, [r2, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d3c8      	bcc.n	80082ca <IntToUnicode+0x1e>
  }
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b006      	add	sp, #24
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <HAL_PCD_MspInit+0x38>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d10e      	bne.n	8008370 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008352:	4b0a      	ldr	r3, [pc, #40]	; (800837c <HAL_PCD_MspInit+0x3c>)
 8008354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_PCD_MspInit+0x3c>)
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	0409      	lsls	r1, r1, #16
 800835c:	430a      	orrs	r2, r1
 800835e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	201f      	movs	r0, #31
 8008366:	f7f8 fe89 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800836a:	201f      	movs	r0, #31
 800836c:	f7f8 fe9b 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008370:	46c0      	nop			; (mov r8, r8)
 8008372:	46bd      	mov	sp, r7
 8008374:	b002      	add	sp, #8
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40005c00 	.word	0x40005c00
 800837c:	40021000 	.word	0x40021000

08008380 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	23bc      	movs	r3, #188	; 0xbc
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	58d2      	ldr	r2, [r2, r3]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	21ac      	movs	r1, #172	; 0xac
 8008394:	0089      	lsls	r1, r1, #2
 8008396:	468c      	mov	ip, r1
 8008398:	4463      	add	r3, ip
 800839a:	0019      	movs	r1, r3
 800839c:	0010      	movs	r0, r2
 800839e:	f7fe fdd7 	bl	8006f50 <USBD_LL_SetupStage>
}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b002      	add	sp, #8
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083aa:	b590      	push	{r4, r7, lr}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	000a      	movs	r2, r1
 80083b4:	1cfb      	adds	r3, r7, #3
 80083b6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	23bc      	movs	r3, #188	; 0xbc
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	58d4      	ldr	r4, [r2, r3]
 80083c0:	1cfb      	adds	r3, r7, #3
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	23be      	movs	r3, #190	; 0xbe
 80083c8:	0059      	lsls	r1, r3, #1
 80083ca:	0013      	movs	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	18c3      	adds	r3, r0, r3
 80083d4:	185b      	adds	r3, r3, r1
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	1cfb      	adds	r3, r7, #3
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	0019      	movs	r1, r3
 80083de:	0020      	movs	r0, r4
 80083e0:	f7fe fe12 	bl	8007008 <USBD_LL_DataOutStage>
}
 80083e4:	46c0      	nop			; (mov r8, r8)
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b003      	add	sp, #12
 80083ea:	bd90      	pop	{r4, r7, pc}

080083ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	000a      	movs	r2, r1
 80083f6:	1cfb      	adds	r3, r7, #3
 80083f8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	23bc      	movs	r3, #188	; 0xbc
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	58d0      	ldr	r0, [r2, r3]
 8008402:	1cfb      	adds	r3, r7, #3
 8008404:	781a      	ldrb	r2, [r3, #0]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	0013      	movs	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	189b      	adds	r3, r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	18cb      	adds	r3, r1, r3
 8008412:	333c      	adds	r3, #60	; 0x3c
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	1cfb      	adds	r3, r7, #3
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	0019      	movs	r1, r3
 800841c:	f7fe fe76 	bl	800710c <USBD_LL_DataInStage>
}
 8008420:	46c0      	nop			; (mov r8, r8)
 8008422:	46bd      	mov	sp, r7
 8008424:	b002      	add	sp, #8
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	23bc      	movs	r3, #188	; 0xbc
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	58d3      	ldr	r3, [r2, r3]
 8008438:	0018      	movs	r0, r3
 800843a:	f7fe ffa7 	bl	800738c <USBD_LL_SOF>
}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	46bd      	mov	sp, r7
 8008442:	b002      	add	sp, #8
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800844e:	230f      	movs	r3, #15
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	2201      	movs	r2, #1
 8008454:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d001      	beq.n	8008462 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800845e:	f7f8 fa69 	bl	8000934 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	23bc      	movs	r3, #188	; 0xbc
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	58d2      	ldr	r2, [r2, r3]
 800846a:	230f      	movs	r3, #15
 800846c:	18fb      	adds	r3, r7, r3
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	0019      	movs	r1, r3
 8008472:	0010      	movs	r0, r2
 8008474:	f7fe ff4f 	bl	8007316 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	23bc      	movs	r3, #188	; 0xbc
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	58d3      	ldr	r3, [r2, r3]
 8008480:	0018      	movs	r0, r3
 8008482:	f7fe ff00 	bl	8007286 <USBD_LL_Reset>
}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	b004      	add	sp, #16
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	23bc      	movs	r3, #188	; 0xbc
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	58d3      	ldr	r3, [r2, r3]
 80084a0:	0018      	movs	r0, r3
 80084a2:	f7fe ff49 	bl	8007338 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <HAL_PCD_SuspendCallback+0x34>)
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <HAL_PCD_SuspendCallback+0x34>)
 80084b4:	2106      	movs	r1, #6
 80084b6:	430a      	orrs	r2, r1
 80084b8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	46bd      	mov	sp, r7
 80084be:	b002      	add	sp, #8
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	e000ed00 	.word	0xe000ed00

080084c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084d8:	4b09      	ldr	r3, [pc, #36]	; (8008500 <HAL_PCD_ResumeCallback+0x38>)
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <HAL_PCD_ResumeCallback+0x38>)
 80084de:	2106      	movs	r1, #6
 80084e0:	438a      	bics	r2, r1
 80084e2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80084e4:	f000 fa20 	bl	8008928 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	23bc      	movs	r3, #188	; 0xbc
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	58d3      	ldr	r3, [r2, r3]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7fe ff39 	bl	8007368 <USBD_LL_Resume>
}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b002      	add	sp, #8
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	e000ed00 	.word	0xe000ed00

08008504 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800850c:	4a23      	ldr	r2, [pc, #140]	; (800859c <USBD_LL_Init+0x98>)
 800850e:	23bc      	movs	r3, #188	; 0xbc
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	23a6      	movs	r3, #166	; 0xa6
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	491f      	ldr	r1, [pc, #124]	; (800859c <USBD_LL_Init+0x98>)
 800851e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <USBD_LL_Init+0x98>)
 8008522:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <USBD_LL_Init+0x9c>)
 8008524:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008526:	4b1d      	ldr	r3, [pc, #116]	; (800859c <USBD_LL_Init+0x98>)
 8008528:	2208      	movs	r2, #8
 800852a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <USBD_LL_Init+0x98>)
 800852e:	2202      	movs	r2, #2
 8008530:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008532:	4b1a      	ldr	r3, [pc, #104]	; (800859c <USBD_LL_Init+0x98>)
 8008534:	2202      	movs	r2, #2
 8008536:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008538:	4b18      	ldr	r3, [pc, #96]	; (800859c <USBD_LL_Init+0x98>)
 800853a:	2200      	movs	r2, #0
 800853c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800853e:	4b17      	ldr	r3, [pc, #92]	; (800859c <USBD_LL_Init+0x98>)
 8008540:	2200      	movs	r2, #0
 8008542:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008544:	4b15      	ldr	r3, [pc, #84]	; (800859c <USBD_LL_Init+0x98>)
 8008546:	2200      	movs	r2, #0
 8008548:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800854a:	4b14      	ldr	r3, [pc, #80]	; (800859c <USBD_LL_Init+0x98>)
 800854c:	0018      	movs	r0, r3
 800854e:	f7f9 f8a5 	bl	800169c <HAL_PCD_Init>
 8008552:	1e03      	subs	r3, r0, #0
 8008554:	d001      	beq.n	800855a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008556:	f7f8 f9ed 	bl	8000934 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	23a6      	movs	r3, #166	; 0xa6
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	58d0      	ldr	r0, [r2, r3]
 8008562:	2318      	movs	r3, #24
 8008564:	2200      	movs	r2, #0
 8008566:	2100      	movs	r1, #0
 8008568:	f7fa fc9e 	bl	8002ea8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	23a6      	movs	r3, #166	; 0xa6
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	58d0      	ldr	r0, [r2, r3]
 8008574:	2358      	movs	r3, #88	; 0x58
 8008576:	2200      	movs	r2, #0
 8008578:	2180      	movs	r1, #128	; 0x80
 800857a:	f7fa fc95 	bl	8002ea8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	23a6      	movs	r3, #166	; 0xa6
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	58d0      	ldr	r0, [r2, r3]
 8008586:	2380      	movs	r3, #128	; 0x80
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	2200      	movs	r2, #0
 800858c:	2181      	movs	r1, #129	; 0x81
 800858e:	f7fa fc8b 	bl	8002ea8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	0018      	movs	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	b002      	add	sp, #8
 800859a:	bd80      	pop	{r7, pc}
 800859c:	200007fc 	.word	0x200007fc
 80085a0:	40005c00 	.word	0x40005c00

080085a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	210f      	movs	r1, #15
 80085ae:	187b      	adds	r3, r7, r1
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b4:	260e      	movs	r6, #14
 80085b6:	19bb      	adds	r3, r7, r6
 80085b8:	2200      	movs	r2, #0
 80085ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	23a6      	movs	r3, #166	; 0xa6
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	58d3      	ldr	r3, [r2, r3]
 80085c4:	000d      	movs	r5, r1
 80085c6:	187c      	adds	r4, r7, r1
 80085c8:	0018      	movs	r0, r3
 80085ca:	f7f9 f977 	bl	80018bc <HAL_PCD_Start>
 80085ce:	0003      	movs	r3, r0
 80085d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d2:	19bc      	adds	r4, r7, r6
 80085d4:	0029      	movs	r1, r5
 80085d6:	187b      	adds	r3, r7, r1
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	0018      	movs	r0, r3
 80085dc:	f000 f9ab 	bl	8008936 <USBD_Get_USB_Status>
 80085e0:	0003      	movs	r3, r0
 80085e2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80085e4:	19bb      	adds	r3, r7, r6
 80085e6:	781b      	ldrb	r3, [r3, #0]
}
 80085e8:	0018      	movs	r0, r3
 80085ea:	46bd      	mov	sp, r7
 80085ec:	b005      	add	sp, #20
 80085ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	000c      	movs	r4, r1
 80085fa:	0010      	movs	r0, r2
 80085fc:	0019      	movs	r1, r3
 80085fe:	1cfb      	adds	r3, r7, #3
 8008600:	1c22      	adds	r2, r4, #0
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	1cbb      	adds	r3, r7, #2
 8008606:	1c02      	adds	r2, r0, #0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	003b      	movs	r3, r7
 800860c:	1c0a      	adds	r2, r1, #0
 800860e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008610:	260f      	movs	r6, #15
 8008612:	19bb      	adds	r3, r7, r6
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008618:	250e      	movs	r5, #14
 800861a:	197b      	adds	r3, r7, r5
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	23a6      	movs	r3, #166	; 0xa6
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	58d0      	ldr	r0, [r2, r3]
 8008628:	19bc      	adds	r4, r7, r6
 800862a:	1cbb      	adds	r3, r7, #2
 800862c:	781d      	ldrb	r5, [r3, #0]
 800862e:	003b      	movs	r3, r7
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	1cfb      	adds	r3, r7, #3
 8008634:	7819      	ldrb	r1, [r3, #0]
 8008636:	002b      	movs	r3, r5
 8008638:	f7f9 fb0d 	bl	8001c56 <HAL_PCD_EP_Open>
 800863c:	0003      	movs	r3, r0
 800863e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008640:	250e      	movs	r5, #14
 8008642:	197c      	adds	r4, r7, r5
 8008644:	19bb      	adds	r3, r7, r6
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	0018      	movs	r0, r3
 800864a:	f000 f974 	bl	8008936 <USBD_Get_USB_Status>
 800864e:	0003      	movs	r3, r0
 8008650:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008652:	197b      	adds	r3, r7, r5
 8008654:	781b      	ldrb	r3, [r3, #0]
}
 8008656:	0018      	movs	r0, r3
 8008658:	46bd      	mov	sp, r7
 800865a:	b005      	add	sp, #20
 800865c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800865e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800865e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	000a      	movs	r2, r1
 8008668:	1cfb      	adds	r3, r7, #3
 800866a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	210f      	movs	r1, #15
 800866e:	187b      	adds	r3, r7, r1
 8008670:	2200      	movs	r2, #0
 8008672:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	260e      	movs	r6, #14
 8008676:	19bb      	adds	r3, r7, r6
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	23a6      	movs	r3, #166	; 0xa6
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	58d2      	ldr	r2, [r2, r3]
 8008684:	000d      	movs	r5, r1
 8008686:	187c      	adds	r4, r7, r1
 8008688:	1cfb      	adds	r3, r7, #3
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	0019      	movs	r1, r3
 800868e:	0010      	movs	r0, r2
 8008690:	f7f9 fb59 	bl	8001d46 <HAL_PCD_EP_Close>
 8008694:	0003      	movs	r3, r0
 8008696:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008698:	19bc      	adds	r4, r7, r6
 800869a:	0029      	movs	r1, r5
 800869c:	187b      	adds	r3, r7, r1
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f000 f948 	bl	8008936 <USBD_Get_USB_Status>
 80086a6:	0003      	movs	r3, r0
 80086a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80086aa:	19bb      	adds	r3, r7, r6
 80086ac:	781b      	ldrb	r3, [r3, #0]
}
 80086ae:	0018      	movs	r0, r3
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b005      	add	sp, #20
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	000a      	movs	r2, r1
 80086c0:	1cfb      	adds	r3, r7, #3
 80086c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	210f      	movs	r1, #15
 80086c6:	187b      	adds	r3, r7, r1
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086cc:	260e      	movs	r6, #14
 80086ce:	19bb      	adds	r3, r7, r6
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	23a6      	movs	r3, #166	; 0xa6
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	58d2      	ldr	r2, [r2, r3]
 80086dc:	000d      	movs	r5, r1
 80086de:	187c      	adds	r4, r7, r1
 80086e0:	1cfb      	adds	r3, r7, #3
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	0019      	movs	r1, r3
 80086e6:	0010      	movs	r0, r2
 80086e8:	f7f9 fc0b 	bl	8001f02 <HAL_PCD_EP_SetStall>
 80086ec:	0003      	movs	r3, r0
 80086ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f0:	19bc      	adds	r4, r7, r6
 80086f2:	0029      	movs	r1, r5
 80086f4:	187b      	adds	r3, r7, r1
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	0018      	movs	r0, r3
 80086fa:	f000 f91c 	bl	8008936 <USBD_Get_USB_Status>
 80086fe:	0003      	movs	r3, r0
 8008700:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008702:	19bb      	adds	r3, r7, r6
 8008704:	781b      	ldrb	r3, [r3, #0]
}
 8008706:	0018      	movs	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	b005      	add	sp, #20
 800870c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800870e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800870e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	000a      	movs	r2, r1
 8008718:	1cfb      	adds	r3, r7, #3
 800871a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871c:	210f      	movs	r1, #15
 800871e:	187b      	adds	r3, r7, r1
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008724:	260e      	movs	r6, #14
 8008726:	19bb      	adds	r3, r7, r6
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	23a6      	movs	r3, #166	; 0xa6
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	58d2      	ldr	r2, [r2, r3]
 8008734:	000d      	movs	r5, r1
 8008736:	187c      	adds	r4, r7, r1
 8008738:	1cfb      	adds	r3, r7, #3
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	0019      	movs	r1, r3
 800873e:	0010      	movs	r0, r2
 8008740:	f7f9 fc3b 	bl	8001fba <HAL_PCD_EP_ClrStall>
 8008744:	0003      	movs	r3, r0
 8008746:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008748:	19bc      	adds	r4, r7, r6
 800874a:	0029      	movs	r1, r5
 800874c:	187b      	adds	r3, r7, r1
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	0018      	movs	r0, r3
 8008752:	f000 f8f0 	bl	8008936 <USBD_Get_USB_Status>
 8008756:	0003      	movs	r3, r0
 8008758:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800875a:	19bb      	adds	r3, r7, r6
 800875c:	781b      	ldrb	r3, [r3, #0]
}
 800875e:	0018      	movs	r0, r3
 8008760:	46bd      	mov	sp, r7
 8008762:	b005      	add	sp, #20
 8008764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008766 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	000a      	movs	r2, r1
 8008770:	1cfb      	adds	r3, r7, #3
 8008772:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	23a6      	movs	r3, #166	; 0xa6
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	58d3      	ldr	r3, [r2, r3]
 800877c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800877e:	1cfb      	adds	r3, r7, #3
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b25b      	sxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	da0d      	bge.n	80087a4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008788:	1cfb      	adds	r3, r7, #3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	227f      	movs	r2, #127	; 0x7f
 800878e:	4013      	ands	r3, r2
 8008790:	68f9      	ldr	r1, [r7, #12]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	0013      	movs	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	189b      	adds	r3, r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	18cb      	adds	r3, r1, r3
 800879e:	3302      	adds	r3, #2
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	e00d      	b.n	80087c0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087a4:	1cfb      	adds	r3, r7, #3
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	227f      	movs	r2, #127	; 0x7f
 80087aa:	401a      	ands	r2, r3
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	23b5      	movs	r3, #181	; 0xb5
 80087b0:	0059      	lsls	r1, r3, #1
 80087b2:	0013      	movs	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	189b      	adds	r3, r3, r2
 80087b8:	00db      	lsls	r3, r3, #3
 80087ba:	18c3      	adds	r3, r0, r3
 80087bc:	185b      	adds	r3, r3, r1
 80087be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087c0:	0018      	movs	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b004      	add	sp, #16
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	000a      	movs	r2, r1
 80087d2:	1cfb      	adds	r3, r7, #3
 80087d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d6:	210f      	movs	r1, #15
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087de:	260e      	movs	r6, #14
 80087e0:	19bb      	adds	r3, r7, r6
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	23a6      	movs	r3, #166	; 0xa6
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	58d2      	ldr	r2, [r2, r3]
 80087ee:	000d      	movs	r5, r1
 80087f0:	187c      	adds	r4, r7, r1
 80087f2:	1cfb      	adds	r3, r7, #3
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	0019      	movs	r1, r3
 80087f8:	0010      	movs	r0, r2
 80087fa:	f7f9 fa01 	bl	8001c00 <HAL_PCD_SetAddress>
 80087fe:	0003      	movs	r3, r0
 8008800:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008802:	19bc      	adds	r4, r7, r6
 8008804:	0029      	movs	r1, r5
 8008806:	187b      	adds	r3, r7, r1
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	0018      	movs	r0, r3
 800880c:	f000 f893 	bl	8008936 <USBD_Get_USB_Status>
 8008810:	0003      	movs	r3, r0
 8008812:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008814:	19bb      	adds	r3, r7, r6
 8008816:	781b      	ldrb	r3, [r3, #0]
}
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b005      	add	sp, #20
 800881e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008820 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	0008      	movs	r0, r1
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	0019      	movs	r1, r3
 800882e:	230b      	movs	r3, #11
 8008830:	18fb      	adds	r3, r7, r3
 8008832:	1c02      	adds	r2, r0, #0
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	2408      	movs	r4, #8
 8008838:	193b      	adds	r3, r7, r4
 800883a:	1c0a      	adds	r2, r1, #0
 800883c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800883e:	2117      	movs	r1, #23
 8008840:	187b      	adds	r3, r7, r1
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008846:	2516      	movs	r5, #22
 8008848:	197b      	adds	r3, r7, r5
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	23a6      	movs	r3, #166	; 0xa6
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	58d0      	ldr	r0, [r2, r3]
 8008856:	193b      	adds	r3, r7, r4
 8008858:	881d      	ldrh	r5, [r3, #0]
 800885a:	000e      	movs	r6, r1
 800885c:	187c      	adds	r4, r7, r1
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	230b      	movs	r3, #11
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	7819      	ldrb	r1, [r3, #0]
 8008866:	002b      	movs	r3, r5
 8008868:	f7f9 fb02 	bl	8001e70 <HAL_PCD_EP_Transmit>
 800886c:	0003      	movs	r3, r0
 800886e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008870:	2516      	movs	r5, #22
 8008872:	197c      	adds	r4, r7, r5
 8008874:	0031      	movs	r1, r6
 8008876:	187b      	adds	r3, r7, r1
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	0018      	movs	r0, r3
 800887c:	f000 f85b 	bl	8008936 <USBD_Get_USB_Status>
 8008880:	0003      	movs	r3, r0
 8008882:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008884:	197b      	adds	r3, r7, r5
 8008886:	781b      	ldrb	r3, [r3, #0]
}
 8008888:	0018      	movs	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	b007      	add	sp, #28
 800888e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	0008      	movs	r0, r1
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	0019      	movs	r1, r3
 800889e:	230b      	movs	r3, #11
 80088a0:	18fb      	adds	r3, r7, r3
 80088a2:	1c02      	adds	r2, r0, #0
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	2408      	movs	r4, #8
 80088a8:	193b      	adds	r3, r7, r4
 80088aa:	1c0a      	adds	r2, r1, #0
 80088ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ae:	2117      	movs	r1, #23
 80088b0:	187b      	adds	r3, r7, r1
 80088b2:	2200      	movs	r2, #0
 80088b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b6:	2516      	movs	r5, #22
 80088b8:	197b      	adds	r3, r7, r5
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	23a6      	movs	r3, #166	; 0xa6
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	58d0      	ldr	r0, [r2, r3]
 80088c6:	193b      	adds	r3, r7, r4
 80088c8:	881d      	ldrh	r5, [r3, #0]
 80088ca:	000e      	movs	r6, r1
 80088cc:	187c      	adds	r4, r7, r1
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	230b      	movs	r3, #11
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	7819      	ldrb	r1, [r3, #0]
 80088d6:	002b      	movs	r3, r5
 80088d8:	f7f9 fa86 	bl	8001de8 <HAL_PCD_EP_Receive>
 80088dc:	0003      	movs	r3, r0
 80088de:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e0:	2516      	movs	r5, #22
 80088e2:	197c      	adds	r4, r7, r5
 80088e4:	0031      	movs	r1, r6
 80088e6:	187b      	adds	r3, r7, r1
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	0018      	movs	r0, r3
 80088ec:	f000 f823 	bl	8008936 <USBD_Get_USB_Status>
 80088f0:	0003      	movs	r3, r0
 80088f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80088f4:	197b      	adds	r3, r7, r5
 80088f6:	781b      	ldrb	r3, [r3, #0]
}
 80088f8:	0018      	movs	r0, r3
 80088fa:	46bd      	mov	sp, r7
 80088fc:	b007      	add	sp, #28
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008900 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <USBD_static_malloc+0x14>)
}
 800890a:	0018      	movs	r0, r3
 800890c:	46bd      	mov	sp, r7
 800890e:	b002      	add	sp, #8
 8008910:	bd80      	pop	{r7, pc}
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	20000184 	.word	0x20000184

08008918 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	b002      	add	sp, #8
 8008926:	bd80      	pop	{r7, pc}

08008928 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800892c:	f7f7 fdb4 	bl	8000498 <SystemClock_Config>
}
 8008930:	46c0      	nop			; (mov r8, r8)
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	0002      	movs	r2, r0
 800893e:	1dfb      	adds	r3, r7, #7
 8008940:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008942:	230f      	movs	r3, #15
 8008944:	18fb      	adds	r3, r7, r3
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800894a:	1dfb      	adds	r3, r7, #7
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d00d      	beq.n	800896e <USBD_Get_USB_Status+0x38>
 8008952:	dc02      	bgt.n	800895a <USBD_Get_USB_Status+0x24>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <USBD_Get_USB_Status+0x2e>
 8008958:	e018      	b.n	800898c <USBD_Get_USB_Status+0x56>
 800895a:	2b02      	cmp	r3, #2
 800895c:	d00c      	beq.n	8008978 <USBD_Get_USB_Status+0x42>
 800895e:	2b03      	cmp	r3, #3
 8008960:	d00f      	beq.n	8008982 <USBD_Get_USB_Status+0x4c>
 8008962:	e013      	b.n	800898c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008964:	230f      	movs	r3, #15
 8008966:	18fb      	adds	r3, r7, r3
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
    break;
 800896c:	e013      	b.n	8008996 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800896e:	230f      	movs	r3, #15
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	2202      	movs	r2, #2
 8008974:	701a      	strb	r2, [r3, #0]
    break;
 8008976:	e00e      	b.n	8008996 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008978:	230f      	movs	r3, #15
 800897a:	18fb      	adds	r3, r7, r3
 800897c:	2201      	movs	r2, #1
 800897e:	701a      	strb	r2, [r3, #0]
    break;
 8008980:	e009      	b.n	8008996 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008982:	230f      	movs	r3, #15
 8008984:	18fb      	adds	r3, r7, r3
 8008986:	2202      	movs	r2, #2
 8008988:	701a      	strb	r2, [r3, #0]
    break;
 800898a:	e004      	b.n	8008996 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800898c:	230f      	movs	r3, #15
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	2202      	movs	r2, #2
 8008992:	701a      	strb	r2, [r3, #0]
    break;
 8008994:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008996:	230f      	movs	r3, #15
 8008998:	18fb      	adds	r3, r7, r3
 800899a:	781b      	ldrb	r3, [r3, #0]
}
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b004      	add	sp, #16
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	2600      	movs	r6, #0
 80089a8:	4d0c      	ldr	r5, [pc, #48]	; (80089dc <__libc_init_array+0x38>)
 80089aa:	4c0d      	ldr	r4, [pc, #52]	; (80089e0 <__libc_init_array+0x3c>)
 80089ac:	1b64      	subs	r4, r4, r5
 80089ae:	10a4      	asrs	r4, r4, #2
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	2600      	movs	r6, #0
 80089b6:	f000 f821 	bl	80089fc <_init>
 80089ba:	4d0a      	ldr	r5, [pc, #40]	; (80089e4 <__libc_init_array+0x40>)
 80089bc:	4c0a      	ldr	r4, [pc, #40]	; (80089e8 <__libc_init_array+0x44>)
 80089be:	1b64      	subs	r4, r4, r5
 80089c0:	10a4      	asrs	r4, r4, #2
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	00b3      	lsls	r3, r6, #2
 80089ca:	58eb      	ldr	r3, [r5, r3]
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	00b3      	lsls	r3, r6, #2
 80089d4:	58eb      	ldr	r3, [r5, r3]
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	08008b30 	.word	0x08008b30
 80089e0:	08008b30 	.word	0x08008b30
 80089e4:	08008b30 	.word	0x08008b30
 80089e8:	08008b34 	.word	0x08008b34

080089ec <memset>:
 80089ec:	0003      	movs	r3, r0
 80089ee:	1812      	adds	r2, r2, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	7019      	strb	r1, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <_init>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr

08008a08 <_fini>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr
