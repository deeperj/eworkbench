
Custom_HID_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003208  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080033cc  080033cc  000133cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  20000000  08003468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000894  20000168  080035d0  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200009fc  080035d0  000209fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a29  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035e6  00000000  00000000  00038bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005d51  00000000  00000000  0003c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000990  00000000  00000000  00041ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a50  00000000  00000000  00042888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005d83  00000000  00000000  000432d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000038d1  00000000  00000000  0004905b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004c92c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001980  00000000  00000000  0004c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000168 	.word	0x20000168
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080033b4 	.word	0x080033b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000016c 	.word	0x2000016c
 8000200:	080033b4 	.word	0x080033b4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f8a8 	bl	8000680 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f85e 	bl	8000600 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000088 	.word	0x20000088
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f82f 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f002 fb7d 	bl	8002c82 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000194 	.word	0x20000194
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000194 	.word	0x20000194

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf1c      	itt	ne
 80005c0:	4b05      	ldrne	r3, [pc, #20]	; (80005d8 <HAL_Delay+0x24>)
 80005c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005c6:	bf18      	it	ne
 80005c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	f7ff ffed 	bl	80005a8 <HAL_GetTick>
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	4284      	cmp	r4, r0
 80005d2:	d8fa      	bhi.n	80005ca <HAL_Delay+0x16>
  {
  }
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005ec:	0200      	lsls	r0, r0, #8
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f8:	60d3      	str	r3, [r2, #12]
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	68dc      	ldr	r4, [r3, #12]
 8000606:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000610:	2b04      	cmp	r3, #4
 8000612:	bf28      	it	cs
 8000614:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 0501 	mov.w	r5, #1
 800061c:	fa05 f303 	lsl.w	r3, r5, r3
 8000620:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000624:	bf8c      	ite	hi
 8000626:	3c03      	subhi	r4, #3
 8000628:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062a:	4019      	ands	r1, r3
 800062c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062e:	fa05 f404 	lsl.w	r4, r5, r4
 8000632:	3c01      	subs	r4, #1
 8000634:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000636:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	ea42 0201 	orr.w	r2, r2, r1
 800063c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	bfaf      	iteee	ge
 8000642:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	f000 000f 	andlt.w	r0, r0, #15
 800064a:	4b06      	ldrlt	r3, [pc, #24]	; (8000664 <HAL_NVIC_SetPriority+0x64>)
 800064c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	bfa5      	ittet	ge
 8000650:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000654:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	e000ed14 	.word	0xe000ed14

08000668 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000668:	0942      	lsrs	r2, r0, #5
 800066a:	2301      	movs	r3, #1
 800066c:	f000 001f 	and.w	r0, r0, #31
 8000670:	fa03 f000 	lsl.w	r0, r3, r0
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <HAL_NVIC_EnableIRQ+0x14>)
 8000676:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	3801      	subs	r0, #1
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d20a      	bcs.n	800069e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000696:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e010 	.word	0xe000e010
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ae:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006b0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006b2:	bf0c      	ite	eq
 80006b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006b8:	f022 0204 	bicne.w	r2, r2, #4
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	4770      	bx	lr
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006c4:	4770      	bx	lr

080006c6 <HAL_SYSTICK_IRQHandler>:
{
 80006c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006c8:	f7ff fffc 	bl	80006c4 <HAL_SYSTICK_Callback>
 80006cc:	bd08      	pop	{r3, pc}
	...

080006d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800087c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006dc:	4a65      	ldr	r2, [pc, #404]	; (8000874 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006de:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000880 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006e4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006e6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ea:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006ec:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006f4:	45b6      	cmp	lr, r6
 80006f6:	f040 80aa 	bne.w	800084e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fa:	684c      	ldr	r4, [r1, #4]
 80006fc:	f024 0710 	bic.w	r7, r4, #16
 8000700:	2f02      	cmp	r7, #2
 8000702:	d116      	bne.n	8000732 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000704:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000708:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800070c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000710:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000714:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000718:	f04f 0c0f 	mov.w	ip, #15
 800071c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000720:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000724:	690d      	ldr	r5, [r1, #16]
 8000726:	fa05 f50b 	lsl.w	r5, r5, fp
 800072a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800072e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000732:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000736:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000738:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000740:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000742:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000746:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000750:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000754:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000756:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075a:	d811      	bhi.n	8000780 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800075c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800075e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000762:	68cf      	ldr	r7, [r1, #12]
 8000764:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000768:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800076c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800076e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000770:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000774:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000778:	409f      	lsls	r7, r3
 800077a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800077e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000780:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000782:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000784:	688f      	ldr	r7, [r1, #8]
 8000786:	fa07 f70a 	lsl.w	r7, r7, sl
 800078a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800078c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800078e:	00e5      	lsls	r5, r4, #3
 8000790:	d55d      	bpl.n	800084e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	f04f 0b00 	mov.w	fp, #0
 8000796:	f8cd b00c 	str.w	fp, [sp, #12]
 800079a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	4d36      	ldr	r5, [pc, #216]	; (8000878 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007a4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007a8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007ac:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007b0:	9703      	str	r7, [sp, #12]
 80007b2:	9f03      	ldr	r7, [sp, #12]
 80007b4:	f023 0703 	bic.w	r7, r3, #3
 80007b8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007bc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007cc:	f04f 0e0f 	mov.w	lr, #15
 80007d0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	d03f      	beq.n	800085c <HAL_GPIO_Init+0x18c>
 80007dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	d03d      	beq.n	8000860 <HAL_GPIO_Init+0x190>
 80007e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e8:	42a8      	cmp	r0, r5
 80007ea:	d03b      	beq.n	8000864 <HAL_GPIO_Init+0x194>
 80007ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	d039      	beq.n	8000868 <HAL_GPIO_Init+0x198>
 80007f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f8:	42a8      	cmp	r0, r5
 80007fa:	d037      	beq.n	800086c <HAL_GPIO_Init+0x19c>
 80007fc:	4548      	cmp	r0, r9
 80007fe:	d037      	beq.n	8000870 <HAL_GPIO_Init+0x1a0>
 8000800:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000804:	42a8      	cmp	r0, r5
 8000806:	bf14      	ite	ne
 8000808:	2507      	movne	r5, #7
 800080a:	2506      	moveq	r5, #6
 800080c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000810:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000814:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000816:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000818:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800081a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf0c      	ite	eq
 8000820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000822:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000824:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000826:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000828:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800082c:	bf0c      	ite	eq
 800082e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000830:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000832:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000834:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000836:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800083a:	bf0c      	ite	eq
 800083c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800083e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000840:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000842:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000844:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000846:	bf54      	ite	pl
 8000848:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800084a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800084c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084e:	3301      	adds	r3, #1
 8000850:	2b10      	cmp	r3, #16
 8000852:	f47f af48 	bne.w	80006e6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000856:	b005      	add	sp, #20
 8000858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085c:	465d      	mov	r5, fp
 800085e:	e7d5      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000860:	2501      	movs	r5, #1
 8000862:	e7d3      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000864:	2502      	movs	r5, #2
 8000866:	e7d1      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000868:	2503      	movs	r5, #3
 800086a:	e7cf      	b.n	800080c <HAL_GPIO_Init+0x13c>
 800086c:	2504      	movs	r5, #4
 800086e:	e7cd      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000870:	2505      	movs	r5, #5
 8000872:	e7cb      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000874:	40013c00 	.word	0x40013c00
 8000878:	40020000 	.word	0x40020000
 800087c:	40023800 	.word	0x40023800
 8000880:	40021400 	.word	0x40021400

08000884 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000886:	4606      	mov	r6, r0
{ 
 8000888:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 800088a:	2800      	cmp	r0, #0
 800088c:	d06a      	beq.n	8000964 <HAL_PCD_Init+0xe0>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800088e:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000890:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000892:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000896:	f002 fa7b 	bl	8002d90 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800089a:	f854 0b10 	ldr.w	r0, [r4], #16
 800089e:	f001 f94f 	bl	8001b40 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80008a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a4:	466d      	mov	r5, sp
 80008a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80008b4:	1d37      	adds	r7, r6, #4
 80008b6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80008ba:	6830      	ldr	r0, [r6, #0]
 80008bc:	f001 f900 	bl	8001ac0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008c0:	2100      	movs	r1, #0
 80008c2:	6830      	ldr	r0, [r6, #0]
 80008c4:	f001 f942 	bl	8001b4c <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008cc:	4632      	mov	r2, r6
 80008ce:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80008d2:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008d4:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80008d6:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008da:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 80008dc:	3101      	adds	r1, #1
 80008de:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 80008e0:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008e4:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80008e8:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80008ea:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80008ec:	64d0      	str	r0, [r2, #76]	; 0x4c
 80008ee:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 80008f2:	d1f0      	bne.n	80008d6 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008f4:	2200      	movs	r2, #0
 80008f6:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 80008fa:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008fc:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8000900:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000904:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000906:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 800090a:	3201      	adds	r2, #1
 800090c:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 800090e:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000912:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000916:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800091a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 800091e:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000922:	6041      	str	r1, [r0, #4]
 8000924:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 8000928:	d1e8      	bne.n	80008fc <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800092a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092c:	466d      	mov	r5, sp
 800092e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000938:	e885 0003 	stmia.w	r5, {r0, r1}
 800093c:	4670      	mov	r0, lr
 800093e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000942:	f001 f91b 	bl	8001b7c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000946:	2301      	movs	r3, #1
 8000948:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 
#ifdef USB_OTG_GLPMCFG_LPMEN
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1U)
 800094c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800094e:	2b01      	cmp	r3, #1
 8000950:	d102      	bne.n	8000958 <HAL_PCD_Init+0xd4>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8000952:	4630      	mov	r0, r6
 8000954:	f000 fc17 	bl	8001186 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000958:	6830      	ldr	r0, [r6, #0]
 800095a:	f001 fc3a 	bl	80021d2 <USB_DevDisconnect>
 return HAL_OK;
 800095e:	2000      	movs	r0, #0
}
 8000960:	b00b      	add	sp, #44	; 0x2c
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
 8000966:	e7fb      	b.n	8000960 <HAL_PCD_Init+0xdc>

08000968 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000968:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800096c:	2b01      	cmp	r3, #1
{ 
 800096e:	b510      	push	{r4, lr}
 8000970:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000972:	d00c      	beq.n	800098e <HAL_PCD_Start+0x26>
 8000974:	2301      	movs	r3, #1
 8000976:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 800097a:	6800      	ldr	r0, [r0, #0]
 800097c:	f001 fc1d 	bl	80021ba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	f001 f8d7 	bl	8001b34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000986:	2000      	movs	r0, #0
 8000988:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800098c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800098e:	2002      	movs	r0, #2
}
 8000990:	bd10      	pop	{r4, pc}
	...

08000994 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000998:	f8d0 9000 	ldr.w	r9, [r0]
{
 800099c:	b087      	sub	sp, #28
 800099e:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80009a0:	4648      	mov	r0, r9
 80009a2:	f001 fc50 	bl	8002246 <USB_GetMode>
 80009a6:	9002      	str	r0, [sp, #8]
 80009a8:	2800      	cmp	r0, #0
 80009aa:	f040 8150 	bne.w	8000c4e <HAL_PCD_IRQHandler+0x2ba>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80009ae:	6820      	ldr	r0, [r4, #0]
 80009b0:	f001 fc1b 	bl	80021ea <USB_ReadInterrupts>
 80009b4:	2800      	cmp	r0, #0
 80009b6:	f000 814a 	beq.w	8000c4e <HAL_PCD_IRQHandler+0x2ba>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80009ba:	6820      	ldr	r0, [r4, #0]
 80009bc:	f001 fc15 	bl	80021ea <USB_ReadInterrupts>
 80009c0:	0782      	lsls	r2, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80009c2:	bf48      	it	mi
 80009c4:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80009c6:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80009c8:	bf42      	ittt	mi
 80009ca:	6953      	ldrmi	r3, [r2, #20]
 80009cc:	f003 0302 	andmi.w	r3, r3, #2
 80009d0:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80009d2:	f001 fc0a 	bl	80021ea <USB_ReadInterrupts>
 80009d6:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80009da:	d00a      	beq.n	80009f2 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80009dc:	6820      	ldr	r0, [r4, #0]
 80009de:	f001 fc08 	bl	80021f2 <USB_ReadDevAllOutEpInterrupt>
 80009e2:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80009e6:	4607      	mov	r7, r0
 80009e8:	46a2      	mov	sl, r4
      epnum = 0U;
 80009ea:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009ec:	2f00      	cmp	r7, #0
 80009ee:	f040 8131 	bne.w	8000c54 <HAL_PCD_IRQHandler+0x2c0>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80009f2:	6820      	ldr	r0, [r4, #0]
 80009f4:	f001 fbf9 	bl	80021ea <USB_ReadInterrupts>
 80009f8:	0340      	lsls	r0, r0, #13
 80009fa:	d50b      	bpl.n	8000a14 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80009fc:	6820      	ldr	r0, [r4, #0]
 80009fe:	f001 fc00 	bl	8002202 <USB_ReadDevAllInEpInterrupt>
 8000a02:	4626      	mov	r6, r4
 8000a04:	9003      	str	r0, [sp, #12]
 8000a06:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8000a0a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a0c:	9b03      	ldr	r3, [sp, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8166 	bne.w	8000ce0 <HAL_PCD_IRQHandler+0x34c>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a14:	6820      	ldr	r0, [r4, #0]
 8000a16:	f001 fbe8 	bl	80021ea <USB_ReadInterrupts>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	da15      	bge.n	8000a4a <HAL_PCD_IRQHandler+0xb6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a1e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

#ifdef USB_OTG_GLPMCFG_LPMEN
      if(hpcd->LPM_State == LPM_L1)
 8000a2a:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	f040 81e4 	bne.w	8000dfc <HAL_PCD_IRQHandler+0x468>
      {
        hpcd->LPM_State = LPM_L0;
 8000a34:	2100      	movs	r1, #0
 8000a36:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f002 faec 	bl	8003018 <HAL_PCDEx_LPM_Callback>
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000a40:	6822      	ldr	r2, [r4, #0]
 8000a42:	6953      	ldr	r3, [r2, #20]
 8000a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a48:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000a4a:	6820      	ldr	r0, [r4, #0]
 8000a4c:	f001 fbcd 	bl	80021ea <USB_ReadInterrupts>
 8000a50:	0507      	lsls	r7, r0, #20
 8000a52:	d50b      	bpl.n	8000a6c <HAL_PCD_IRQHandler+0xd8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000a54:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000a58:	07de      	lsls	r6, r3, #31
 8000a5a:	d502      	bpl.n	8000a62 <HAL_PCD_IRQHandler+0xce>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f002 f9f5 	bl	8002e4c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000a62:	6822      	ldr	r2, [r4, #0]
 8000a64:	6953      	ldr	r3, [r2, #20]
 8000a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a6a:	6153      	str	r3, [r2, #20]
    }

#ifdef USB_OTG_GLPMCFG_LPMEN
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	f001 fbbc 	bl	80021ea <USB_ReadInterrupts>
 8000a72:	0100      	lsls	r0, r0, #4
 8000a74:	d514      	bpl.n	8000aa0 <HAL_PCD_IRQHandler+0x10c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000a7e:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8000a80:	f894 23ec 	ldrb.w	r2, [r4, #1004]	; 0x3ec
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	f040 81bd 	bne.w	8000e04 <HAL_PCD_IRQHandler+0x470>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8000a8c:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000a8e:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8000a92:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000a96:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f002 fabc 	bl	8003018 <HAL_PCDEx_LPM_Callback>
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	f001 fba2 	bl	80021ea <USB_ReadInterrupts>
 8000aa6:	04c1      	lsls	r1, r0, #19
 8000aa8:	d537      	bpl.n	8000b1a <HAL_PCD_IRQHandler+0x186>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000aaa:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000aae:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000ab0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000ab2:	f023 0301 	bic.w	r3, r3, #1
 8000ab6:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000ab8:	2110      	movs	r1, #16
 8000aba:	f001 f903 	bl	8001cc4 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000abe:	6861      	ldr	r1, [r4, #4]
 8000ac0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000ac4:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ac6:	9802      	ldr	r0, [sp, #8]
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f040 819f 	bne.w	8000e0c <HAL_PCD_IRQHandler+0x478>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000ad4:	69f3      	ldr	r3, [r6, #28]
 8000ad6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000ada:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000adc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 819c 	beq.w	8000e1c <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000ae4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000ae8:	f043 030b 	orr.w	r3, r3, #11
 8000aec:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000af0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000af2:	f043 030b 	orr.w	r3, r3, #11
 8000af6:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000af8:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000afc:	7c21      	ldrb	r1, [r4, #16]
 8000afe:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000b04:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b08:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000b0c:	f001 fbba 	bl	8002284 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000b10:	6822      	ldr	r2, [r4, #0]
 8000b12:	6953      	ldr	r3, [r2, #20]
 8000b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b18:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000b1a:	6820      	ldr	r0, [r4, #0]
 8000b1c:	f001 fb65 	bl	80021ea <USB_ReadInterrupts>
 8000b20:	0482      	lsls	r2, r0, #18
 8000b22:	d51d      	bpl.n	8000b60 <HAL_PCD_IRQHandler+0x1cc>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000b24:	6820      	ldr	r0, [r4, #0]
 8000b26:	f001 fb92 	bl	800224e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000b2a:	6820      	ldr	r0, [r4, #0]
 8000b2c:	68c3      	ldr	r3, [r0, #12]
 8000b2e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b32:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000b34:	f001 f8ef 	bl	8001d16 <USB_GetDevSpeed>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	f040 8178 	bne.w	8000e2e <HAL_PCD_IRQHandler+0x49a>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b3e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000b40:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b48:	68d3      	ldr	r3, [r2, #12]
 8000b4a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000b4e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000b50:	4620      	mov	r0, r4
 8000b52:	f002 f96a 	bl	8002e2a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	6953      	ldr	r3, [r2, #20]
 8000b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b5e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	f001 fb42 	bl	80021ea <USB_ReadInterrupts>
 8000b66:	06c3      	lsls	r3, r0, #27
 8000b68:	d52b      	bpl.n	8000bc2 <HAL_PCD_IRQHandler+0x22e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b6a:	6822      	ldr	r2, [r4, #0]
 8000b6c:	6993      	ldr	r3, [r2, #24]
 8000b6e:	f023 0310 	bic.w	r3, r3, #16
 8000b72:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b74:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b78:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b7c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b7e:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b82:	f040 81b5 	bne.w	8000ef0 <HAL_PCD_IRQHandler+0x55c>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b8a:	421e      	tst	r6, r3
 8000b8c:	d014      	beq.n	8000bb8 <HAL_PCD_IRQHandler+0x224>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000b8e:	271c      	movs	r7, #28
 8000b90:	fb07 4708 	mla	r7, r7, r8, r4
 8000b94:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b98:	4632      	mov	r2, r6
 8000b9a:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000b9e:	4648      	mov	r0, r9
 8000ba0:	f001 fab5 	bl	800210e <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ba4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ba8:	4433      	add	r3, r6
 8000baa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bb2:	441e      	add	r6, r3
 8000bb4:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bb8:	6822      	ldr	r2, [r4, #0]
 8000bba:	6993      	ldr	r3, [r2, #24]
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000bc2:	6820      	ldr	r0, [r4, #0]
 8000bc4:	f001 fb11 	bl	80021ea <USB_ReadInterrupts>
 8000bc8:	0707      	lsls	r7, r0, #28
 8000bca:	d507      	bpl.n	8000bdc <HAL_PCD_IRQHandler+0x248>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f002 f928 	bl	8002e22 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000bd2:	6822      	ldr	r2, [r4, #0]
 8000bd4:	6953      	ldr	r3, [r2, #20]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bdc:	6820      	ldr	r0, [r4, #0]
 8000bde:	f001 fb04 	bl	80021ea <USB_ReadInterrupts>
 8000be2:	02c6      	lsls	r6, r0, #11
 8000be4:	d508      	bpl.n	8000bf8 <HAL_PCD_IRQHandler+0x264>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000be6:	b2e9      	uxtb	r1, r5
 8000be8:	4620      	mov	r0, r4
 8000bea:	f002 f94f 	bl	8002e8c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	6953      	ldr	r3, [r2, #20]
 8000bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf6:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000bf8:	6820      	ldr	r0, [r4, #0]
 8000bfa:	f001 faf6 	bl	80021ea <USB_ReadInterrupts>
 8000bfe:	0280      	lsls	r0, r0, #10
 8000c00:	d508      	bpl.n	8000c14 <HAL_PCD_IRQHandler+0x280>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000c02:	b2e9      	uxtb	r1, r5
 8000c04:	4620      	mov	r0, r4
 8000c06:	f002 f93d 	bl	8002e84 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c0a:	6822      	ldr	r2, [r4, #0]
 8000c0c:	6953      	ldr	r3, [r2, #20]
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c14:	6820      	ldr	r0, [r4, #0]
 8000c16:	f001 fae8 	bl	80021ea <USB_ReadInterrupts>
 8000c1a:	0041      	lsls	r1, r0, #1
 8000c1c:	d507      	bpl.n	8000c2e <HAL_PCD_IRQHandler+0x29a>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f002 f938 	bl	8002e94 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	6953      	ldr	r3, [r2, #20]
 8000c28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c2c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c2e:	6820      	ldr	r0, [r4, #0]
 8000c30:	f001 fadb 	bl	80021ea <USB_ReadInterrupts>
 8000c34:	0742      	lsls	r2, r0, #29
 8000c36:	d50a      	bpl.n	8000c4e <HAL_PCD_IRQHandler+0x2ba>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c3c:	076b      	lsls	r3, r5, #29
 8000c3e:	d502      	bpl.n	8000c46 <HAL_PCD_IRQHandler+0x2b2>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000c40:	4620      	mov	r0, r4
 8000c42:	f002 f92b 	bl	8002e9c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	4315      	orrs	r5, r2
 8000c4c:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000c4e:	b007      	add	sp, #28
 8000c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000c54:	07fb      	lsls	r3, r7, #31
 8000c56:	d53d      	bpl.n	8000cd4 <HAL_PCD_IRQHandler+0x340>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c58:	fa5f fb85 	uxtb.w	fp, r5
 8000c5c:	4659      	mov	r1, fp
 8000c5e:	6820      	ldr	r0, [r4, #0]
 8000c60:	f001 fad7 	bl	8002212 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c64:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c68:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c6a:	d021      	beq.n	8000cb0 <HAL_PCD_IRQHandler+0x31c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	60b1      	str	r1, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000c70:	6921      	ldr	r1, [r4, #16]
 8000c72:	2901      	cmp	r1, #1
 8000c74:	d10c      	bne.n	8000c90 <HAL_PCD_IRQHandler+0x2fc>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000c76:	6931      	ldr	r1, [r6, #16]
 8000c78:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000c7c:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000c80:	1a41      	subs	r1, r0, r1
 8000c82:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000c86:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000c8a:	4408      	add	r0, r1
 8000c8c:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000c90:	4659      	mov	r1, fp
 8000c92:	4620      	mov	r0, r4
 8000c94:	f002 f8b4 	bl	8002e00 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000c98:	6921      	ldr	r1, [r4, #16]
 8000c9a:	2901      	cmp	r1, #1
 8000c9c:	d108      	bne.n	8000cb0 <HAL_PCD_IRQHandler+0x31c>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000c9e:	b93d      	cbnz	r5, 8000cb0 <HAL_PCD_IRQHandler+0x31c>
 8000ca0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000ca4:	b922      	cbnz	r2, 8000cb0 <HAL_PCD_IRQHandler+0x31c>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ca6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000caa:	6820      	ldr	r0, [r4, #0]
 8000cac:	f001 faea 	bl	8002284 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000cb0:	f018 0f08 	tst.w	r8, #8
 8000cb4:	d004      	beq.n	8000cc0 <HAL_PCD_IRQHandler+0x32c>
            HAL_PCD_SetupStageCallback(hpcd);
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f002 f89c 	bl	8002df4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000cc0:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2310      	movne	r3, #16
 8000cc8:	60b3      	strne	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000cca:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000cce:	bf1c      	itt	ne
 8000cd0:	2320      	movne	r3, #32
 8000cd2:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000cd4:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000cd6:	087f      	lsrs	r7, r7, #1
 8000cd8:	3620      	adds	r6, #32
 8000cda:	f10a 0a1c 	add.w	sl, sl, #28
 8000cde:	e685      	b.n	80009ec <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000ce0:	9b03      	ldr	r3, [sp, #12]
 8000ce2:	07d9      	lsls	r1, r3, #31
 8000ce4:	d558      	bpl.n	8000d98 <HAL_PCD_IRQHandler+0x404>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000ce6:	fa5f fb85 	uxtb.w	fp, r5
 8000cea:	4659      	mov	r1, fp
 8000cec:	6820      	ldr	r0, [r4, #0]
 8000cee:	f001 fa9a 	bl	8002226 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000cf2:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000cf4:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000cf6:	d520      	bpl.n	8000d3a <HAL_PCD_IRQHandler+0x3a6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000cf8:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d00:	ea23 0301 	bic.w	r3, r3, r1
 8000d04:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000d0e:	6923      	ldr	r3, [r4, #16]
 8000d10:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000d12:	bf01      	itttt	eq
 8000d14:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000d16:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000d18:	189b      	addeq	r3, r3, r2
 8000d1a:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000d1c:	4659      	mov	r1, fp
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f002 f877 	bl	8002e12 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000d24:	6921      	ldr	r1, [r4, #16]
 8000d26:	2901      	cmp	r1, #1
 8000d28:	d107      	bne.n	8000d3a <HAL_PCD_IRQHandler+0x3a6>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000d2a:	b935      	cbnz	r5, 8000d3a <HAL_PCD_IRQHandler+0x3a6>
 8000d2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d2e:	b923      	cbnz	r3, 8000d3a <HAL_PCD_IRQHandler+0x3a6>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d30:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d34:	6820      	ldr	r0, [r4, #0]
 8000d36:	f001 faa5 	bl	8002284 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d3a:	073b      	lsls	r3, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d3c:	bf44      	itt	mi
 8000d3e:	2308      	movmi	r3, #8
 8000d40:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d44:	06f8      	lsls	r0, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d46:	bf44      	itt	mi
 8000d48:	2310      	movmi	r3, #16
 8000d4a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d4e:	0679      	lsls	r1, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d50:	bf44      	itt	mi
 8000d52:	2340      	movmi	r3, #64	; 0x40
 8000d54:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d58:	07ba      	lsls	r2, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000d5a:	bf44      	itt	mi
 8000d5c:	2302      	movmi	r3, #2
 8000d5e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d62:	063b      	lsls	r3, r7, #24
 8000d64:	d518      	bpl.n	8000d98 <HAL_PCD_IRQHandler+0x404>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000d6a:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000d6c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000d6e:	1aff      	subs	r7, r7, r3
 8000d70:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000d72:	429f      	cmp	r7, r3
 8000d74:	bf28      	it	cs
 8000d76:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d78:	9b04      	ldr	r3, [sp, #16]
 8000d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000d7e:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d82:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000d86:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d8a:	9305      	str	r3, [sp, #20]
 8000d8c:	9b05      	ldr	r3, [sp, #20]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	4553      	cmp	r3, sl
 8000d94:	d808      	bhi.n	8000da8 <HAL_PCD_IRQHandler+0x414>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000d96:	b32f      	cbz	r7, 8000de4 <HAL_PCD_IRQHandler+0x450>
        ep_intr >>= 1U;
 8000d98:	9b03      	ldr	r3, [sp, #12]
 8000d9a:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000d9c:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000d9e:	9303      	str	r3, [sp, #12]
 8000da0:	361c      	adds	r6, #28
 8000da2:	f108 0820 	add.w	r8, r8, #32
 8000da6:	e631      	b.n	8000a0c <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000da8:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000daa:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d9f2      	bls.n	8000d96 <HAL_PCD_IRQHandler+0x402>
          (ep->xfer_count < ep->xfer_len) &&
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_PCD_IRQHandler+0x402>
 8000db4:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000db6:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	bf28      	it	cs
 8000dbe:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000dc0:	7c23      	ldrb	r3, [r4, #16]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	465a      	mov	r2, fp
 8000dc6:	b2bb      	uxth	r3, r7
 8000dc8:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000dca:	f001 f98c 	bl	80020e6 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000dce:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000dd0:	443b      	add	r3, r7
 8000dd2:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000dd4:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000dd6:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000dda:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000ddc:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000de0:	6533      	str	r3, [r6, #80]	; 0x50
 8000de2:	e7d3      	b.n	8000d8c <HAL_PCD_IRQHandler+0x3f8>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000de4:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000de6:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000de8:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000dec:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000df0:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000df2:	ea23 0302 	bic.w	r3, r3, r2
 8000df6:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000dfa:	e7cd      	b.n	8000d98 <HAL_PCD_IRQHandler+0x404>
        HAL_PCD_ResumeCallback(hpcd);
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f002 f83d 	bl	8002e7c <HAL_PCD_ResumeCallback>
 8000e02:	e61d      	b.n	8000a40 <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 8000e04:	4620      	mov	r0, r4
 8000e06:	f002 f821 	bl	8002e4c <HAL_PCD_SuspendCallback>
 8000e0a:	e649      	b.n	8000aa0 <HAL_PCD_IRQHandler+0x10c>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0c:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000e0e:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e10:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000e12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e16:	9002      	str	r0, [sp, #8]
 8000e18:	3320      	adds	r3, #32
 8000e1a:	e654      	b.n	8000ac6 <HAL_PCD_IRQHandler+0x132>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 8000e1c:	6973      	ldr	r3, [r6, #20]
 8000e1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000e22:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000e24:	6933      	ldr	r3, [r6, #16]
 8000e26:	f043 030b 	orr.w	r3, r3, #11
 8000e2a:	6133      	str	r3, [r6, #16]
 8000e2c:	e664      	b.n	8000af8 <HAL_PCD_IRQHandler+0x164>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000e32:	2340      	movs	r3, #64	; 0x40
 8000e34:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000e36:	f000 fa53 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <HAL_PCD_IRQHandler+0x57c>)
 8000e3c:	4a35      	ldr	r2, [pc, #212]	; (8000f14 <HAL_PCD_IRQHandler+0x580>)
 8000e3e:	4403      	add	r3, r0
 8000e40:	4293      	cmp	r3, r2
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	d804      	bhi.n	8000e50 <HAL_PCD_IRQHandler+0x4bc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	e67f      	b.n	8000b50 <HAL_PCD_IRQHandler+0x1bc>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000e50:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_PCD_IRQHandler+0x584>)
 8000e52:	4932      	ldr	r1, [pc, #200]	; (8000f1c <HAL_PCD_IRQHandler+0x588>)
 8000e54:	4402      	add	r2, r0
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d803      	bhi.n	8000e62 <HAL_PCD_IRQHandler+0x4ce>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e60:	e7f4      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000e62:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000e66:	492e      	ldr	r1, [pc, #184]	; (8000f20 <HAL_PCD_IRQHandler+0x58c>)
 8000e68:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d803      	bhi.n	8000e78 <HAL_PCD_IRQHandler+0x4e4>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e76:	e7e9      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000e78:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000e7c:	4929      	ldr	r1, [pc, #164]	; (8000f24 <HAL_PCD_IRQHandler+0x590>)
 8000e7e:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000e82:	428a      	cmp	r2, r1
 8000e84:	d803      	bhi.n	8000e8e <HAL_PCD_IRQHandler+0x4fa>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e8c:	e7de      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <HAL_PCD_IRQHandler+0x594>)
 8000e90:	4926      	ldr	r1, [pc, #152]	; (8000f2c <HAL_PCD_IRQHandler+0x598>)
 8000e92:	4402      	add	r2, r0
 8000e94:	428a      	cmp	r2, r1
 8000e96:	d803      	bhi.n	8000ea0 <HAL_PCD_IRQHandler+0x50c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000e9e:	e7d5      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_PCD_IRQHandler+0x59c>)
 8000ea2:	4924      	ldr	r1, [pc, #144]	; (8000f34 <HAL_PCD_IRQHandler+0x5a0>)
 8000ea4:	4402      	add	r2, r0
 8000ea6:	428a      	cmp	r2, r1
 8000ea8:	d803      	bhi.n	8000eb2 <HAL_PCD_IRQHandler+0x51e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000eb0:	e7cc      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <HAL_PCD_IRQHandler+0x5a4>)
 8000eb4:	4921      	ldr	r1, [pc, #132]	; (8000f3c <HAL_PCD_IRQHandler+0x5a8>)
 8000eb6:	4402      	add	r2, r0
 8000eb8:	428a      	cmp	r2, r1
 8000eba:	d803      	bhi.n	8000ec4 <HAL_PCD_IRQHandler+0x530>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000ec2:	e7c3      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000ec4:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000ec8:	491d      	ldr	r1, [pc, #116]	; (8000f40 <HAL_PCD_IRQHandler+0x5ac>)
 8000eca:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000ece:	428a      	cmp	r2, r1
 8000ed0:	d803      	bhi.n	8000eda <HAL_PCD_IRQHandler+0x546>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ed8:	e7b8      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000eda:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_PCD_IRQHandler+0x5b0>)
 8000edc:	491a      	ldr	r1, [pc, #104]	; (8000f48 <HAL_PCD_IRQHandler+0x5b4>)
 8000ede:	4402      	add	r2, r0
 8000ee0:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	bf94      	ite	ls
 8000ee6:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000eea:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000eee:	e7ad      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4b8>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	f47f ae61 	bne.w	8000bb8 <HAL_PCD_IRQHandler+0x224>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000efc:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000efe:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f00:	f001 f905 	bl	800210e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f04:	fb07 4708 	mla	r7, r7, r8, r4
 8000f08:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000f0c:	e64f      	b.n	8000bae <HAL_PCD_IRQHandler+0x21a>
 8000f0e:	bf00      	nop
 8000f10:	ff275340 	.word	0xff275340
 8000f14:	000c34ff 	.word	0x000c34ff
 8000f18:	ff1b1e40 	.word	0xff1b1e40
 8000f1c:	000f423f 	.word	0x000f423f
 8000f20:	00124f7f 	.word	0x00124f7f
 8000f24:	0013d61f 	.word	0x0013d61f
 8000f28:	fee5b660 	.word	0xfee5b660
 8000f2c:	0016e35f 	.word	0x0016e35f
 8000f30:	feced300 	.word	0xfeced300
 8000f34:	001b773f 	.word	0x001b773f
 8000f38:	feb35bc0 	.word	0xfeb35bc0
 8000f3c:	002191bf 	.word	0x002191bf
 8000f40:	0038751f 	.word	0x0038751f
 8000f44:	fe5954e0 	.word	0xfe5954e0
 8000f48:	00419cdf 	.word	0x00419cdf

08000f4c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000f4c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000f50:	2b01      	cmp	r3, #1
{
 8000f52:	b510      	push	{r4, lr}
 8000f54:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000f56:	d009      	beq.n	8000f6c <HAL_PCD_SetAddress+0x20>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000f5e:	6800      	ldr	r0, [r0, #0]
 8000f60:	f001 f91b 	bl	800219a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000f64:	2000      	movs	r0, #0
 8000f66:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f6a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f6c:	2002      	movs	r0, #2
}
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <HAL_PCD_EP_Open>:
{
 8000f70:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000f72:	b24e      	sxtb	r6, r1
 8000f74:	2e00      	cmp	r6, #0
{
 8000f76:	4604      	mov	r4, r0
 8000f78:	f04f 051c 	mov.w	r5, #28
 8000f7c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f80:	bfb5      	itete	lt
 8000f82:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f86:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f8a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f8c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000f90:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000f92:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000f94:	bfb8      	it	lt
 8000f96:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000f98:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000f9a:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f9c:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000fa0:	bf04      	itt	eq
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000fa6:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fa8:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000faa:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000fae:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d009      	beq.n	8000fc8 <HAL_PCD_EP_Open+0x58>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	f000 fec6 	bl	8001d4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000fc8:	2002      	movs	r0, #2
}
 8000fca:	bd70      	pop	{r4, r5, r6, pc}

08000fcc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000fcc:	b24b      	sxtb	r3, r1
 8000fce:	2b00      	cmp	r3, #0
{  
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	f04f 021c 	mov.w	r2, #28
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fdc:	bfb5      	itete	lt
 8000fde:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fe2:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fe6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fe8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fec:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000fee:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ff0:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000ff2:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d009      	beq.n	800100e <HAL_PCD_EP_Close+0x42>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	f000 fee2 	bl	8001dca <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001006:	2000      	movs	r0, #0
 8001008:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800100c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800100e:	2002      	movs	r0, #2
}
 8001010:	bd10      	pop	{r4, pc}

08001012 <HAL_PCD_EP_Receive>:
{
 8001012:	b538      	push	{r3, r4, r5, lr}
 8001014:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001018:	241c      	movs	r4, #28
 800101a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800101e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001022:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001026:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 800102a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 800102c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001030:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001034:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001038:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 800103c:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800103e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001040:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001042:	bf08      	it	eq
 8001044:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8001048:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800104a:	b91d      	cbnz	r5, 8001054 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800104c:	f000 ffde 	bl	800200c <USB_EP0StartXfer>
}
 8001050:	2000      	movs	r0, #0
 8001052:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001054:	f000 ff14 	bl	8001e80 <USB_EPStartXfer>
 8001058:	e7fa      	b.n	8001050 <HAL_PCD_EP_Receive+0x3e>

0800105a <HAL_PCD_EP_Transmit>:
{
 800105a:	b538      	push	{r3, r4, r5, lr}
 800105c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001060:	241c      	movs	r4, #28
 8001062:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001066:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800106a:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 800106c:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8001072:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001074:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001076:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 800107a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 800107e:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001080:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001082:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001084:	bf08      	it	eq
 8001086:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001088:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800108a:	b91d      	cbnz	r5, 8001094 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800108c:	f000 ffbe 	bl	800200c <USB_EP0StartXfer>
}
 8001090:	2000      	movs	r0, #0
 8001092:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001094:	f000 fef4 	bl	8001e80 <USB_EPStartXfer>
 8001098:	e7fa      	b.n	8001090 <HAL_PCD_EP_Transmit+0x36>

0800109a <HAL_PCD_EP_SetStall>:
{
 800109a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800109c:	b24b      	sxtb	r3, r1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80010a4:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010a8:	bfb5      	itete	lt
 80010aa:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80010ae:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010b2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80010b4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80010b8:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010ba:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80010bc:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80010be:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010c0:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010c2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010c4:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80010c8:	4293      	cmp	r3, r2
{
 80010ca:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80010cc:	d00f      	beq.n	80010ee <HAL_PCD_EP_SetStall+0x54>
 80010ce:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80010d2:	6800      	ldr	r0, [r0, #0]
 80010d4:	f001 f829 	bl	800212a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80010d8:	b92d      	cbnz	r5, 80010e6 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80010da:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80010de:	7c21      	ldrb	r1, [r4, #16]
 80010e0:	6820      	ldr	r0, [r4, #0]
 80010e2:	f001 f8cf 	bl	8002284 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80010e6:	2000      	movs	r0, #0
 80010e8:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010ee:	2002      	movs	r0, #2
}
 80010f0:	bd38      	pop	{r3, r4, r5, pc}

080010f2 <HAL_PCD_EP_ClrStall>:
{
 80010f2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80010f4:	b24b      	sxtb	r3, r1
 80010f6:	2b00      	cmp	r3, #0
{
 80010f8:	4605      	mov	r5, r0
 80010fa:	f04f 021c 	mov.w	r2, #28
 80010fe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001102:	bfb5      	itete	lt
 8001104:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001108:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800110c:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 800110e:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001112:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001114:	2400      	movs	r4, #0
 8001116:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001118:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800111a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800111c:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001120:	2b01      	cmp	r3, #1
 8001122:	d009      	beq.n	8001138 <HAL_PCD_EP_ClrStall+0x46>
 8001124:	2301      	movs	r3, #1
 8001126:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800112a:	6828      	ldr	r0, [r5, #0]
 800112c:	f001 f81c 	bl	8002168 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001130:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001134:	4620      	mov	r0, r4
 8001136:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001138:	2002      	movs	r0, #2
}
 800113a:	bd38      	pop	{r3, r4, r5, pc}

0800113c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800113c:	6800      	ldr	r0, [r0, #0]
{
 800113e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001140:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001142:	b921      	cbnz	r1, 800114e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001148:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 800114a:	2000      	movs	r0, #0
 800114c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800114e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001150:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001152:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001156:	1e4e      	subs	r6, r1, #1
 8001158:	b2ec      	uxtb	r4, r5
 800115a:	42b4      	cmp	r4, r6
 800115c:	f105 0501 	add.w	r5, r5, #1
 8001160:	db06      	blt.n	8001170 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001162:	313f      	adds	r1, #63	; 0x3f
 8001164:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800116c:	6043      	str	r3, [r0, #4]
 800116e:	e7ec      	b.n	800114a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001170:	3440      	adds	r4, #64	; 0x40
 8001172:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001176:	6864      	ldr	r4, [r4, #4]
 8001178:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800117c:	e7ec      	b.n	8001158 <HAL_PCDEx_SetTxFiFo+0x1c>

0800117e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800117e:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001180:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001182:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001184:	4770      	bx	lr

08001186 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001186:	6802      	ldr	r2, [r0, #0]
{
 8001188:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 800118a:	2101      	movs	r1, #1
 800118c:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8001190:	2000      	movs	r0, #0
 8001192:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001196:	6993      	ldr	r3, [r2, #24]
 8001198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800119e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	f043 0303 	orr.w	r3, r3, #3
 80011a8:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 80011aa:	4770      	bx	lr

080011ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011b2:	4604      	mov	r4, r0
 80011b4:	b910      	cbnz	r0, 80011bc <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
 80011b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <HAL_RCC_ClockConfig+0x124>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f002 020f 	and.w	r2, r2, #15
 80011c4:	428a      	cmp	r2, r1
 80011c6:	d328      	bcc.n	800121a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c8:	6821      	ldr	r1, [r4, #0]
 80011ca:	078f      	lsls	r7, r1, #30
 80011cc:	d42d      	bmi.n	800122a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ce:	07c8      	lsls	r0, r1, #31
 80011d0:	d440      	bmi.n	8001254 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_ClockConfig+0x124>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f002 020f 	and.w	r2, r2, #15
 80011da:	4295      	cmp	r5, r2
 80011dc:	d366      	bcc.n	80012ac <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	0751      	lsls	r1, r2, #29
 80011e2:	d46c      	bmi.n	80012be <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	0713      	lsls	r3, r2, #28
 80011e6:	d507      	bpl.n	80011f8 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e8:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <HAL_RCC_ClockConfig+0x128>)
 80011ea:	6921      	ldr	r1, [r4, #16]
 80011ec:	6893      	ldr	r3, [r2, #8]
 80011ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011f6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f8:	f000 fa80 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_RCC_ClockConfig+0x128>)
 80011fe:	4a36      	ldr	r2, [pc, #216]	; (80012d8 <HAL_RCC_ClockConfig+0x12c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	40d8      	lsrs	r0, r3
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
 800120c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff f980 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001214:	2000      	movs	r0, #0
 8001216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	4299      	cmp	r1, r3
 8001226:	d1c6      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xa>
 8001228:	e7ce      	b.n	80011c8 <HAL_RCC_ClockConfig+0x1c>
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	bf1e      	ittt	ne
 8001232:	689a      	ldrne	r2, [r3, #8]
 8001234:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001238:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	bf42      	ittt	mi
 800123e:	689a      	ldrmi	r2, [r3, #8]
 8001240:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001244:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	68a0      	ldr	r0, [r4, #8]
 800124a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800124e:	4302      	orrs	r2, r0
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	e7bc      	b.n	80011ce <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001254:	6862      	ldr	r2, [r4, #4]
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_RCC_ClockConfig+0x128>)
 8001258:	2a01      	cmp	r2, #1
 800125a:	d11d      	bne.n	8001298 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	d0a8      	beq.n	80011b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001264:	4e1b      	ldr	r6, [pc, #108]	; (80012d4 <HAL_RCC_ClockConfig+0x128>)
 8001266:	68b3      	ldr	r3, [r6, #8]
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	4313      	orrs	r3, r2
 800126e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001270:	f7ff f99a 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001274:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001278:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	68b3      	ldr	r3, [r6, #8]
 800127c:	6862      	ldr	r2, [r4, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001286:	d0a4      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001288:	f7ff f98e 	bl	80005a8 <HAL_GetTick>
 800128c:	1bc0      	subs	r0, r0, r7
 800128e:	4540      	cmp	r0, r8
 8001290:	d9f3      	bls.n	800127a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001292:	2003      	movs	r0, #3
}
 8001294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001298:	1e91      	subs	r1, r2, #2
 800129a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129e:	d802      	bhi.n	80012a6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012a4:	e7dd      	b.n	8001262 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	f013 0f02 	tst.w	r3, #2
 80012aa:	e7da      	b.n	8001262 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ac:	b2ea      	uxtb	r2, r5
 80012ae:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	429d      	cmp	r5, r3
 80012b8:	f47f af7d 	bne.w	80011b6 <HAL_RCC_ClockConfig+0xa>
 80012bc:	e78f      	b.n	80011de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012be:	4905      	ldr	r1, [pc, #20]	; (80012d4 <HAL_RCC_ClockConfig+0x128>)
 80012c0:	68e0      	ldr	r0, [r4, #12]
 80012c2:	688b      	ldr	r3, [r1, #8]
 80012c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012c8:	4303      	orrs	r3, r0
 80012ca:	608b      	str	r3, [r1, #8]
 80012cc:	e78a      	b.n	80011e4 <HAL_RCC_ClockConfig+0x38>
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	080033cc 	.word	0x080033cc
 80012dc:	20000088 	.word	0x20000088

080012e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000088 	.word	0x20000088

080012ec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80012ec:	6803      	ldr	r3, [r0, #0]
{
 80012ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80012f2:	f013 0601 	ands.w	r6, r3, #1
{
 80012f6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80012f8:	d00b      	beq.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80012fa:	49aa      	ldr	r1, [pc, #680]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012fc:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80012fe:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001302:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001306:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001308:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800130c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001310:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001312:	079d      	lsls	r5, r3, #30
 8001314:	d50b      	bpl.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001316:	48a3      	ldr	r0, [pc, #652]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001318:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800131a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800131e:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8001322:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001324:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001326:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 800132a:	bf08      	it	eq
 800132c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800132e:	f013 0504 	ands.w	r5, r3, #4
 8001332:	d012      	beq.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001334:	499b      	ldr	r1, [pc, #620]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001336:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001338:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800133c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001340:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001344:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001348:	bf18      	it	ne
 800134a:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800134e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001352:	bf12      	itee	ne
 8001354:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8001356:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8001358:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800135a:	0718      	lsls	r0, r3, #28
 800135c:	d50f      	bpl.n	800137e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800135e:	4891      	ldr	r0, [pc, #580]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001362:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001366:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800136a:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800136c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001370:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001374:	f000 8109 	beq.w	800158a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8001378:	2900      	cmp	r1, #0
 800137a:	bf08      	it	eq
 800137c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800137e:	0699      	lsls	r1, r3, #26
 8001380:	d533      	bpl.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	4b87      	ldr	r3, [pc, #540]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001388:	4f87      	ldr	r7, [pc, #540]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013a4:	f7ff f900 	bl	80005a8 <HAL_GetTick>
 80013a8:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	05da      	lsls	r2, r3, #23
 80013ae:	f140 80ee 	bpl.w	800158e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013b2:	4f7c      	ldr	r7, [pc, #496]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80013b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013ba:	f040 80fb 	bne.w	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80013c4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80013c8:	4a76      	ldr	r2, [pc, #472]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80013ca:	f040 8116 	bne.w	80015fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80013ce:	6891      	ldr	r1, [r2, #8]
 80013d0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80013d4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80013d8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80013dc:	4301      	orrs	r1, r0
 80013de:	6091      	str	r1, [r2, #8]
 80013e0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80013e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80013ee:	bf42      	ittt	mi
 80013f0:	4b6e      	ldrmi	r3, [pc, #440]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80013f2:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 80013f6:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	061a      	lsls	r2, r3, #24
 80013fc:	d508      	bpl.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80013fe:	4969      	ldr	r1, [pc, #420]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001400:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001402:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001406:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800140a:	4302      	orrs	r2, r0
 800140c:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001410:	065f      	lsls	r7, r3, #25
 8001412:	d508      	bpl.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001414:	4963      	ldr	r1, [pc, #396]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001416:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001418:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800141c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001420:	4302      	orrs	r2, r0
 8001422:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001426:	05d8      	lsls	r0, r3, #23
 8001428:	d50c      	bpl.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800142a:	485e      	ldr	r0, [pc, #376]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800142c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800142e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001432:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001436:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8001438:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800143c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8001440:	bf08      	it	eq
 8001442:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001444:	0599      	lsls	r1, r3, #22
 8001446:	d508      	bpl.n	800145a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001448:	4956      	ldr	r1, [pc, #344]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800144a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800144c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001450:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001454:	4302      	orrs	r2, r0
 8001456:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800145a:	055a      	lsls	r2, r3, #21
 800145c:	f100 80d1 	bmi.w	8001602 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001460:	2e01      	cmp	r6, #1
 8001462:	f040 80dc 	bne.w	800161e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001466:	4e52      	ldr	r6, [pc, #328]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001468:	4f4e      	ldr	r7, [pc, #312]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800146e:	f7ff f89b 	bl	80005a8 <HAL_GetTick>
 8001472:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	f100 8125 	bmi.w	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800147c:	6822      	ldr	r2, [r4, #0]
 800147e:	07d0      	lsls	r0, r2, #31
 8001480:	d501      	bpl.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8001482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001484:	b11b      	cbz	r3, 800148e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8001486:	0791      	lsls	r1, r2, #30
 8001488:	d515      	bpl.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800148a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800148c:	b99b      	cbnz	r3, 80014b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800148e:	4945      	ldr	r1, [pc, #276]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001490:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001494:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800149c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80014a0:	4303      	orrs	r3, r0
 80014a2:	6860      	ldr	r0, [r4, #4]
 80014a4:	4303      	orrs	r3, r0
 80014a6:	68a0      	ldr	r0, [r4, #8]
 80014a8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014ac:	6960      	ldr	r0, [r4, #20]
 80014ae:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80014b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80014b6:	0753      	lsls	r3, r2, #29
 80014b8:	d503      	bpl.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80014ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014c0:	d005      	beq.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80014c2:	0717      	lsls	r7, r2, #28
 80014c4:	d520      	bpl.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80014c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014cc:	d11c      	bne.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80014ce:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80014d0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80014d4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80014d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014dc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014e0:	4303      	orrs	r3, r0
 80014e2:	6860      	ldr	r0, [r4, #4]
 80014e4:	4303      	orrs	r3, r0
 80014e6:	68a0      	ldr	r0, [r4, #8]
 80014e8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014ec:	6920      	ldr	r0, [r4, #16]
 80014ee:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80014f6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80014fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014fc:	f020 001f 	bic.w	r0, r0, #31
 8001500:	3b01      	subs	r3, #1
 8001502:	4303      	orrs	r3, r0
 8001504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001508:	0550      	lsls	r0, r2, #21
 800150a:	d51b      	bpl.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800150c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800150e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001512:	d117      	bne.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001514:	4823      	ldr	r0, [pc, #140]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001516:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001518:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800151c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001520:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001524:	433b      	orrs	r3, r7
 8001526:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001528:	f3c1 4101 	ubfx	r1, r1, #16, #2
 800152c:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800152e:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8001532:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001536:	68e1      	ldr	r1, [r4, #12]
 8001538:	0849      	lsrs	r1, r1, #1
 800153a:	3901      	subs	r1, #1
 800153c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001540:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001544:	0511      	lsls	r1, r2, #20
 8001546:	d511      	bpl.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001548:	6923      	ldr	r3, [r4, #16]
 800154a:	68a2      	ldr	r2, [r4, #8]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001552:	6862      	ldr	r2, [r4, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	6962      	ldr	r2, [r4, #20]
 8001558:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800155c:	68e2      	ldr	r2, [r4, #12]
 800155e:	0852      	lsrs	r2, r2, #1
 8001560:	3a01      	subs	r2, #1
 8001562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001568:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800156c:	2301      	movs	r3, #1
 800156e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff f81a 	bl	80005a8 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001574:	4e0b      	ldr	r6, [pc, #44]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8001576:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001578:	6833      	ldr	r3, [r6, #0]
 800157a:	011a      	lsls	r2, r3, #4
 800157c:	d453      	bmi.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800157e:	f7ff f813 	bl	80005a8 <HAL_GetTick>
 8001582:	1bc0      	subs	r0, r0, r7
 8001584:	2802      	cmp	r0, #2
 8001586:	d9f7      	bls.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8001588:	e008      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 800158a:	2601      	movs	r6, #1
 800158c:	e6f7      	b.n	800137e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff f80b 	bl	80005a8 <HAL_GetTick>
 8001592:	eba0 0008 	sub.w	r0, r0, r8
 8001596:	2802      	cmp	r0, #2
 8001598:	f67f af07 	bls.w	80013aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 800159c:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800159e:	b003      	add	sp, #12
 80015a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000
 80015ac:	424711e0 	.word	0x424711e0
 80015b0:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015b6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f43f aeff 	beq.w	80013be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80015c2:	4a4b      	ldr	r2, [pc, #300]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015cc:	2100      	movs	r1, #0
 80015ce:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80015d0:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015d4:	07db      	lsls	r3, r3, #31
 80015d6:	f57f aef2 	bpl.w	80013be <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 80015da:	f7fe ffe5 	bl	80005a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015e2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015e6:	0798      	lsls	r0, r3, #30
 80015e8:	f53f aee9 	bmi.w	80013be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7fe ffdc 	bl	80005a8 <HAL_GetTick>
 80015f0:	eba0 0008 	sub.w	r0, r0, r8
 80015f4:	4548      	cmp	r0, r9
 80015f6:	d9f5      	bls.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80015f8:	e7d0      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015fa:	6891      	ldr	r1, [r2, #8]
 80015fc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001600:	e6ed      	b.n	80013de <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001602:	483c      	ldr	r0, [pc, #240]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001604:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001606:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800160a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800160e:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001610:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001614:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001618:	f47f af22 	bne.w	8001460 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800161c:	e723      	b.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800161e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001622:	f43f af20 	beq.w	8001466 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8001626:	2d01      	cmp	r5, #1
 8001628:	d14b      	bne.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 800162a:	4d33      	ldr	r5, [pc, #204]	; (80016f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800162c:	4e31      	ldr	r6, [pc, #196]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001632:	f7fe ffb9 	bl	80005a8 <HAL_GetTick>
 8001636:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001638:	6833      	ldr	r3, [r6, #0]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	d44b      	bmi.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800163e:	6821      	ldr	r1, [r4, #0]
 8001640:	074e      	lsls	r6, r1, #29
 8001642:	d501      	bpl.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001644:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001646:	b11b      	cbz	r3, 8001650 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001648:	0708      	lsls	r0, r1, #28
 800164a:	d51a      	bpl.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800164c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800164e:	b9c3      	cbnz	r3, 8001682 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001650:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001652:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001654:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165c:	4303      	orrs	r3, r0
 800165e:	69e0      	ldr	r0, [r4, #28]
 8001660:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001664:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001666:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800166a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800166e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001672:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001674:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001678:	3801      	subs	r0, #1
 800167a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800167e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001682:	05ca      	lsls	r2, r1, #23
 8001684:	d514      	bpl.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001686:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800168c:	d110      	bne.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800168e:	4919      	ldr	r1, [pc, #100]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001690:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001692:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001696:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800169a:	4313      	orrs	r3, r2
 800169c:	69e2      	ldr	r2, [r4, #28]
 800169e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016a2:	6a22      	ldr	r2, [r4, #32]
 80016a4:	0852      	lsrs	r2, r2, #1
 80016a6:	3a01      	subs	r2, #1
 80016a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80016b0:	2301      	movs	r3, #1
 80016b2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80016b4:	f7fe ff78 	bl	80005a8 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80016b8:	4c0e      	ldr	r4, [pc, #56]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 80016ba:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	d50f      	bpl.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 80016c2:	2000      	movs	r0, #0
 80016c4:	e76b      	b.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80016c6:	f7fe ff6f 	bl	80005a8 <HAL_GetTick>
 80016ca:	eba0 0008 	sub.w	r0, r0, r8
 80016ce:	2802      	cmp	r0, #2
 80016d0:	f67f aed0 	bls.w	8001474 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80016d4:	e762      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80016d6:	f7fe ff67 	bl	80005a8 <HAL_GetTick>
 80016da:	1bc0      	subs	r0, r0, r7
 80016dc:	2802      	cmp	r0, #2
 80016de:	d9ab      	bls.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80016e0:	e75c      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80016e2:	f7fe ff61 	bl	80005a8 <HAL_GetTick>
 80016e6:	1b40      	subs	r0, r0, r5
 80016e8:	2802      	cmp	r0, #2
 80016ea:	d9e7      	bls.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80016ec:	e756      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80016ee:	bf00      	nop
 80016f0:	42470e40 	.word	0x42470e40
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470070 	.word	0x42470070

080016fc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016fc:	4920      	ldr	r1, [pc, #128]	; (8001780 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80016fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001700:	688b      	ldr	r3, [r1, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d007      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0x1e>
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d020      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_RCC_GetSysClockFreq+0x88>)
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf18      	it	ne
 8001716:	4610      	movne	r0, r2
 8001718:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001720:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	bf14      	ite	ne
 8001726:	4818      	ldrne	r0, [pc, #96]	; (8001788 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	4816      	ldreq	r0, [pc, #88]	; (8001784 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800172e:	bf18      	it	ne
 8001730:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001732:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	fba1 0100 	umull	r0, r1, r1, r0
 800173a:	f7fe fd63 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_RCC_GetSysClockFreq+0x84>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800174a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800174e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001750:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001752:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001756:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175a:	bf14      	ite	ne
 800175c:	480a      	ldrne	r0, [pc, #40]	; (8001788 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	4809      	ldreq	r0, [pc, #36]	; (8001784 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001764:	bf18      	it	ne
 8001766:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	fba1 0100 	umull	r0, r1, r1, r0
 8001770:	f7fe fd48 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_RCC_GetSysClockFreq+0x84>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800177c:	e7e5      	b.n	800174a <HAL_RCC_GetSysClockFreq+0x4e>
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	00f42400 	.word	0x00f42400
 8001788:	007a1200 	.word	0x007a1200

0800178c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178c:	6803      	ldr	r3, [r0, #0]
{
 800178e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001792:	07df      	lsls	r7, r3, #31
{
 8001794:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	d410      	bmi.n	80017ba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	079e      	lsls	r6, r3, #30
 800179c:	d467      	bmi.n	800186e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	071a      	lsls	r2, r3, #28
 80017a2:	f100 80b2 	bmi.w	800190a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	075b      	lsls	r3, r3, #29
 80017aa:	f100 80d0 	bmi.w	800194e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ae:	69a2      	ldr	r2, [r4, #24]
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	f040 8139 	bne.w	8001a28 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
 80017b8:	e01e      	b.n	80017f8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	f002 020c 	and.w	r2, r2, #12
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d010      	beq.n	80017e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017cc:	2a08      	cmp	r2, #8
 80017ce:	d102      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	025d      	lsls	r5, r3, #9
 80017d4:	d408      	bmi.n	80017e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017de:	2a0c      	cmp	r2, #12
 80017e0:	d10d      	bne.n	80017fe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	0250      	lsls	r0, r2, #9
 80017e6:	d50a      	bpl.n	80017fe <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	4b8b      	ldr	r3, [pc, #556]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0399      	lsls	r1, r3, #14
 80017ee:	d5d3      	bpl.n	8001798 <HAL_RCC_OscConfig+0xc>
 80017f0:	6863      	ldr	r3, [r4, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1d0      	bne.n	8001798 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
}
 80017f8:	b002      	add	sp, #8
 80017fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	6862      	ldr	r2, [r4, #4]
 8001800:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001804:	d111      	bne.n	800182a <HAL_RCC_OscConfig+0x9e>
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800180c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800180e:	f7fe fecb 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4d81      	ldr	r5, [pc, #516]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001814:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	039a      	lsls	r2, r3, #14
 800181a:	d4bd      	bmi.n	8001798 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7fe fec4 	bl	80005a8 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2864      	cmp	r0, #100	; 0x64
 8001824:	d9f7      	bls.n	8001816 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001826:	2003      	movs	r0, #3
 8001828:	e7e6      	b.n	80017f8 <HAL_RCC_OscConfig+0x6c>
 800182a:	4d7b      	ldr	r5, [pc, #492]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0xb8>
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	602b      	str	r3, [r5, #0]
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	602b      	str	r3, [r5, #0]
 8001842:	e7e4      	b.n	800180e <HAL_RCC_OscConfig+0x82>
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001852:	2a00      	cmp	r2, #0
 8001854:	d1db      	bne.n	800180e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001856:	f7fe fea7 	bl	80005a8 <HAL_GetTick>
 800185a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	039b      	lsls	r3, r3, #14
 8001860:	d59a      	bpl.n	8001798 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001862:	f7fe fea1 	bl	80005a8 <HAL_GetTick>
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	2864      	cmp	r0, #100	; 0x64
 800186a:	d9f7      	bls.n	800185c <HAL_RCC_OscConfig+0xd0>
 800186c:	e7db      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800186e:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	f012 0f0c 	tst.w	r2, #12
 8001876:	d010      	beq.n	800189a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800187e:	2a08      	cmp	r2, #8
 8001880:	d102      	bne.n	8001888 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	025f      	lsls	r7, r3, #9
 8001886:	d508      	bpl.n	800189a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001888:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 800188a:	6893      	ldr	r3, [r2, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001890:	2b0c      	cmp	r3, #12
 8001892:	d111      	bne.n	80018b8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001894:	6853      	ldr	r3, [r2, #4]
 8001896:	025e      	lsls	r6, r3, #9
 8001898:	d40e      	bmi.n	80018b8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	0795      	lsls	r5, r2, #30
 80018a0:	d502      	bpl.n	80018a8 <HAL_RCC_OscConfig+0x11c>
 80018a2:	68e2      	ldr	r2, [r4, #12]
 80018a4:	2a01      	cmp	r2, #1
 80018a6:	d1a6      	bne.n	80017f6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	6921      	ldr	r1, [r4, #16]
 80018ac:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018b0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	e772      	b.n	800179e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b8:	68e2      	ldr	r2, [r4, #12]
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x290>)
 80018bc:	b1b2      	cbz	r2, 80018ec <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018c2:	f7fe fe71 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4d54      	ldr	r5, [pc, #336]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80018c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	682b      	ldr	r3, [r5, #0]
 80018cc:	0798      	lsls	r0, r3, #30
 80018ce:	d507      	bpl.n	80018e0 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	6922      	ldr	r2, [r4, #16]
 80018d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018dc:	602b      	str	r3, [r5, #0]
 80018de:	e75e      	b.n	800179e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7fe fe62 	bl	80005a8 <HAL_GetTick>
 80018e4:	1b80      	subs	r0, r0, r6
 80018e6:	2802      	cmp	r0, #2
 80018e8:	d9ef      	bls.n	80018ca <HAL_RCC_OscConfig+0x13e>
 80018ea:	e79c      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80018ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ee:	f7fe fe5b 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4d49      	ldr	r5, [pc, #292]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80018f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	682b      	ldr	r3, [r5, #0]
 80018f8:	0799      	lsls	r1, r3, #30
 80018fa:	f57f af50 	bpl.w	800179e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7fe fe53 	bl	80005a8 <HAL_GetTick>
 8001902:	1b80      	subs	r0, r0, r6
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f6      	bls.n	80018f6 <HAL_RCC_OscConfig+0x16a>
 8001908:	e78d      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	6962      	ldr	r2, [r4, #20]
 800190c:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x294>)
 800190e:	b17a      	cbz	r2, 8001930 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001914:	f7fe fe48 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001918:	4d3f      	ldr	r5, [pc, #252]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800191a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800191e:	079f      	lsls	r7, r3, #30
 8001920:	f53f af41 	bmi.w	80017a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7fe fe40 	bl	80005a8 <HAL_GetTick>
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	2802      	cmp	r0, #2
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0x190>
 800192e:	e77a      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001930:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001932:	f7fe fe39 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001936:	4d38      	ldr	r5, [pc, #224]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001938:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800193c:	0798      	lsls	r0, r3, #30
 800193e:	f57f af32 	bpl.w	80017a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001942:	f7fe fe31 	bl	80005a8 <HAL_GetTick>
 8001946:	1b80      	subs	r0, r0, r6
 8001948:	2802      	cmp	r0, #2
 800194a:	d9f6      	bls.n	800193a <HAL_RCC_OscConfig+0x1ae>
 800194c:	e76b      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 8001950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001952:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001956:	d128      	bne.n	80019aa <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800196c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4d2d      	ldr	r5, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x298>)
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	05d9      	lsls	r1, r3, #23
 8001974:	d51b      	bpl.n	80019ae <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001976:	68a3      	ldr	r3, [r4, #8]
 8001978:	4d27      	ldr	r5, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 800197a:	2b01      	cmp	r3, #1
 800197c:	d127      	bne.n	80019ce <HAL_RCC_OscConfig+0x242>
 800197e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001986:	f7fe fe0f 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	4d23      	ldr	r5, [pc, #140]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800198c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001992:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001994:	079b      	lsls	r3, r3, #30
 8001996:	d539      	bpl.n	8001a0c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001998:	2e00      	cmp	r6, #0
 800199a:	f43f af08 	beq.w	80017ae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_RCC_OscConfig+0x28c>)
 80019a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
 80019a8:	e701      	b.n	80017ae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2600      	movs	r6, #0
 80019ac:	e7df      	b.n	800196e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019b6:	f7fe fdf7 	bl	80005a8 <HAL_GetTick>
 80019ba:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	05da      	lsls	r2, r3, #23
 80019c0:	d4d9      	bmi.n	8001976 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7fe fdf1 	bl	80005a8 <HAL_GetTick>
 80019c6:	1bc0      	subs	r0, r0, r7
 80019c8:	2802      	cmp	r0, #2
 80019ca:	d9f7      	bls.n	80019bc <HAL_RCC_OscConfig+0x230>
 80019cc:	e72b      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d104      	bne.n	80019dc <HAL_RCC_OscConfig+0x250>
 80019d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	672b      	str	r3, [r5, #112]	; 0x70
 80019da:	e7d0      	b.n	800197e <HAL_RCC_OscConfig+0x1f2>
 80019dc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	672a      	str	r2, [r5, #112]	; 0x70
 80019e4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019e6:	f022 0204 	bic.w	r2, r2, #4
 80019ea:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ca      	bne.n	8001986 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80019f0:	f7fe fdda 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019f8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019fc:	0798      	lsls	r0, r3, #30
 80019fe:	d5cb      	bpl.n	8001998 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7fe fdd2 	bl	80005a8 <HAL_GetTick>
 8001a04:	1bc0      	subs	r0, r0, r7
 8001a06:	4540      	cmp	r0, r8
 8001a08:	d9f7      	bls.n	80019fa <HAL_RCC_OscConfig+0x26e>
 8001a0a:	e70c      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7fe fdcc 	bl	80005a8 <HAL_GetTick>
 8001a10:	1bc0      	subs	r0, r0, r7
 8001a12:	4540      	cmp	r0, r8
 8001a14:	d9bd      	bls.n	8001992 <HAL_RCC_OscConfig+0x206>
 8001a16:	e706      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	42470000 	.word	0x42470000
 8001a20:	42470e80 	.word	0x42470e80
 8001a24:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a28:	4d23      	ldr	r5, [pc, #140]	; (8001ab8 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	68ab      	ldr	r3, [r5, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	f43f aee0 	beq.w	80017f6 <HAL_RCC_OscConfig+0x6a>
 8001a36:	4e21      	ldr	r6, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x330>)
 8001a38:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	d12d      	bne.n	8001a9c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001a40:	f7fe fdb2 	bl	80005a8 <HAL_GetTick>
 8001a44:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	0199      	lsls	r1, r3, #6
 8001a4a:	d421      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	6a22      	ldr	r2, [r4, #32]
 8001a4e:	69e3      	ldr	r3, [r4, #28]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a54:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4c14      	ldr	r4, [pc, #80]	; (8001ab8 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	0852      	lsrs	r2, r2, #1
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a72:	2301      	movs	r3, #1
 8001a74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a76:	f7fe fd97 	bl	80005a8 <HAL_GetTick>
 8001a7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	019a      	lsls	r2, r3, #6
 8001a80:	f53f ae99 	bmi.w	80017b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7fe fd90 	bl	80005a8 <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	d9f6      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
 8001a8e:	e6ca      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7fe fd8a 	bl	80005a8 <HAL_GetTick>
 8001a94:	1bc0      	subs	r0, r0, r7
 8001a96:	2802      	cmp	r0, #2
 8001a98:	d9d5      	bls.n	8001a46 <HAL_RCC_OscConfig+0x2ba>
 8001a9a:	e6c4      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fd84 	bl	80005a8 <HAL_GetTick>
 8001aa0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	019b      	lsls	r3, r3, #6
 8001aa6:	f57f ae86 	bpl.w	80017b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7fe fd7d 	bl	80005a8 <HAL_GetTick>
 8001aae:	1b00      	subs	r0, r0, r4
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f6      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x316>
 8001ab4:	e6b7      	b.n	8001826 <HAL_RCC_OscConfig+0x9a>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470060 	.word	0x42470060

08001ac0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	b538      	push	{r3, r4, r5, lr}
 8001ac4:	ad05      	add	r5, sp, #20
 8001ac6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001acc:	2b01      	cmp	r3, #1
{
 8001ace:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ad0:	d126      	bne.n	8001b20 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001ad2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001ada:	68c3      	ldr	r3, [r0, #12]
 8001adc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ae4:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001ae6:	68c3      	ldr	r3, [r0, #12]
 8001ae8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001aec:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8001aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001af0:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001af2:	bf02      	ittt	eq
 8001af4:	68c3      	ldreq	r3, [r0, #12]
 8001af6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001afa:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8001afc:	f000 fbe6 	bl	80022cc <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8001b00:	9b08      	ldr	r3, [sp, #32]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b06:	68a3      	ldr	r3, [r4, #8]
 8001b08:	f043 0306 	orr.w	r3, r3, #6
 8001b0c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b0e:	68a3      	ldr	r3, [r4, #8]
 8001b10:	f043 0320 	orr.w	r3, r3, #32
 8001b14:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8001b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	b004      	add	sp, #16
 8001b1e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001b20:	68c3      	ldr	r3, [r0, #12]
 8001b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b26:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001b28:	f000 fbd0 	bl	80022cc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b30:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b32:	e7e5      	b.n	8001b00 <USB_CoreInit+0x40>

08001b34 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001b34:	6883      	ldr	r3, [r0, #8]
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	4770      	bx	lr

08001b40 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b40:	6883      	ldr	r3, [r0, #8]
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001b48:	2000      	movs	r0, #0
 8001b4a:	4770      	bx	lr

08001b4c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8001b4c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001b4e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001b50:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001b52:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001b56:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001b58:	d108      	bne.n	8001b6c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8001b5a:	68c3      	ldr	r3, [r0, #12]
 8001b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b60:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001b62:	2032      	movs	r0, #50	; 0x32
 8001b64:	f7fe fd26 	bl	80005b4 <HAL_Delay>
  
  return HAL_OK;
}
 8001b68:	2000      	movs	r0, #0
 8001b6a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8001b6c:	2900      	cmp	r1, #0
 8001b6e:	d1f8      	bne.n	8001b62 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001b70:	68c3      	ldr	r3, [r0, #12]
 8001b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b76:	60c3      	str	r3, [r0, #12]
 8001b78:	e7f3      	b.n	8001b62 <USB_SetCurrentMode+0x16>
	...

08001b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b82:	4604      	mov	r4, r0
 8001b84:	a807      	add	r0, sp, #28
 8001b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;

  /*Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8001b8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b8c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001b8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b94:	4688      	mov	r8, r1
 8001b96:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 8001b98:	b95e      	cbnz	r6, 8001bb2 <USB_DevInit+0x36>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8001b9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ba0:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001bb8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001bbc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001bc2:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001bc4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001bc8:	d15a      	bne.n	8001c80 <USB_DevInit+0x104>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8001bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001bcc:	b919      	cbnz	r1, 8001bd6 <USB_DevInit+0x5a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f000 f89a 	bl	8001d08 <USB_SetDevSpeed>
 8001bd4:	e003      	b.n	8001bde <USB_DevInit+0x62>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f000 f895 	bl	8001d08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8001bde:	2110      	movs	r1, #16
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 f86f 	bl	8001cc4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8001be6:	4620      	mov	r0, r4
 8001be8:	f000 f87e 	bl	8001ce8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001bec:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001bee:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 8001bf2:	612b      	str	r3, [r5, #16]
 8001bf4:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8001bf6:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001bfc:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001bfe:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 8001c02:	61eb      	str	r3, [r5, #28]
 8001c04:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c08:	4543      	cmp	r3, r8
 8001c0a:	d13b      	bne.n	8001c84 <USB_DevInit+0x108>
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 8001c12:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001c14:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d13e      	bne.n	8001c9e <USB_DevInit+0x122>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001c20:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8001c22:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c28:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001c2a:	d108      	bne.n	8001c3e <USB_DevInit+0xc2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <USB_DevInit+0x140>)
 8001c2e:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8001c30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	f043 0303 	orr.w	r3, r3, #3
 8001c3a:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8001c3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001c42:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001c46:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001c48:	b91f      	cbnz	r7, 8001c52 <USB_DevInit+0xd6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8001c4a:	69a3      	ldr	r3, [r4, #24]
 8001c4c:	f043 0310 	orr.w	r3, r3, #16
 8001c50:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8001c52:	69a2      	ldr	r2, [r4, #24]
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <USB_DevInit+0x144>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8001c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c5c:	b11b      	cbz	r3, 8001c66 <USB_DevInit+0xea>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001c5e:	69a3      	ldr	r3, [r4, #24]
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8001c66:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8001c68:	bf01      	itttt	eq
 8001c6a:	69a3      	ldreq	r3, [r4, #24]
 8001c6c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001c70:	f043 0304 	orreq.w	r3, r3, #4
 8001c74:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8001c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	b004      	add	sp, #16
 8001c7e:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001c80:	2103      	movs	r1, #3
 8001c82:	e7a4      	b.n	8001bce <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001c84:	f8d2 c000 	ldr.w	ip, [r2]
 8001c88:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001c8c:	bfb4      	ite	lt
 8001c8e:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001c90:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c92:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001c94:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001c96:	f8c2 e008 	str.w	lr, [r2, #8]
 8001c9a:	3220      	adds	r2, #32
 8001c9c:	e7b4      	b.n	8001c08 <USB_DevInit+0x8c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001c9e:	f8d2 8000 	ldr.w	r8, [r2]
 8001ca2:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001ca6:	bfb4      	ite	lt
 8001ca8:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001cac:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001cae:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001cb0:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001cb2:	f8c2 c008 	str.w	ip, [r2, #8]
 8001cb6:	3220      	adds	r2, #32
 8001cb8:	e7b0      	b.n	8001c1c <USB_DevInit+0xa0>
 8001cba:	bf00      	nop
 8001cbc:	00800100 	.word	0x00800100
 8001cc0:	803c3800 	.word	0x803c3800

08001cc4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8001cc4:	0189      	lsls	r1, r1, #6
 8001cc6:	f041 0120 	orr.w	r1, r1, #32
 8001cca:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <USB_FlushTxFifo+0x20>)
 8001ccc:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	d005      	beq.n	8001cde <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001cd2:	6903      	ldr	r3, [r0, #16]
 8001cd4:	f013 0320 	ands.w	r3, r3, #32
 8001cd8:	d1f9      	bne.n	8001cce <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	00030d41 	.word	0x00030d41

08001ce8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <USB_FlushRxFifo+0x1c>)
 8001cec:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	d005      	beq.n	8001cfe <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001cf2:	6903      	ldr	r3, [r0, #16]
 8001cf4:	f013 0310 	ands.w	r3, r3, #16
 8001cf8:	d1f9      	bne.n	8001cee <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001cfe:	2003      	movs	r0, #3
}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	00030d41 	.word	0x00030d41

08001d08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8001d08:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001d0c:	4319      	orrs	r1, r3
 8001d0e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001d12:	2000      	movs	r0, #0
 8001d14:	4770      	bx	lr

08001d16 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001d16:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8001d1a:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8001d1e:	f010 0006 	ands.w	r0, r0, #6
 8001d22:	d012      	beq.n	8001d4a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001d24:	6893      	ldr	r3, [r2, #8]
 8001d26:	f003 0306 	and.w	r3, r3, #6
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d00c      	beq.n	8001d48 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8001d2e:	6893      	ldr	r3, [r2, #8]
 8001d30:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d007      	beq.n	8001d48 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001d38:	6893      	ldr	r3, [r2, #8]
 8001d3a:	f003 0306 	and.w	r3, r3, #6
 8001d3e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001d40:	bf14      	ite	ne
 8001d42:	2000      	movne	r0, #0
 8001d44:	2002      	moveq	r0, #2
 8001d46:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8001d48:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8001d4a:	4770      	bx	lr

08001d4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001d4c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001d4e:	784b      	ldrb	r3, [r1, #1]
 8001d50:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001d52:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8001d56:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d11b      	bne.n	8001d96 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001d5e:	40a3      	lsls	r3, r4
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001d64:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001d68:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001d6a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	0412      	lsls	r2, r2, #16
 8001d72:	d40e      	bmi.n	8001d92 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001d74:	688a      	ldr	r2, [r1, #8]
 8001d76:	78c8      	ldrb	r0, [r1, #3]
 8001d78:	681d      	ldr	r5, [r3, #0]
 8001d7a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001d7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d86:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8001d8a:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8001d8e:	4328      	orrs	r0, r5
 8001d90:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001d92:	2000      	movs	r0, #0
 8001d94:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d9a:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001d9c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001da0:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001da2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001da6:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001da8:	6803      	ldr	r3, [r0, #0]
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	d4f1      	bmi.n	8001d92 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001dae:	688b      	ldr	r3, [r1, #8]
 8001db0:	78c9      	ldrb	r1, [r1, #3]
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	6003      	str	r3, [r0, #0]
 8001dc8:	e7e3      	b.n	8001d92 <USB_ActivateEndpoint+0x46>

08001dca <USB_DeactivateEndpoint>:
 8001dca:	f000 b801 	b.w	8001dd0 <USB_DeactivateDedicatedEndpoint>
	...

08001dd0 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001dd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8001dd2:	784b      	ldrb	r3, [r1, #1]
 8001dd4:	2b01      	cmp	r3, #1
{
 8001dd6:	460e      	mov	r6, r1
 8001dd8:	4605      	mov	r5, r0
 8001dda:	7809      	ldrb	r1, [r1, #0]
 8001ddc:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8001de0:	d126      	bne.n	8001e30 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8001de2:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001de6:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df0:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df6:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8001df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8001e00:	3a01      	subs	r2, #1
 8001e02:	d101      	bne.n	8001e08 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8001e04:	2003      	movs	r0, #3
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8001e08:	689c      	ldr	r4, [r3, #8]
 8001e0a:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001e0e:	d1f7      	bne.n	8001e00 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8001e10:	2110      	movs	r1, #16
 8001e12:	4628      	mov	r0, r5
 8001e14:	f7ff ff56 	bl	8001cc4 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8001e18:	7831      	ldrb	r1, [r6, #0]
 8001e1a:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001e1e:	2301      	movs	r3, #1
 8001e20:	408b      	lsls	r3, r1
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	ea22 0303 	bic.w	r3, r2, r3
 8001e28:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001e30:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001e34:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3e:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001e40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e44:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8001e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	d0d8      	beq.n	8001e04 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001e52:	6898      	ldr	r0, [r3, #8]
 8001e54:	f010 0010 	ands.w	r0, r0, #16
 8001e58:	d1f9      	bne.n	8001e4e <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e5a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e62:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8001e66:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 8001e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e6e:	408a      	lsls	r2, r1
 8001e70:	ea23 0302 	bic.w	r3, r3, r2
 8001e74:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
 8001e7a:	bf00      	nop
 8001e7c:	00030d41 	.word	0x00030d41

08001e80 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001e82:	784b      	ldrb	r3, [r1, #1]
 8001e84:	780c      	ldrb	r4, [r1, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	694b      	ldr	r3, [r1, #20]
 8001e8a:	d177      	bne.n	8001f7c <USB_EPStartXfer+0xfc>
 8001e8c:	2620      	movs	r6, #32
 8001e8e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001e92:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001e96:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d138      	bne.n	8001f0e <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001e9c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001ea0:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001ea4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001ea6:	6926      	ldr	r6, [r4, #16]
 8001ea8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001eac:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001eae:	6926      	ldr	r6, [r4, #16]
 8001eb0:	0cf6      	lsrs	r6, r6, #19
 8001eb2:	04f6      	lsls	r6, r6, #19
 8001eb4:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001eb6:	2a01      	cmp	r2, #1
 8001eb8:	d150      	bne.n	8001f5c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001eba:	780c      	ldrb	r4, [r1, #0]
 8001ebc:	690e      	ldr	r6, [r1, #16]
 8001ebe:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001ec2:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001ec4:	78ce      	ldrb	r6, [r1, #3]
 8001ec6:	2e01      	cmp	r6, #1
 8001ec8:	d10f      	bne.n	8001eea <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001eca:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8001ece:	780f      	ldrb	r7, [r1, #0]
 8001ed0:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001ed4:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001ed8:	fb14 5407 	smlabb	r4, r4, r7, r5
 8001edc:	6827      	ldr	r7, [r4, #0]
 8001ede:	bf0c      	ite	eq
 8001ee0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001ee4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8001ee8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001eea:	780f      	ldrb	r7, [r1, #0]
 8001eec:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8001ef0:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001ef2:	682c      	ldr	r4, [r5, #0]
 8001ef4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001ef8:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8001efa:	d105      	bne.n	8001f08 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	463a      	mov	r2, r7
 8001f02:	68c9      	ldr	r1, [r1, #12]
 8001f04:	f000 f8ef 	bl	80020e6 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8001f08:	2000      	movs	r0, #0
 8001f0a:	b003      	add	sp, #12
 8001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001f0e:	0cf6      	lsrs	r6, r6, #19
 8001f10:	04f6      	lsls	r6, r6, #19
 8001f12:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001f14:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001f16:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001f18:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001f1c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001f20:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001f22:	19de      	adds	r6, r3, r7
 8001f24:	3e01      	subs	r6, #1
 8001f26:	fbb6 f7f7 	udiv	r7, r6, r7
 8001f2a:	4e37      	ldr	r6, [pc, #220]	; (8002008 <USB_EPStartXfer+0x188>)
 8001f2c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001f30:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001f34:	ea46 060e 	orr.w	r6, r6, lr
 8001f38:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001f3a:	6927      	ldr	r7, [r4, #16]
 8001f3c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001f40:	433e      	orrs	r6, r7
 8001f42:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001f44:	78ce      	ldrb	r6, [r1, #3]
 8001f46:	2e01      	cmp	r6, #1
 8001f48:	d15a      	bne.n	8002000 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001f4a:	6926      	ldr	r6, [r4, #16]
 8001f4c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001f50:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001f52:	6926      	ldr	r6, [r4, #16]
 8001f54:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001f58:	6126      	str	r6, [r4, #16]
 8001f5a:	e7ac      	b.n	8001eb6 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001f5c:	78ce      	ldrb	r6, [r1, #3]
 8001f5e:	2e01      	cmp	r6, #1
 8001f60:	d0b3      	beq.n	8001eca <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ae      	beq.n	8001ec4 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001f66:	f891 e000 	ldrb.w	lr, [r1]
 8001f6a:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001f6e:	2401      	movs	r4, #1
 8001f70:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f74:	433c      	orrs	r4, r7
 8001f76:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001f7a:	e7a3      	b.n	8001ec4 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001f7c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001f80:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001f84:	6925      	ldr	r5, [r4, #16]
 8001f86:	0ced      	lsrs	r5, r5, #19
 8001f88:	04ed      	lsls	r5, r5, #19
 8001f8a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001f8c:	6925      	ldr	r5, [r4, #16]
 8001f8e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001f92:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001f96:	6125      	str	r5, [r4, #16]
 8001f98:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001f9a:	b9fb      	cbnz	r3, 8001fdc <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001f9c:	6923      	ldr	r3, [r4, #16]
 8001f9e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001fa2:	431d      	orrs	r5, r3
 8001fa4:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001fa6:	6923      	ldr	r3, [r4, #16]
 8001fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fac:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001fae:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001fb0:	bf04      	itt	eq
 8001fb2:	68cb      	ldreq	r3, [r1, #12]
 8001fb4:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001fb6:	78cb      	ldrb	r3, [r1, #3]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10a      	bne.n	8001fd2 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001fbc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001fc0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	bf0c      	ite	eq
 8001fc8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001fcc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001fd8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001fda:	e795      	b.n	8001f08 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001fdc:	4e0a      	ldr	r6, [pc, #40]	; (8002008 <USB_EPStartXfer+0x188>)
 8001fde:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001fe0:	442b      	add	r3, r5
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001fe8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001fec:	433e      	orrs	r6, r7
 8001fee:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	6926      	ldr	r6, [r4, #16]
 8001ff4:	435d      	muls	r5, r3
 8001ff6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001ffa:	4335      	orrs	r5, r6
 8001ffc:	6125      	str	r5, [r4, #16]
 8001ffe:	e7d6      	b.n	8001fae <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8002000:	2a01      	cmp	r2, #1
 8002002:	d1ae      	bne.n	8001f62 <USB_EPStartXfer+0xe2>
 8002004:	e759      	b.n	8001eba <USB_EPStartXfer+0x3a>
 8002006:	bf00      	nop
 8002008:	1ff80000 	.word	0x1ff80000

0800200c <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 800200c:	784b      	ldrb	r3, [r1, #1]
 800200e:	2b01      	cmp	r3, #1
{
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	780b      	ldrb	r3, [r1, #0]
 8002014:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8002016:	d143      	bne.n	80020a0 <USB_EP0StartXfer+0x94>
 8002018:	2420      	movs	r4, #32
 800201a:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800201e:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002022:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8002024:	b9cd      	cbnz	r5, 800205a <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002026:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800202a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800202e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002030:	691c      	ldr	r4, [r3, #16]
 8002032:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002036:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002038:	691c      	ldr	r4, [r3, #16]
 800203a:	0ce4      	lsrs	r4, r4, #19
 800203c:	04e4      	lsls	r4, r4, #19
 800203e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002040:	780d      	ldrb	r5, [r1, #0]
 8002042:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8002046:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002048:	681c      	ldr	r4, [r3, #0]
 800204a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800204e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8002050:	d11b      	bne.n	800208a <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002052:	690a      	ldr	r2, [r1, #16]
 8002054:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8002056:	2000      	movs	r0, #0
 8002058:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800205a:	0ce4      	lsrs	r4, r4, #19
 800205c:	04e4      	lsls	r4, r4, #19
 800205e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002060:	691c      	ldr	r4, [r3, #16]
 8002062:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002066:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800206a:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800206c:	688c      	ldr	r4, [r1, #8]
 800206e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8002070:	bf88      	it	hi
 8002072:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002074:	691c      	ldr	r4, [r3, #16]
 8002076:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800207a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800207c:	694c      	ldr	r4, [r1, #20]
 800207e:	691d      	ldr	r5, [r3, #16]
 8002080:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002084:	432c      	orrs	r4, r5
 8002086:	611c      	str	r4, [r3, #16]
 8002088:	e7da      	b.n	8002040 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 800208a:	694b      	ldr	r3, [r1, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0e2      	beq.n	8002056 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8002090:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002094:	2301      	movs	r3, #1
 8002096:	40ab      	lsls	r3, r5
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800209e:	e7da      	b.n	8002056 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80020a0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80020a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80020a8:	6903      	ldr	r3, [r0, #16]
 80020aa:	0cdb      	lsrs	r3, r3, #19
 80020ac:	04db      	lsls	r3, r3, #19
 80020ae:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80020b0:	6903      	ldr	r3, [r0, #16]
 80020b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80020b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80020ba:	6103      	str	r3, [r0, #16]
 80020bc:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80020be:	b105      	cbz	r5, 80020c2 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 80020c0:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80020c2:	6904      	ldr	r4, [r0, #16]
 80020c4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80020c8:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80020ca:	6904      	ldr	r4, [r0, #16]
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	4323      	orrs	r3, r4
    if (dma == 1U)
 80020d2:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80020d4:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80020d6:	bf04      	itt	eq
 80020d8:	68cb      	ldreq	r3, [r1, #12]
 80020da:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80020dc:	6803      	ldr	r3, [r0, #0]
 80020de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80020e2:	6003      	str	r3, [r0, #0]
 80020e4:	e7b7      	b.n	8002056 <USB_EP0StartXfer+0x4a>

080020e6 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80020e6:	b510      	push	{r4, lr}
 80020e8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80020ec:	b94c      	cbnz	r4, 8002102 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 80020ee:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80020f0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80020f4:	f023 0303 	bic.w	r3, r3, #3
 80020f8:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80020fc:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d101      	bne.n	8002106 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8002102:	2000      	movs	r0, #0
 8002104:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002106:	f851 0b04 	ldr.w	r0, [r1], #4
 800210a:	6010      	str	r0, [r2, #0]
 800210c:	e7f7      	b.n	80020fe <USB_WritePacket+0x18>

0800210e <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 800210e:	3203      	adds	r2, #3
 8002110:	f022 0203 	bic.w	r2, r2, #3
 8002114:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002116:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800211a:	4291      	cmp	r1, r2
 800211c:	d101      	bne.n	8002122 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 800211e:	4608      	mov	r0, r1
 8002120:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	f841 3b04 	str.w	r3, [r1], #4
 8002128:	e7f7      	b.n	800211a <USB_ReadPacket+0xc>

0800212a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800212a:	784b      	ldrb	r3, [r1, #1]
 800212c:	780a      	ldrb	r2, [r1, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	f04f 0320 	mov.w	r3, #32
 8002134:	d10b      	bne.n	800214e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8002136:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800213a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800213e:	6803      	ldr	r3, [r0, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0b      	blt.n	800215c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002144:	6803      	ldr	r3, [r0, #0]
 8002146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800214a:	6003      	str	r3, [r0, #0]
 800214c:	e006      	b.n	800215c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800214e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002152:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	daf3      	bge.n	8002144 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800215c:	6803      	ldr	r3, [r0, #0]
 800215e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002162:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8002164:	2000      	movs	r0, #0
 8002166:	4770      	bx	lr

08002168 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002168:	784b      	ldrb	r3, [r1, #1]
 800216a:	780a      	ldrb	r2, [r1, #0]
 800216c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800216e:	bf0c      	ite	eq
 8002170:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002174:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8002178:	2320      	movs	r3, #32
 800217a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800217e:	6803      	ldr	r3, [r0, #0]
 8002180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002184:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002186:	78cb      	ldrb	r3, [r1, #3]
 8002188:	3b02      	subs	r3, #2
 800218a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800218c:	bf9e      	ittt	ls
 800218e:	6803      	ldrls	r3, [r0, #0]
 8002190:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002194:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8002196:	2000      	movs	r0, #0
 8002198:	4770      	bx	lr

0800219a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800219a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800219e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021a2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80021a6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80021aa:	0109      	lsls	r1, r1, #4
 80021ac:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80021b0:	4319      	orrs	r1, r3
 80021b2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80021b6:	2000      	movs	r0, #0
 80021b8:	4770      	bx	lr

080021ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80021ba:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80021bc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021c0:	f023 0302 	bic.w	r3, r3, #2
 80021c4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f7fe f9f3 	bl	80005b4 <HAL_Delay>
  
  return HAL_OK;  
}
 80021ce:	2000      	movs	r0, #0
 80021d0:	bd08      	pop	{r3, pc}

080021d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80021d2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80021d4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f7fe f9e7 	bl	80005b4 <HAL_Delay>
  
  return HAL_OK;  
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	bd08      	pop	{r3, pc}

080021ea <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80021ea:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80021ec:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80021ee:	4010      	ands	r0, r2
 80021f0:	4770      	bx	lr

080021f2 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80021f2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80021f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80021fa:	69c0      	ldr	r0, [r0, #28]
 80021fc:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 80021fe:	0c00      	lsrs	r0, r0, #16
 8002200:	4770      	bx	lr

08002202 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002202:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002206:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 800220a:	69c0      	ldr	r0, [r0, #28]
 800220c:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 800220e:	b280      	uxth	r0, r0
 8002210:	4770      	bx	lr

08002212 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002212:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002216:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 800221a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800221e:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002220:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8002222:	4010      	ands	r0, r2
 8002224:	4770      	bx	lr

08002226 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8002226:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8002228:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800222c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002230:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002234:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002236:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800223a:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800223c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4323      	orrs	r3, r4
  return v;
}
 8002242:	4018      	ands	r0, r3
 8002244:	bd10      	pop	{r4, pc}

08002246 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002246:	6940      	ldr	r0, [r0, #20]
}
 8002248:	f000 0001 	and.w	r0, r0, #1
 800224c:	4770      	bx	lr

0800224e <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800224e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002252:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002256:	f023 0307 	bic.w	r3, r3, #7
 800225a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800225e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	f002 0206 	and.w	r2, r2, #6
 8002268:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800226a:	bf02      	ittt	eq
 800226c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002270:	f042 0203 	orreq.w	r2, r2, #3
 8002274:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002280:	2000      	movs	r0, #0
 8002282:	4770      	bx	lr

08002284 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002284:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002286:	2400      	movs	r4, #0
 8002288:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800228c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002290:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002294:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002298:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800229c:	f044 0418 	orr.w	r4, r4, #24
 80022a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80022a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80022a8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80022aa:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80022ae:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80022b2:	bf08      	it	eq
 80022b4:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80022b8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80022bc:	bf04      	itt	eq
 80022be:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80022c2:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80022c6:	2000      	movs	r0, #0
 80022c8:	bd10      	pop	{r4, pc}
	...

080022cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80022ce:	3b01      	subs	r3, #1
 80022d0:	d101      	bne.n	80022d6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
 80022d4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80022d6:	6902      	ldr	r2, [r0, #16]
 80022d8:	2a00      	cmp	r2, #0
 80022da:	daf8      	bge.n	80022ce <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80022dc:	6903      	ldr	r3, [r0, #16]
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <USB_CoreReset+0x2c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80022e6:	3a01      	subs	r2, #1
 80022e8:	d0f3      	beq.n	80022d2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80022ea:	6903      	ldr	r3, [r0, #16]
 80022ec:	f013 0301 	ands.w	r3, r3, #1
 80022f0:	d1f9      	bne.n	80022e6 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80022f2:	4618      	mov	r0, r3
}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	00030d41 	.word	0x00030d41

080022fc <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 80022fc:	2329      	movs	r3, #41	; 0x29
 80022fe:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8002300:	4800      	ldr	r0, [pc, #0]	; (8002304 <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8002302:	4770      	bx	lr
 8002304:	20000044 	.word	0x20000044

08002308 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8002308:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800230c:	2000      	movs	r0, #0
 800230e:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

  return USBD_OK;
}
 8002312:	4770      	bx	lr

08002314 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002314:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8002316:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 800231a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d106      	bne.n	800232e <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8002320:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002324:	4620      	mov	r0, r4
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4798      	blx	r3
    hhid->IsReportAvailable = 0;      
 800232a:	2300      	movs	r3, #0
 800232c:	64e3      	str	r3, [r4, #76]	; 0x4c
  }

  return USBD_OK;
}
 800232e:	2000      	movs	r0, #0
 8002330:	bd10      	pop	{r4, pc}
	...

08002334 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8002334:	230a      	movs	r3, #10
 8002336:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8002338:	4800      	ldr	r0, [pc, #0]	; (800233c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 800233a:	4770      	bx	lr
 800233c:	2000007c 	.word	0x2000007c

08002340 <USBD_CUSTOM_HID_DataOut>:
{
 8002340:	b538      	push	{r3, r4, r5, lr}
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8002342:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
 8002346:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 800234a:	4604      	mov	r4, r0
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4628      	mov	r0, r5
 8002350:	4798      	blx	r3
	  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8002352:	2340      	movs	r3, #64	; 0x40
 8002354:	462a      	mov	r2, r5
 8002356:	2101      	movs	r1, #1
 8002358:	4620      	mov	r0, r4
 800235a:	f000 fe4f 	bl	8002ffc <USBD_LL_PrepareReceive>
}
 800235e:	2000      	movs	r0, #0
 8002360:	bd38      	pop	{r3, r4, r5, pc}
	...

08002364 <USBD_CUSTOM_HID_Setup>:
{
 8002364:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002366:	780c      	ldrb	r4, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8002368:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800236c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8002370:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002372:	d02d      	beq.n	80023d0 <USBD_CUSTOM_HID_Setup+0x6c>
 8002374:	2c20      	cmp	r4, #32
 8002376:	d10c      	bne.n	8002392 <USBD_CUSTOM_HID_Setup+0x2e>
    switch (req->bRequest)
 8002378:	784a      	ldrb	r2, [r1, #1]
 800237a:	3a02      	subs	r2, #2
 800237c:	2a09      	cmp	r2, #9
 800237e:	d821      	bhi.n	80023c4 <USBD_CUSTOM_HID_Setup+0x60>
 8002380:	e8df f002 	tbb	[pc, r2]
 8002384:	20200914 	.word	0x20200914
 8002388:	18202020 	.word	0x18202020
 800238c:	0510      	.short	0x0510
      hhid->Protocol = (uint8_t)(req->wValue);
 800238e:	788a      	ldrb	r2, [r1, #2]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
  return USBD_OK;
 8002392:	2400      	movs	r4, #0
 8002394:	e01a      	b.n	80023cc <USBD_CUSTOM_HID_Setup+0x68>
      USBD_CtlSendData (pdev, 
 8002396:	2201      	movs	r2, #1
 8002398:	f103 0140 	add.w	r1, r3, #64	; 0x40
      USBD_CtlSendData (pdev, 
 800239c:	4628      	mov	r0, r5
 800239e:	f000 fb95 	bl	8002acc <USBD_CtlSendData>
 80023a2:	e7f6      	b.n	8002392 <USBD_CUSTOM_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80023a4:	884a      	ldrh	r2, [r1, #2]
 80023a6:	0a12      	lsrs	r2, r2, #8
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
 80023aa:	e7f2      	b.n	8002392 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 80023ac:	2201      	movs	r2, #1
 80023ae:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80023b2:	e7f3      	b.n	800239c <USBD_CUSTOM_HID_Setup+0x38>
      hhid->IsReportAvailable = 1;
 80023b4:	2201      	movs	r2, #1
 80023b6:	64da      	str	r2, [r3, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 80023b8:	4628      	mov	r0, r5
 80023ba:	798a      	ldrb	r2, [r1, #6]
 80023bc:	4619      	mov	r1, r3
 80023be:	f000 fb9a 	bl	8002af6 <USBD_CtlPrepareRx>
 80023c2:	e7e6      	b.n	8002392 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlError (pdev, req);
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 fb5a 	bl	8002a7e <USBD_CtlError>
      return USBD_FAIL; 
 80023ca:	2402      	movs	r4, #2
}
 80023cc:	4620      	mov	r0, r4
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80023d0:	784a      	ldrb	r2, [r1, #1]
 80023d2:	2a0a      	cmp	r2, #10
 80023d4:	d01a      	beq.n	800240c <USBD_CUSTOM_HID_Setup+0xa8>
 80023d6:	2a0b      	cmp	r2, #11
 80023d8:	d01e      	beq.n	8002418 <USBD_CUSTOM_HID_Setup+0xb4>
 80023da:	2a06      	cmp	r2, #6
 80023dc:	d1f6      	bne.n	80023cc <USBD_CUSTOM_HID_Setup+0x68>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80023de:	884b      	ldrh	r3, [r1, #2]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	2b22      	cmp	r3, #34	; 0x22
 80023e4:	d107      	bne.n	80023f6 <USBD_CUSTOM_HID_Setup+0x92>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80023e6:	88ca      	ldrh	r2, [r1, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80023e8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80023ec:	2a21      	cmp	r2, #33	; 0x21
 80023ee:	bf28      	it	cs
 80023f0:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	e7d2      	b.n	800239c <USBD_CUSTOM_HID_Setup+0x38>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80023f6:	2b21      	cmp	r3, #33	; 0x21
 80023f8:	d105      	bne.n	8002406 <USBD_CUSTOM_HID_Setup+0xa2>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80023fa:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_CUSTOM_HID_Desc;   
 80023fc:	4908      	ldr	r1, [pc, #32]	; (8002420 <USBD_CUSTOM_HID_Setup+0xbc>)
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80023fe:	2a09      	cmp	r2, #9
 8002400:	bf28      	it	cs
 8002402:	2209      	movcs	r2, #9
 8002404:	e7ca      	b.n	800239c <USBD_CUSTOM_HID_Setup+0x38>
  uint8_t  *pbuf = NULL;
 8002406:	4621      	mov	r1, r4
  uint16_t len = 0;
 8002408:	4622      	mov	r2, r4
 800240a:	e7c7      	b.n	800239c <USBD_CUSTOM_HID_Setup+0x38>
      USBD_CtlSendData (pdev,
 800240c:	2201      	movs	r2, #1
 800240e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002412:	f000 fb5b 	bl	8002acc <USBD_CtlSendData>
      break;
 8002416:	e7d9      	b.n	80023cc <USBD_CUSTOM_HID_Setup+0x68>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002418:	788a      	ldrb	r2, [r1, #2]
 800241a:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800241c:	e7d6      	b.n	80023cc <USBD_CUSTOM_HID_Setup+0x68>
 800241e:	bf00      	nop
 8002420:	20000070 	.word	0x20000070

08002424 <USBD_CUSTOM_HID_DeInit>:
{
 8002424:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8002426:	2181      	movs	r1, #129	; 0x81
{
 8002428:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800242a:	f000 fd8d 	bl	8002f48 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800242e:	2101      	movs	r1, #1
 8002430:	4620      	mov	r0, r4
 8002432:	f000 fd89 	bl	8002f48 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002436:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800243a:	b153      	cbz	r3, 8002452 <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800243c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002444:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002448:	f000 fee0 	bl	800320c <free>
    pdev->pClassData = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002452:	2000      	movs	r0, #0
 8002454:	bd10      	pop	{r4, pc}

08002456 <USBD_CUSTOM_HID_Init>:
{
 8002456:	b570      	push	{r4, r5, r6, lr}
  USBD_LL_OpenEP(pdev,
 8002458:	2340      	movs	r3, #64	; 0x40
{
 800245a:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 800245c:	2203      	movs	r2, #3
 800245e:	2181      	movs	r1, #129	; 0x81
 8002460:	f000 fd62 	bl	8002f28 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002464:	2340      	movs	r3, #64	; 0x40
 8002466:	2203      	movs	r2, #3
 8002468:	2101      	movs	r1, #1
 800246a:	4628      	mov	r0, r5
 800246c:	f000 fd5c 	bl	8002f28 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8002470:	2054      	movs	r0, #84	; 0x54
 8002472:	f000 fec3 	bl	80031fc <malloc>
 8002476:	4606      	mov	r6, r0
 8002478:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800247c:	b170      	cbz	r0, 800249c <USBD_CUSTOM_HID_Init+0x46>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800247e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 8002482:	2400      	movs	r4, #0
 8002484:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 800248c:	2340      	movs	r3, #64	; 0x40
 800248e:	4632      	mov	r2, r6
 8002490:	2101      	movs	r1, #1
 8002492:	4628      	mov	r0, r5
 8002494:	f000 fdb2 	bl	8002ffc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002498:	4620      	mov	r0, r4
 800249a:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 800249c:	2001      	movs	r0, #1
}
 800249e:	bd70      	pop	{r4, r5, r6, pc}

080024a0 <USBD_CUSTOM_HID_SendReport>:
{
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80024a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024a8:	2a03      	cmp	r2, #3
 80024aa:	d10b      	bne.n	80024c4 <USBD_CUSTOM_HID_SendReport+0x24>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80024ac:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == CUSTOM_HID_IDLE)
 80024b0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80024b4:	b932      	cbnz	r2, 80024c4 <USBD_CUSTOM_HID_SendReport+0x24>
      hhid->state = CUSTOM_HID_BUSY;
 80024b6:	2201      	movs	r2, #1
 80024b8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      USBD_LL_Transmit (pdev, 
 80024bc:	460a      	mov	r2, r1
 80024be:	2181      	movs	r1, #129	; 0x81
 80024c0:	f000 fd8e 	bl	8002fe0 <USBD_LL_Transmit>
}
 80024c4:	2000      	movs	r0, #0
 80024c6:	bd10      	pop	{r4, pc}

080024c8 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80024c8:	b119      	cbz	r1, 80024d2 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80024ca:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80024ce:	2000      	movs	r0, #0
 80024d0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80024d2:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80024d4:	4770      	bx	lr

080024d6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80024d6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80024d8:	b180      	cbz	r0, 80024fc <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80024da:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024de:	b113      	cbz	r3, 80024e6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80024e6:	b109      	cbz	r1, 80024ec <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80024e8:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80024f2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80024f4:	f000 fcd6 	bl	8002ea4 <USBD_LL_Init>
  
  return USBD_OK; 
 80024f8:	2000      	movs	r0, #0
 80024fa:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80024fc:	2002      	movs	r0, #2
}
 80024fe:	bd08      	pop	{r3, pc}

08002500 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002500:	b119      	cbz	r1, 800250a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002502:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002506:	2000      	movs	r0, #0
 8002508:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800250a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800250c:	4770      	bx	lr

0800250e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800250e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002510:	f000 fcfc 	bl	8002f0c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002514:	2000      	movs	r0, #0
 8002516:	bd08      	pop	{r3, pc}

08002518 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002518:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800251a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800251e:	b90b      	cbnz	r3, 8002524 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002520:	2002      	movs	r0, #2
 8002522:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4798      	blx	r3
 8002528:	2800      	cmp	r0, #0
 800252a:	d1f9      	bne.n	8002520 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800252c:	bd08      	pop	{r3, pc}

0800252e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800252e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002530:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4798      	blx	r3
  return USBD_OK;
}
 8002538:	2000      	movs	r0, #0
 800253a:	bd08      	pop	{r3, pc}

0800253c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002540:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002544:	4628      	mov	r0, r5
 8002546:	f000 fa86 	bl	8002a56 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800254a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800254c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002550:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002554:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002558:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800255c:	f001 031f 	and.w	r3, r1, #31
 8002560:	2b01      	cmp	r3, #1
 8002562:	d00e      	beq.n	8002582 <USBD_LL_SetupStage+0x46>
 8002564:	d307      	bcc.n	8002576 <USBD_LL_SetupStage+0x3a>
 8002566:	2b02      	cmp	r3, #2
 8002568:	d010      	beq.n	800258c <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800256a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800256e:	4620      	mov	r0, r4
 8002570:	f000 fcf8 	bl	8002f64 <USBD_LL_StallEP>
    break;
 8002574:	e003      	b.n	800257e <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002576:	4629      	mov	r1, r5
 8002578:	4620      	mov	r0, r4
 800257a:	f000 f8e7 	bl	800274c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800257e:	2000      	movs	r0, #0
 8002580:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002582:	4629      	mov	r1, r5
 8002584:	4620      	mov	r0, r4
 8002586:	f000 f9eb 	bl	8002960 <USBD_StdItfReq>
    break;
 800258a:	e7f8      	b.n	800257e <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800258c:	4629      	mov	r1, r5
 800258e:	4620      	mov	r0, r4
 8002590:	f000 f9fe 	bl	8002990 <USBD_StdEPReq>
    break;
 8002594:	e7f3      	b.n	800257e <USBD_LL_SetupStage+0x42>

08002596 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002596:	b538      	push	{r3, r4, r5, lr}
 8002598:	4604      	mov	r4, r0
 800259a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800259c:	bb11      	cbnz	r1, 80025e4 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800259e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d10f      	bne.n	80025c6 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80025a6:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80025aa:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d90b      	bls.n	80025ca <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80025b2:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80025b4:	429a      	cmp	r2, r3
 80025b6:	bf28      	it	cs
 80025b8:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80025ba:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80025be:	b292      	uxth	r2, r2
 80025c0:	4629      	mov	r1, r5
 80025c2:	f000 faa7 	bl	8002b14 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80025c6:	2000      	movs	r0, #0
 80025c8:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80025ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	b123      	cbz	r3, 80025dc <USBD_LL_DataOutStage+0x46>
 80025d2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025d6:	2a03      	cmp	r2, #3
 80025d8:	d100      	bne.n	80025dc <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80025da:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 faa1 	bl	8002b24 <USBD_CtlSendStatus>
 80025e2:	e7f0      	b.n	80025c6 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80025e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0eb      	beq.n	80025c6 <USBD_LL_DataOutStage+0x30>
 80025ee:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025f2:	2a03      	cmp	r2, #3
 80025f4:	d1e7      	bne.n	80025c6 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80025f6:	4798      	blx	r3
 80025f8:	e7e5      	b.n	80025c6 <USBD_LL_DataOutStage+0x30>

080025fa <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80025fa:	b570      	push	{r4, r5, r6, lr}
 80025fc:	4613      	mov	r3, r2
 80025fe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002600:	460e      	mov	r6, r1
 8002602:	2900      	cmp	r1, #0
 8002604:	d13d      	bne.n	8002682 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002606:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800260a:	2a02      	cmp	r2, #2
 800260c:	d10f      	bne.n	800262e <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800260e:	69c5      	ldr	r5, [r0, #28]
 8002610:	6a02      	ldr	r2, [r0, #32]
 8002612:	4295      	cmp	r5, r2
 8002614:	d914      	bls.n	8002640 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002616:	1aaa      	subs	r2, r5, r2
 8002618:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800261a:	4619      	mov	r1, r3
 800261c:	b292      	uxth	r2, r2
 800261e:	f000 fa62 	bl	8002ae6 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002622:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002624:	461a      	mov	r2, r3
 8002626:	4619      	mov	r1, r3
 8002628:	4620      	mov	r0, r4
 800262a:	f000 fce7 	bl	8002ffc <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800262e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800263c:	2000      	movs	r0, #0
 800263e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002640:	6983      	ldr	r3, [r0, #24]
 8002642:	fbb3 f5f2 	udiv	r5, r3, r2
 8002646:	fb02 3515 	mls	r5, r2, r5, r3
 800264a:	b965      	cbnz	r5, 8002666 <USBD_LL_DataInStage+0x6c>
 800264c:	429a      	cmp	r2, r3
 800264e:	d80a      	bhi.n	8002666 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002650:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002654:	4293      	cmp	r3, r2
 8002656:	d206      	bcs.n	8002666 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002658:	462a      	mov	r2, r5
 800265a:	f000 fa44 	bl	8002ae6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800265e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002662:	462b      	mov	r3, r5
 8002664:	e7de      	b.n	8002624 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002666:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	b12b      	cbz	r3, 800267a <USBD_LL_DataInStage+0x80>
 800266e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002672:	2a03      	cmp	r2, #3
 8002674:	d101      	bne.n	800267a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002676:	4620      	mov	r0, r4
 8002678:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800267a:	4620      	mov	r0, r4
 800267c:	f000 fa5d 	bl	8002b3a <USBD_CtlReceiveStatus>
 8002680:	e7d5      	b.n	800262e <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002682:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0d7      	beq.n	800263c <USBD_LL_DataInStage+0x42>
 800268c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002690:	2a03      	cmp	r2, #3
 8002692:	d1d3      	bne.n	800263c <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002694:	4798      	blx	r3
 8002696:	e7d1      	b.n	800263c <USBD_LL_DataInStage+0x42>

08002698 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002698:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800269a:	2200      	movs	r2, #0
{
 800269c:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800269e:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80026a0:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	f000 fc40 	bl	8002f28 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80026a8:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80026aa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	4620      	mov	r0, r4
 80026b4:	f000 fc38 	bl	8002f28 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80026be:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80026c2:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80026c4:	b12b      	cbz	r3, 80026d2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80026c6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80026ca:	7921      	ldrb	r1, [r4, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4620      	mov	r0, r4
 80026d0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80026d2:	2000      	movs	r0, #0
 80026d4:	bd38      	pop	{r3, r4, r5, pc}

080026d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80026d6:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80026d8:	2000      	movs	r0, #0
 80026da:	4770      	bx	lr

080026dc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80026dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80026e0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80026e4:	2304      	movs	r3, #4
 80026e6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80026ea:	2000      	movs	r0, #0
 80026ec:	4770      	bx	lr

080026ee <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80026ee:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80026f2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80026f6:	2000      	movs	r0, #0
 80026f8:	4770      	bx	lr

080026fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80026fa:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80026fc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002700:	2a03      	cmp	r2, #3
 8002702:	d104      	bne.n	800270e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002704:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	b103      	cbz	r3, 800270e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800270c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800270e:	2000      	movs	r0, #0
 8002710:	bd08      	pop	{r3, pc}

08002712 <USBD_LL_IsoINIncomplete>:
 8002712:	2000      	movs	r0, #0
 8002714:	4770      	bx	lr

08002716 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8002716:	2000      	movs	r0, #0
 8002718:	4770      	bx	lr

0800271a <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800271a:	2000      	movs	r0, #0
 800271c:	4770      	bx	lr

0800271e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800271e:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002720:	2201      	movs	r2, #1
 8002722:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002726:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800272a:	7901      	ldrb	r1, [r0, #4]
 800272c:	6852      	ldr	r2, [r2, #4]
 800272e:	4790      	blx	r2
   
  return USBD_OK;
}
 8002730:	2000      	movs	r0, #0
 8002732:	bd08      	pop	{r3, pc}

08002734 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002734:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002736:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002738:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800273a:	f000 fc13 	bl	8002f64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800273e:	4620      	mov	r0, r4
 8002740:	2100      	movs	r1, #0
}
 8002742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002746:	f000 bc0d 	b.w	8002f64 <USBD_LL_StallEP>
	...

0800274c <USBD_StdDevReq>:
{
 800274c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800274e:	784b      	ldrb	r3, [r1, #1]
{
 8002750:	4604      	mov	r4, r0
 8002752:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002754:	2b09      	cmp	r3, #9
 8002756:	f200 8089 	bhi.w	800286c <USBD_StdDevReq+0x120>
 800275a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800275e:	00d8      	.short	0x00d8
 8002760:	008700f4 	.word	0x008700f4
 8002764:	008700e8 	.word	0x008700e8
 8002768:	000a007c 	.word	0x000a007c
 800276c:	00c80087 	.word	0x00c80087
 8002770:	009c      	.short	0x009c
  switch (req->wValue >> 8)
 8002772:	8849      	ldrh	r1, [r1, #2]
 8002774:	0a0b      	lsrs	r3, r1, #8
 8002776:	3b01      	subs	r3, #1
 8002778:	2b0e      	cmp	r3, #14
 800277a:	d877      	bhi.n	800286c <USBD_StdDevReq+0x120>
 800277c:	e8df f003 	tbb	[pc, r3]
 8002780:	76312420 	.word	0x76312420
 8002784:	76615876 	.word	0x76615876
 8002788:	76767676 	.word	0x76767676
 800278c:	7676      	.short	0x7676
 800278e:	08          	.byte	0x08
 800278f:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8002790:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002794:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002796:	7c20      	ldrb	r0, [r4, #16]
 8002798:	f10d 0106 	add.w	r1, sp, #6
 800279c:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800279e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d072      	beq.n	800288c <USBD_StdDevReq+0x140>
 80027a6:	88eb      	ldrh	r3, [r5, #6]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d06f      	beq.n	800288c <USBD_StdDevReq+0x140>
    len = MIN(len , req->wLength);
 80027ac:	429a      	cmp	r2, r3
 80027ae:	bf28      	it	cs
 80027b0:	461a      	movcs	r2, r3
 80027b2:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80027b6:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80027b8:	4620      	mov	r0, r4
 80027ba:	f000 f987 	bl	8002acc <USBD_CtlSendData>
 80027be:	e065      	b.n	800288c <USBD_StdDevReq+0x140>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80027c0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e7e6      	b.n	8002796 <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80027c8:	7c02      	ldrb	r2, [r0, #16]
 80027ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027ce:	b932      	cbnz	r2, 80027de <USBD_StdDevReq+0x92>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80027d2:	f10d 0006 	add.w	r0, sp, #6
 80027d6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80027d8:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80027da:	7043      	strb	r3, [r0, #1]
 80027dc:	e7df      	b.n	800279e <USBD_StdDevReq+0x52>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	e7f7      	b.n	80027d2 <USBD_StdDevReq+0x86>
    switch ((uint8_t)(req->wValue))
 80027e2:	b2c9      	uxtb	r1, r1
 80027e4:	2905      	cmp	r1, #5
 80027e6:	d81c      	bhi.n	8002822 <USBD_StdDevReq+0xd6>
 80027e8:	e8df f001 	tbb	[pc, r1]
 80027ec:	0f0b0703 	.word	0x0f0b0703
 80027f0:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80027f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	e7cd      	b.n	8002796 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80027fa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	e7c9      	b.n	8002796 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002802:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	e7c5      	b.n	8002796 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800280a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	e7c1      	b.n	8002796 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002812:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	e7bd      	b.n	8002796 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800281a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	e7b9      	b.n	8002796 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8002822:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002826:	f10d 0206 	add.w	r2, sp, #6
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	4798      	blx	r3
 800282e:	e7b6      	b.n	800279e <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002830:	7c03      	ldrb	r3, [r0, #16]
 8002832:	b9db      	cbnz	r3, 800286c <USBD_StdDevReq+0x120>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002834:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002838:	f10d 0006 	add.w	r0, sp, #6
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	4798      	blx	r3
 8002840:	e7ad      	b.n	800279e <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002842:	7c03      	ldrb	r3, [r0, #16]
 8002844:	b993      	cbnz	r3, 800286c <USBD_StdDevReq+0x120>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002846:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800284a:	f10d 0006 	add.w	r0, sp, #6
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002852:	2307      	movs	r3, #7
 8002854:	e7c1      	b.n	80027da <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002856:	888b      	ldrh	r3, [r1, #4]
 8002858:	b943      	cbnz	r3, 800286c <USBD_StdDevReq+0x120>
 800285a:	88cb      	ldrh	r3, [r1, #6]
 800285c:	b933      	cbnz	r3, 800286c <USBD_StdDevReq+0x120>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800285e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002862:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002864:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002866:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800286a:	d103      	bne.n	8002874 <USBD_StdDevReq+0x128>
    USBD_CtlError(pdev , req);
 800286c:	4620      	mov	r0, r4
 800286e:	f7ff ff61 	bl	8002734 <USBD_CtlError.constprop.0>
    break;
 8002872:	e00b      	b.n	800288c <USBD_StdDevReq+0x140>
      pdev->dev_address = dev_addr;
 8002874:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002878:	4629      	mov	r1, r5
 800287a:	f000 fba3 	bl	8002fc4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800287e:	4620      	mov	r0, r4
 8002880:	f000 f950 	bl	8002b24 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002884:	b12d      	cbz	r5, 8002892 <USBD_StdDevReq+0x146>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002886:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002888:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800288c:	2000      	movs	r0, #0
 800288e:	b003      	add	sp, #12
 8002890:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002892:	2301      	movs	r3, #1
 8002894:	e7f8      	b.n	8002888 <USBD_StdDevReq+0x13c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002896:	7889      	ldrb	r1, [r1, #2]
 8002898:	4d30      	ldr	r5, [pc, #192]	; (800295c <USBD_StdDevReq+0x210>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800289a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800289c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800289e:	d8e5      	bhi.n	800286c <USBD_StdDevReq+0x120>
    switch (pdev->dev_state) 
 80028a0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d00c      	beq.n	80028c2 <USBD_StdDevReq+0x176>
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d1df      	bne.n	800286c <USBD_StdDevReq+0x120>
      if (cfgidx == 0) 
 80028ac:	b9b1      	cbnz	r1, 80028dc <USBD_StdDevReq+0x190>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80028ae:	2302      	movs	r3, #2
 80028b0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80028b4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80028b6:	f7ff fe3a 	bl	800252e <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80028ba:	4620      	mov	r0, r4
 80028bc:	f000 f932 	bl	8002b24 <USBD_CtlSendStatus>
 80028c0:	e7e4      	b.n	800288c <USBD_StdDevReq+0x140>
      if (cfgidx) 
 80028c2:	2900      	cmp	r1, #0
 80028c4:	d0f9      	beq.n	80028ba <USBD_StdDevReq+0x16e>
        pdev->dev_config = cfgidx;
 80028c6:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80028c8:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80028ca:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80028cc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fe21 	bl	8002518 <USBD_SetClassConfig>
 80028d6:	2802      	cmp	r0, #2
 80028d8:	d1ef      	bne.n	80028ba <USBD_StdDevReq+0x16e>
 80028da:	e7c7      	b.n	800286c <USBD_StdDevReq+0x120>
      else  if (cfgidx != pdev->dev_config) 
 80028dc:	6841      	ldr	r1, [r0, #4]
 80028de:	2901      	cmp	r1, #1
 80028e0:	d0eb      	beq.n	80028ba <USBD_StdDevReq+0x16e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80028e2:	b2c9      	uxtb	r1, r1
 80028e4:	f7ff fe23 	bl	800252e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80028e8:	7829      	ldrb	r1, [r5, #0]
 80028ea:	6061      	str	r1, [r4, #4]
 80028ec:	e7f0      	b.n	80028d0 <USBD_StdDevReq+0x184>
  if (req->wLength != 1) 
 80028ee:	88ca      	ldrh	r2, [r1, #6]
 80028f0:	2a01      	cmp	r2, #1
 80028f2:	d1bb      	bne.n	800286c <USBD_StdDevReq+0x120>
    switch (pdev->dev_state )  
 80028f4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d003      	beq.n	8002904 <USBD_StdDevReq+0x1b8>
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d1b5      	bne.n	800286c <USBD_StdDevReq+0x120>
      USBD_CtlSendData (pdev, 
 8002900:	1d01      	adds	r1, r0, #4
 8002902:	e759      	b.n	80027b8 <USBD_StdDevReq+0x6c>
      pdev->dev_default_config = 0;
 8002904:	4601      	mov	r1, r0
 8002906:	2300      	movs	r3, #0
 8002908:	f841 3f08 	str.w	r3, [r1, #8]!
 800290c:	e754      	b.n	80027b8 <USBD_StdDevReq+0x6c>
  switch (pdev->dev_state) 
 800290e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002912:	3b02      	subs	r3, #2
 8002914:	2b01      	cmp	r3, #1
 8002916:	d8a9      	bhi.n	800286c <USBD_StdDevReq+0x120>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002918:	2301      	movs	r3, #1
 800291a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800291c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002920:	b10b      	cbz	r3, 8002926 <USBD_StdDevReq+0x1da>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002922:	2303      	movs	r3, #3
 8002924:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002926:	2202      	movs	r2, #2
 8002928:	f104 010c 	add.w	r1, r4, #12
 800292c:	e744      	b.n	80027b8 <USBD_StdDevReq+0x6c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800292e:	884b      	ldrh	r3, [r1, #2]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d1ab      	bne.n	800288c <USBD_StdDevReq+0x140>
      pdev->dev_remote_wakeup = 0; 
 8002934:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002938:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800293c:	4629      	mov	r1, r5
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4620      	mov	r0, r4
 8002942:	4798      	blx	r3
 8002944:	e7b9      	b.n	80028ba <USBD_StdDevReq+0x16e>
  switch (pdev->dev_state)
 8002946:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800294a:	3b02      	subs	r3, #2
 800294c:	2b01      	cmp	r3, #1
 800294e:	d88d      	bhi.n	800286c <USBD_StdDevReq+0x120>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002950:	884b      	ldrh	r3, [r1, #2]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d19a      	bne.n	800288c <USBD_StdDevReq+0x140>
      pdev->dev_remote_wakeup = 0; 
 8002956:	2300      	movs	r3, #0
 8002958:	e7ec      	b.n	8002934 <USBD_StdDevReq+0x1e8>
 800295a:	bf00      	nop
 800295c:	20000184 	.word	0x20000184

08002960 <USBD_StdItfReq>:
{
 8002960:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002962:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002966:	2b03      	cmp	r3, #3
{
 8002968:	4604      	mov	r4, r0
 800296a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800296c:	d10d      	bne.n	800298a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800296e:	790b      	ldrb	r3, [r1, #4]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d80a      	bhi.n	800298a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002974:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800297c:	88eb      	ldrh	r3, [r5, #6]
 800297e:	b913      	cbnz	r3, 8002986 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002980:	4620      	mov	r0, r4
 8002982:	f000 f8cf 	bl	8002b24 <USBD_CtlSendStatus>
}
 8002986:	2000      	movs	r0, #0
 8002988:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800298a:	f7ff fed3 	bl	8002734 <USBD_CtlError.constprop.0>
    break;
 800298e:	e7fa      	b.n	8002986 <USBD_StdItfReq+0x26>

08002990 <USBD_StdEPReq>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002992:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002994:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002996:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800299a:	2a20      	cmp	r2, #32
{
 800299c:	4604      	mov	r4, r0
 800299e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80029a0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80029a2:	d105      	bne.n	80029b0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80029a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4798      	blx	r3
}
 80029ac:	2000      	movs	r0, #0
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80029b0:	784a      	ldrb	r2, [r1, #1]
 80029b2:	2a01      	cmp	r2, #1
 80029b4:	d01c      	beq.n	80029f0 <USBD_StdEPReq+0x60>
 80029b6:	d32a      	bcc.n	8002a0e <USBD_StdEPReq+0x7e>
 80029b8:	2a03      	cmp	r2, #3
 80029ba:	d1f7      	bne.n	80029ac <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80029bc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029c0:	2a02      	cmp	r2, #2
 80029c2:	d040      	beq.n	8002a46 <USBD_StdEPReq+0xb6>
 80029c4:	2a03      	cmp	r2, #3
 80029c6:	d002      	beq.n	80029ce <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80029c8:	f7ff feb4 	bl	8002734 <USBD_CtlError.constprop.0>
      break;
 80029cc:	e7ee      	b.n	80029ac <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80029ce:	884a      	ldrh	r2, [r1, #2]
 80029d0:	b922      	cbnz	r2, 80029dc <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80029d2:	065e      	lsls	r6, r3, #25
 80029d4:	d002      	beq.n	80029dc <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80029d6:	4619      	mov	r1, r3
 80029d8:	f000 fac4 	bl	8002f64 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80029dc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80029e0:	4629      	mov	r1, r5
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4620      	mov	r0, r4
 80029e6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80029e8:	4620      	mov	r0, r4
 80029ea:	f000 f89b 	bl	8002b24 <USBD_CtlSendStatus>
 80029ee:	e7dd      	b.n	80029ac <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80029f0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029f4:	2a02      	cmp	r2, #2
 80029f6:	d026      	beq.n	8002a46 <USBD_StdEPReq+0xb6>
 80029f8:	2a03      	cmp	r2, #3
 80029fa:	d1e5      	bne.n	80029c8 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80029fc:	884a      	ldrh	r2, [r1, #2]
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	d1d4      	bne.n	80029ac <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002a02:	0659      	lsls	r1, r3, #25
 8002a04:	d0f0      	beq.n	80029e8 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002a06:	4619      	mov	r1, r3
 8002a08:	f000 faba 	bl	8002f80 <USBD_LL_ClearStallEP>
 8002a0c:	e7e6      	b.n	80029dc <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002a0e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a12:	2a02      	cmp	r2, #2
 8002a14:	d017      	beq.n	8002a46 <USBD_StdEPReq+0xb6>
 8002a16:	2a03      	cmp	r2, #3
 8002a18:	d1d6      	bne.n	80029c8 <USBD_StdEPReq+0x38>
 8002a1a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002a1e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002a22:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002a26:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002a28:	bf14      	ite	ne
 8002a2a:	3514      	addne	r5, #20
 8002a2c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002a30:	f000 fab4 	bl	8002f9c <USBD_LL_IsStallEP>
 8002a34:	b168      	cbz	r0, 8002a52 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002a36:	2301      	movs	r3, #1
 8002a38:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f000 f844 	bl	8002acc <USBD_CtlSendData>
      break;
 8002a44:	e7b2      	b.n	80029ac <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002a46:	065a      	lsls	r2, r3, #25
 8002a48:	d0b0      	beq.n	80029ac <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f000 fa8a 	bl	8002f64 <USBD_LL_StallEP>
 8002a50:	e7ac      	b.n	80029ac <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002a52:	6028      	str	r0, [r5, #0]
 8002a54:	e7f1      	b.n	8002a3a <USBD_StdEPReq+0xaa>

08002a56 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002a56:	780b      	ldrb	r3, [r1, #0]
 8002a58:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002a5a:	784b      	ldrb	r3, [r1, #1]
 8002a5c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002a5e:	78ca      	ldrb	r2, [r1, #3]
 8002a60:	788b      	ldrb	r3, [r1, #2]
 8002a62:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a66:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002a68:	794a      	ldrb	r2, [r1, #5]
 8002a6a:	790b      	ldrb	r3, [r1, #4]
 8002a6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a70:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002a72:	79ca      	ldrb	r2, [r1, #7]
 8002a74:	798b      	ldrb	r3, [r1, #6]
 8002a76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a7a:	80c3      	strh	r3, [r0, #6]
 8002a7c:	4770      	bx	lr

08002a7e <USBD_CtlError>:
{
 8002a7e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8002a80:	2180      	movs	r1, #128	; 0x80
{
 8002a82:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002a84:	f000 fa6e 	bl	8002f64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	2100      	movs	r1, #0
}
 8002a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002a90:	f000 ba68 	b.w	8002f64 <USBD_LL_StallEP>

08002a94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002a94:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002a96:	b188      	cbz	r0, 8002abc <USBD_GetString+0x28>
 8002a98:	4605      	mov	r5, r0
 8002a9a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d1f9      	bne.n	8002a9a <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002aac:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	704b      	strb	r3, [r1, #1]
 8002ab2:	3801      	subs	r0, #1
 8002ab4:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002ab6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002aba:	b905      	cbnz	r5, 8002abe <USBD_GetString+0x2a>
 8002abc:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	548c      	strb	r4, [r1, r2]
 8002aca:	e7f4      	b.n	8002ab6 <USBD_GetString+0x22>

08002acc <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002acc:	b510      	push	{r4, lr}
 8002ace:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002ad6:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002ad8:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002ada:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002adc:	2100      	movs	r1, #0
 8002ade:	f000 fa7f 	bl	8002fe0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	bd10      	pop	{r4, pc}

08002ae6 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002ae6:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002ae8:	4613      	mov	r3, r2
 8002aea:	460a      	mov	r2, r1
 8002aec:	2100      	movs	r1, #0
 8002aee:	f000 fa77 	bl	8002fe0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002af2:	2000      	movs	r0, #0
 8002af4:	bd08      	pop	{r3, pc}

08002af6 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002af6:	b510      	push	{r4, lr}
 8002af8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002afa:	2203      	movs	r2, #3
 8002afc:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002b00:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002b04:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002b06:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	f000 fa76 	bl	8002ffc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002b10:	2000      	movs	r0, #0
 8002b12:	bd10      	pop	{r4, pc}

08002b14 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002b14:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002b16:	4613      	mov	r3, r2
 8002b18:	460a      	mov	r2, r1
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f000 fa6e 	bl	8002ffc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002b20:	2000      	movs	r0, #0
 8002b22:	bd08      	pop	{r3, pc}

08002b24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002b24:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002b26:	2304      	movs	r3, #4
 8002b28:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	f000 fa55 	bl	8002fe0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002b36:	2000      	movs	r0, #0
 8002b38:	bd08      	pop	{r3, pc}

08002b3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002b3a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002b3c:	2305      	movs	r3, #5
 8002b3e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002b42:	2300      	movs	r3, #0
 8002b44:	461a      	mov	r2, r3
 8002b46:	4619      	mov	r1, r3
 8002b48:	f000 fa58 	bl	8002ffc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	bd08      	pop	{r3, pc}

08002b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b50:	b530      	push	{r4, r5, lr}
 8002b52:	b0ad      	sub	sp, #180	; 0xb4
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <SystemClock_Config+0xbc>)
 8002b56:	2100      	movs	r1, #0
 8002b58:	9101      	str	r1, [sp, #4]
 8002b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <SystemClock_Config+0xc0>)
 8002b6e:	9102      	str	r1, [sp, #8]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b8a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b90:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b92:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b94:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b96:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b98:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b9a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b9c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b9e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ba0:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ba2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ba4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ba6:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba8:	f7fe fdf0 	bl	800178c <HAL_RCC_OscConfig>
 8002bac:	b100      	cbz	r0, 8002bb0 <SystemClock_Config+0x60>
 8002bae:	e7fe      	b.n	8002bae <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bba:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bbc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bc2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bc6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bc8:	f7fe faf0 	bl	80011ac <HAL_RCC_ClockConfig>
 8002bcc:	b100      	cbz	r0, 8002bd0 <SystemClock_Config+0x80>
 8002bce:	e7fe      	b.n	8002bce <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002bd4:	902a      	str	r0, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd6:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002bd8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bda:	f7fe fb87 	bl	80012ec <HAL_RCCEx_PeriphCLKConfig>
 8002bde:	4604      	mov	r4, r0
 8002be0:	b100      	cbz	r0, 8002be4 <SystemClock_Config+0x94>
 8002be2:	e7fe      	b.n	8002be2 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002be4:	f7fe fb7c 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
 8002be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bec:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bf0:	f7fd fd46 	bl	8000680 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f7fd fd59 	bl	80006ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002c02:	f7fd fcfd 	bl	8000600 <HAL_NVIC_SetPriority>
}
 8002c06:	b02d      	add	sp, #180	; 0xb4
 8002c08:	bd30      	pop	{r4, r5, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40007000 	.word	0x40007000

08002c14 <main>:
{
 8002c14:	b500      	push	{lr}
 8002c16:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002c18:	f7fd fca0 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8002c1c:	f7ff ff98 	bl	8002b50 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <main+0x64>)

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c22:	4816      	ldr	r0, [pc, #88]	; (8002c7c <main+0x68>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c24:	2200      	movs	r2, #0
 8002c26:	9200      	str	r2, [sp, #0]
 8002c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c2a:	f041 0104 	orr.w	r1, r1, #4
 8002c2e:	6319      	str	r1, [r3, #48]	; 0x30
 8002c30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c32:	f001 0104 	and.w	r1, r1, #4
 8002c36:	9100      	str	r1, [sp, #0]
 8002c38:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c3a:	9201      	str	r2, [sp, #4]
 8002c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c3e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002c42:	6319      	str	r1, [r3, #48]	; 0x30
 8002c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c46:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c4a:	9101      	str	r1, [sp, #4]
 8002c4c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	9202      	str	r2, [sp, #8]
 8002c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c52:	f041 0101 	orr.w	r1, r1, #1
 8002c56:	6319      	str	r1, [r3, #48]	; 0x30
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5a:	9204      	str	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c6c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6e:	f7fd fd2f 	bl	80006d0 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002c72:	f000 f871 	bl	8002d58 <MX_USB_DEVICE_Init>
 8002c76:	e7fe      	b.n	8002c76 <main+0x62>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020800 	.word	0x40020800

08002c80 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002c80:	e7fe      	b.n	8002c80 <_Error_Handler>

08002c82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c82:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c84:	2003      	movs	r0, #3
 8002c86:	f7fd fca9 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	f06f 000b 	mvn.w	r0, #11
 8002c92:	f7fd fcb5 	bl	8000600 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	4611      	mov	r1, r2
 8002c9a:	f06f 000a 	mvn.w	r0, #10
 8002c9e:	f7fd fcaf 	bl	8000600 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	f06f 0009 	mvn.w	r0, #9
 8002caa:	f7fd fca9 	bl	8000600 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	f06f 0004 	mvn.w	r0, #4
 8002cb6:	f7fd fca3 	bl	8000600 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	f06f 0003 	mvn.w	r0, #3
 8002cc2:	f7fd fc9d 	bl	8000600 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4611      	mov	r1, r2
 8002cca:	f06f 0001 	mvn.w	r0, #1
 8002cce:	f7fd fc97 	bl	8000600 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cde:	f7fd bc8f 	b.w	8000600 <HAL_NVIC_SetPriority>

08002ce2 <NMI_Handler>:
 8002ce2:	4770      	bx	lr

08002ce4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ce4:	e7fe      	b.n	8002ce4 <HardFault_Handler>

08002ce6 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ce6:	e7fe      	b.n	8002ce6 <MemManage_Handler>

08002ce8 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ce8:	e7fe      	b.n	8002ce8 <BusFault_Handler>

08002cea <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002cea:	e7fe      	b.n	8002cea <UsageFault_Handler>

08002cec <SVC_Handler>:
 8002cec:	4770      	bx	lr

08002cee <DebugMon_Handler>:
 8002cee:	4770      	bx	lr

08002cf0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002cf0:	4770      	bx	lr

08002cf2 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002cf2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf4:	f7fd fc4c 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002cfc:	f7fd bce3 	b.w	80006c6 <HAL_SYSTICK_IRQHandler>

08002d00 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <OTG_FS_IRQHandler+0x8>)
 8002d02:	f7fd be47 	b.w	8000994 <HAL_PCD_IRQHandler>
 8002d06:	bf00      	nop
 8002d08:	200003bc 	.word	0x200003bc

08002d0c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d0c:	490f      	ldr	r1, [pc, #60]	; (8002d4c <SystemInit+0x40>)
 8002d0e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <SystemInit+0x44>)
 8002d1c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d1e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d26:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d32:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <SystemInit+0x48>)
 8002d36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d40:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d46:	608b      	str	r3, [r1, #8]
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00
 8002d50:	40023800 	.word	0x40023800
 8002d54:	24003010 	.word	0x24003010

08002d58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002d58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002d5a:	4c09      	ldr	r4, [pc, #36]	; (8002d80 <MX_USB_DEVICE_Init+0x28>)
 8002d5c:	4909      	ldr	r1, [pc, #36]	; (8002d84 <MX_USB_DEVICE_Init+0x2c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fbb8 	bl	80024d6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 8002d66:	4908      	ldr	r1, [pc, #32]	; (8002d88 <MX_USB_DEVICE_Init+0x30>)
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff fbc9 	bl	8002500 <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8002d6e:	4620      	mov	r0, r4
 8002d70:	4906      	ldr	r1, [pc, #24]	; (8002d8c <MX_USB_DEVICE_Init+0x34>)
 8002d72:	f7ff fba9 	bl	80024c8 <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002d76:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002d7c:	f7ff bbc7 	b.w	800250e <USBD_Start>
 8002d80:	20000198 	.word	0x20000198
 8002d84:	200000c0 	.word	0x200000c0
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	200000b0 	.word	0x200000b0

08002d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002d90:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002d98:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8002d9a:	d125      	bne.n	8002de8 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002da0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002dae:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	480e      	ldr	r0, [pc, #56]	; (8002dec <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002db2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f7fd fc8b 	bl	80006d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_PCD_MspInit+0x60>)
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc4:	9400      	str	r4, [sp, #0]
 8002dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002dd6:	2043      	movs	r0, #67	; 0x43
 8002dd8:	4622      	mov	r2, r4
 8002dda:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ddc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002dde:	f7fd fc0f 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002de2:	2043      	movs	r0, #67	; 0x43
 8002de4:	f7fd fc40 	bl	8000668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002de8:	b006      	add	sp, #24
 8002dea:	bd10      	pop	{r4, pc}
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002df4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8002df8:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002dfc:	f7ff bb9e 	b.w	800253c <USBD_LL_SetupStage>

08002e00 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002e00:	231c      	movs	r3, #28
 8002e02:	fb03 0301 	mla	r3, r3, r1, r0
 8002e06:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e0e:	f7ff bbc2 	b.w	8002596 <USBD_LL_DataOutStage>

08002e12 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002e12:	231c      	movs	r3, #28
 8002e14:	fb03 0301 	mla	r3, r3, r1, r0
 8002e18:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1e:	f7ff bbec 	b.w	80025fa <USBD_LL_DataInStage>

08002e22 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002e22:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e26:	f7ff bc68 	b.w	80026fa <USBD_LL_SOF>

08002e2a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002e2a:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8002e2c:	68c1      	ldr	r1, [r0, #12]
{ 
 8002e2e:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002e30:	3100      	adds	r1, #0
 8002e32:	bf18      	it	ne
 8002e34:	2101      	movne	r1, #1
 8002e36:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e3a:	f7ff fc4c 	bl	80026d6 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e3e:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
}
 8002e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e46:	f7ff bc27 	b.w	8002698 <USBD_LL_Reset>
	...

08002e4c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002e50:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e54:	f7ff fc42 	bl	80026dc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002e66:	6a23      	ldr	r3, [r4, #32]
 8002e68:	b123      	cbz	r3, 8002e74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002e6a:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <HAL_PCD_SuspendCallback+0x2c>)
 8002e6c:	6913      	ldr	r3, [r2, #16]
 8002e6e:	f043 0306 	orr.w	r3, r3, #6
 8002e72:	6113      	str	r3, [r2, #16]
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e7c:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e80:	f7ff bc35 	b.w	80026ee <USBD_LL_Resume>

08002e84 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002e84:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e88:	f7ff bc45 	b.w	8002716 <USBD_LL_IsoOUTIncomplete>

08002e8c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002e8c:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e90:	f7ff bc3f 	b.w	8002712 <USBD_LL_IsoINIncomplete>

08002e94 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8002e94:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002e98:	f7ff bc3f 	b.w	800271a <USBD_LL_DevConnected>

08002e9c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8002e9c:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8002ea0:	f7ff bc3d 	b.w	800271e <USBD_LL_DevDisconnected>

08002ea4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002ea4:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8002ea6:	7802      	ldrb	r2, [r0, #0]
 8002ea8:	bb52      	cbnz	r2, 8002f00 <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002eac:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8002eae:	f8c3 03f8 	str.w	r0, [r3, #1016]	; 0x3f8
  pdev->pData = &hpcd_USB_OTG_FS;
 8002eb2:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002eb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002eba:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ebe:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ec0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ec2:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ec4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002ec6:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ec8:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002eca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ecc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ed4:	f7fd fcd6 	bl	8000884 <HAL_PCD_Init>
 8002ed8:	b120      	cbz	r0, 8002ee4 <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002eda:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002ede:	480a      	ldr	r0, [pc, #40]	; (8002f08 <USBD_LL_Init+0x64>)
 8002ee0:	f7ff fece 	bl	8002c80 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	4807      	ldr	r0, [pc, #28]	; (8002f04 <USBD_LL_Init+0x60>)
 8002ee8:	f7fe f949 	bl	800117e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <USBD_LL_Init+0x60>)
 8002ef2:	f7fe f923 	bl	800113c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4802      	ldr	r0, [pc, #8]	; (8002f04 <USBD_LL_Init+0x60>)
 8002efc:	f7fe f91e 	bl	800113c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8002f00:	2000      	movs	r0, #0
 8002f02:	bd08      	pop	{r3, pc}
 8002f04:	200003bc 	.word	0x200003bc
 8002f08:	080033e0 	.word	0x080033e0

08002f0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002f0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002f0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f12:	f7fd fd29 	bl	8000968 <HAL_PCD_Start>
 8002f16:	2803      	cmp	r0, #3
 8002f18:	bf9a      	itte	ls
 8002f1a:	4b02      	ldrls	r3, [pc, #8]	; (8002f24 <USBD_LL_Start+0x18>)
 8002f1c:	5c18      	ldrbls	r0, [r3, r0]
 8002f1e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002f20:	bd08      	pop	{r3, pc}
 8002f22:	bf00      	nop
 8002f24:	080033dc 	.word	0x080033dc

08002f28 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002f2c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f30:	4613      	mov	r3, r2
 8002f32:	4622      	mov	r2, r4
 8002f34:	f7fe f81c 	bl	8000f70 <HAL_PCD_EP_Open>
 8002f38:	2803      	cmp	r0, #3
 8002f3a:	bf9a      	itte	ls
 8002f3c:	4b01      	ldrls	r3, [pc, #4]	; (8002f44 <USBD_LL_OpenEP+0x1c>)
 8002f3e:	5c18      	ldrbls	r0, [r3, r0]
 8002f40:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002f42:	bd10      	pop	{r4, pc}
 8002f44:	080033dc 	.word	0x080033dc

08002f48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002f4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f4e:	f7fe f83d 	bl	8000fcc <HAL_PCD_EP_Close>
 8002f52:	2803      	cmp	r0, #3
 8002f54:	bf9a      	itte	ls
 8002f56:	4b02      	ldrls	r3, [pc, #8]	; (8002f60 <USBD_LL_CloseEP+0x18>)
 8002f58:	5c18      	ldrbls	r0, [r3, r0]
 8002f5a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f5c:	bd08      	pop	{r3, pc}
 8002f5e:	bf00      	nop
 8002f60:	080033dc 	.word	0x080033dc

08002f64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002f66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f6a:	f7fe f896 	bl	800109a <HAL_PCD_EP_SetStall>
 8002f6e:	2803      	cmp	r0, #3
 8002f70:	bf9a      	itte	ls
 8002f72:	4b02      	ldrls	r3, [pc, #8]	; (8002f7c <USBD_LL_StallEP+0x18>)
 8002f74:	5c18      	ldrbls	r0, [r3, r0]
 8002f76:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f78:	bd08      	pop	{r3, pc}
 8002f7a:	bf00      	nop
 8002f7c:	080033dc 	.word	0x080033dc

08002f80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f86:	f7fe f8b4 	bl	80010f2 <HAL_PCD_EP_ClrStall>
 8002f8a:	2803      	cmp	r0, #3
 8002f8c:	bf9a      	itte	ls
 8002f8e:	4b02      	ldrls	r3, [pc, #8]	; (8002f98 <USBD_LL_ClearStallEP+0x18>)
 8002f90:	5c18      	ldrbls	r0, [r3, r0]
 8002f92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f94:	bd08      	pop	{r3, pc}
 8002f96:	bf00      	nop
 8002f98:	080033dc 	.word	0x080033dc

08002f9c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002f9c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002fa0:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8002fa4:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002fa8:	bf1b      	ittet	ne
 8002faa:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002fae:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002fb2:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002fb6:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002fba:	bf08      	it	eq
 8002fbc:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8002fc0:	4770      	bx	lr
	...

08002fc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002fc4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002fc6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fca:	f7fd ffbf 	bl	8000f4c <HAL_PCD_SetAddress>
 8002fce:	2803      	cmp	r0, #3
 8002fd0:	bf9a      	itte	ls
 8002fd2:	4b02      	ldrls	r3, [pc, #8]	; (8002fdc <USBD_LL_SetUSBAddress+0x18>)
 8002fd4:	5c18      	ldrbls	r0, [r3, r0]
 8002fd6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002fd8:	bd08      	pop	{r3, pc}
 8002fda:	bf00      	nop
 8002fdc:	080033dc 	.word	0x080033dc

08002fe0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002fe0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002fe2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fe6:	f7fe f838 	bl	800105a <HAL_PCD_EP_Transmit>
 8002fea:	2803      	cmp	r0, #3
 8002fec:	bf9a      	itte	ls
 8002fee:	4b02      	ldrls	r3, [pc, #8]	; (8002ff8 <USBD_LL_Transmit+0x18>)
 8002ff0:	5c18      	ldrbls	r0, [r3, r0]
 8002ff2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002ff4:	bd08      	pop	{r3, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080033dc 	.word	0x080033dc

08002ffc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002ffc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002ffe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003002:	f7fe f806 	bl	8001012 <HAL_PCD_EP_Receive>
 8003006:	2803      	cmp	r0, #3
 8003008:	bf9a      	itte	ls
 800300a:	4b02      	ldrls	r3, [pc, #8]	; (8003014 <USBD_LL_PrepareReceive+0x18>)
 800300c:	5c18      	ldrbls	r0, [r3, r0]
 800300e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003010:	bd08      	pop	{r3, pc}
 8003012:	bf00      	nop
 8003014:	080033dc 	.word	0x080033dc

08003018 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
  switch (msg)
 800301c:	b111      	cbz	r1, 8003024 <HAL_PCDEx_LPM_Callback+0xc>
 800301e:	2901      	cmp	r1, #1
 8003020:	d016      	beq.n	8003050 <HAL_PCDEx_LPM_Callback+0x38>
 8003022:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 8003024:	6a03      	ldr	r3, [r0, #32]
 8003026:	b133      	cbz	r3, 8003036 <HAL_PCDEx_LPM_Callback+0x1e>
    {
      SystemClock_Config();
 8003028:	f7ff fd92 	bl	8002b50 <SystemClock_Config>
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register. */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_PCDEx_LPM_Callback+0x60>)
 800302e:	6913      	ldr	r3, [r2, #16]
 8003030:	f023 0306 	bic.w	r3, r3, #6
 8003034:	6113      	str	r3, [r2, #16]
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8003036:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8003038:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800303c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8003048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800304c:	f7ff bb4f 	b.w	80026ee <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003050:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8003052:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003056:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8003062:	f7ff fb3b 	bl	80026dc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8003066:	6a23      	ldr	r3, [r4, #32]
 8003068:	b123      	cbz	r3, 8003074 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800306a:	4a03      	ldr	r2, [pc, #12]	; (8003078 <HAL_PCDEx_LPM_Callback+0x60>)
 800306c:	6913      	ldr	r3, [r2, #16]
 800306e:	f043 0306 	orr.w	r3, r3, #6
 8003072:	6113      	str	r3, [r2, #16]
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800307c:	2000      	movs	r0, #0
 800307e:	4770      	bx	lr

08003080 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8003080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
	memcpy(buffer,state,0x40);
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <CUSTOM_HID_OutEvent_FS+0x24>)
 8003084:	f100 0240 	add.w	r2, r0, #64	; 0x40
 8003088:	f850 1b04 	ldr.w	r1, [r0], #4
 800308c:	f843 1b04 	str.w	r1, [r3], #4
 8003090:	4290      	cmp	r0, r2
 8003092:	d1f9      	bne.n	8003088 <CUSTOM_HID_OutEvent_FS+0x8>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,(uint8_t*)buffer,0x40);
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	4903      	ldr	r1, [pc, #12]	; (80030a4 <CUSTOM_HID_OutEvent_FS+0x24>)
 8003098:	4803      	ldr	r0, [pc, #12]	; (80030a8 <CUSTOM_HID_OutEvent_FS+0x28>)
 800309a:	f7ff fa01 	bl	80024a0 <USBD_CUSTOM_HID_SendReport>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800309e:	2000      	movs	r0, #0
 80030a0:	bd08      	pop	{r3, pc}
 80030a2:	bf00      	nop
 80030a4:	200007b8 	.word	0x200007b8
 80030a8:	20000198 	.word	0x20000198

080030ac <CUSTOM_HID_Init_FS>:
 80030ac:	2000      	movs	r0, #0
 80030ae:	4770      	bx	lr

080030b0 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80030b0:	2312      	movs	r3, #18
 80030b2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80030b4:	4800      	ldr	r0, [pc, #0]	; (80030b8 <USBD_FS_DeviceDescriptor+0x8>)
 80030b6:	4770      	bx	lr
 80030b8:	200000ec 	.word	0x200000ec

080030bc <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80030bc:	2304      	movs	r3, #4
 80030be:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80030c0:	4800      	ldr	r0, [pc, #0]	; (80030c4 <USBD_FS_LangIDStrDescriptor+0x8>)
 80030c2:	4770      	bx	lr
 80030c4:	20000100 	.word	0x20000100

080030c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 80030c8:	230c      	movs	r3, #12
 80030ca:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80030cc:	4800      	ldr	r0, [pc, #0]	; (80030d0 <USBD_FS_USR_BOSDescriptor+0x8>)
 80030ce:	4770      	bx	lr
 80030d0:	200000e0 	.word	0x200000e0

080030d4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80030d4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80030d6:	4c04      	ldr	r4, [pc, #16]	; (80030e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80030d8:	4804      	ldr	r0, [pc, #16]	; (80030ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80030da:	460a      	mov	r2, r1
 80030dc:	4621      	mov	r1, r4
 80030de:	f7ff fcd9 	bl	8002a94 <USBD_GetString>
}
 80030e2:	4620      	mov	r0, r4
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	200007f8 	.word	0x200007f8
 80030ec:	0800341a 	.word	0x0800341a

080030f0 <USBD_FS_ProductStrDescriptor>:
{
 80030f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80030f2:	4c04      	ldr	r4, [pc, #16]	; (8003104 <USBD_FS_ProductStrDescriptor+0x14>)
 80030f4:	4804      	ldr	r0, [pc, #16]	; (8003108 <USBD_FS_ProductStrDescriptor+0x18>)
 80030f6:	460a      	mov	r2, r1
 80030f8:	4621      	mov	r1, r4
 80030fa:	f7ff fccb 	bl	8002a94 <USBD_GetString>
}
 80030fe:	4620      	mov	r0, r4
 8003100:	bd10      	pop	{r4, pc}
 8003102:	bf00      	nop
 8003104:	200007f8 	.word	0x200007f8
 8003108:	0800342d 	.word	0x0800342d

0800310c <USBD_FS_SerialStrDescriptor>:
{
 800310c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800310e:	4c04      	ldr	r4, [pc, #16]	; (8003120 <USBD_FS_SerialStrDescriptor+0x14>)
 8003110:	4804      	ldr	r0, [pc, #16]	; (8003124 <USBD_FS_SerialStrDescriptor+0x18>)
 8003112:	460a      	mov	r2, r1
 8003114:	4621      	mov	r1, r4
 8003116:	f7ff fcbd 	bl	8002a94 <USBD_GetString>
}
 800311a:	4620      	mov	r0, r4
 800311c:	bd10      	pop	{r4, pc}
 800311e:	bf00      	nop
 8003120:	200007f8 	.word	0x200007f8
 8003124:	0800344a 	.word	0x0800344a

08003128 <USBD_FS_ConfigStrDescriptor>:
{
 8003128:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800312a:	4c04      	ldr	r4, [pc, #16]	; (800313c <USBD_FS_ConfigStrDescriptor+0x14>)
 800312c:	4804      	ldr	r0, [pc, #16]	; (8003140 <USBD_FS_ConfigStrDescriptor+0x18>)
 800312e:	460a      	mov	r2, r1
 8003130:	4621      	mov	r1, r4
 8003132:	f7ff fcaf 	bl	8002a94 <USBD_GetString>
}
 8003136:	4620      	mov	r0, r4
 8003138:	bd10      	pop	{r4, pc}
 800313a:	bf00      	nop
 800313c:	200007f8 	.word	0x200007f8
 8003140:	080033f3 	.word	0x080033f3

08003144 <USBD_FS_InterfaceStrDescriptor>:
{
 8003144:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003146:	4c04      	ldr	r4, [pc, #16]	; (8003158 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003148:	4804      	ldr	r0, [pc, #16]	; (800315c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800314a:	460a      	mov	r2, r1
 800314c:	4621      	mov	r1, r4
 800314e:	f7ff fca1 	bl	8002a94 <USBD_GetString>
}
 8003152:	4620      	mov	r0, r4
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	200007f8 	.word	0x200007f8
 800315c:	08003405 	.word	0x08003405

08003160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003198 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003164:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003166:	e003      	b.n	8003170 <LoopCopyDataInit>

08003168 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800316a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800316c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800316e:	3104      	adds	r1, #4

08003170 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003174:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003176:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003178:	d3f6      	bcc.n	8003168 <CopyDataInit>
  ldr  r2, =_sbss
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800317c:	e002      	b.n	8003184 <LoopFillZerobss>

0800317e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800317e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003180:	f842 3b04 	str.w	r3, [r2], #4

08003184 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003188:	d3f9      	bcc.n	800317e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800318a:	f7ff fdbf 	bl	8002d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318e:	f000 f811 	bl	80031b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003192:	f7ff fd3f 	bl	8002c14 <main>
  bx  lr    
 8003196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003198:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800319c:	08003468 	.word	0x08003468
  ldr  r0, =_sdata
 80031a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031a4:	20000168 	.word	0x20000168
  ldr  r2, =_sbss
 80031a8:	20000168 	.word	0x20000168
  ldr  r3, = _ebss
 80031ac:	200009fc 	.word	0x200009fc

080031b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <ADC_IRQHandler>
	...

080031b4 <__libc_init_array>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4e0d      	ldr	r6, [pc, #52]	; (80031ec <__libc_init_array+0x38>)
 80031b8:	4c0d      	ldr	r4, [pc, #52]	; (80031f0 <__libc_init_array+0x3c>)
 80031ba:	1ba4      	subs	r4, r4, r6
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	2500      	movs	r5, #0
 80031c0:	42a5      	cmp	r5, r4
 80031c2:	d109      	bne.n	80031d8 <__libc_init_array+0x24>
 80031c4:	4e0b      	ldr	r6, [pc, #44]	; (80031f4 <__libc_init_array+0x40>)
 80031c6:	4c0c      	ldr	r4, [pc, #48]	; (80031f8 <__libc_init_array+0x44>)
 80031c8:	f000 f8f4 	bl	80033b4 <_init>
 80031cc:	1ba4      	subs	r4, r4, r6
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	2500      	movs	r5, #0
 80031d2:	42a5      	cmp	r5, r4
 80031d4:	d105      	bne.n	80031e2 <__libc_init_array+0x2e>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031dc:	4798      	blx	r3
 80031de:	3501      	adds	r5, #1
 80031e0:	e7ee      	b.n	80031c0 <__libc_init_array+0xc>
 80031e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e6:	4798      	blx	r3
 80031e8:	3501      	adds	r5, #1
 80031ea:	e7f2      	b.n	80031d2 <__libc_init_array+0x1e>
 80031ec:	08003460 	.word	0x08003460
 80031f0:	08003460 	.word	0x08003460
 80031f4:	08003460 	.word	0x08003460
 80031f8:	08003464 	.word	0x08003464

080031fc <malloc>:
 80031fc:	4b02      	ldr	r3, [pc, #8]	; (8003208 <malloc+0xc>)
 80031fe:	4601      	mov	r1, r0
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f000 b859 	b.w	80032b8 <_malloc_r>
 8003206:	bf00      	nop
 8003208:	20000104 	.word	0x20000104

0800320c <free>:
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <free+0xc>)
 800320e:	4601      	mov	r1, r0
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	f000 b803 	b.w	800321c <_free_r>
 8003216:	bf00      	nop
 8003218:	20000104 	.word	0x20000104

0800321c <_free_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4605      	mov	r5, r0
 8003220:	2900      	cmp	r1, #0
 8003222:	d045      	beq.n	80032b0 <_free_r+0x94>
 8003224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003228:	1f0c      	subs	r4, r1, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	bfb8      	it	lt
 800322e:	18e4      	addlt	r4, r4, r3
 8003230:	f000 f8b0 	bl	8003394 <__malloc_lock>
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <_free_r+0x98>)
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	4610      	mov	r0, r2
 800323a:	b933      	cbnz	r3, 800324a <_free_r+0x2e>
 800323c:	6063      	str	r3, [r4, #4]
 800323e:	6014      	str	r4, [r2, #0]
 8003240:	4628      	mov	r0, r5
 8003242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003246:	f000 b8a6 	b.w	8003396 <__malloc_unlock>
 800324a:	42a3      	cmp	r3, r4
 800324c:	d90c      	bls.n	8003268 <_free_r+0x4c>
 800324e:	6821      	ldr	r1, [r4, #0]
 8003250:	1862      	adds	r2, r4, r1
 8003252:	4293      	cmp	r3, r2
 8003254:	bf04      	itt	eq
 8003256:	681a      	ldreq	r2, [r3, #0]
 8003258:	685b      	ldreq	r3, [r3, #4]
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	bf04      	itt	eq
 800325e:	1852      	addeq	r2, r2, r1
 8003260:	6022      	streq	r2, [r4, #0]
 8003262:	6004      	str	r4, [r0, #0]
 8003264:	e7ec      	b.n	8003240 <_free_r+0x24>
 8003266:	4613      	mov	r3, r2
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	b10a      	cbz	r2, 8003270 <_free_r+0x54>
 800326c:	42a2      	cmp	r2, r4
 800326e:	d9fa      	bls.n	8003266 <_free_r+0x4a>
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	1858      	adds	r0, r3, r1
 8003274:	42a0      	cmp	r0, r4
 8003276:	d10b      	bne.n	8003290 <_free_r+0x74>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	4401      	add	r1, r0
 800327c:	1858      	adds	r0, r3, r1
 800327e:	4282      	cmp	r2, r0
 8003280:	6019      	str	r1, [r3, #0]
 8003282:	d1dd      	bne.n	8003240 <_free_r+0x24>
 8003284:	6810      	ldr	r0, [r2, #0]
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	4401      	add	r1, r0
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	e7d7      	b.n	8003240 <_free_r+0x24>
 8003290:	d902      	bls.n	8003298 <_free_r+0x7c>
 8003292:	230c      	movs	r3, #12
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	e7d3      	b.n	8003240 <_free_r+0x24>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	1821      	adds	r1, r4, r0
 800329c:	428a      	cmp	r2, r1
 800329e:	bf04      	itt	eq
 80032a0:	6811      	ldreq	r1, [r2, #0]
 80032a2:	6852      	ldreq	r2, [r2, #4]
 80032a4:	6062      	str	r2, [r4, #4]
 80032a6:	bf04      	itt	eq
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	605c      	str	r4, [r3, #4]
 80032ae:	e7c7      	b.n	8003240 <_free_r+0x24>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	bf00      	nop
 80032b4:	20000188 	.word	0x20000188

080032b8 <_malloc_r>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	1ccd      	adds	r5, r1, #3
 80032bc:	f025 0503 	bic.w	r5, r5, #3
 80032c0:	3508      	adds	r5, #8
 80032c2:	2d0c      	cmp	r5, #12
 80032c4:	bf38      	it	cc
 80032c6:	250c      	movcc	r5, #12
 80032c8:	2d00      	cmp	r5, #0
 80032ca:	4606      	mov	r6, r0
 80032cc:	db01      	blt.n	80032d2 <_malloc_r+0x1a>
 80032ce:	42a9      	cmp	r1, r5
 80032d0:	d903      	bls.n	80032da <_malloc_r+0x22>
 80032d2:	230c      	movs	r3, #12
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	2000      	movs	r0, #0
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	f000 f85b 	bl	8003394 <__malloc_lock>
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <_malloc_r+0xb4>)
 80032e0:	6814      	ldr	r4, [r2, #0]
 80032e2:	4621      	mov	r1, r4
 80032e4:	b991      	cbnz	r1, 800330c <_malloc_r+0x54>
 80032e6:	4c22      	ldr	r4, [pc, #136]	; (8003370 <_malloc_r+0xb8>)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	b91b      	cbnz	r3, 80032f4 <_malloc_r+0x3c>
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 f841 	bl	8003374 <_sbrk_r>
 80032f2:	6020      	str	r0, [r4, #0]
 80032f4:	4629      	mov	r1, r5
 80032f6:	4630      	mov	r0, r6
 80032f8:	f000 f83c 	bl	8003374 <_sbrk_r>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	d126      	bne.n	800334e <_malloc_r+0x96>
 8003300:	230c      	movs	r3, #12
 8003302:	6033      	str	r3, [r6, #0]
 8003304:	4630      	mov	r0, r6
 8003306:	f000 f846 	bl	8003396 <__malloc_unlock>
 800330a:	e7e4      	b.n	80032d6 <_malloc_r+0x1e>
 800330c:	680b      	ldr	r3, [r1, #0]
 800330e:	1b5b      	subs	r3, r3, r5
 8003310:	d41a      	bmi.n	8003348 <_malloc_r+0x90>
 8003312:	2b0b      	cmp	r3, #11
 8003314:	d90f      	bls.n	8003336 <_malloc_r+0x7e>
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	50cd      	str	r5, [r1, r3]
 800331a:	18cc      	adds	r4, r1, r3
 800331c:	4630      	mov	r0, r6
 800331e:	f000 f83a 	bl	8003396 <__malloc_unlock>
 8003322:	f104 000b 	add.w	r0, r4, #11
 8003326:	1d23      	adds	r3, r4, #4
 8003328:	f020 0007 	bic.w	r0, r0, #7
 800332c:	1ac3      	subs	r3, r0, r3
 800332e:	d01b      	beq.n	8003368 <_malloc_r+0xb0>
 8003330:	425a      	negs	r2, r3
 8003332:	50e2      	str	r2, [r4, r3]
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	428c      	cmp	r4, r1
 8003338:	bf0d      	iteet	eq
 800333a:	6863      	ldreq	r3, [r4, #4]
 800333c:	684b      	ldrne	r3, [r1, #4]
 800333e:	6063      	strne	r3, [r4, #4]
 8003340:	6013      	streq	r3, [r2, #0]
 8003342:	bf18      	it	ne
 8003344:	460c      	movne	r4, r1
 8003346:	e7e9      	b.n	800331c <_malloc_r+0x64>
 8003348:	460c      	mov	r4, r1
 800334a:	6849      	ldr	r1, [r1, #4]
 800334c:	e7ca      	b.n	80032e4 <_malloc_r+0x2c>
 800334e:	1cc4      	adds	r4, r0, #3
 8003350:	f024 0403 	bic.w	r4, r4, #3
 8003354:	42a0      	cmp	r0, r4
 8003356:	d005      	beq.n	8003364 <_malloc_r+0xac>
 8003358:	1a21      	subs	r1, r4, r0
 800335a:	4630      	mov	r0, r6
 800335c:	f000 f80a 	bl	8003374 <_sbrk_r>
 8003360:	3001      	adds	r0, #1
 8003362:	d0cd      	beq.n	8003300 <_malloc_r+0x48>
 8003364:	6025      	str	r5, [r4, #0]
 8003366:	e7d9      	b.n	800331c <_malloc_r+0x64>
 8003368:	bd70      	pop	{r4, r5, r6, pc}
 800336a:	bf00      	nop
 800336c:	20000188 	.word	0x20000188
 8003370:	2000018c 	.word	0x2000018c

08003374 <_sbrk_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4c06      	ldr	r4, [pc, #24]	; (8003390 <_sbrk_r+0x1c>)
 8003378:	2300      	movs	r3, #0
 800337a:	4605      	mov	r5, r0
 800337c:	4608      	mov	r0, r1
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	f000 f80a 	bl	8003398 <_sbrk>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_sbrk_r+0x1a>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	b103      	cbz	r3, 800338e <_sbrk_r+0x1a>
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	200009f8 	.word	0x200009f8

08003394 <__malloc_lock>:
 8003394:	4770      	bx	lr

08003396 <__malloc_unlock>:
 8003396:	4770      	bx	lr

08003398 <_sbrk>:
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <_sbrk+0x14>)
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	4602      	mov	r2, r0
 800339e:	b909      	cbnz	r1, 80033a4 <_sbrk+0xc>
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <_sbrk+0x18>)
 80033a2:	6019      	str	r1, [r3, #0]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	4402      	add	r2, r0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	4770      	bx	lr
 80033ac:	20000190 	.word	0x20000190
 80033b0:	200009fc 	.word	0x200009fc

080033b4 <_init>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr

080033c0 <_fini>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr
