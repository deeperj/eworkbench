
l053usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f04  08008f04  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f0c  08008f0c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  2000017c  08009090  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200014e0  08009090  000214e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001832a  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000351a  00000000  00000000  000384ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001240  00000000  00000000  0003b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a8  00000000  00000000  0003cc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000172b9  00000000  00000000  0003dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000120d6  00000000  00000000  00054f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080956  00000000  00000000  0006705f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e79b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  000e7a30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008d48 	.word	0x08008d48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08008d48 	.word	0x08008d48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fcca 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f810 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f000 f9ac 	bl	80007a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000448:	f000 f888 	bl	800055c <MX_I2C1_Init>
  MX_SPI1_Init();
 800044c:	f000 f8c6 	bl	80005dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000450:	f000 f8fc 	bl	800064c <MX_SPI2_Init>
  MX_TSC_Init();
 8000454:	f000 f930 	bl	80006b8 <MX_TSC_Init>
  MX_USART1_UART_Init();
 8000458:	f000 f972 	bl	8000740 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800045c:	f007 ff3c 	bl	80082d8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000460:	e7fe      	b.n	8000460 <main+0x28>
	...

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b09d      	sub	sp, #116	; 0x74
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2438      	movs	r4, #56	; 0x38
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2338      	movs	r3, #56	; 0x38
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f008 fc5f 	bl	8008d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	2324      	movs	r3, #36	; 0x24
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f008 fc57 	bl	8008d38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800048a:	003b      	movs	r3, r7
 800048c:	0018      	movs	r0, r3
 800048e:	2324      	movs	r3, #36	; 0x24
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f008 fc50 	bl	8008d38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000498:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <SystemClock_Config+0xf0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a2e      	ldr	r2, [pc, #184]	; (8000558 <SystemClock_Config+0xf4>)
 800049e:	401a      	ands	r2, r3
 80004a0:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <SystemClock_Config+0xf0>)
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	0109      	lsls	r1, r1, #4
 80004a6:	430a      	orrs	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80004aa:	0021      	movs	r1, r4
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2221      	movs	r2, #33	; 0x21
 80004b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22a0      	movs	r2, #160	; 0xa0
 80004b6:	02d2      	lsls	r2, r2, #11
 80004b8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2201      	movs	r2, #1
 80004be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0252      	lsls	r2, r2, #9
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	0352      	lsls	r2, r2, #13
 80004d4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0412      	lsls	r2, r2, #16
 80004dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fd25 	bl	8002f30 <HAL_RCC_OscConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ea:	f000 fa09 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	2124      	movs	r1, #36	; 0x24
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	220f      	movs	r2, #15
 80004f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2203      	movs	r2, #3
 80004fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2101      	movs	r1, #1
 8000512:	0018      	movs	r0, r3
 8000514:	f003 f8cc 	bl	80036b0 <HAL_RCC_ClockConfig>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800051c:	f000 f9f0 	bl	8000900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000520:	003b      	movs	r3, r7
 8000522:	2249      	movs	r2, #73	; 0x49
 8000524:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000526:	003b      	movs	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800052c:	003b      	movs	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000532:	003b      	movs	r3, r7
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	04d2      	lsls	r2, r2, #19
 8000538:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	f003 fa9b 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000546:	f000 f9db 	bl	8000900 <Error_Handler>
  }
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b01d      	add	sp, #116	; 0x74
 8000550:	bd90      	pop	{r4, r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40007000 	.word	0x40007000
 8000558:	ffffe7ff 	.word	0xffffe7ff

0800055c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <MX_I2C1_Init+0x7c>)
 800056a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_I2C1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000574:	2201      	movs	r2, #1
 8000576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_I2C1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_I2C1_Init+0x74>)
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fef9 	bl	8001390 <HAL_I2C_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005a2:	f000 f9ad 	bl	8000900 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_I2C1_Init+0x74>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 ff86 	bl	80014bc <HAL_I2CEx_ConfigAnalogFilter>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b4:	f000 f9a4 	bl	8000900 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MX_I2C1_Init+0x74>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 ffc9 	bl	8001554 <HAL_I2CEx_ConfigDigitalFilter>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c6:	f000 f99b 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000414 	.word	0x20000414
 80005d4:	40005400 	.word	0x40005400
 80005d8:	00707cbb 	.word	0x00707cbb

080005dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_SPI1_Init+0x68>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	; (8000648 <MX_SPI1_Init+0x6c>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_SPI1_Init+0x68>)
 80005e8:	2282      	movs	r2, #130	; 0x82
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_SPI1_Init+0x68>)
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	0212      	lsls	r2, r2, #8
 80005f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_SPI1_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_SPI1_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_SPI1_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_SPI1_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_SPI1_Init+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_SPI1_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_SPI1_Init+0x68>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_SPI1_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_SPI1_Init+0x68>)
 8000628:	2207      	movs	r2, #7
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <MX_SPI1_Init+0x68>)
 800062e:	0018      	movs	r0, r3
 8000630:	f003 fb86 	bl	8003d40 <HAL_SPI_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f962 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	200004e0 	.word	0x200004e0
 8000648:	40013000 	.word	0x40013000

0800064c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_SPI2_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000658:	2282      	movs	r2, #130	; 0x82
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI2_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI2_Init+0x64>)
 8000696:	2207      	movs	r2, #7
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MX_SPI2_Init+0x64>)
 800069c:	0018      	movs	r0, r3
 800069e:	f003 fb4f 	bl	8003d40 <HAL_SPI_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80006a6:	f000 f92b 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200003bc 	.word	0x200003bc
 80006b4:	40003800 	.word	0x40003800

080006b8 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_TSC_Init+0x80>)
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <MX_TSC_Init+0x84>)
 80006c0:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_TSC_Init+0x80>)
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	0552      	lsls	r2, r2, #21
 80006c8:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_TSC_Init+0x80>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0452      	lsls	r2, r2, #17
 80006d0:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_TSC_Init+0x80>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_TSC_Init+0x80>)
 80006da:	2201      	movs	r2, #1
 80006dc:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_TSC_Init+0x80>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_TSC_Init+0x80>)
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0192      	lsls	r2, r2, #6
 80006ea:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_TSC_Init+0x80>)
 80006ee:	22a0      	movs	r2, #160	; 0xa0
 80006f0:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_TSC_Init+0x80>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_TSC_Init+0x80>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_TSC_Init+0x80>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_TSC_Init+0x80>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_TSC_Init+0x80>)
 800070c:	2291      	movs	r2, #145	; 0x91
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_TSC_Init+0x80>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_TSC_Init+0x80>)
 800071a:	2291      	movs	r2, #145	; 0x91
 800071c:	00d2      	lsls	r2, r2, #3
 800071e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_TSC_Init+0x80>)
 8000722:	0018      	movs	r0, r3
 8000724:	f003 fb76 	bl	8003e14 <HAL_TSC_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TSC_Init+0x78>
  {
    Error_Handler();
 800072c:	f000 f8e8 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000538 	.word	0x20000538
 800073c:	40024000 	.word	0x40024000

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART1_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800074c:	22e1      	movs	r2, #225	; 0xe1
 800074e:	0252      	lsls	r2, r2, #9
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000784:	0018      	movs	r0, r3
 8000786:	f003 fbeb 	bl	8003f60 <HAL_UART_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f8b7 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000460 	.word	0x20000460
 800079c:	40013800 	.word	0x40013800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b08b      	sub	sp, #44	; 0x2c
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	2414      	movs	r4, #20
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f008 fac1 	bl	8008d38 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007bc:	2104      	movs	r1, #4
 80007be:	430a      	orrs	r2, r1
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c2:	4b49      	ldr	r3, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	2204      	movs	r2, #4
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	430a      	orrs	r2, r1
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x148>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x148>)
 8000800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x148>)
 8000804:	2102      	movs	r1, #2
 8000806:	430a      	orrs	r2, r1
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x148>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	2202      	movs	r2, #2
 8000810:	4013      	ands	r3, r2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fd98 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000824:	4931      	ldr	r1, [pc, #196]	; (80008ec <MX_GPIO_Init+0x14c>)
 8000826:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x150>)
 8000828:	2200      	movs	r2, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fd92 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0192      	lsls	r2, r2, #6
 8000836:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <MX_GPIO_Init+0x154>)
 800083c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000844:	193b      	adds	r3, r7, r4
 8000846:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <MX_GPIO_Init+0x158>)
 8000848:	0019      	movs	r1, r3
 800084a:	0010      	movs	r0, r2
 800084c:	f000 fc0c 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_GPIO_Init+0x15c>)
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000862:	193a      	adds	r2, r7, r4
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fbfc 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2281      	movs	r2, #129	; 0x81
 8000874:	0052      	lsls	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	193a      	adds	r2, r7, r4
 8000886:	23a0      	movs	r3, #160	; 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fbeb 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2220      	movs	r2, #32
 8000896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80008aa:	193a      	adds	r2, r7, r4
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fbd8 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <MX_GPIO_Init+0x14c>)
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2201      	movs	r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <MX_GPIO_Init+0x150>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f000 fbc5 	bl	8001068 <HAL_GPIO_Init>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b00b      	add	sp, #44	; 0x2c
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	00000c14 	.word	0x00000c14
 80008f0:	50000400 	.word	0x50000400
 80008f4:	10110000 	.word	0x10110000
 80008f8:	50000800 	.word	0x50000800
 80008fc:	10120000 	.word	0x10120000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <HAL_MspInit+0x24>)
 8000912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x24>)
 8000916:	2101      	movs	r1, #1
 8000918:	430a      	orrs	r2, r1
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <HAL_MspInit+0x24>)
 800091e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_MspInit+0x24>)
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	0549      	lsls	r1, r1, #21
 8000926:	430a      	orrs	r2, r1
 8000928:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	230c      	movs	r3, #12
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	0018      	movs	r0, r3
 8000942:	2314      	movs	r3, #20
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f008 f9f6 	bl	8008d38 <memset>
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d129      	bne.n	80009aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 8000958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 800095c:	2102      	movs	r1, #2
 800095e:	430a      	orrs	r2, r1
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	2202      	movs	r2, #2
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 800096e:	210c      	movs	r1, #12
 8000970:	187b      	adds	r3, r7, r1
 8000972:	22c0      	movs	r2, #192	; 0xc0
 8000974:	0092      	lsls	r2, r2, #2
 8000976:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2212      	movs	r2, #18
 800097c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2201      	movs	r2, #1
 8000982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2203      	movs	r2, #3
 8000988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2204      	movs	r2, #4
 800098e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	187b      	adds	r3, r7, r1
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000994:	0019      	movs	r1, r3
 8000996:	0010      	movs	r0, r2
 8000998:	f000 fb66 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 800099e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0389      	lsls	r1, r1, #14
 80009a6:	430a      	orrs	r2, r1
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b008      	add	sp, #32
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	50000400 	.word	0x50000400

080009c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	2314      	movs	r3, #20
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	0018      	movs	r0, r3
 80009ce:	2314      	movs	r3, #20
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f008 f9b0 	bl	8008d38 <memset>
  if(hspi->Instance==SPI1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a42      	ldr	r2, [pc, #264]	; (8000ae8 <HAL_SPI_MspInit+0x128>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d14e      	bne.n	8000a80 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e2:	4b42      	ldr	r3, [pc, #264]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 80009e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	0149      	lsls	r1, r1, #5
 80009ec:	430a      	orrs	r2, r1
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 80009f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 80009f6:	2101      	movs	r1, #1
 80009f8:	430a      	orrs	r2, r1
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fc:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 80009fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a00:	2201      	movs	r2, #1
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b38      	ldr	r3, [pc, #224]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a0e:	2102      	movs	r1, #2
 8000a10:	430a      	orrs	r2, r1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a14:	4b35      	ldr	r3, [pc, #212]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	2202      	movs	r2, #2
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000a20:	2114      	movs	r1, #20
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0212      	lsls	r2, r2, #8
 8000a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2202      	movs	r2, #2
 8000a30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a44:	193a      	adds	r2, r7, r4
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fb0b 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000a52:	0021      	movs	r1, r4
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2228      	movs	r2, #40	; 0x28
 8000a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_SPI_MspInit+0x130>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f000 faf5 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a7e:	e02e      	b.n	8000ade <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_SPI_MspInit+0x134>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d129      	bne.n	8000ade <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	01c9      	lsls	r1, r1, #7
 8000a94:	430a      	orrs	r2, r1
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_SPI_MspInit+0x12c>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000ab0:	2114      	movs	r1, #20
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	22f0      	movs	r2, #240	; 0xf0
 8000ab6:	0212      	lsls	r2, r2, #8
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_SPI_MspInit+0x130>)
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	0010      	movs	r0, r2
 8000ada:	f000 fac5 	bl	8001068 <HAL_GPIO_Init>
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b00b      	add	sp, #44	; 0x2c
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40013000 	.word	0x40013000
 8000aec:	40021000 	.word	0x40021000
 8000af0:	50000400 	.word	0x50000400
 8000af4:	40003800 	.word	0x40003800

08000af8 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2314      	movs	r3, #20
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f008 f914 	bl	8008d38 <memset>
  if(htsc->Instance==TSC)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <HAL_TSC_MspInit+0x12c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d17f      	bne.n	8000c1a <HAL_TSC_MspInit+0x122>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000b1a:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b1e:	4b42      	ldr	r3, [pc, #264]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0249      	lsls	r1, r1, #9
 8000b24:	430a      	orrs	r2, r1
 8000b26:	631a      	str	r2, [r3, #48]	; 0x30
 8000b28:	4b3f      	ldr	r3, [pc, #252]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	025b      	lsls	r3, r3, #9
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b42:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b54:	2102      	movs	r1, #2
 8000b56:	430a      	orrs	r2, r1
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_TSC_MspInit+0x130>)
 8000b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5e:	2202      	movs	r2, #2
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000b66:	2414      	movs	r4, #20
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2244      	movs	r2, #68	; 0x44
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2203      	movs	r2, #3
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	193a      	adds	r2, r7, r4
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fa6a 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2288      	movs	r2, #136	; 0x88
 8000b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2212      	movs	r2, #18
 8000b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2203      	movs	r2, #3
 8000bb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	193a      	adds	r2, r7, r4
 8000bb4:	23a0      	movs	r3, #160	; 0xa0
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 fa54 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc0:	0021      	movs	r1, r4
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2202      	movs	r2, #2
 8000bcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	000c      	movs	r4, r1
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <HAL_TSC_MspInit+0x134>)
 8000be6:	0019      	movs	r1, r3
 8000be8:	0010      	movs	r0, r2
 8000bea:	f000 fa3d 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bee:	0021      	movs	r1, r4
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2212      	movs	r2, #18
 8000bfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_TSC_MspInit+0x134>)
 8000c12:	0019      	movs	r1, r3
 8000c14:	0010      	movs	r0, r2
 8000c16:	f000 fa27 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b00b      	add	sp, #44	; 0x2c
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40024000 	.word	0x40024000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	50000400 	.word	0x50000400

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	230c      	movs	r3, #12
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2314      	movs	r3, #20
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f008 f878 	bl	8008d38 <memset>
  if(huart->Instance==USART1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <HAL_UART_MspInit+0x80>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12a      	bne.n	8000ca8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	01c9      	lsls	r1, r1, #7
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	2201      	movs	r2, #1
 8000c72:	4013      	ands	r3, r2
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c78:	210c      	movs	r1, #12
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	22c0      	movs	r2, #192	; 0xc0
 8000c7e:	00d2      	lsls	r2, r2, #3
 8000c80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2202      	movs	r2, #2
 8000c86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2203      	movs	r2, #3
 8000c92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2204      	movs	r2, #4
 8000c98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	187a      	adds	r2, r7, r1
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f9e0 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b008      	add	sp, #32
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40013800 	.word	0x40013800
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8cc 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <USB_IRQHandler+0x14>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fdb0 	bl	8001858 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	200011ec 	.word	0x200011ec

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <SystemInit+0x64>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <SystemInit+0x64>)
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	0049      	lsls	r1, r1, #1
 8000d12:	430a      	orrs	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <SystemInit+0x64>)
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <SystemInit+0x64>)
 8000d1c:	4913      	ldr	r1, [pc, #76]	; (8000d6c <SystemInit+0x68>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <SystemInit+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <SystemInit+0x64>)
 8000d28:	4911      	ldr	r1, [pc, #68]	; (8000d70 <SystemInit+0x6c>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <SystemInit+0x64>)
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <SystemInit+0x64>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	438a      	bics	r2, r1
 8000d38:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <SystemInit+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SystemInit+0x64>)
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <SystemInit+0x70>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x64>)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <SystemInit+0x64>)
 8000d4c:	490a      	ldr	r1, [pc, #40]	; (8000d78 <SystemInit+0x74>)
 8000d4e:	400a      	ands	r2, r1
 8000d50:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SystemInit+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SystemInit+0x78>)
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	0512      	lsls	r2, r2, #20
 8000d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	88ff400c 	.word	0x88ff400c
 8000d70:	fef6fff6 	.word	0xfef6fff6
 8000d74:	fffbffff 	.word	0xfffbffff
 8000d78:	ff02ffff 	.word	0xff02ffff
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
  ldr  r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d9e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000da0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da2:	3204      	adds	r2, #4

08000da4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <LoopForever+0x16>)
  cmp  r2, r3
 8000da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000daa:	f7ff ffab 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f007 ff9f 	bl	8008cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fb41 	bl	8000438 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000dbc:	08008f14 	.word	0x08008f14
  ldr  r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc4:	2000017c 	.word	0x2000017c
  ldr  r2, =_sbss
 8000dc8:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
 8000dcc:	200014e0 	.word	0x200014e0

08000dd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_COMP_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x3c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Init+0x3c>)
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f811 	bl	8000e14 <HAL_InitTick>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e001      	b.n	8000e02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfe:	f7ff fd85 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e1e:	681c      	ldr	r4, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_InitTick+0x60>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	0019      	movs	r1, r3
 8000e26:	23fa      	movs	r3, #250	; 0xfa
 8000e28:	0098      	lsls	r0, r3, #2
 8000e2a:	f7ff f96d 	bl	8000108 <__udivsi3>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	0019      	movs	r1, r3
 8000e32:	0020      	movs	r0, r4
 8000e34:	f7ff f968 	bl	8000108 <__udivsi3>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f907 	bl	800104e <HAL_SYSTICK_Config>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e00f      	b.n	8000e68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d80b      	bhi.n	8000e66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f8d4 	bl	8001004 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_InitTick+0x64>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_IncTick+0x1c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x20>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	18d2      	adds	r2, r2, r3
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_IncTick+0x20>)
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	2000057c 	.word	0x2000057c

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <HAL_GetTick+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	2000057c 	.word	0x2000057c

08000eb4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	401a      	ands	r2, r3
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <NVIC_EnableIRQ+0x28>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4091      	lsls	r1, r2
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef4:	d932      	bls.n	8000f5c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <NVIC_SetPriority+0xd4>)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	0019      	movs	r1, r3
 8000efe:	230f      	movs	r3, #15
 8000f00:	400b      	ands	r3, r1
 8000f02:	3b08      	subs	r3, #8
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3306      	adds	r3, #6
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	18d3      	adds	r3, r2, r3
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1dfa      	adds	r2, r7, #7
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	0011      	movs	r1, r2
 8000f16:	2203      	movs	r2, #3
 8000f18:	400a      	ands	r2, r1
 8000f1a:	00d2      	lsls	r2, r2, #3
 8000f1c:	21ff      	movs	r1, #255	; 0xff
 8000f1e:	4091      	lsls	r1, r2
 8000f20:	000a      	movs	r2, r1
 8000f22:	43d2      	mvns	r2, r2
 8000f24:	401a      	ands	r2, r3
 8000f26:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	019b      	lsls	r3, r3, #6
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	401a      	ands	r2, r3
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	2303      	movs	r3, #3
 8000f38:	4003      	ands	r3, r0
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3e:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <NVIC_SetPriority+0xd4>)
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001c      	movs	r4, r3
 8000f46:	230f      	movs	r3, #15
 8000f48:	4023      	ands	r3, r4
 8000f4a:	3b08      	subs	r3, #8
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	3306      	adds	r3, #6
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	18c3      	adds	r3, r0, r3
 8000f56:	3304      	adds	r3, #4
 8000f58:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f5a:	e027      	b.n	8000fac <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <NVIC_SetPriority+0xd8>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	33c0      	adds	r3, #192	; 0xc0
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	589b      	ldr	r3, [r3, r2]
 8000f6c:	1dfa      	adds	r2, r7, #7
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	0011      	movs	r1, r2
 8000f72:	2203      	movs	r2, #3
 8000f74:	400a      	ands	r2, r1
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	21ff      	movs	r1, #255	; 0xff
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	43d2      	mvns	r2, r2
 8000f80:	401a      	ands	r2, r3
 8000f82:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	019b      	lsls	r3, r3, #6
 8000f88:	22ff      	movs	r2, #255	; 0xff
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	2303      	movs	r3, #3
 8000f94:	4003      	ands	r3, r0
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <NVIC_SetPriority+0xd8>)
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	33c0      	adds	r3, #192	; 0xc0
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	501a      	str	r2, [r3, r0]
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <SysTick_Config+0x40>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d901      	bls.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e010      	b.n	8000ff4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <SysTick_Config+0x44>)
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	3a01      	subs	r2, #1
 8000fd8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	425b      	negs	r3, r3
 8000fde:	2103      	movs	r1, #3
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff7d 	bl	8000ee0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SysTick_Config+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x44>)
 8000fee:	2207      	movs	r2, #7
 8000ff0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	00ffffff 	.word	0x00ffffff
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	210f      	movs	r1, #15
 8001010:	187b      	adds	r3, r7, r1
 8001012:	1c02      	adds	r2, r0, #0
 8001014:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	187b      	adds	r3, r7, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <NVIC_SetPriority>
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b004      	add	sp, #16
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	0002      	movs	r2, r0
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff37 	bl	8000eb4 <NVIC_EnableIRQ>
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ffaf 	bl	8000fbc <SysTick_Config>
 800105e:	0003      	movs	r3, r0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800107e:	e14f      	b.n	8001320 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4091      	lsls	r1, r2
 800108a:	000a      	movs	r2, r1
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d100      	bne.n	8001098 <HAL_GPIO_Init+0x30>
 8001096:	e140      	b.n	800131a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d00b      	beq.n	80010b8 <HAL_GPIO_Init+0x50>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	2201      	movs	r2, #1
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0xf2>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b12      	cmp	r3, #18
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	58d3      	ldr	r3, [r2, r3]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2207      	movs	r2, #7
 800116c:	4013      	ands	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2107      	movs	r1, #7
 8001186:	400b      	ands	r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	401a      	ands	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	055b      	lsls	r3, r3, #21
 80011de:	4013      	ands	r3, r2
 80011e0:	d100      	bne.n	80011e4 <HAL_GPIO_Init+0x17c>
 80011e2:	e09a      	b.n	800131a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80011e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_GPIO_Init+0x2d4>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	589b      	ldr	r3, [r3, r2]
 80011fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	429a      	cmp	r2, r3
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x1ea>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a47      	ldr	r2, [pc, #284]	; (8001340 <HAL_GPIO_Init+0x2d8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x1e6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a46      	ldr	r2, [pc, #280]	; (8001344 <HAL_GPIO_Init+0x2dc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x1e2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a45      	ldr	r2, [pc, #276]	; (8001348 <HAL_GPIO_Init+0x2e0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x1de>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a44      	ldr	r2, [pc, #272]	; (800134c <HAL_GPIO_Init+0x2e4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x1da>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001242:	2306      	movs	r3, #6
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001252:	2300      	movs	r3, #0
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	2103      	movs	r1, #3
 8001258:	400a      	ands	r2, r1
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <HAL_GPIO_Init+0x2d4>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	4013      	ands	r3, r2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	4013      	ands	r3, r2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	035b      	lsls	r3, r3, #13
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	039b      	lsls	r3, r3, #14
 8001308:	4013      	ands	r3, r2
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	40da      	lsrs	r2, r3
 8001328:	1e13      	subs	r3, r2, #0
 800132a:	d000      	beq.n	800132e <HAL_GPIO_Init+0x2c6>
 800132c:	e6a8      	b.n	8001080 <HAL_GPIO_Init+0x18>
  }
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b006      	add	sp, #24
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	50000400 	.word	0x50000400
 8001344:	50000800 	.word	0x50000800
 8001348:	50000c00 	.word	0x50000c00
 800134c:	50001c00 	.word	0x50001c00
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	0008      	movs	r0, r1
 800135e:	0011      	movs	r1, r2
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	1c7b      	adds	r3, r7, #1
 8001368:	1c0a      	adds	r2, r1, #0
 800136a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136c:	1c7b      	adds	r3, r7, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001374:	1cbb      	adds	r3, r7, #2
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e082      	b.n	80014a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	2100      	movs	r1, #0
 80013b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fabb 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2241      	movs	r2, #65	; 0x41
 80013c2:	2124      	movs	r1, #36	; 0x24
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4934      	ldr	r1, [pc, #208]	; (80014b0 <HAL_I2C_Init+0x120>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4931      	ldr	r1, [pc, #196]	; (80014b4 <HAL_I2C_Init+0x124>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0209      	lsls	r1, r1, #8
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e007      	b.n	800141e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2184      	movs	r1, #132	; 0x84
 8001418:	0209      	lsls	r1, r1, #8
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d104      	bne.n	8001430 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	491f      	ldr	r1, [pc, #124]	; (80014b8 <HAL_I2C_Init+0x128>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	491a      	ldr	r1, [pc, #104]	; (80014b4 <HAL_I2C_Init+0x124>)
 800144c:	400a      	ands	r2, r1
 800144e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	431a      	orrs	r2, r3
 800145a:	0011      	movs	r1, r2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	021a      	lsls	r2, r3, #8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69d9      	ldr	r1, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2241      	movs	r2, #65	; 0x41
 8001494:	2120      	movs	r1, #32
 8001496:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2242      	movs	r2, #66	; 0x42
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	f0ffffff 	.word	0xf0ffffff
 80014b4:	ffff7fff 	.word	0xffff7fff
 80014b8:	02008000 	.word	0x02008000

080014bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d138      	bne.n	8001544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2240      	movs	r2, #64	; 0x40
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014dc:	2302      	movs	r3, #2
 80014de:	e032      	b.n	8001546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2241      	movs	r2, #65	; 0x41
 80014ec:	2124      	movs	r1, #36	; 0x24
 80014ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4911      	ldr	r1, [pc, #68]	; (8001550 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2241      	movs	r2, #65	; 0x41
 8001534:	2120      	movs	r1, #32
 8001536:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	2100      	movs	r1, #0
 800153e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001544:	2302      	movs	r3, #2
  }
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	ffffefff 	.word	0xffffefff

08001554 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2241      	movs	r2, #65	; 0x41
 8001562:	5c9b      	ldrb	r3, [r3, r2]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b20      	cmp	r3, #32
 8001568:	d139      	bne.n	80015de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	5c9b      	ldrb	r3, [r3, r2]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001574:	2302      	movs	r3, #2
 8001576:	e033      	b.n	80015e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2240      	movs	r2, #64	; 0x40
 800157c:	2101      	movs	r1, #1
 800157e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2241      	movs	r2, #65	; 0x41
 8001584:	2124      	movs	r1, #36	; 0x24
 8001586:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2241      	movs	r2, #65	; 0x41
 80015ce:	2120      	movs	r1, #32
 80015d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015de:	2302      	movs	r3, #2
  }
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	fffff0ff 	.word	0xfffff0ff

080015ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af06      	add	r7, sp, #24
 80015f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e100      	b.n	8001800 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a81      	ldr	r2, [pc, #516]	; (8001808 <HAL_PCD_Init+0x21c>)
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	23aa      	movs	r3, #170	; 0xaa
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	2100      	movs	r1, #0
 8001612:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	0018      	movs	r0, r3
 8001618:	f007 f80e 	bl	8008638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a7a      	ldr	r2, [pc, #488]	; (8001808 <HAL_PCD_Init+0x21c>)
 8001620:	2103      	movs	r1, #3
 8001622:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0018      	movs	r0, r3
 800162a:	f003 f95f 	bl	80048ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	230f      	movs	r3, #15
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e058      	b.n	80016ea <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001638:	200f      	movs	r0, #15
 800163a:	183b      	adds	r3, r7, r0
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	0013      	movs	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	189b      	adds	r3, r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	18cb      	adds	r3, r1, r3
 800164c:	3301      	adds	r3, #1
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001652:	183b      	adds	r3, r7, r0
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	0013      	movs	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	189b      	adds	r3, r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	183a      	adds	r2, r7, r0
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001668:	183b      	adds	r3, r7, r0
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	0004      	movs	r4, r0
 800166e:	183b      	adds	r3, r7, r0
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b298      	uxth	r0, r3
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	0013      	movs	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	189b      	adds	r3, r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	18cb      	adds	r3, r1, r3
 8001680:	3336      	adds	r3, #54	; 0x36
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001686:	193b      	adds	r3, r7, r4
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	0013      	movs	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	189b      	adds	r3, r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	18cb      	adds	r3, r1, r3
 8001698:	3303      	adds	r3, #3
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	0013      	movs	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	18cb      	adds	r3, r1, r3
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	0013      	movs	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	189b      	adds	r3, r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	18cb      	adds	r3, r1, r3
 80016c4:	333c      	adds	r3, #60	; 0x3c
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	0013      	movs	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	189b      	adds	r3, r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	18cb      	adds	r3, r1, r3
 80016da:	3340      	adds	r3, #64	; 0x40
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	3201      	adds	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d39f      	bcc.n	8001638 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e056      	b.n	80017b0 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001702:	240f      	movs	r4, #15
 8001704:	193b      	adds	r3, r7, r4
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	236a      	movs	r3, #106	; 0x6a
 800170c:	33ff      	adds	r3, #255	; 0xff
 800170e:	0019      	movs	r1, r3
 8001710:	0013      	movs	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	189b      	adds	r3, r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	18c3      	adds	r3, r0, r3
 800171a:	185b      	adds	r3, r3, r1
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001720:	193b      	adds	r3, r7, r4
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	23b4      	movs	r3, #180	; 0xb4
 8001728:	0059      	lsls	r1, r3, #1
 800172a:	0013      	movs	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	189b      	adds	r3, r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	18c3      	adds	r3, r0, r3
 8001734:	185b      	adds	r3, r3, r1
 8001736:	193a      	adds	r2, r7, r4
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	236c      	movs	r3, #108	; 0x6c
 8001744:	33ff      	adds	r3, #255	; 0xff
 8001746:	0019      	movs	r1, r3
 8001748:	0013      	movs	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	189b      	adds	r3, r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	18c3      	adds	r3, r0, r3
 8001752:	185b      	adds	r3, r3, r1
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	23bc      	movs	r3, #188	; 0xbc
 8001760:	0059      	lsls	r1, r3, #1
 8001762:	0013      	movs	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	189b      	adds	r3, r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	18c3      	adds	r3, r0, r3
 800176c:	185b      	adds	r3, r3, r1
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	23be      	movs	r3, #190	; 0xbe
 800177a:	0059      	lsls	r1, r3, #1
 800177c:	0013      	movs	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	189b      	adds	r3, r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	18c3      	adds	r3, r0, r3
 8001786:	185b      	adds	r3, r3, r1
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800178c:	193b      	adds	r3, r7, r4
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	0059      	lsls	r1, r3, #1
 8001796:	0013      	movs	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	189b      	adds	r3, r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	18c3      	adds	r3, r0, r3
 80017a0:	185b      	adds	r3, r3, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	3201      	adds	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	230f      	movs	r3, #15
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3a1      	bcc.n	8001702 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	466a      	mov	r2, sp
 80017c6:	0011      	movs	r1, r2
 80017c8:	001a      	movs	r2, r3
 80017ca:	3210      	adds	r2, #16
 80017cc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80017ce:	c170      	stmia	r1!, {r4, r5, r6}
 80017d0:	ca30      	ldmia	r2!, {r4, r5}
 80017d2:	c130      	stmia	r1!, {r4, r5}
 80017d4:	6859      	ldr	r1, [r3, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 f8a1 	bl	8004920 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2224      	movs	r2, #36	; 0x24
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_PCD_Init+0x21c>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d103      	bne.n	80017fe <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f001 fb63 	bl	8002ec4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b005      	add	sp, #20
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	000002a9 	.word	0x000002a9

0800180c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	23aa      	movs	r3, #170	; 0xaa
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_PCD_Start+0x18>
 8001820:	2302      	movs	r3, #2
 8001822:	e014      	b.n	800184e <HAL_PCD_Start+0x42>
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	23aa      	movs	r3, #170	; 0xaa
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	2101      	movs	r1, #1
 800182c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	f003 f844 	bl	80048c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0018      	movs	r0, r3
 800183e:	f005 f81d 	bl	800687c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	23aa      	movs	r3, #170	; 0xaa
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	2100      	movs	r1, #0
 800184a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f005 f81f 	bl	80068a8 <USB_ReadInterrupts>
 800186a:	0002      	movs	r2, r0
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	401a      	ands	r2, r3
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	429a      	cmp	r2, r3
 8001878:	d103      	bne.n	8001882 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	f000 fbbb 	bl	8001ff8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	f005 f80e 	bl	80068a8 <USB_ReadInterrupts>
 800188c:	0002      	movs	r2, r0
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	401a      	ands	r2, r3
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	429a      	cmp	r2, r3
 800189a:	d114      	bne.n	80018c6 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2244      	movs	r2, #68	; 0x44
 80018a2:	5a9b      	ldrh	r3, [r3, r2]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	49a2      	ldr	r1, [pc, #648]	; (8001b34 <HAL_PCD_IRQHandler+0x2dc>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	b291      	uxth	r1, r2
 80018b0:	2244      	movs	r2, #68	; 0x44
 80018b2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f006 ff41 	bl	800873e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2100      	movs	r1, #0
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f945 	bl	8001b50 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f004 ffec 	bl	80068a8 <USB_ReadInterrupts>
 80018d0:	0002      	movs	r2, r0
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	401a      	ands	r2, r3
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	01db      	lsls	r3, r3, #7
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10b      	bne.n	80018f8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2244      	movs	r2, #68	; 0x44
 80018e6:	5a9b      	ldrh	r3, [r3, r2]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4992      	ldr	r1, [pc, #584]	; (8001b38 <HAL_PCD_IRQHandler+0x2e0>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	b291      	uxth	r1, r2
 80018f4:	2244      	movs	r2, #68	; 0x44
 80018f6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f004 ffd3 	bl	80068a8 <USB_ReadInterrupts>
 8001902:	0002      	movs	r2, r0
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	019b      	lsls	r3, r3, #6
 8001908:	401a      	ands	r2, r3
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	429a      	cmp	r2, r3
 8001910:	d10b      	bne.n	800192a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2244      	movs	r2, #68	; 0x44
 8001918:	5a9b      	ldrh	r3, [r3, r2]
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4986      	ldr	r1, [pc, #536]	; (8001b3c <HAL_PCD_IRQHandler+0x2e4>)
 8001922:	400a      	ands	r2, r1
 8001924:	b291      	uxth	r1, r2
 8001926:	2244      	movs	r2, #68	; 0x44
 8001928:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0018      	movs	r0, r3
 8001930:	f004 ffba 	bl	80068a8 <USB_ReadInterrupts>
 8001934:	0002      	movs	r2, r0
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	015b      	lsls	r3, r3, #5
 800193a:	401a      	ands	r2, r3
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	429a      	cmp	r2, r3
 8001942:	d137      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	5a9b      	ldrh	r3, [r3, r2]
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2104      	movs	r1, #4
 8001954:	438a      	bics	r2, r1
 8001956:	b291      	uxth	r1, r2
 8001958:	2240      	movs	r2, #64	; 0x40
 800195a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2240      	movs	r2, #64	; 0x40
 8001962:	5a9b      	ldrh	r3, [r3, r2]
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2108      	movs	r1, #8
 800196c:	438a      	bics	r2, r1
 800196e:	b291      	uxth	r1, r2
 8001970:	2240      	movs	r2, #64	; 0x40
 8001972:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	23b8      	movs	r3, #184	; 0xb8
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d109      	bne.n	8001994 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	23b8      	movs	r3, #184	; 0xb8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	2100      	movs	r1, #0
 8001988:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2100      	movs	r1, #0
 800198e:	0018      	movs	r0, r3
 8001990:	f001 fac2 	bl	8002f18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0018      	movs	r0, r3
 8001998:	f006 ff12 	bl	80087c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2244      	movs	r2, #68	; 0x44
 80019a2:	5a9b      	ldrh	r3, [r3, r2]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4965      	ldr	r1, [pc, #404]	; (8001b40 <HAL_PCD_IRQHandler+0x2e8>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	b291      	uxth	r1, r2
 80019b0:	2244      	movs	r2, #68	; 0x44
 80019b2:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f004 ff75 	bl	80068a8 <USB_ReadInterrupts>
 80019be:	0002      	movs	r2, r0
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	401a      	ands	r2, r3
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d127      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2240      	movs	r2, #64	; 0x40
 80019d4:	5a9b      	ldrh	r3, [r3, r2]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2108      	movs	r1, #8
 80019de:	430a      	orrs	r2, r1
 80019e0:	b291      	uxth	r1, r2
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2244      	movs	r2, #68	; 0x44
 80019ec:	5a9b      	ldrh	r3, [r3, r2]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4953      	ldr	r1, [pc, #332]	; (8001b44 <HAL_PCD_IRQHandler+0x2ec>)
 80019f6:	400a      	ands	r2, r1
 80019f8:	b291      	uxth	r1, r2
 80019fa:	2244      	movs	r2, #68	; 0x44
 80019fc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	5a9b      	ldrh	r3, [r3, r2]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	b291      	uxth	r1, r2
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f006 feb5 	bl	8008788 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f004 ff40 	bl	80068a8 <USB_ReadInterrupts>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b80      	cmp	r3, #128	; 0x80
 8001a30:	d145      	bne.n	8001abe <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2244      	movs	r2, #68	; 0x44
 8001a38:	5a9b      	ldrh	r3, [r3, r2]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	438a      	bics	r2, r1
 8001a44:	b291      	uxth	r1, r2
 8001a46:	2244      	movs	r2, #68	; 0x44
 8001a48:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	23b8      	movs	r3, #184	; 0xb8
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d12f      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	5a9b      	ldrh	r3, [r3, r2]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2104      	movs	r1, #4
 8001a66:	430a      	orrs	r2, r1
 8001a68:	b291      	uxth	r1, r2
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	5a9b      	ldrh	r3, [r3, r2]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	b291      	uxth	r1, r2
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	23b8      	movs	r3, #184	; 0xb8
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2254      	movs	r2, #84	; 0x54
 8001a96:	5a9b      	ldrh	r3, [r3, r2]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	223c      	movs	r2, #60	; 0x3c
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	23b9      	movs	r3, #185	; 0xb9
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2101      	movs	r1, #1
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f001 fa32 	bl	8002f18 <HAL_PCDEx_LPM_Callback>
 8001ab4:	e003      	b.n	8001abe <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f006 fe65 	bl	8008788 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f004 fef0 	bl	80068a8 <USB_ReadInterrupts>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	401a      	ands	r2, r3
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10f      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2244      	movs	r2, #68	; 0x44
 8001ade:	5a9b      	ldrh	r3, [r3, r2]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4918      	ldr	r1, [pc, #96]	; (8001b48 <HAL_PCD_IRQHandler+0x2f0>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	b291      	uxth	r1, r2
 8001aec:	2244      	movs	r2, #68	; 0x44
 8001aee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f006 fe14 	bl	8008720 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f004 fed3 	bl	80068a8 <USB_ReadInterrupts>
 8001b02:	0002      	movs	r2, r0
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	401a      	ands	r2, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d10b      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2244      	movs	r2, #68	; 0x44
 8001b18:	5a9b      	ldrh	r3, [r3, r2]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	490a      	ldr	r1, [pc, #40]	; (8001b4c <HAL_PCD_IRQHandler+0x2f4>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	b291      	uxth	r1, r2
 8001b26:	2244      	movs	r2, #68	; 0x44
 8001b28:	5299      	strh	r1, [r3, r2]
  }
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	fffffbff 	.word	0xfffffbff
 8001b38:	ffffbfff 	.word	0xffffbfff
 8001b3c:	ffffdfff 	.word	0xffffdfff
 8001b40:	ffffefff 	.word	0xffffefff
 8001b44:	fffff7ff 	.word	0xfffff7ff
 8001b48:	fffffdff 	.word	0xfffffdff
 8001b4c:	fffffeff 	.word	0xfffffeff

08001b50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	000a      	movs	r2, r1
 8001b5a:	1cfb      	adds	r3, r7, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	23aa      	movs	r3, #170	; 0xaa
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_PCD_SetAddress+0x1e>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e017      	b.n	8001b9e <HAL_PCD_SetAddress+0x4e>
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	23aa      	movs	r3, #170	; 0xaa
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	2101      	movs	r1, #1
 8001b76:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1cfa      	adds	r2, r7, #3
 8001b7c:	2124      	movs	r1, #36	; 0x24
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	1cfb      	adds	r3, r7, #3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	0010      	movs	r0, r2
 8001b8e:	f004 fe61 	bl	8006854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	23aa      	movs	r3, #170	; 0xaa
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	2100      	movs	r1, #0
 8001b9a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ba6:	b590      	push	{r4, r7, lr}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	000c      	movs	r4, r1
 8001bb0:	0010      	movs	r0, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	1cfb      	adds	r3, r7, #3
 8001bb6:	1c22      	adds	r2, r4, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	003b      	movs	r3, r7
 8001bbc:	1c02      	adds	r2, r0, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	1c0a      	adds	r2, r1, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bc6:	230b      	movs	r3, #11
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bce:	1cfb      	adds	r3, r7, #3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da0f      	bge.n	8001bf8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	1cfb      	adds	r3, r7, #3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2207      	movs	r2, #7
 8001bde:	4013      	ands	r3, r2
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	0013      	movs	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	189b      	adds	r3, r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	18d3      	adds	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	705a      	strb	r2, [r3, #1]
 8001bf6:	e00f      	b.n	8001c18 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	1cfb      	adds	r3, r7, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	401a      	ands	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	189b      	adds	r3, r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	3369      	adds	r3, #105	; 0x69
 8001c0a:	33ff      	adds	r3, #255	; 0xff
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c18:	1cfb      	adds	r3, r7, #3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c26:	003b      	movs	r3, r7
 8001c28:	881a      	ldrh	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1cba      	adds	r2, r7, #2
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c48:	1cbb      	adds	r3, r7, #2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d102      	bne.n	8001c56 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	23aa      	movs	r3, #170	; 0xaa
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_PCD_EP_Open+0xc0>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e013      	b.n	8001c8e <HAL_PCD_EP_Open+0xe8>
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	23aa      	movs	r3, #170	; 0xaa
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	0011      	movs	r1, r2
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f002 fe7d 	bl	8004978 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	23aa      	movs	r3, #170	; 0xaa
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	2100      	movs	r1, #0
 8001c86:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001c88:	230b      	movs	r3, #11
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b005      	add	sp, #20
 8001c94:	bd90      	pop	{r4, r7, pc}

08001c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	1cfb      	adds	r3, r7, #3
 8001ca2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca4:	1cfb      	adds	r3, r7, #3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da0f      	bge.n	8001cce <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	1cfb      	adds	r3, r7, #3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	0013      	movs	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	18d3      	adds	r3, r2, r3
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	e00f      	b.n	8001cee <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	1cfb      	adds	r3, r7, #3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	3369      	adds	r3, #105	; 0x69
 8001ce0:	33ff      	adds	r3, #255	; 0xff
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cee:	1cfb      	adds	r3, r7, #3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	23aa      	movs	r3, #170	; 0xaa
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_EP_Close+0x76>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e011      	b.n	8001d30 <HAL_PCD_EP_Close+0x9a>
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	23aa      	movs	r3, #170	; 0xaa
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	2101      	movs	r1, #1
 8001d14:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f003 f980 	bl	8005024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	23aa      	movs	r3, #170	; 0xaa
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	200b      	movs	r0, #11
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	1c0a      	adds	r2, r1, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	0001      	movs	r1, r0
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2207      	movs	r2, #7
 8001d54:	401a      	ands	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	189b      	adds	r3, r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	3369      	adds	r3, #105	; 0x69
 8001d60:	33ff      	adds	r3, #255	; 0xff
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2207      	movs	r2, #7
 8001d86:	4013      	ands	r3, r2
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2207      	movs	r2, #7
 8001d94:	4013      	ands	r3, r2
 8001d96:	d107      	bne.n	8001da8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f003 faff 	bl	80053a4 <USB_EPStartXfer>
 8001da6:	e006      	b.n	8001db6 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f003 faf7 	bl	80053a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b006      	add	sp, #24
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	000a      	movs	r2, r1
 8001dca:	1cfb      	adds	r3, r7, #3
 8001dcc:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dce:	1cfb      	adds	r3, r7, #3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	23c2      	movs	r3, #194	; 0xc2
 8001dda:	0059      	lsls	r1, r3, #1
 8001ddc:	0013      	movs	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	189b      	adds	r3, r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	18c3      	adds	r3, r0, r3
 8001de6:	185b      	adds	r3, r3, r1
 8001de8:	681b      	ldr	r3, [r3, #0]
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	200b      	movs	r0, #11
 8001e00:	183b      	adds	r3, r7, r0
 8001e02:	1c0a      	adds	r2, r1, #0
 8001e04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	0013      	movs	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	189b      	adds	r3, r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	18d3      	adds	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2224      	movs	r2, #36	; 0x24
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e44:	183b      	adds	r3, r7, r0
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2207      	movs	r2, #7
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e52:	183b      	adds	r3, r7, r0
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2207      	movs	r2, #7
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d107      	bne.n	8001e6c <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	0011      	movs	r1, r2
 8001e64:	0018      	movs	r0, r3
 8001e66:	f003 fa9d 	bl	80053a4 <USB_EPStartXfer>
 8001e6a:	e006      	b.n	8001e7a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f003 fa95 	bl	80053a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b006      	add	sp, #24
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	1cfb      	adds	r3, r7, #3
 8001e90:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e92:	1cfb      	adds	r3, r7, #3
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2207      	movs	r2, #7
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d901      	bls.n	8001ea6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e046      	b.n	8001f34 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ea6:	1cfb      	adds	r3, r7, #3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da0f      	bge.n	8001ed0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	1cfb      	adds	r3, r7, #3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	0013      	movs	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	18d3      	adds	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e00d      	b.n	8001eec <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ed0:	1cfb      	adds	r3, r7, #3
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	189b      	adds	r3, r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	3369      	adds	r3, #105	; 0x69
 8001ede:	33ff      	adds	r3, #255	; 0xff
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	18d3      	adds	r3, r2, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef2:	1cfb      	adds	r3, r7, #3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	23aa      	movs	r3, #170	; 0xaa
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_PCD_EP_SetStall+0x8c>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e011      	b.n	8001f34 <HAL_PCD_EP_SetStall+0xb0>
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	23aa      	movs	r3, #170	; 0xaa
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	2101      	movs	r1, #1
 8001f18:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f004 fb94 	bl	8006650 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	23aa      	movs	r3, #170	; 0xaa
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	2100      	movs	r1, #0
 8001f30:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	000a      	movs	r2, r1
 8001f46:	1cfb      	adds	r3, r7, #3
 8001f48:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f4a:	1cfb      	adds	r3, r7, #3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	220f      	movs	r2, #15
 8001f50:	401a      	ands	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d901      	bls.n	8001f5e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e048      	b.n	8001ff0 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f5e:	1cfb      	adds	r3, r7, #3
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0f      	bge.n	8001f88 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	1cfb      	adds	r3, r7, #3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	0013      	movs	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	18d3      	adds	r3, r2, r3
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	705a      	strb	r2, [r3, #1]
 8001f86:	e00f      	b.n	8001fa8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	1cfb      	adds	r3, r7, #3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	401a      	ands	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	189b      	adds	r3, r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	3369      	adds	r3, #105	; 0x69
 8001f9a:	33ff      	adds	r3, #255	; 0xff
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fae:	1cfb      	adds	r3, r7, #3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	23aa      	movs	r3, #170	; 0xaa
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_PCD_EP_ClrStall+0x90>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e011      	b.n	8001ff0 <HAL_PCD_EP_ClrStall+0xb4>
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	23aa      	movs	r3, #170	; 0xaa
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f004 fb86 	bl	80066f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	23aa      	movs	r3, #170	; 0xaa
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	2100      	movs	r1, #0
 8001fec:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b08f      	sub	sp, #60	; 0x3c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002000:	e323      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	202e      	movs	r0, #46	; 0x2e
 8002008:	183b      	adds	r3, r7, r0
 800200a:	2144      	movs	r1, #68	; 0x44
 800200c:	5a52      	ldrh	r2, [r2, r1]
 800200e:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002010:	183b      	adds	r3, r7, r0
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	202d      	movs	r0, #45	; 0x2d
 8002018:	183b      	adds	r3, r7, r0
 800201a:	210f      	movs	r1, #15
 800201c:	400a      	ands	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002020:	183b      	adds	r3, r7, r0
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d000      	beq.n	800202a <PCD_EP_ISR_Handler+0x32>
 8002028:	e15e      	b.n	80022e8 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800202a:	232e      	movs	r3, #46	; 0x2e
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2210      	movs	r2, #16
 8002032:	4013      	ands	r3, r2
 8002034:	d152      	bne.n	80020dc <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29a      	uxth	r2, r3
 800203e:	200e      	movs	r0, #14
 8002040:	183b      	adds	r3, r7, r0
 8002042:	49db      	ldr	r1, [pc, #876]	; (80023b0 <PCD_EP_ISR_Handler+0x3b8>)
 8002044:	400a      	ands	r2, r1
 8002046:	801a      	strh	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	183a      	adds	r2, r7, r0
 800204e:	8812      	ldrh	r2, [r2, #0]
 8002050:	49d8      	ldr	r1, [pc, #864]	; (80023b4 <PCD_EP_ISR_Handler+0x3bc>)
 8002052:	430a      	orrs	r2, r1
 8002054:	b292      	uxth	r2, r2
 8002056:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3328      	adds	r3, #40	; 0x28
 800205c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2250      	movs	r2, #80	; 0x50
 8002064:	5a9b      	ldrh	r3, [r3, r2]
 8002066:	b29b      	uxth	r3, r3
 8002068:	001a      	movs	r2, r3
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	18d2      	adds	r2, r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	18d3      	adds	r3, r2, r3
 8002078:	4acf      	ldr	r2, [pc, #828]	; (80023b8 <PCD_EP_ISR_Handler+0x3c0>)
 800207a:	4694      	mov	ip, r2
 800207c:	4463      	add	r3, ip
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	059b      	lsls	r3, r3, #22
 8002082:	0d9a      	lsrs	r2, r3, #22
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	18d2      	adds	r2, r2, r3
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2100      	movs	r1, #0
 800209a:	0018      	movs	r0, r3
 800209c:	f006 fb22 	bl	80086e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2224      	movs	r2, #36	; 0x24
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d100      	bne.n	80020ae <PCD_EP_ISR_Handler+0xb6>
 80020ac:	e2cd      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d000      	beq.n	80020b8 <PCD_EP_ISR_Handler+0xc0>
 80020b6:	e2c8      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	4252      	negs	r2, r2
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b291      	uxth	r1, r2
 80020ce:	224c      	movs	r2, #76	; 0x4c
 80020d0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2224      	movs	r2, #36	; 0x24
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	e2b6      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3369      	adds	r3, #105	; 0x69
 80020e0:	33ff      	adds	r3, #255	; 0xff
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	212a      	movs	r1, #42	; 0x2a
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	8812      	ldrh	r2, [r2, #0]
 80020ee:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	881a      	ldrh	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4013      	ands	r3, r2
 80020fa:	d037      	beq.n	800216c <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2250      	movs	r2, #80	; 0x50
 8002102:	5a9b      	ldrh	r3, [r3, r2]
 8002104:	b29b      	uxth	r3, r3
 8002106:	001a      	movs	r2, r3
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	18d2      	adds	r2, r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	18d3      	adds	r3, r2, r3
 8002116:	4aa9      	ldr	r2, [pc, #676]	; (80023bc <PCD_EP_ISR_Handler+0x3c4>)
 8002118:	4694      	mov	ip, r2
 800211a:	4463      	add	r3, ip
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	059b      	lsls	r3, r3, #22
 8002120:	0d9a      	lsrs	r2, r3, #22
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	22ac      	movs	r2, #172	; 0xac
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	1899      	adds	r1, r3, r2
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800213a:	b29b      	uxth	r3, r3
 800213c:	f004 fc05 	bl	800694a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29a      	uxth	r2, r3
 8002148:	2010      	movs	r0, #16
 800214a:	183b      	adds	r3, r7, r0
 800214c:	499c      	ldr	r1, [pc, #624]	; (80023c0 <PCD_EP_ISR_Handler+0x3c8>)
 800214e:	400a      	ands	r2, r1
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	183a      	adds	r2, r7, r0
 8002158:	8812      	ldrh	r2, [r2, #0]
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	430a      	orrs	r2, r1
 800215e:	b292      	uxth	r2, r2
 8002160:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f006 fa87 	bl	8008678 <HAL_PCD_SetupStageCallback>
 800216a:	e26e      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800216c:	232a      	movs	r3, #42	; 0x2a
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2200      	movs	r2, #0
 8002172:	5e9b      	ldrsh	r3, [r3, r2]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db00      	blt.n	800217a <PCD_EP_ISR_Handler+0x182>
 8002178:	e267      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29a      	uxth	r2, r3
 8002182:	201c      	movs	r0, #28
 8002184:	183b      	adds	r3, r7, r0
 8002186:	498e      	ldr	r1, [pc, #568]	; (80023c0 <PCD_EP_ISR_Handler+0x3c8>)
 8002188:	400a      	ands	r2, r1
 800218a:	801a      	strh	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	183a      	adds	r2, r7, r0
 8002192:	8812      	ldrh	r2, [r2, #0]
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	430a      	orrs	r2, r1
 8002198:	b292      	uxth	r2, r2
 800219a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2250      	movs	r2, #80	; 0x50
 80021a2:	5a9b      	ldrh	r3, [r3, r2]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	001a      	movs	r2, r3
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	18d2      	adds	r2, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	18d3      	adds	r3, r2, r3
 80021b6:	4a81      	ldr	r2, [pc, #516]	; (80023bc <PCD_EP_ISR_Handler+0x3c4>)
 80021b8:	4694      	mov	ip, r2
 80021ba:	4463      	add	r3, ip
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	059b      	lsls	r3, r3, #22
 80021c0:	0d9a      	lsrs	r2, r3, #22
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01a      	beq.n	8002204 <PCD_EP_ISR_Handler+0x20c>
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f004 fbaf 	bl	800694a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	18d2      	adds	r2, r2, r3
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2100      	movs	r1, #0
 80021fe:	0018      	movs	r0, r3
 8002200:	f006 fa4f 	bl	80086a2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2250      	movs	r2, #80	; 0x50
 8002210:	5a9b      	ldrh	r3, [r3, r2]
 8002212:	b29b      	uxth	r3, r3
 8002214:	001a      	movs	r2, r3
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	189b      	adds	r3, r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4a67      	ldr	r2, [pc, #412]	; (80023bc <PCD_EP_ISR_Handler+0x3c4>)
 8002220:	4694      	mov	ip, r2
 8002222:	4463      	add	r3, ip
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <PCD_EP_ISR_Handler+0x258>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <PCD_EP_ISR_Handler+0x3cc>)
 8002236:	4013      	ands	r3, r2
 8002238:	b29a      	uxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	801a      	strh	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4a5b      	ldr	r2, [pc, #364]	; (80023b4 <PCD_EP_ISR_Handler+0x3bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	b29a      	uxth	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	801a      	strh	r2, [r3, #0]
 800224e:	e02b      	b.n	80022a8 <PCD_EP_ISR_Handler+0x2b0>
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b3e      	cmp	r3, #62	; 0x3e
 8002256:	d812      	bhi.n	800227e <PCD_EP_ISR_Handler+0x286>
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	d002      	beq.n	8002270 <PCD_EP_ISR_Handler+0x278>
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	3301      	adds	r3, #1
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	b29b      	uxth	r3, r3
 8002274:	029b      	lsls	r3, r3, #10
 8002276:	b29a      	uxth	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	e014      	b.n	80022a8 <PCD_EP_ISR_Handler+0x2b0>
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	221f      	movs	r2, #31
 800228c:	4013      	ands	r3, r2
 800228e:	d102      	bne.n	8002296 <PCD_EP_ISR_Handler+0x29e>
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	3b01      	subs	r3, #1
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	b29b      	uxth	r3, r3
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	b29b      	uxth	r3, r3
 800229e:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <PCD_EP_ISR_Handler+0x3bc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	2012      	movs	r0, #18
 80022b2:	183b      	adds	r3, r7, r0
 80022b4:	4944      	ldr	r1, [pc, #272]	; (80023c8 <PCD_EP_ISR_Handler+0x3d0>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	183a      	adds	r2, r7, r0
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0149      	lsls	r1, r1, #5
 80022c4:	404a      	eors	r2, r1
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	183b      	adds	r3, r7, r0
 80022ca:	183a      	adds	r2, r7, r0
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0189      	lsls	r1, r1, #6
 80022d2:	404a      	eors	r2, r1
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	183a      	adds	r2, r7, r0
 80022dc:	8812      	ldrh	r2, [r2, #0]
 80022de:	493b      	ldr	r1, [pc, #236]	; (80023cc <PCD_EP_ISR_Handler+0x3d4>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	b292      	uxth	r2, r2
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	e1b0      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	001a      	movs	r2, r3
 80022ee:	232d      	movs	r3, #45	; 0x2d
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	18d2      	adds	r2, r2, r3
 80022f8:	212a      	movs	r1, #42	; 0x2a
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	8812      	ldrh	r2, [r2, #0]
 80022fe:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002300:	187b      	adds	r3, r7, r1
 8002302:	2200      	movs	r2, #0
 8002304:	5e9b      	ldrsh	r3, [r3, r2]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db00      	blt.n	800230c <PCD_EP_ISR_Handler+0x314>
 800230a:	e10f      	b.n	800252c <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	001a      	movs	r2, r3
 8002312:	202d      	movs	r0, #45	; 0x2d
 8002314:	183b      	adds	r3, r7, r0
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	18d3      	adds	r3, r2, r3
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	2428      	movs	r4, #40	; 0x28
 8002322:	193b      	adds	r3, r7, r4
 8002324:	4926      	ldr	r1, [pc, #152]	; (80023c0 <PCD_EP_ISR_Handler+0x3c8>)
 8002326:	400a      	ands	r2, r1
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	001a      	movs	r2, r3
 8002330:	183b      	adds	r3, r7, r0
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	18d3      	adds	r3, r2, r3
 8002338:	193a      	adds	r2, r7, r4
 800233a:	8812      	ldrh	r2, [r2, #0]
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	430a      	orrs	r2, r1
 8002340:	b292      	uxth	r2, r2
 8002342:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002344:	183b      	adds	r3, r7, r0
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	0013      	movs	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	189b      	adds	r3, r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	3369      	adds	r3, #105	; 0x69
 8002352:	33ff      	adds	r3, #255	; 0xff
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	18d3      	adds	r3, r2, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	7b1b      	ldrb	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d136      	bne.n	80023d0 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2250      	movs	r2, #80	; 0x50
 8002368:	5a9b      	ldrh	r3, [r3, r2]
 800236a:	b29b      	uxth	r3, r3
 800236c:	001a      	movs	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	18d2      	adds	r2, r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	18d3      	adds	r3, r2, r3
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <PCD_EP_ISR_Handler+0x3c4>)
 800237e:	4694      	mov	ip, r2
 8002380:	4463      	add	r3, ip
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	2136      	movs	r1, #54	; 0x36
 8002386:	187b      	adds	r3, r7, r1
 8002388:	0592      	lsls	r2, r2, #22
 800238a:	0d92      	lsrs	r2, r2, #22
 800238c:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800238e:	187b      	adds	r3, r7, r1
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d100      	bne.n	8002398 <PCD_EP_ISR_Handler+0x3a0>
 8002396:	e0a0      	b.n	80024da <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	6959      	ldr	r1, [r3, #20]
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	88da      	ldrh	r2, [r3, #6]
 80023a4:	2336      	movs	r3, #54	; 0x36
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	f004 face 	bl	800694a <USB_ReadPMA>
 80023ae:	e094      	b.n	80024da <PCD_EP_ISR_Handler+0x4e2>
 80023b0:	ffff8f0f 	.word	0xffff8f0f
 80023b4:	ffff8000 	.word	0xffff8000
 80023b8:	00000402 	.word	0x00000402
 80023bc:	00000406 	.word	0x00000406
 80023c0:	00000f8f 	.word	0x00000f8f
 80023c4:	ffff83ff 	.word	0xffff83ff
 80023c8:	ffffbf8f 	.word	0xffffbf8f
 80023cc:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	78db      	ldrb	r3, [r3, #3]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d10c      	bne.n	80023f2 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023d8:	2336      	movs	r3, #54	; 0x36
 80023da:	18fc      	adds	r4, r7, r3
 80023dc:	232a      	movs	r3, #42	; 0x2a
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 f94a 	bl	8002680 <HAL_PCD_EP_DB_Receive>
 80023ec:	0003      	movs	r3, r0
 80023ee:	8023      	strh	r3, [r4, #0]
 80023f0:	e073      	b.n	80024da <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	001a      	movs	r2, r3
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
 8002404:	2022      	movs	r0, #34	; 0x22
 8002406:	183b      	adds	r3, r7, r0
 8002408:	4997      	ldr	r1, [pc, #604]	; (8002668 <PCD_EP_ISR_Handler+0x670>)
 800240a:	400a      	ands	r2, r1
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	001a      	movs	r2, r3
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	183a      	adds	r2, r7, r0
 800241e:	8812      	ldrh	r2, [r2, #0]
 8002420:	4992      	ldr	r1, [pc, #584]	; (800266c <PCD_EP_ISR_Handler+0x674>)
 8002422:	430a      	orrs	r2, r1
 8002424:	b292      	uxth	r2, r2
 8002426:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	001a      	movs	r2, r3
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	001a      	movs	r2, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	01db      	lsls	r3, r3, #7
 8002440:	4013      	ands	r3, r2
 8002442:	d025      	beq.n	8002490 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2250      	movs	r2, #80	; 0x50
 800244a:	5a9b      	ldrh	r3, [r3, r2]
 800244c:	b29b      	uxth	r3, r3
 800244e:	001a      	movs	r2, r3
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	18d2      	adds	r2, r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	4a84      	ldr	r2, [pc, #528]	; (8002670 <PCD_EP_ISR_Handler+0x678>)
 8002460:	4694      	mov	ip, r2
 8002462:	4463      	add	r3, ip
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	2136      	movs	r1, #54	; 0x36
 8002468:	187b      	adds	r3, r7, r1
 800246a:	0592      	lsls	r2, r2, #22
 800246c:	0d92      	lsrs	r2, r2, #22
 800246e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002470:	187b      	adds	r3, r7, r1
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d030      	beq.n	80024da <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	6959      	ldr	r1, [r3, #20]
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	891a      	ldrh	r2, [r3, #8]
 8002484:	2336      	movs	r3, #54	; 0x36
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f004 fa5e 	bl	800694a <USB_ReadPMA>
 800248e:	e024      	b.n	80024da <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2250      	movs	r2, #80	; 0x50
 8002496:	5a9b      	ldrh	r3, [r3, r2]
 8002498:	b29b      	uxth	r3, r3
 800249a:	001a      	movs	r2, r3
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	18d2      	adds	r2, r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	18d3      	adds	r3, r2, r3
 80024aa:	4a72      	ldr	r2, [pc, #456]	; (8002674 <PCD_EP_ISR_Handler+0x67c>)
 80024ac:	4694      	mov	ip, r2
 80024ae:	4463      	add	r3, ip
 80024b0:	881a      	ldrh	r2, [r3, #0]
 80024b2:	2136      	movs	r1, #54	; 0x36
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	0592      	lsls	r2, r2, #22
 80024b8:	0d92      	lsrs	r2, r2, #22
 80024ba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	6959      	ldr	r1, [r3, #20]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	895a      	ldrh	r2, [r3, #10]
 80024d0:	2336      	movs	r3, #54	; 0x36
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f004 fa38 	bl	800694a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	2136      	movs	r1, #54	; 0x36
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	18d2      	adds	r2, r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	18d2      	adds	r2, r2, r3
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <PCD_EP_ISR_Handler+0x516>
 8002500:	2336      	movs	r3, #54	; 0x36
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	881a      	ldrh	r2, [r3, #0]
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	429a      	cmp	r2, r3
 800250c:	d207      	bcs.n	800251e <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f006 f8c3 	bl	80086a2 <HAL_PCD_DataOutStageCallback>
 800251c:	e006      	b.n	800252c <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	0011      	movs	r1, r2
 8002526:	0018      	movs	r0, r3
 8002528:	f002 ff3c 	bl	80053a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800252c:	232a      	movs	r3, #42	; 0x2a
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	4013      	ands	r3, r2
 8002536:	d100      	bne.n	800253a <PCD_EP_ISR_Handler+0x542>
 8002538:	e087      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 800253a:	202d      	movs	r0, #45	; 0x2d
 800253c:	183b      	adds	r3, r7, r0
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	0013      	movs	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	189b      	adds	r3, r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	18d3      	adds	r3, r2, r3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	001a      	movs	r2, r3
 8002556:	183b      	adds	r3, r7, r0
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	18d3      	adds	r3, r2, r3
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29a      	uxth	r2, r3
 8002562:	2420      	movs	r4, #32
 8002564:	193b      	adds	r3, r7, r4
 8002566:	4944      	ldr	r1, [pc, #272]	; (8002678 <PCD_EP_ISR_Handler+0x680>)
 8002568:	400a      	ands	r2, r1
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	001a      	movs	r2, r3
 8002572:	183b      	adds	r3, r7, r0
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	18d3      	adds	r3, r2, r3
 800257a:	193a      	adds	r2, r7, r4
 800257c:	8812      	ldrh	r2, [r2, #0]
 800257e:	493f      	ldr	r1, [pc, #252]	; (800267c <PCD_EP_ISR_Handler+0x684>)
 8002580:	430a      	orrs	r2, r1
 8002582:	b292      	uxth	r2, r2
 8002584:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	78db      	ldrb	r3, [r3, #3]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d10a      	bne.n	80025a4 <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002592:	2b02      	cmp	r3, #2
 8002594:	d151      	bne.n	800263a <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002596:	232a      	movs	r3, #42	; 0x2a
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	d14a      	bne.n	800263a <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2250      	movs	r2, #80	; 0x50
 80025aa:	5a9b      	ldrh	r3, [r3, r2]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	001a      	movs	r2, r3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	18d2      	adds	r2, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <PCD_EP_ISR_Handler+0x678>)
 80025c0:	4694      	mov	ip, r2
 80025c2:	4463      	add	r3, ip
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	211e      	movs	r1, #30
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	0592      	lsls	r2, r2, #22
 80025cc:	0d92      	lsrs	r2, r2, #22
 80025ce:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d908      	bls.n	80025ee <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	231e      	movs	r3, #30
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	1ad2      	subs	r2, r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	619a      	str	r2, [r3, #24]
 80025ec:	e002      	b.n	80025f4 <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f006 f86d 	bl	80086e4 <HAL_PCD_DataInStageCallback>
 800260a:	e01e      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	211e      	movs	r1, #30
 8002612:	187b      	adds	r3, r7, r1
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	18d2      	adds	r2, r2, r3
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	187b      	adds	r3, r7, r1
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	18d2      	adds	r2, r2, r3
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f002 feb6 	bl	80053a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002638:	e007      	b.n	800264a <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800263a:	232a      	movs	r3, #42	; 0x2a
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f93b 	bl	80028c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2244      	movs	r2, #68	; 0x44
 8002650:	5a9b      	ldrh	r3, [r3, r2]
 8002652:	b29b      	uxth	r3, r3
 8002654:	b21b      	sxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	da00      	bge.n	800265c <PCD_EP_ISR_Handler+0x664>
 800265a:	e4d2      	b.n	8002002 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b00f      	add	sp, #60	; 0x3c
 8002664:	bd90      	pop	{r4, r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	ffff8f8f 	.word	0xffff8f8f
 800266c:	ffff80c0 	.word	0xffff80c0
 8002670:	00000402 	.word	0x00000402
 8002674:	00000406 	.word	0x00000406
 8002678:	ffff8f0f 	.word	0xffff8f0f
 800267c:	ffff8000 	.word	0xffff8000

08002680 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	1dbb      	adds	r3, r7, #6
 800268c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800268e:	1dbb      	adds	r3, r7, #6
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	01db      	lsls	r3, r3, #7
 8002696:	4013      	ands	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_PCD_EP_DB_Receive+0x1c>
 800269a:	e07f      	b.n	800279c <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2250      	movs	r2, #80	; 0x50
 80026a2:	5a9b      	ldrh	r3, [r3, r2]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	001a      	movs	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	18d2      	adds	r2, r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	4a7c      	ldr	r2, [pc, #496]	; (80028a8 <HAL_PCD_EP_DB_Receive+0x228>)
 80026b8:	4694      	mov	ip, r2
 80026ba:	4463      	add	r3, ip
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	211a      	movs	r1, #26
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	0592      	lsls	r2, r2, #22
 80026c4:	0d92      	lsrs	r2, r2, #22
 80026c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d308      	bcc.n	80026e6 <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	231a      	movs	r3, #26
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	e002      	b.n	80026ec <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d121      	bne.n	8002738 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	001a      	movs	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	18d3      	adds	r3, r2, r3
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29a      	uxth	r2, r3
 8002706:	2018      	movs	r0, #24
 8002708:	183b      	adds	r3, r7, r0
 800270a:	4968      	ldr	r1, [pc, #416]	; (80028ac <HAL_PCD_EP_DB_Receive+0x22c>)
 800270c:	400a      	ands	r2, r1
 800270e:	801a      	strh	r2, [r3, #0]
 8002710:	183b      	adds	r3, r7, r0
 8002712:	183a      	adds	r2, r7, r0
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0189      	lsls	r1, r1, #6
 800271a:	404a      	eors	r2, r1
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	001a      	movs	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	18d3      	adds	r3, r2, r3
 800272c:	183a      	adds	r2, r7, r0
 800272e:	8812      	ldrh	r2, [r2, #0]
 8002730:	495f      	ldr	r1, [pc, #380]	; (80028b0 <HAL_PCD_EP_DB_Receive+0x230>)
 8002732:	430a      	orrs	r2, r1
 8002734:	b292      	uxth	r2, r2
 8002736:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2240      	movs	r2, #64	; 0x40
 800273e:	4013      	ands	r3, r2
 8002740:	d01a      	beq.n	8002778 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	001a      	movs	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	18d3      	adds	r3, r2, r3
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29a      	uxth	r2, r3
 8002754:	2016      	movs	r0, #22
 8002756:	183b      	adds	r3, r7, r0
 8002758:	4956      	ldr	r1, [pc, #344]	; (80028b4 <HAL_PCD_EP_DB_Receive+0x234>)
 800275a:	400a      	ands	r2, r1
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	001a      	movs	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	18d3      	adds	r3, r2, r3
 800276c:	183a      	adds	r2, r7, r0
 800276e:	8812      	ldrh	r2, [r2, #0]
 8002770:	4951      	ldr	r1, [pc, #324]	; (80028b8 <HAL_PCD_EP_DB_Receive+0x238>)
 8002772:	430a      	orrs	r2, r1
 8002774:	b292      	uxth	r2, r2
 8002776:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002778:	231a      	movs	r3, #26
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d100      	bne.n	8002784 <HAL_PCD_EP_DB_Receive+0x104>
 8002782:	e089      	b.n	8002898 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	891a      	ldrh	r2, [r3, #8]
 8002790:	231a      	movs	r3, #26
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f004 f8d8 	bl	800694a <USB_ReadPMA>
 800279a:	e07d      	b.n	8002898 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2250      	movs	r2, #80	; 0x50
 80027a2:	5a9b      	ldrh	r3, [r3, r2]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	001a      	movs	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	18d2      	adds	r2, r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	18d3      	adds	r3, r2, r3
 80027b6:	4a41      	ldr	r2, [pc, #260]	; (80028bc <HAL_PCD_EP_DB_Receive+0x23c>)
 80027b8:	4694      	mov	ip, r2
 80027ba:	4463      	add	r3, ip
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	211a      	movs	r1, #26
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	0592      	lsls	r2, r2, #22
 80027c4:	0d92      	lsrs	r2, r2, #22
 80027c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d308      	bcc.n	80027e6 <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	231a      	movs	r3, #26
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	1ad2      	subs	r2, r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	619a      	str	r2, [r3, #24]
 80027e4:	e002      	b.n	80027ec <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d121      	bne.n	8002838 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	001a      	movs	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	18d3      	adds	r3, r2, r3
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29a      	uxth	r2, r3
 8002806:	201e      	movs	r0, #30
 8002808:	183b      	adds	r3, r7, r0
 800280a:	4928      	ldr	r1, [pc, #160]	; (80028ac <HAL_PCD_EP_DB_Receive+0x22c>)
 800280c:	400a      	ands	r2, r1
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	183b      	adds	r3, r7, r0
 8002812:	183a      	adds	r2, r7, r0
 8002814:	8812      	ldrh	r2, [r2, #0]
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	0189      	lsls	r1, r1, #6
 800281a:	404a      	eors	r2, r1
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	001a      	movs	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	18d3      	adds	r3, r2, r3
 800282c:	183a      	adds	r2, r7, r0
 800282e:	8812      	ldrh	r2, [r2, #0]
 8002830:	491f      	ldr	r1, [pc, #124]	; (80028b0 <HAL_PCD_EP_DB_Receive+0x230>)
 8002832:	430a      	orrs	r2, r1
 8002834:	b292      	uxth	r2, r2
 8002836:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002838:	1dbb      	adds	r3, r7, #6
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	4013      	ands	r3, r2
 8002840:	d11a      	bne.n	8002878 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	001a      	movs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	18d3      	adds	r3, r2, r3
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29a      	uxth	r2, r3
 8002854:	201c      	movs	r0, #28
 8002856:	183b      	adds	r3, r7, r0
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_PCD_EP_DB_Receive+0x234>)
 800285a:	400a      	ands	r2, r1
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	001a      	movs	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	183a      	adds	r2, r7, r0
 800286e:	8812      	ldrh	r2, [r2, #0]
 8002870:	4911      	ldr	r1, [pc, #68]	; (80028b8 <HAL_PCD_EP_DB_Receive+0x238>)
 8002872:	430a      	orrs	r2, r1
 8002874:	b292      	uxth	r2, r2
 8002876:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002878:	231a      	movs	r3, #26
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6959      	ldr	r1, [r3, #20]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	895a      	ldrh	r2, [r3, #10]
 800288e:	231a      	movs	r3, #26
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	f004 f859 	bl	800694a <USB_ReadPMA>
    }
  }

  return count;
 8002898:	231a      	movs	r3, #26
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	881b      	ldrh	r3, [r3, #0]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b008      	add	sp, #32
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	00000402 	.word	0x00000402
 80028ac:	ffffbf8f 	.word	0xffffbf8f
 80028b0:	ffff8080 	.word	0xffff8080
 80028b4:	ffff8f8f 	.word	0xffff8f8f
 80028b8:	ffff80c0 	.word	0xffff80c0
 80028bc:	00000406 	.word	0x00000406

080028c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b092      	sub	sp, #72	; 0x48
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	1dbb      	adds	r3, r7, #6
 80028cc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ce:	1dbb      	adds	r3, r7, #6
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x1a>
 80028d8:	e12f      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2250      	movs	r2, #80	; 0x50
 80028e0:	5a9b      	ldrh	r3, [r3, r2]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	001a      	movs	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	18d2      	adds	r2, r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	18d3      	adds	r3, r2, r3
 80028f4:	4abc      	ldr	r2, [pc, #752]	; (8002be8 <HAL_PCD_EP_DB_Transmit+0x328>)
 80028f6:	4694      	mov	ip, r2
 80028f8:	4463      	add	r3, ip
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	212e      	movs	r1, #46	; 0x2e
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	0592      	lsls	r2, r2, #22
 8002902:	0d92      	lsrs	r2, r2, #22
 8002904:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	187b      	adds	r3, r7, r1
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d908      	bls.n	8002924 <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	232e      	movs	r3, #46	; 0x2e
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	e002      	b.n	800292a <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d129      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0011      	movs	r1, r2
 800293a:	0018      	movs	r0, r3
 800293c:	f005 fed2 	bl	80086e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002940:	1dbb      	adds	r3, r7, #6
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	4013      	ands	r3, r2
 800294a:	d100      	bne.n	800294e <HAL_PCD_EP_DB_Transmit+0x8e>
 800294c:	e231      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	001a      	movs	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	18d3      	adds	r3, r2, r3
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29a      	uxth	r2, r3
 8002960:	2012      	movs	r0, #18
 8002962:	183b      	adds	r3, r7, r0
 8002964:	49a1      	ldr	r1, [pc, #644]	; (8002bec <HAL_PCD_EP_DB_Transmit+0x32c>)
 8002966:	400a      	ands	r2, r1
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	001a      	movs	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	183a      	adds	r2, r7, r0
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	499c      	ldr	r1, [pc, #624]	; (8002bf0 <HAL_PCD_EP_DB_Transmit+0x330>)
 800297e:	430a      	orrs	r2, r1
 8002980:	b292      	uxth	r2, r2
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e215      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002986:	1dbb      	adds	r3, r7, #6
 8002988:	881a      	ldrh	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	01db      	lsls	r3, r3, #7
 800298e:	4013      	ands	r3, r2
 8002990:	d01a      	beq.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	001a      	movs	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	18d3      	adds	r3, r2, r3
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	2024      	movs	r0, #36	; 0x24
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	4990      	ldr	r1, [pc, #576]	; (8002bec <HAL_PCD_EP_DB_Transmit+0x32c>)
 80029aa:	400a      	ands	r2, r1
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	001a      	movs	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	18d3      	adds	r3, r2, r3
 80029bc:	183a      	adds	r2, r7, r0
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	498b      	ldr	r1, [pc, #556]	; (8002bf0 <HAL_PCD_EP_DB_Transmit+0x330>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	b292      	uxth	r2, r2
 80029c6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	5c9b      	ldrb	r3, [r3, r2]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d000      	beq.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x114>
 80029d2:	e1ee      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	212e      	movs	r1, #46	; 0x2e
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	18d2      	adds	r2, r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	18d2      	adds	r2, r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d309      	bcc.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	e016      	b.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d108      	bne.n	8002a2c <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8002a1a:	232e      	movs	r3, #46	; 0x2e
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	e009      	b.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d150      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x22a>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2250      	movs	r2, #80	; 0x50
 8002a54:	5a9b      	ldrh	r3, [r3, r2]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	001a      	movs	r2, r3
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	00da      	lsls	r2, r3, #3
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	4a5f      	ldr	r2, [pc, #380]	; (8002be8 <HAL_PCD_EP_DB_Transmit+0x328>)
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	4463      	add	r3, ip
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d110      	bne.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x1da>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4a5d      	ldr	r2, [pc, #372]	; (8002bf4 <HAL_PCD_EP_DB_Transmit+0x334>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4a5a      	ldr	r2, [pc, #360]	; (8002bf8 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	e044      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x264>
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a9e:	d810      	bhi.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x202>
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d002      	beq.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	029b      	lsls	r3, r3, #10
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	e030      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	221f      	movs	r2, #31
 8002acc:	4013      	ands	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x216>
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	029b      	lsls	r3, r3, #10
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e01c      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x264>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d118      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x264>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2250      	movs	r2, #80	; 0x50
 8002afe:	5a9b      	ldrh	r3, [r3, r2]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	001a      	movs	r2, r3
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	00da      	lsls	r2, r3, #3
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	18d3      	adds	r3, r2, r3
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_PCD_EP_DB_Transmit+0x328>)
 8002b16:	4694      	mov	ip, r2
 8002b18:	4463      	add	r3, ip
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6959      	ldr	r1, [r3, #20]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	891a      	ldrh	r2, [r3, #8]
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f003 fec6 	bl	80068c4 <USB_WritePMA>
 8002b38:	e13b      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2250      	movs	r2, #80	; 0x50
 8002b40:	5a9b      	ldrh	r3, [r3, r2]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	001a      	movs	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	18d2      	adds	r2, r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	18d3      	adds	r3, r2, r3
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <HAL_PCD_EP_DB_Transmit+0x33c>)
 8002b56:	4694      	mov	ip, r2
 8002b58:	4463      	add	r3, ip
 8002b5a:	881a      	ldrh	r2, [r3, #0]
 8002b5c:	212e      	movs	r1, #46	; 0x2e
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	0592      	lsls	r2, r2, #22
 8002b62:	0d92      	lsrs	r2, r2, #22
 8002b64:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d308      	bcc.n	8002b84 <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	232e      	movs	r3, #46	; 0x2e
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	1ad2      	subs	r2, r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	619a      	str	r2, [r3, #24]
 8002b82:	e002      	b.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d136      	bne.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	0011      	movs	r1, r2
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f005 fda2 	bl	80086e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	01db      	lsls	r3, r3, #7
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d000      	beq.n	8002bae <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002bac:	e101      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	18d3      	adds	r3, r2, r3
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2026      	movs	r0, #38	; 0x26
 8002bc2:	183b      	adds	r3, r7, r0
 8002bc4:	4909      	ldr	r1, [pc, #36]	; (8002bec <HAL_PCD_EP_DB_Transmit+0x32c>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	001a      	movs	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	18d3      	adds	r3, r2, r3
 8002bd8:	183a      	adds	r2, r7, r0
 8002bda:	8812      	ldrh	r2, [r2, #0]
 8002bdc:	4904      	ldr	r1, [pc, #16]	; (8002bf0 <HAL_PCD_EP_DB_Transmit+0x330>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	b292      	uxth	r2, r2
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e0e5      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	00000402 	.word	0x00000402
 8002bec:	ffff8f8f 	.word	0xffff8f8f
 8002bf0:	ffffc080 	.word	0xffffc080
 8002bf4:	ffff83ff 	.word	0xffff83ff
 8002bf8:	ffff8000 	.word	0xffff8000
 8002bfc:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	01db      	lsls	r3, r3, #7
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d11a      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	001a      	movs	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	18d3      	adds	r3, r2, r3
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	202c      	movs	r0, #44	; 0x2c
 8002c20:	183b      	adds	r3, r7, r0
 8002c22:	497a      	ldr	r1, [pc, #488]	; (8002e0c <HAL_PCD_EP_DB_Transmit+0x54c>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	18d3      	adds	r3, r2, r3
 8002c36:	183a      	adds	r2, r7, r0
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	4975      	ldr	r1, [pc, #468]	; (8002e10 <HAL_PCD_EP_DB_Transmit+0x550>)
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d000      	beq.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c4c:	e0b1      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	212e      	movs	r1, #46	; 0x2e
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	18d2      	adds	r2, r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	18d2      	adds	r2, r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d309      	bcc.n	8002c8c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	1ad2      	subs	r2, r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	621a      	str	r2, [r3, #32]
 8002c8a:	e016      	b.n	8002cba <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d108      	bne.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 8002c94:	232e      	movs	r3, #46	; 0x2e
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]
 8002ca4:	e009      	b.n	8002cba <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2224      	movs	r2, #36	; 0x24
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d150      	bne.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x4aa>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2250      	movs	r2, #80	; 0x50
 8002cd4:	5a9b      	ldrh	r3, [r3, r2]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	001a      	movs	r2, r3
 8002cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00da      	lsls	r2, r3, #3
 8002ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_PCD_EP_DB_Transmit+0x554>)
 8002cec:	4694      	mov	ip, r2
 8002cee:	4463      	add	r3, ip
 8002cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d110      	bne.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x45a>
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4a46      	ldr	r2, [pc, #280]	; (8002e18 <HAL_PCD_EP_DB_Transmit+0x558>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	4a43      	ldr	r2, [pc, #268]	; (8002e1c <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	e041      	b.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d1e:	d810      	bhi.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x482>
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d002      	beq.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x474>
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d30:	3301      	adds	r3, #1
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	029b      	lsls	r3, r3, #10
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e02d      	b.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x496>
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	3b01      	subs	r3, #1
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e019      	b.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d115      	bne.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x4de>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2250      	movs	r2, #80	; 0x50
 8002d78:	5a9b      	ldrh	r3, [r3, r2]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	189b      	adds	r3, r3, r2
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	00da      	lsls	r2, r3, #3
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	18d3      	adds	r3, r2, r3
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <HAL_PCD_EP_DB_Transmit+0x554>)
 8002d90:	4694      	mov	ip, r2
 8002d92:	4463      	add	r3, ip
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6959      	ldr	r1, [r3, #20]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	895a      	ldrh	r2, [r3, #10]
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f003 fd89 	bl	80068c4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	001a      	movs	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	18d3      	adds	r3, r2, r3
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	2010      	movs	r0, #16
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	4915      	ldr	r1, [pc, #84]	; (8002e20 <HAL_PCD_EP_DB_Transmit+0x560>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	183b      	adds	r3, r7, r0
 8002dd0:	183a      	adds	r2, r7, r0
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	404a      	eors	r2, r1
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	183b      	adds	r3, r7, r0
 8002ddc:	183a      	adds	r2, r7, r0
 8002dde:	8812      	ldrh	r2, [r2, #0]
 8002de0:	2120      	movs	r1, #32
 8002de2:	404a      	eors	r2, r1
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	001a      	movs	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	18d3      	adds	r3, r2, r3
 8002df4:	183a      	adds	r2, r7, r0
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	490a      	ldr	r1, [pc, #40]	; (8002e24 <HAL_PCD_EP_DB_Transmit+0x564>)
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	0018      	movs	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b012      	add	sp, #72	; 0x48
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	ffff8f8f 	.word	0xffff8f8f
 8002e10:	ffffc080 	.word	0xffffc080
 8002e14:	00000406 	.word	0x00000406
 8002e18:	ffff83ff 	.word	0xffff83ff
 8002e1c:	ffff8000 	.word	0xffff8000
 8002e20:	ffff8fbf 	.word	0xffff8fbf
 8002e24:	ffff8080 	.word	0xffff8080

08002e28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	0008      	movs	r0, r1
 8002e32:	0011      	movs	r1, r2
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	240a      	movs	r4, #10
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	1c02      	adds	r2, r0, #0
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	2308      	movs	r3, #8
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	1c0a      	adds	r2, r1, #0
 8002e44:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	230a      	movs	r3, #10
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	0013      	movs	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e00b      	b.n	8002e88 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e70:	230a      	movs	r3, #10
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	0013      	movs	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	3369      	adds	r3, #105	; 0x69
 8002e80:	33ff      	adds	r3, #255	; 0xff
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e88:	2308      	movs	r3, #8
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	80da      	strh	r2, [r3, #6]
 8002ea0:	e00b      	b.n	8002eba <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b007      	add	sp, #28
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	23ba      	movs	r3, #186	; 0xba
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	2101      	movs	r1, #1
 8002eda:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	23b8      	movs	r3, #184	; 0xb8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2254      	movs	r2, #84	; 0x54
 8002eea:	5a9b      	ldrh	r3, [r3, r2]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b299      	uxth	r1, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2254      	movs	r2, #84	; 0x54
 8002ef8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2254      	movs	r2, #84	; 0x54
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2202      	movs	r2, #2
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b299      	uxth	r1, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2254      	movs	r2, #84	; 0x54
 8002f0c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	000a      	movs	r2, r1
 8002f22:	1cfb      	adds	r3, r7, #3
 8002f24:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b002      	add	sp, #8
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f000 fbab 	bl	800369a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f44:	4bce      	ldr	r3, [pc, #824]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	220c      	movs	r2, #12
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4e:	4bcc      	ldr	r3, [pc, #816]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	025b      	lsls	r3, r3, #9
 8002f56:	4013      	ands	r3, r2
 8002f58:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4013      	ands	r3, r2
 8002f62:	d100      	bne.n	8002f66 <HAL_RCC_OscConfig+0x36>
 8002f64:	e07e      	b.n	8003064 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d007      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d112      	bne.n	8002f98 <HAL_RCC_OscConfig+0x68>
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	025b      	lsls	r3, r3, #9
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4bc0      	ldr	r3, [pc, #768]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	4013      	ands	r3, r2
 8002f86:	d100      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5a>
 8002f88:	e06b      	b.n	8003062 <HAL_RCC_OscConfig+0x132>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d167      	bne.n	8003062 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f000 fb81 	bl	800369a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	025b      	lsls	r3, r3, #9
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x84>
 8002fa4:	4bb6      	ldr	r3, [pc, #728]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4bb5      	ldr	r3, [pc, #724]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	0249      	lsls	r1, r1, #9
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e027      	b.n	8003004 <HAL_RCC_OscConfig+0xd4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	23a0      	movs	r3, #160	; 0xa0
 8002fba:	02db      	lsls	r3, r3, #11
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10e      	bne.n	8002fde <HAL_RCC_OscConfig+0xae>
 8002fc0:	4baf      	ldr	r3, [pc, #700]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4bae      	ldr	r3, [pc, #696]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	02c9      	lsls	r1, r1, #11
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4bac      	ldr	r3, [pc, #688]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4bab      	ldr	r3, [pc, #684]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	0249      	lsls	r1, r1, #9
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e012      	b.n	8003004 <HAL_RCC_OscConfig+0xd4>
 8002fde:	4ba8      	ldr	r3, [pc, #672]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4ba7      	ldr	r3, [pc, #668]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fe4:	49a7      	ldr	r1, [pc, #668]	; (8003284 <HAL_RCC_OscConfig+0x354>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	025b      	lsls	r3, r3, #9
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4ba1      	ldr	r3, [pc, #644]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4ba0      	ldr	r3, [pc, #640]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8002ffe:	49a2      	ldr	r1, [pc, #648]	; (8003288 <HAL_RCC_OscConfig+0x358>)
 8003000:	400a      	ands	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fd ff48 	bl	8000ea0 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003014:	e009      	b.n	800302a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003016:	f7fd ff43 	bl	8000ea0 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d902      	bls.n	800302a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	f000 fb38 	bl	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800302a:	4b95      	ldr	r3, [pc, #596]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	029b      	lsls	r3, r3, #10
 8003032:	4013      	ands	r3, r2
 8003034:	d0ef      	beq.n	8003016 <HAL_RCC_OscConfig+0xe6>
 8003036:	e015      	b.n	8003064 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fd ff32 	bl	8000ea0 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003042:	f7fd ff2d 	bl	8000ea0 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	; 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e322      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003054:	4b8a      	ldr	r3, [pc, #552]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	4013      	ands	r3, r2
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x112>
 8003060:	e000      	b.n	8003064 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003062:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2202      	movs	r2, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d100      	bne.n	8003070 <HAL_RCC_OscConfig+0x140>
 800306e:	e08a      	b.n	8003186 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d13d      	bne.n	80030fe <HAL_RCC_OscConfig+0x1ce>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d13a      	bne.n	80030fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003088:	4b7d      	ldr	r3, [pc, #500]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2204      	movs	r2, #4
 800308e:	4013      	ands	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_RCC_OscConfig+0x16c>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e2fe      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a7a      	ldr	r2, [pc, #488]	; (800328c <HAL_RCC_OscConfig+0x35c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	4b74      	ldr	r3, [pc, #464]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030b2:	4b73      	ldr	r3, [pc, #460]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2209      	movs	r2, #9
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c4:	f000 fc1e 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80030c8:	0001      	movs	r1, r0
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	220f      	movs	r2, #15
 80030d2:	4013      	ands	r3, r2
 80030d4:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_RCC_OscConfig+0x360>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	000a      	movs	r2, r1
 80030da:	40da      	lsrs	r2, r3
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <HAL_RCC_OscConfig+0x364>)
 80030de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80030e0:	2513      	movs	r5, #19
 80030e2:	197c      	adds	r4, r7, r5
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fd fe95 	bl	8000e14 <HAL_InitTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80030ee:	197b      	adds	r3, r7, r5
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d047      	beq.n	8003186 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80030f6:	2313      	movs	r3, #19
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	e2cd      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d027      	beq.n	8003154 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2209      	movs	r2, #9
 800310a:	4393      	bics	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fd fec3 	bl	8000ea0 <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003120:	f7fd febe 	bl	8000ea0 <HAL_GetTick>
 8003124:	0002      	movs	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e2b3      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	d0f1      	beq.n	8003120 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_OscConfig+0x35c>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	021a      	lsls	r2, r3, #8
 800314c:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800315a:	2101      	movs	r1, #1
 800315c:	438a      	bics	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fd fe9e 	bl	8000ea0 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316a:	f7fd fe99 	bl	8000ea0 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e28e      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800317c:	4b40      	ldr	r3, [pc, #256]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2204      	movs	r2, #4
 8003182:	4013      	ands	r3, r2
 8003184:	d1f1      	bne.n	800316a <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2210      	movs	r2, #16
 800318c:	4013      	ands	r3, r2
 800318e:	d100      	bne.n	8003192 <HAL_RCC_OscConfig+0x262>
 8003190:	e09e      	b.n	80032d0 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13f      	bne.n	8003218 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_OscConfig+0x280>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e274      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b0:	4b33      	ldr	r3, [pc, #204]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a38      	ldr	r2, [pc, #224]	; (8003298 <HAL_RCC_OscConfig+0x368>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	0a19      	lsrs	r1, r3, #8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	061a      	lsls	r2, r3, #24
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	0b5b      	lsrs	r3, r3, #13
 80031de:	3301      	adds	r3, #1
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	0212      	lsls	r2, r2, #8
 80031e4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	210f      	movs	r1, #15
 80031ee:	400b      	ands	r3, r1
 80031f0:	4927      	ldr	r1, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x360>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x364>)
 80031f8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80031fa:	2513      	movs	r5, #19
 80031fc:	197c      	adds	r4, r7, r5
 80031fe:	2000      	movs	r0, #0
 8003200:	f7fd fe08 	bl	8000e14 <HAL_InitTick>
 8003204:	0003      	movs	r3, r0
 8003206:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003208:	197b      	adds	r3, r7, r5
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05f      	beq.n	80032d0 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8003210:	2313      	movs	r3, #19
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	e240      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d03d      	beq.n	800329c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	0049      	lsls	r1, r1, #1
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fd fe37 	bl	8000ea0 <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003238:	f7fd fe32 	bl	8000ea0 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e227      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4013      	ands	r3, r2
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <HAL_RCC_OscConfig+0x368>)
 800325c:	4013      	ands	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	0a19      	lsrs	r1, r3, #8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	061a      	lsls	r2, r3, #24
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <HAL_RCC_OscConfig+0x350>)
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	e027      	b.n	80032d0 <HAL_RCC_OscConfig+0x3a0>
 8003280:	40021000 	.word	0x40021000
 8003284:	fffeffff 	.word	0xfffeffff
 8003288:	fffbffff 	.word	0xfffbffff
 800328c:	ffffe0ff 	.word	0xffffe0ff
 8003290:	08008da8 	.word	0x08008da8
 8003294:	20000000 	.word	0x20000000
 8003298:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800329c:	4bbd      	ldr	r3, [pc, #756]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4bbc      	ldr	r3, [pc, #752]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80032a2:	49bd      	ldr	r1, [pc, #756]	; (8003598 <HAL_RCC_OscConfig+0x668>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fdfa 	bl	8000ea0 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032b2:	f7fd fdf5 	bl	8000ea0 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1ea      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032c4:	4bb3      	ldr	r3, [pc, #716]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2208      	movs	r2, #8
 80032d6:	4013      	ands	r3, r2
 80032d8:	d036      	beq.n	8003348 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4bac      	ldr	r3, [pc, #688]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80032e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e6:	4bab      	ldr	r3, [pc, #684]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80032e8:	2101      	movs	r1, #1
 80032ea:	430a      	orrs	r2, r1
 80032ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fd fdd7 	bl	8000ea0 <HAL_GetTick>
 80032f2:	0003      	movs	r3, r0
 80032f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fd fdd2 	bl	8000ea0 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1c7      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800330a:	4ba2      	ldr	r3, [pc, #648]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d0f1      	beq.n	80032f8 <HAL_RCC_OscConfig+0x3c8>
 8003314:	e018      	b.n	8003348 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b9f      	ldr	r3, [pc, #636]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800331a:	4b9e      	ldr	r3, [pc, #632]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800331c:	2101      	movs	r1, #1
 800331e:	438a      	bics	r2, r1
 8003320:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fd fdbd 	bl	8000ea0 <HAL_GetTick>
 8003326:	0003      	movs	r3, r0
 8003328:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7fd fdb8 	bl	8000ea0 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1ad      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800333e:	4b95      	ldr	r3, [pc, #596]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	2202      	movs	r2, #2
 8003344:	4013      	ands	r3, r2
 8003346:	d1f1      	bne.n	800332c <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2204      	movs	r2, #4
 800334e:	4013      	ands	r3, r2
 8003350:	d100      	bne.n	8003354 <HAL_RCC_OscConfig+0x424>
 8003352:	e0af      	b.n	80034b4 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003354:	2327      	movs	r3, #39	; 0x27
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335c:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800335e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	055b      	lsls	r3, r3, #21
 8003364:	4013      	ands	r3, r2
 8003366:	d10a      	bne.n	800337e <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800336a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336c:	4b89      	ldr	r3, [pc, #548]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	0549      	lsls	r1, r1, #21
 8003372:	430a      	orrs	r2, r1
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003376:	2327      	movs	r3, #39	; 0x27
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b87      	ldr	r3, [pc, #540]	; (800359c <HAL_RCC_OscConfig+0x66c>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d11a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b84      	ldr	r3, [pc, #528]	; (800359c <HAL_RCC_OscConfig+0x66c>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b83      	ldr	r3, [pc, #524]	; (800359c <HAL_RCC_OscConfig+0x66c>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0049      	lsls	r1, r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003398:	f7fd fd82 	bl	8000ea0 <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fd fd7d 	bl	8000ea0 <HAL_GetTick>
 80033a6:	0002      	movs	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	; 0x64
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e172      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b79      	ldr	r3, [pc, #484]	; (800359c <HAL_RCC_OscConfig+0x66c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x4ac>
 80033cc:	4b71      	ldr	r3, [pc, #452]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80033ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d0:	4b70      	ldr	r3, [pc, #448]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0049      	lsls	r1, r1, #1
 80033d6:	430a      	orrs	r2, r1
 80033d8:	651a      	str	r2, [r3, #80]	; 0x50
 80033da:	e031      	b.n	8003440 <HAL_RCC_OscConfig+0x510>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x4ce>
 80033e4:	4b6b      	ldr	r3, [pc, #428]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80033e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80033ea:	496b      	ldr	r1, [pc, #428]	; (8003598 <HAL_RCC_OscConfig+0x668>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	651a      	str	r2, [r3, #80]	; 0x50
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80033f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f4:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80033f6:	496a      	ldr	r1, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x670>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
 80033fc:	e020      	b.n	8003440 <HAL_RCC_OscConfig+0x510>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	23a0      	movs	r3, #160	; 0xa0
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	429a      	cmp	r2, r3
 8003408:	d10e      	bne.n	8003428 <HAL_RCC_OscConfig+0x4f8>
 800340a:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800340c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	00c9      	lsls	r1, r1, #3
 8003414:	430a      	orrs	r2, r1
 8003416:	651a      	str	r2, [r3, #80]	; 0x50
 8003418:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800341a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341c:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	0049      	lsls	r1, r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	651a      	str	r2, [r3, #80]	; 0x50
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0x510>
 8003428:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800342a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800342e:	495a      	ldr	r1, [pc, #360]	; (8003598 <HAL_RCC_OscConfig+0x668>)
 8003430:	400a      	ands	r2, r1
 8003432:	651a      	str	r2, [r3, #80]	; 0x50
 8003434:	4b57      	ldr	r3, [pc, #348]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003438:	4b56      	ldr	r3, [pc, #344]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800343a:	4959      	ldr	r1, [pc, #356]	; (80035a0 <HAL_RCC_OscConfig+0x670>)
 800343c:	400a      	ands	r2, r1
 800343e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003448:	f7fd fd2a 	bl	8000ea0 <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003450:	e009      	b.n	8003466 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fd fd25 	bl	8000ea0 <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <HAL_RCC_OscConfig+0x674>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e119      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003466:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4013      	ands	r3, r2
 8003470:	d0ef      	beq.n	8003452 <HAL_RCC_OscConfig+0x522>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fd fd14 	bl	8000ea0 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800347c:	e009      	b.n	8003492 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fd fd0f 	bl	8000ea0 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_RCC_OscConfig+0x674>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e103      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003492:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4013      	ands	r3, r2
 800349c:	d1ef      	bne.n	800347e <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800349e:	2327      	movs	r3, #39	; 0x27
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80034aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80034ae:	493e      	ldr	r1, [pc, #248]	; (80035a8 <HAL_RCC_OscConfig+0x678>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2220      	movs	r2, #32
 80034ba:	4013      	ands	r3, r2
 80034bc:	d049      	beq.n	8003552 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d026      	beq.n	8003514 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80034c6:	4b33      	ldr	r3, [pc, #204]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4b32      	ldr	r3, [pc, #200]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	4b30      	ldr	r3, [pc, #192]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80034d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 80034d8:	2101      	movs	r1, #1
 80034da:	430a      	orrs	r2, r1
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_RCC_OscConfig+0x67c>)
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_RCC_OscConfig+0x67c>)
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	0189      	lsls	r1, r1, #6
 80034e8:	430a      	orrs	r2, r1
 80034ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fcd8 	bl	8000ea0 <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f6:	f7fd fcd3 	bl	8000ea0 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0c8      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2202      	movs	r2, #2
 800350e:	4013      	ands	r3, r2
 8003510:	d0f1      	beq.n	80034f6 <HAL_RCC_OscConfig+0x5c6>
 8003512:	e01e      	b.n	8003552 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800351a:	2101      	movs	r1, #1
 800351c:	438a      	bics	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_OscConfig+0x67c>)
 8003522:	6a1a      	ldr	r2, [r3, #32]
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_RCC_OscConfig+0x67c>)
 8003526:	4922      	ldr	r1, [pc, #136]	; (80035b0 <HAL_RCC_OscConfig+0x680>)
 8003528:	400a      	ands	r2, r1
 800352a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd fcb8 	bl	8000ea0 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003536:	f7fd fcb3 	bl	8000ea0 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0a8      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d1f1      	bne.n	8003536 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_RCC_OscConfig+0x62c>
 800355a:	e09d      	b.n	8003698 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d100      	bne.n	8003564 <HAL_RCC_OscConfig+0x634>
 8003562:	e076      	b.n	8003652 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	2b02      	cmp	r3, #2
 800356a:	d157      	bne.n	800361c <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_RCC_OscConfig+0x664>)
 8003572:	4910      	ldr	r1, [pc, #64]	; (80035b4 <HAL_RCC_OscConfig+0x684>)
 8003574:	400a      	ands	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fc92 	bl	8000ea0 <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003580:	e01a      	b.n	80035b8 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fd fc8d 	bl	8000ea0 <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d913      	bls.n	80035b8 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e082      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
 8003594:	40021000 	.word	0x40021000
 8003598:	fffffeff 	.word	0xfffffeff
 800359c:	40007000 	.word	0x40007000
 80035a0:	fffffbff 	.word	0xfffffbff
 80035a4:	00001388 	.word	0x00001388
 80035a8:	efffffff 	.word	0xefffffff
 80035ac:	40010000 	.word	0x40010000
 80035b0:	ffffdfff 	.word	0xffffdfff
 80035b4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	049b      	lsls	r3, r3, #18
 80035c0:	4013      	ands	r3, r2
 80035c2:	d1de      	bne.n	8003582 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a37      	ldr	r2, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x778>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	431a      	orrs	r2, r3
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 80035e0:	430a      	orrs	r2, r1
 80035e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0449      	lsls	r1, r1, #17
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fd fc55 	bl	8000ea0 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd fc50 	bl	8000ea0 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e045      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	049b      	lsls	r3, r3, #18
 8003616:	4013      	ands	r3, r2
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x6cc>
 800361a:	e03d      	b.n	8003698 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 8003622:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_RCC_OscConfig+0x77c>)
 8003624:	400a      	ands	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd fc3a 	bl	8000ea0 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003632:	f7fd fc35 	bl	8000ea0 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e02a      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	049b      	lsls	r3, r3, #18
 800364c:	4013      	ands	r3, r2
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x702>
 8003650:	e022      	b.n	8003698 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e01d      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_RCC_OscConfig+0x774>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	401a      	ands	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	429a      	cmp	r2, r3
 8003672:	d10f      	bne.n	8003694 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	23f0      	movs	r3, #240	; 0xf0
 8003678:	039b      	lsls	r3, r3, #14
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	23c0      	movs	r3, #192	; 0xc0
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	401a      	ands	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b00a      	add	sp, #40	; 0x28
 80036a0:	bdb0      	pop	{r4, r5, r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	40021000 	.word	0x40021000
 80036a8:	ff02ffff 	.word	0xff02ffff
 80036ac:	feffffff 	.word	0xfeffffff

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e10d      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	4013      	ands	r3, r2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d911      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	4393      	bics	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e4:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0f4      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	22f0      	movs	r2, #240	; 0xf0
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	4b77      	ldr	r3, [pc, #476]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	d100      	bne.n	8003720 <HAL_RCC_ClockConfig+0x70>
 800371e:	e089      	b.n	8003834 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003728:	4b70      	ldr	r3, [pc, #448]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	4013      	ands	r3, r2
 8003732:	d120      	bne.n	8003776 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0d3      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d107      	bne.n	8003750 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003740:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	049b      	lsls	r3, r3, #18
 8003748:	4013      	ands	r3, r2
 800374a:	d114      	bne.n	8003776 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0c7      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003758:	4b64      	ldr	r3, [pc, #400]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2204      	movs	r2, #4
 800375e:	4013      	ands	r3, r2
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0bc      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003766:	4b61      	ldr	r3, [pc, #388]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4013      	ands	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0b4      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2203      	movs	r2, #3
 800377c:	4393      	bics	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003786:	430a      	orrs	r2, r1
 8003788:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378a:	f7fd fb89 	bl	8000ea0 <HAL_GetTick>
 800378e:	0003      	movs	r3, r0
 8003790:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d111      	bne.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800379a:	e009      	b.n	80037b0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd fb80 	bl	8000ea0 <HAL_GetTick>
 80037a0:	0002      	movs	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e097      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b0:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	220c      	movs	r2, #12
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d1ef      	bne.n	800379c <HAL_RCC_ClockConfig+0xec>
 80037bc:	e03a      	b.n	8003834 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d111      	bne.n	80037ea <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c6:	e009      	b.n	80037dc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fd fb6a 	bl	8000ea0 <HAL_GetTick>
 80037cc:	0002      	movs	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	4a47      	ldr	r2, [pc, #284]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e081      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037dc:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	220c      	movs	r2, #12
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d1ef      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x118>
 80037e8:	e024      	b.n	8003834 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d11b      	bne.n	800382a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	e009      	b.n	8003808 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd fb54 	bl	8000ea0 <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e06b      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003808:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	220c      	movs	r2, #12
 800380e:	4013      	ands	r3, r2
 8003810:	2b04      	cmp	r3, #4
 8003812:	d1ef      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x144>
 8003814:	e00e      	b.n	8003834 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fd fb43 	bl	8000ea0 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	4a33      	ldr	r2, [pc, #204]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e05a      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	220c      	movs	r2, #12
 8003830:	4013      	ands	r3, r2
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d211      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2201      	movs	r2, #1
 8003848:	4393      	bics	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_ClockConfig+0x238>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03c      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2208      	movs	r2, #8
 800388a:	4013      	ands	r3, r2
 800388c:	d00a      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_RCC_ClockConfig+0x248>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	00da      	lsls	r2, r3, #3
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a4:	f000 f82e 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038a8:	0001      	movs	r1, r0
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RCC_ClockConfig+0x23c>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	220f      	movs	r2, #15
 80038b2:	4013      	ands	r3, r2
 80038b4:	4a11      	ldr	r2, [pc, #68]	; (80038fc <HAL_RCC_ClockConfig+0x24c>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	000a      	movs	r2, r1
 80038ba:	40da      	lsrs	r2, r3
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCC_ClockConfig+0x250>)
 80038be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80038c0:	250b      	movs	r5, #11
 80038c2:	197c      	adds	r4, r7, r5
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7fd faa5 	bl	8000e14 <HAL_InitTick>
 80038ca:	0003      	movs	r3, r0
 80038cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80038ce:	197b      	adds	r3, r7, r5
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80038d6:	230b      	movs	r3, #11
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	e000      	b.n	80038e0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bdb0      	pop	{r4, r5, r7, pc}
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	00001388 	.word	0x00001388
 80038f4:	fffff8ff 	.word	0xfffff8ff
 80038f8:	ffffc7ff 	.word	0xffffc7ff
 80038fc:	08008da8 	.word	0x08008da8
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	220c      	movs	r2, #12
 8003914:	4013      	ands	r3, r2
 8003916:	2b08      	cmp	r3, #8
 8003918:	d00e      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x34>
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d00f      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	2b04      	cmp	r3, #4
 8003920:	d157      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003922:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	4013      	ands	r3, r2
 800392a:	d002      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800392e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003930:	e05d      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8003932:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003934:	613b      	str	r3, [r7, #16]
      break;
 8003936:	e05a      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x100>)
 800393a:	613b      	str	r3, [r7, #16]
      break;
 800393c:	e057      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0c9b      	lsrs	r3, r3, #18
 8003942:	220f      	movs	r2, #15
 8003944:	4013      	ands	r3, r2
 8003946:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	0d9b      	lsrs	r3, r3, #22
 8003950:	2203      	movs	r2, #3
 8003952:	4013      	ands	r3, r2
 8003954:	3301      	adds	r3, #1
 8003956:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	4013      	ands	r3, r2
 8003962:	d00f      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	000a      	movs	r2, r1
 8003968:	0152      	lsls	r2, r2, #5
 800396a:	1a52      	subs	r2, r2, r1
 800396c:	0193      	lsls	r3, r2, #6
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	185b      	adds	r3, r3, r1
 8003974:	025b      	lsls	r3, r3, #9
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	0018      	movs	r0, r3
 800397a:	f7fc fbc5 	bl	8000108 <__udivsi3>
 800397e:	0003      	movs	r3, r0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e023      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	d00f      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	000a      	movs	r2, r1
 8003992:	0152      	lsls	r2, r2, #5
 8003994:	1a52      	subs	r2, r2, r1
 8003996:	0193      	lsls	r3, r2, #6
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	185b      	adds	r3, r3, r1
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7fc fbb0 	bl	8000108 <__udivsi3>
 80039a8:	0003      	movs	r3, r0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	e00e      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	000a      	movs	r2, r1
 80039b2:	0152      	lsls	r2, r2, #5
 80039b4:	1a52      	subs	r2, r2, r1
 80039b6:	0193      	lsls	r3, r2, #6
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	185b      	adds	r3, r3, r1
 80039be:	029b      	lsls	r3, r3, #10
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc fba0 	bl	8000108 <__udivsi3>
 80039c8:	0003      	movs	r3, r0
 80039ca:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]
      break;
 80039d0:	e00d      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	2207      	movs	r2, #7
 80039da:	4013      	ands	r3, r2
 80039dc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	0212      	lsls	r2, r2, #8
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
      break;
 80039ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80039ee:	693b      	ldr	r3, [r7, #16]
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	003d0900 	.word	0x003d0900
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200
 8003a08:	08008dc0 	.word	0x08008dc0

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff2 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a28:	0001      	movs	r1, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	2207      	movs	r2, #7
 8003a32:	4013      	ands	r3, r2
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	40d9      	lsrs	r1, r3
 8003a3a:	000b      	movs	r3, r1
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08008db8 	.word	0x08008db8

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffdc 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a54:	0001      	movs	r1, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	4013      	ands	r3, r2
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	40d9      	lsrs	r1, r3
 8003a66:	000b      	movs	r3, r1
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08008db8 	.word	0x08008db8

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2220      	movs	r2, #32
 8003a86:	4013      	ands	r3, r2
 8003a88:	d106      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4013      	ands	r3, r2
 8003a94:	d100      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003a96:	e0dd      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003a98:	2317      	movs	r3, #23
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa0:	4b9c      	ldr	r3, [pc, #624]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	055b      	lsls	r3, r3, #21
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d10a      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aac:	4b99      	ldr	r3, [pc, #612]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab0:	4b98      	ldr	r3, [pc, #608]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	0549      	lsls	r1, r1, #21
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003aba:	2317      	movs	r3, #23
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac2:	4b95      	ldr	r3, [pc, #596]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4013      	ands	r3, r2
 8003acc:	d11a      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ace:	4b92      	ldr	r3, [pc, #584]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b91      	ldr	r3, [pc, #580]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	0049      	lsls	r1, r1, #1
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003adc:	f7fd f9e0 	bl	8000ea0 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fd f9db 	bl	8000ea0 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e108      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b87      	ldr	r3, [pc, #540]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b04:	4b83      	ldr	r3, [pc, #524]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	23c0      	movs	r3, #192	; 0xc0
 8003b0a:	039b      	lsls	r3, r3, #14
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	23c0      	movs	r3, #192	; 0xc0
 8003b16:	039b      	lsls	r3, r3, #14
 8003b18:	4013      	ands	r3, r2
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	23c0      	movs	r3, #192	; 0xc0
 8003b26:	039b      	lsls	r3, r3, #14
 8003b28:	4013      	ands	r3, r2
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	23c0      	movs	r3, #192	; 0xc0
 8003b36:	029b      	lsls	r3, r3, #10
 8003b38:	401a      	ands	r2, r3
 8003b3a:	23c0      	movs	r3, #192	; 0xc0
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d10a      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b42:	4b74      	ldr	r3, [pc, #464]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	029b      	lsls	r3, r3, #10
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d101      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0d8      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003b58:	4b6e      	ldr	r3, [pc, #440]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b5c:	23c0      	movs	r3, #192	; 0xc0
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d049      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	23c0      	movs	r3, #192	; 0xc0
 8003b70:	029b      	lsls	r3, r3, #10
 8003b72:	4013      	ands	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d004      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	4013      	ands	r3, r2
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	23c0      	movs	r3, #192	; 0xc0
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d034      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d02e      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003ba0:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	4a5d      	ldr	r2, [pc, #372]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003baa:	4b5a      	ldr	r3, [pc, #360]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bae:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	0309      	lsls	r1, r1, #12
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb8:	4b56      	ldr	r3, [pc, #344]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bbc:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bbe:	4958      	ldr	r1, [pc, #352]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d014      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fd f964 	bl	8000ea0 <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bdc:	e009      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fd f95f 	bl	8000ea0 <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	4a4e      	ldr	r2, [pc, #312]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e08b      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf2:	4b48      	ldr	r3, [pc, #288]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d0ef      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	23c0      	movs	r3, #192	; 0xc0
 8003c04:	029b      	lsls	r3, r3, #10
 8003c06:	401a      	ands	r2, r3
 8003c08:	23c0      	movs	r3, #192	; 0xc0
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003c10:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a44      	ldr	r2, [pc, #272]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	23c0      	movs	r3, #192	; 0xc0
 8003c20:	039b      	lsls	r3, r3, #14
 8003c22:	401a      	ands	r2, r3
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	401a      	ands	r2, r3
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c3e:	2317      	movs	r3, #23
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4c:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c4e:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	2203      	movs	r2, #3
 8003c64:	4393      	bics	r3, r2
 8003c66:	0019      	movs	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2202      	movs	r2, #2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c80:	220c      	movs	r2, #12
 8003c82:	4393      	bics	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	4013      	ands	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003caa:	430a      	orrs	r2, r1
 8003cac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbc:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2240      	movs	r2, #64	; 0x40
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	4a10      	ldr	r2, [pc, #64]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d04:	430a      	orrs	r2, r1
 8003d06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b006      	add	sp, #24
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	fffcffff 	.word	0xfffcffff
 8003d20:	fff7ffff 	.word	0xfff7ffff
 8003d24:	00001388 	.word	0x00001388
 8003d28:	ffcfffff 	.word	0xffcfffff
 8003d2c:	efffffff 	.word	0xefffffff
 8003d30:	fffff3ff 	.word	0xfffff3ff
 8003d34:	ffffcfff 	.word	0xffffcfff
 8003d38:	fbffffff 	.word	0xfbffffff
 8003d3c:	fff3ffff 	.word	0xfff3ffff

08003d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e059      	b.n	8003e06 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2251      	movs	r2, #81	; 0x51
 8003d5c:	5c9b      	ldrb	r3, [r3, r2]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2250      	movs	r2, #80	; 0x50
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fc fe26 	bl	80009c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2251      	movs	r2, #81	; 0x51
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6999      	ldr	r1, [r3, #24]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	400b      	ands	r3, r1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	0011      	movs	r1, r2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <HAL_SPI_Init+0xd0>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2251      	movs	r2, #81	; 0x51
 8003e00:	2101      	movs	r1, #1
 8003e02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	fffff7ff 	.word	0xfffff7ff

08003e14 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e075      	b.n	8003f12 <HAL_TSC_Init+0xfe>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	223c      	movs	r2, #60	; 0x3c
 8003e2a:	5c9b      	ldrb	r3, [r3, r2]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223d      	movs	r2, #61	; 0x3d
 8003e36:	2100      	movs	r1, #0
 8003e38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fc fe5b 	bl	8000af8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	223c      	movs	r2, #60	; 0x3c
 8003e46:	2102      	movs	r1, #2
 8003e48:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6819      	ldr	r1, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003e60:	431a      	orrs	r2, r3
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003e68:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003e6e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003e74:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8003e7a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003e80:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8003e86:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_TSC_Init+0x98>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0249      	lsls	r1, r1, #9
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	43d2      	mvns	r2, r2
 8003ec2:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003edc:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681c      	ldr	r4, [r3, #0]
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f000 f817 	bl	8003f1a <TSC_extract_groups>
 8003eec:	0003      	movs	r3, r0
 8003eee:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2103      	movs	r1, #3
 8003efc:	438a      	bics	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2203      	movs	r2, #3
 8003f06:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	223c      	movs	r2, #60	; 0x3c
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b003      	add	sp, #12
 8003f18:	bd90      	pop	{r4, r7, pc}

08003f1a <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	e011      	b.n	8003f50 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	409a      	lsls	r2, r3
 8003f34:	0013      	movs	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d006      	beq.n	8003f4a <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	409a      	lsls	r2, r3
 8003f42:	0013      	movs	r3, r2
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b07      	cmp	r3, #7
 8003f54:	d9ea      	bls.n	8003f2c <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e044      	b.n	8003ffc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d107      	bne.n	8003f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2270      	movs	r2, #112	; 0x70
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7fc fe53 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2224      	movs	r2, #36	; 0x24
 8003f8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 f830 	bl	8004008 <UART_SetConfig>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e024      	b.n	8003ffc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 fb3b 	bl	8004638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	490d      	ldr	r1, [pc, #52]	; (8004004 <HAL_UART_Init+0xa4>)
 8003fce:	400a      	ands	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	212a      	movs	r1, #42	; 0x2a
 8003fde:	438a      	bics	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fbd3 	bl	80047a0 <UART_CheckIdleState>
 8003ffa:	0003      	movs	r3, r0
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}
 8004004:	ffffb7ff 	.word	0xffffb7ff

08004008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b08e      	sub	sp, #56	; 0x38
 800400c:	af00      	add	r7, sp, #0
 800400e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004010:	231b      	movs	r3, #27
 8004012:	2218      	movs	r2, #24
 8004014:	4694      	mov	ip, r2
 8004016:	44bc      	add	ip, r7
 8004018:	4463      	add	r3, ip
 800401a:	2210      	movs	r2, #16
 800401c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800401e:	2300      	movs	r3, #0
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004022:	2313      	movs	r3, #19
 8004024:	2218      	movs	r2, #24
 8004026:	4694      	mov	ip, r2
 8004028:	44bc      	add	ip, r7
 800402a:	4463      	add	r3, ip
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4313      	orrs	r3, r2
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4ac8      	ldr	r2, [pc, #800]	; (8004374 <UART_SetConfig+0x36c>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4ac3      	ldr	r2, [pc, #780]	; (8004378 <UART_SetConfig+0x370>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4abd      	ldr	r2, [pc, #756]	; (800437c <UART_SetConfig+0x374>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004090:	4313      	orrs	r3, r2
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4ab9      	ldr	r2, [pc, #740]	; (8004380 <UART_SetConfig+0x378>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4ab5      	ldr	r2, [pc, #724]	; (8004384 <UART_SetConfig+0x37c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d134      	bne.n	800411e <UART_SetConfig+0x116>
 80040b4:	4bb4      	ldr	r3, [pc, #720]	; (8004388 <UART_SetConfig+0x380>)
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b8:	2203      	movs	r2, #3
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d015      	beq.n	80040ec <UART_SetConfig+0xe4>
 80040c0:	d304      	bcc.n	80040cc <UART_SetConfig+0xc4>
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d00a      	beq.n	80040dc <UART_SetConfig+0xd4>
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d018      	beq.n	80040fc <UART_SetConfig+0xf4>
 80040ca:	e01f      	b.n	800410c <UART_SetConfig+0x104>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2218      	movs	r2, #24
 80040d0:	4694      	mov	ip, r2
 80040d2:	44bc      	add	ip, r7
 80040d4:	4463      	add	r3, ip
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e0ab      	b.n	8004234 <UART_SetConfig+0x22c>
 80040dc:	231b      	movs	r3, #27
 80040de:	2218      	movs	r2, #24
 80040e0:	4694      	mov	ip, r2
 80040e2:	44bc      	add	ip, r7
 80040e4:	4463      	add	r3, ip
 80040e6:	2202      	movs	r2, #2
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e0a3      	b.n	8004234 <UART_SetConfig+0x22c>
 80040ec:	231b      	movs	r3, #27
 80040ee:	2218      	movs	r2, #24
 80040f0:	4694      	mov	ip, r2
 80040f2:	44bc      	add	ip, r7
 80040f4:	4463      	add	r3, ip
 80040f6:	2204      	movs	r2, #4
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e09b      	b.n	8004234 <UART_SetConfig+0x22c>
 80040fc:	231b      	movs	r3, #27
 80040fe:	2218      	movs	r2, #24
 8004100:	4694      	mov	ip, r2
 8004102:	44bc      	add	ip, r7
 8004104:	4463      	add	r3, ip
 8004106:	2208      	movs	r2, #8
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e093      	b.n	8004234 <UART_SetConfig+0x22c>
 800410c:	231b      	movs	r3, #27
 800410e:	2218      	movs	r2, #24
 8004110:	4694      	mov	ip, r2
 8004112:	44bc      	add	ip, r7
 8004114:	4463      	add	r3, ip
 8004116:	2210      	movs	r2, #16
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	e08a      	b.n	8004234 <UART_SetConfig+0x22c>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a9a      	ldr	r2, [pc, #616]	; (800438c <UART_SetConfig+0x384>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d137      	bne.n	8004198 <UART_SetConfig+0x190>
 8004128:	4b97      	ldr	r3, [pc, #604]	; (8004388 <UART_SetConfig+0x380>)
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	220c      	movs	r2, #12
 800412e:	4013      	ands	r3, r2
 8004130:	2b04      	cmp	r3, #4
 8004132:	d018      	beq.n	8004166 <UART_SetConfig+0x15e>
 8004134:	d802      	bhi.n	800413c <UART_SetConfig+0x134>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <UART_SetConfig+0x13e>
 800413a:	e024      	b.n	8004186 <UART_SetConfig+0x17e>
 800413c:	2b08      	cmp	r3, #8
 800413e:	d00a      	beq.n	8004156 <UART_SetConfig+0x14e>
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d018      	beq.n	8004176 <UART_SetConfig+0x16e>
 8004144:	e01f      	b.n	8004186 <UART_SetConfig+0x17e>
 8004146:	231b      	movs	r3, #27
 8004148:	2218      	movs	r2, #24
 800414a:	4694      	mov	ip, r2
 800414c:	44bc      	add	ip, r7
 800414e:	4463      	add	r3, ip
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e06e      	b.n	8004234 <UART_SetConfig+0x22c>
 8004156:	231b      	movs	r3, #27
 8004158:	2218      	movs	r2, #24
 800415a:	4694      	mov	ip, r2
 800415c:	44bc      	add	ip, r7
 800415e:	4463      	add	r3, ip
 8004160:	2202      	movs	r2, #2
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e066      	b.n	8004234 <UART_SetConfig+0x22c>
 8004166:	231b      	movs	r3, #27
 8004168:	2218      	movs	r2, #24
 800416a:	4694      	mov	ip, r2
 800416c:	44bc      	add	ip, r7
 800416e:	4463      	add	r3, ip
 8004170:	2204      	movs	r2, #4
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e05e      	b.n	8004234 <UART_SetConfig+0x22c>
 8004176:	231b      	movs	r3, #27
 8004178:	2218      	movs	r2, #24
 800417a:	4694      	mov	ip, r2
 800417c:	44bc      	add	ip, r7
 800417e:	4463      	add	r3, ip
 8004180:	2208      	movs	r2, #8
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e056      	b.n	8004234 <UART_SetConfig+0x22c>
 8004186:	231b      	movs	r3, #27
 8004188:	2218      	movs	r2, #24
 800418a:	4694      	mov	ip, r2
 800418c:	44bc      	add	ip, r7
 800418e:	4463      	add	r3, ip
 8004190:	2210      	movs	r2, #16
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	e04d      	b.n	8004234 <UART_SetConfig+0x22c>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a77      	ldr	r2, [pc, #476]	; (800437c <UART_SetConfig+0x374>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d141      	bne.n	8004226 <UART_SetConfig+0x21e>
 80041a2:	4b79      	ldr	r3, [pc, #484]	; (8004388 <UART_SetConfig+0x380>)
 80041a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041a6:	23c0      	movs	r3, #192	; 0xc0
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4013      	ands	r3, r2
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	00d2      	lsls	r2, r2, #3
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01f      	beq.n	80041f4 <UART_SetConfig+0x1ec>
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	00d2      	lsls	r2, r2, #3
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d802      	bhi.n	80041c2 <UART_SetConfig+0x1ba>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <UART_SetConfig+0x1cc>
 80041c0:	e028      	b.n	8004214 <UART_SetConfig+0x20c>
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00c      	beq.n	80041e4 <UART_SetConfig+0x1dc>
 80041ca:	22c0      	movs	r2, #192	; 0xc0
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <UART_SetConfig+0x1fc>
 80041d2:	e01f      	b.n	8004214 <UART_SetConfig+0x20c>
 80041d4:	231b      	movs	r3, #27
 80041d6:	2218      	movs	r2, #24
 80041d8:	4694      	mov	ip, r2
 80041da:	44bc      	add	ip, r7
 80041dc:	4463      	add	r3, ip
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e027      	b.n	8004234 <UART_SetConfig+0x22c>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2218      	movs	r2, #24
 80041e8:	4694      	mov	ip, r2
 80041ea:	44bc      	add	ip, r7
 80041ec:	4463      	add	r3, ip
 80041ee:	2202      	movs	r2, #2
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	e01f      	b.n	8004234 <UART_SetConfig+0x22c>
 80041f4:	231b      	movs	r3, #27
 80041f6:	2218      	movs	r2, #24
 80041f8:	4694      	mov	ip, r2
 80041fa:	44bc      	add	ip, r7
 80041fc:	4463      	add	r3, ip
 80041fe:	2204      	movs	r2, #4
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e017      	b.n	8004234 <UART_SetConfig+0x22c>
 8004204:	231b      	movs	r3, #27
 8004206:	2218      	movs	r2, #24
 8004208:	4694      	mov	ip, r2
 800420a:	44bc      	add	ip, r7
 800420c:	4463      	add	r3, ip
 800420e:	2208      	movs	r2, #8
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x22c>
 8004214:	231b      	movs	r3, #27
 8004216:	2218      	movs	r2, #24
 8004218:	4694      	mov	ip, r2
 800421a:	44bc      	add	ip, r7
 800421c:	4463      	add	r3, ip
 800421e:	2210      	movs	r2, #16
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	e006      	b.n	8004234 <UART_SetConfig+0x22c>
 8004226:	231b      	movs	r3, #27
 8004228:	2218      	movs	r2, #24
 800422a:	4694      	mov	ip, r2
 800422c:	44bc      	add	ip, r7
 800422e:	4463      	add	r3, ip
 8004230:	2210      	movs	r2, #16
 8004232:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a50      	ldr	r2, [pc, #320]	; (800437c <UART_SetConfig+0x374>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d000      	beq.n	8004240 <UART_SetConfig+0x238>
 800423e:	e083      	b.n	8004348 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004240:	231b      	movs	r3, #27
 8004242:	2218      	movs	r2, #24
 8004244:	4694      	mov	ip, r2
 8004246:	44bc      	add	ip, r7
 8004248:	4463      	add	r3, ip
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d00d      	beq.n	800426c <UART_SetConfig+0x264>
 8004250:	dc02      	bgt.n	8004258 <UART_SetConfig+0x250>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <UART_SetConfig+0x25a>
 8004256:	e01d      	b.n	8004294 <UART_SetConfig+0x28c>
 8004258:	2b04      	cmp	r3, #4
 800425a:	d012      	beq.n	8004282 <UART_SetConfig+0x27a>
 800425c:	2b08      	cmp	r3, #8
 800425e:	d015      	beq.n	800428c <UART_SetConfig+0x284>
 8004260:	e018      	b.n	8004294 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004262:	f7ff fbdd 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004266:	0003      	movs	r3, r0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800426a:	e01b      	b.n	80042a4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <UART_SetConfig+0x380>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2210      	movs	r2, #16
 8004272:	4013      	ands	r3, r2
 8004274:	d002      	beq.n	800427c <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004276:	4b46      	ldr	r3, [pc, #280]	; (8004390 <UART_SetConfig+0x388>)
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800427a:	e013      	b.n	80042a4 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800427c:	4b45      	ldr	r3, [pc, #276]	; (8004394 <UART_SetConfig+0x38c>)
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004280:	e010      	b.n	80042a4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004282:	f7ff fb3f 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8004286:	0003      	movs	r3, r0
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800428a:	e00b      	b.n	80042a4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004292:	e007      	b.n	80042a4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004294:	2313      	movs	r3, #19
 8004296:	2218      	movs	r2, #24
 8004298:	4694      	mov	ip, r2
 800429a:	44bc      	add	ip, r7
 800429c:	4463      	add	r3, ip
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
        break;
 80042a2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d100      	bne.n	80042ac <UART_SetConfig+0x2a4>
 80042aa:	e1a6      	b.n	80045fa <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	0013      	movs	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d305      	bcc.n	80042c8 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d907      	bls.n	80042d8 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80042c8:	2313      	movs	r3, #19
 80042ca:	2218      	movs	r2, #24
 80042cc:	4694      	mov	ip, r2
 80042ce:	44bc      	add	ip, r7
 80042d0:	4463      	add	r3, ip
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e190      	b.n	80045fa <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	6939      	ldr	r1, [r7, #16]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	000b      	movs	r3, r1
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	0010      	movs	r0, r2
 80042ea:	0205      	lsls	r5, r0, #8
 80042ec:	431d      	orrs	r5, r3
 80042ee:	000b      	movs	r3, r1
 80042f0:	021c      	lsls	r4, r3, #8
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	1900      	adds	r0, r0, r4
 8004304:	4169      	adcs	r1, r5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	2300      	movs	r3, #0
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f7fb ff84 	bl	8000220 <__aeabi_uldivmod>
 8004318:	0003      	movs	r3, r0
 800431a:	000c      	movs	r4, r1
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <UART_SetConfig+0x390>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d908      	bls.n	8004338 <UART_SetConfig+0x330>
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <UART_SetConfig+0x394>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d804      	bhi.n	8004338 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e160      	b.n	80045fa <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8004338:	2313      	movs	r3, #19
 800433a:	2218      	movs	r2, #24
 800433c:	4694      	mov	ip, r2
 800433e:	44bc      	add	ip, r7
 8004340:	4463      	add	r3, ip
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e158      	b.n	80045fa <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	429a      	cmp	r2, r3
 8004352:	d000      	beq.n	8004356 <UART_SetConfig+0x34e>
 8004354:	e0c3      	b.n	80044de <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8004356:	231b      	movs	r3, #27
 8004358:	2218      	movs	r2, #24
 800435a:	4694      	mov	ip, r2
 800435c:	44bc      	add	ip, r7
 800435e:	4463      	add	r3, ip
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b08      	cmp	r3, #8
 8004364:	d900      	bls.n	8004368 <UART_SetConfig+0x360>
 8004366:	e086      	b.n	8004476 <UART_SetConfig+0x46e>
 8004368:	009a      	lsls	r2, r3, #2
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <UART_SetConfig+0x398>)
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	469f      	mov	pc, r3
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	efff69f3 	.word	0xefff69f3
 8004378:	ffffcfff 	.word	0xffffcfff
 800437c:	40004800 	.word	0x40004800
 8004380:	fffff4ff 	.word	0xfffff4ff
 8004384:	40013800 	.word	0x40013800
 8004388:	40021000 	.word	0x40021000
 800438c:	40004400 	.word	0x40004400
 8004390:	003d0900 	.word	0x003d0900
 8004394:	00f42400 	.word	0x00f42400
 8004398:	000002ff 	.word	0x000002ff
 800439c:	000fffff 	.word	0x000fffff
 80043a0:	08008dcc 	.word	0x08008dcc
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80043a4:	f7ff fb3c 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80043a8:	0003      	movs	r3, r0
 80043aa:	005a      	lsls	r2, r3, #1
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	18d2      	adds	r2, r2, r3
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	0019      	movs	r1, r3
 80043ba:	0010      	movs	r0, r2
 80043bc:	f7fb fea4 	bl	8000108 <__udivsi3>
 80043c0:	0003      	movs	r3, r0
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043c6:	e05e      	b.n	8004486 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043c8:	f7ff fb40 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80043cc:	0003      	movs	r3, r0
 80043ce:	005a      	lsls	r2, r3, #1
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	18d2      	adds	r2, r2, r3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0019      	movs	r1, r3
 80043de:	0010      	movs	r0, r2
 80043e0:	f7fb fe92 	bl	8000108 <__udivsi3>
 80043e4:	0003      	movs	r3, r0
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043ea:	e04c      	b.n	8004486 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043ec:	4b8b      	ldr	r3, [pc, #556]	; (800461c <UART_SetConfig+0x614>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2210      	movs	r2, #16
 80043f2:	4013      	ands	r3, r2
 80043f4:	d00e      	beq.n	8004414 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	4a88      	ldr	r2, [pc, #544]	; (8004620 <UART_SetConfig+0x618>)
 80043fe:	189a      	adds	r2, r3, r2
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0019      	movs	r1, r3
 8004406:	0010      	movs	r0, r2
 8004408:	f7fb fe7e 	bl	8000108 <__udivsi3>
 800440c:	0003      	movs	r3, r0
 800440e:	b29b      	uxth	r3, r3
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004412:	e038      	b.n	8004486 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	4a82      	ldr	r2, [pc, #520]	; (8004624 <UART_SetConfig+0x61c>)
 800441c:	189a      	adds	r2, r3, r2
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	0019      	movs	r1, r3
 8004424:	0010      	movs	r0, r2
 8004426:	f7fb fe6f 	bl	8000108 <__udivsi3>
 800442a:	0003      	movs	r3, r0
 800442c:	b29b      	uxth	r3, r3
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004430:	e029      	b.n	8004486 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004432:	f7ff fa67 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8004436:	0003      	movs	r3, r0
 8004438:	005a      	lsls	r2, r3, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	18d2      	adds	r2, r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	0019      	movs	r1, r3
 8004448:	0010      	movs	r0, r2
 800444a:	f7fb fe5d 	bl	8000108 <__udivsi3>
 800444e:	0003      	movs	r3, r0
 8004450:	b29b      	uxth	r3, r3
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004454:	e017      	b.n	8004486 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	2280      	movs	r2, #128	; 0x80
 800445e:	0252      	lsls	r2, r2, #9
 8004460:	189a      	adds	r2, r3, r2
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	0019      	movs	r1, r3
 8004468:	0010      	movs	r0, r2
 800446a:	f7fb fe4d 	bl	8000108 <__udivsi3>
 800446e:	0003      	movs	r3, r0
 8004470:	b29b      	uxth	r3, r3
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004474:	e007      	b.n	8004486 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004476:	2313      	movs	r3, #19
 8004478:	2218      	movs	r2, #24
 800447a:	4694      	mov	ip, r2
 800447c:	44bc      	add	ip, r7
 800447e:	4463      	add	r3, ip
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
        break;
 8004484:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d920      	bls.n	80044ce <UART_SetConfig+0x4c6>
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	4a66      	ldr	r2, [pc, #408]	; (8004628 <UART_SetConfig+0x620>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d81c      	bhi.n	80044ce <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	b29a      	uxth	r2, r3
 8004498:	200a      	movs	r0, #10
 800449a:	2418      	movs	r4, #24
 800449c:	193b      	adds	r3, r7, r4
 800449e:	181b      	adds	r3, r3, r0
 80044a0:	210f      	movs	r1, #15
 80044a2:	438a      	bics	r2, r1
 80044a4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2207      	movs	r2, #7
 80044ae:	4013      	ands	r3, r2
 80044b0:	b299      	uxth	r1, r3
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	181b      	adds	r3, r3, r0
 80044b6:	193a      	adds	r2, r7, r4
 80044b8:	1812      	adds	r2, r2, r0
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	193a      	adds	r2, r7, r4
 80044c6:	1812      	adds	r2, r2, r0
 80044c8:	8812      	ldrh	r2, [r2, #0]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	e095      	b.n	80045fa <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80044ce:	2313      	movs	r3, #19
 80044d0:	2218      	movs	r2, #24
 80044d2:	4694      	mov	ip, r2
 80044d4:	44bc      	add	ip, r7
 80044d6:	4463      	add	r3, ip
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e08d      	b.n	80045fa <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80044de:	231b      	movs	r3, #27
 80044e0:	2218      	movs	r2, #24
 80044e2:	4694      	mov	ip, r2
 80044e4:	44bc      	add	ip, r7
 80044e6:	4463      	add	r3, ip
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d86a      	bhi.n	80045c4 <UART_SetConfig+0x5bc>
 80044ee:	009a      	lsls	r2, r3, #2
 80044f0:	4b4e      	ldr	r3, [pc, #312]	; (800462c <UART_SetConfig+0x624>)
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044f8:	f7ff fa92 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80044fc:	0002      	movs	r2, r0
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	18d2      	adds	r2, r2, r3
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	0019      	movs	r1, r3
 800450c:	0010      	movs	r0, r2
 800450e:	f7fb fdfb 	bl	8000108 <__udivsi3>
 8004512:	0003      	movs	r3, r0
 8004514:	b29b      	uxth	r3, r3
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004518:	e05c      	b.n	80045d4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800451a:	f7ff fa97 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 800451e:	0002      	movs	r2, r0
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	18d2      	adds	r2, r2, r3
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0019      	movs	r1, r3
 800452e:	0010      	movs	r0, r2
 8004530:	f7fb fdea 	bl	8000108 <__udivsi3>
 8004534:	0003      	movs	r3, r0
 8004536:	b29b      	uxth	r3, r3
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800453a:	e04b      	b.n	80045d4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800453c:	4b37      	ldr	r3, [pc, #220]	; (800461c <UART_SetConfig+0x614>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	4013      	ands	r3, r2
 8004544:	d00e      	beq.n	8004564 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <UART_SetConfig+0x628>)
 800454e:	189a      	adds	r2, r3, r2
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0019      	movs	r1, r3
 8004556:	0010      	movs	r0, r2
 8004558:	f7fb fdd6 	bl	8000108 <__udivsi3>
 800455c:	0003      	movs	r3, r0
 800455e:	b29b      	uxth	r3, r3
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004562:	e037      	b.n	80045d4 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	4a32      	ldr	r2, [pc, #200]	; (8004634 <UART_SetConfig+0x62c>)
 800456c:	189a      	adds	r2, r3, r2
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	0019      	movs	r1, r3
 8004574:	0010      	movs	r0, r2
 8004576:	f7fb fdc7 	bl	8000108 <__udivsi3>
 800457a:	0003      	movs	r3, r0
 800457c:	b29b      	uxth	r3, r3
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004580:	e028      	b.n	80045d4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004582:	f7ff f9bf 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8004586:	0002      	movs	r2, r0
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	18d2      	adds	r2, r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0019      	movs	r1, r3
 8004596:	0010      	movs	r0, r2
 8004598:	f7fb fdb6 	bl	8000108 <__udivsi3>
 800459c:	0003      	movs	r3, r0
 800459e:	b29b      	uxth	r3, r3
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045a2:	e017      	b.n	80045d4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0212      	lsls	r2, r2, #8
 80045ae:	189a      	adds	r2, r3, r2
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0019      	movs	r1, r3
 80045b6:	0010      	movs	r0, r2
 80045b8:	f7fb fda6 	bl	8000108 <__udivsi3>
 80045bc:	0003      	movs	r3, r0
 80045be:	b29b      	uxth	r3, r3
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045c2:	e007      	b.n	80045d4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045c4:	2313      	movs	r3, #19
 80045c6:	2218      	movs	r2, #24
 80045c8:	4694      	mov	ip, r2
 80045ca:	44bc      	add	ip, r7
 80045cc:	4463      	add	r3, ip
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
        break;
 80045d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d908      	bls.n	80045ec <UART_SetConfig+0x5e4>
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	4a12      	ldr	r2, [pc, #72]	; (8004628 <UART_SetConfig+0x620>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d804      	bhi.n	80045ec <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e006      	b.n	80045fa <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80045ec:	2313      	movs	r3, #19
 80045ee:	2218      	movs	r2, #24
 80045f0:	4694      	mov	ip, r2
 80045f2:	44bc      	add	ip, r7
 80045f4:	4463      	add	r3, ip
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004606:	2313      	movs	r3, #19
 8004608:	2218      	movs	r2, #24
 800460a:	4694      	mov	ip, r2
 800460c:	44bc      	add	ip, r7
 800460e:	4463      	add	r3, ip
 8004610:	781b      	ldrb	r3, [r3, #0]
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b00e      	add	sp, #56	; 0x38
 8004618:	bdb0      	pop	{r4, r5, r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	40021000 	.word	0x40021000
 8004620:	007a1200 	.word	0x007a1200
 8004624:	01e84800 	.word	0x01e84800
 8004628:	0000ffff 	.word	0x0000ffff
 800462c:	08008df0 	.word	0x08008df0
 8004630:	003d0900 	.word	0x003d0900
 8004634:	00f42400 	.word	0x00f42400

08004638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2201      	movs	r2, #1
 8004646:	4013      	ands	r3, r2
 8004648:	d00b      	beq.n	8004662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a4a      	ldr	r2, [pc, #296]	; (800477c <UART_AdvFeatureConfig+0x144>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d00b      	beq.n	8004684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4a43      	ldr	r2, [pc, #268]	; (8004780 <UART_AdvFeatureConfig+0x148>)
 8004674:	4013      	ands	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2204      	movs	r2, #4
 800468a:	4013      	ands	r3, r2
 800468c:	d00b      	beq.n	80046a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <UART_AdvFeatureConfig+0x14c>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2208      	movs	r2, #8
 80046ac:	4013      	ands	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4a34      	ldr	r2, [pc, #208]	; (8004788 <UART_AdvFeatureConfig+0x150>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	2210      	movs	r2, #16
 80046ce:	4013      	ands	r3, r2
 80046d0:	d00b      	beq.n	80046ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <UART_AdvFeatureConfig+0x154>)
 80046da:	4013      	ands	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2220      	movs	r2, #32
 80046f0:	4013      	ands	r3, r2
 80046f2:	d00b      	beq.n	800470c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	4a25      	ldr	r2, [pc, #148]	; (8004790 <UART_AdvFeatureConfig+0x158>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2240      	movs	r2, #64	; 0x40
 8004712:	4013      	ands	r3, r2
 8004714:	d01d      	beq.n	8004752 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <UART_AdvFeatureConfig+0x15c>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	035b      	lsls	r3, r3, #13
 8004736:	429a      	cmp	r2, r3
 8004738:	d10b      	bne.n	8004752 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <UART_AdvFeatureConfig+0x160>)
 8004742:	4013      	ands	r3, r2
 8004744:	0019      	movs	r1, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	4013      	ands	r3, r2
 800475a:	d00b      	beq.n	8004774 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <UART_AdvFeatureConfig+0x164>)
 8004764:	4013      	ands	r3, r2
 8004766:	0019      	movs	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}
 800477c:	fffdffff 	.word	0xfffdffff
 8004780:	fffeffff 	.word	0xfffeffff
 8004784:	fffbffff 	.word	0xfffbffff
 8004788:	ffff7fff 	.word	0xffff7fff
 800478c:	ffffefff 	.word	0xffffefff
 8004790:	ffffdfff 	.word	0xffffdfff
 8004794:	ffefffff 	.word	0xffefffff
 8004798:	ff9fffff 	.word	0xff9fffff
 800479c:	fff7ffff 	.word	0xfff7ffff

080047a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047ae:	f7fc fb77 	bl	8000ea0 <HAL_GetTick>
 80047b2:	0003      	movs	r3, r0
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	4013      	ands	r3, r2
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d10d      	bne.n	80047e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	0399      	lsls	r1, r3, #14
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <UART_CheckIdleState+0x88>)
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	0013      	movs	r3, r2
 80047d2:	2200      	movs	r2, #0
 80047d4:	f000 f82a 	bl	800482c <UART_WaitOnFlagUntilTimeout>
 80047d8:	1e03      	subs	r3, r0, #0
 80047da:	d001      	beq.n	80047e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e01f      	b.n	8004820 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2204      	movs	r2, #4
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d10d      	bne.n	800480a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	03d9      	lsls	r1, r3, #15
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <UART_CheckIdleState+0x88>)
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	0013      	movs	r3, r2
 80047fc:	2200      	movs	r2, #0
 80047fe:	f000 f815 	bl	800482c <UART_WaitOnFlagUntilTimeout>
 8004802:	1e03      	subs	r3, r0, #0
 8004804:	d001      	beq.n	800480a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e00a      	b.n	8004820 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2270      	movs	r2, #112	; 0x70
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}
 8004828:	01ffffff 	.word	0x01ffffff

0800482c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	1dfb      	adds	r3, r7, #7
 800483a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483c:	e029      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3301      	adds	r3, #1
 8004842:	d026      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004844:	f7fc fb2c 	bl	8000ea0 <HAL_GetTick>
 8004848:	0002      	movs	r2, r0
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d11b      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4915      	ldr	r1, [pc, #84]	; (80048bc <UART_WaitOnFlagUntilTimeout+0x90>)
 8004866:	400a      	ands	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	438a      	bics	r2, r1
 8004878:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2270      	movs	r2, #112	; 0x70
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e00f      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	425a      	negs	r2, r3
 80048a2:	4153      	adcs	r3, r2
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	001a      	movs	r2, r3
 80048a8:	1dfb      	adds	r3, r7, #7
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d0c6      	beq.n	800483e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b004      	add	sp, #16
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	fffffe5f 	.word	0xfffffe5f

080048c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2244      	movs	r2, #68	; 0x44
 80048cc:	2100      	movs	r1, #0
 80048ce:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <USB_EnableGlobalInt+0x28>)
 80048d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	b299      	uxth	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2240      	movs	r2, #64	; 0x40
 80048dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b004      	add	sp, #16
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	0000bf80 	.word	0x0000bf80

080048ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048f4:	4b09      	ldr	r3, [pc, #36]	; (800491c <USB_DisableGlobalInt+0x30>)
 80048f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	5a9b      	ldrh	r3, [r3, r2]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	b292      	uxth	r2, r2
 8004904:	43d2      	mvns	r2, r2
 8004906:	b292      	uxth	r2, r2
 8004908:	4013      	ands	r3, r2
 800490a:	b299      	uxth	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b004      	add	sp, #16
 800491a:	bd80      	pop	{r7, pc}
 800491c:	0000bf80 	.word	0x0000bf80

08004920 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004920:	b084      	sub	sp, #16
 8004922:	b590      	push	{r4, r7, lr}
 8004924:	46c6      	mov	lr, r8
 8004926:	b500      	push	{lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	2004      	movs	r0, #4
 8004930:	2410      	movs	r4, #16
 8004932:	46a4      	mov	ip, r4
 8004934:	2408      	movs	r4, #8
 8004936:	46a0      	mov	r8, r4
 8004938:	44b8      	add	r8, r7
 800493a:	44c4      	add	ip, r8
 800493c:	4460      	add	r0, ip
 800493e:	6001      	str	r1, [r0, #0]
 8004940:	6042      	str	r2, [r0, #4]
 8004942:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	2101      	movs	r1, #1
 800494a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2240      	movs	r2, #64	; 0x40
 8004950:	2100      	movs	r1, #0
 8004952:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2244      	movs	r2, #68	; 0x44
 8004958:	2100      	movs	r1, #0
 800495a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2250      	movs	r2, #80	; 0x50
 8004960:	2100      	movs	r1, #0
 8004962:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	0018      	movs	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	b002      	add	sp, #8
 800496c:	bc04      	pop	{r2}
 800496e:	4690      	mov	r8, r2
 8004970:	bc90      	pop	{r4, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	b004      	add	sp, #16
 8004976:	4718      	bx	r3

08004978 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b09a      	sub	sp, #104	; 0x68
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004982:	2367      	movs	r3, #103	; 0x67
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	18d3      	adds	r3, r2, r3
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29a      	uxth	r2, r3
 8004998:	2364      	movs	r3, #100	; 0x64
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	49cf      	ldr	r1, [pc, #828]	; (8004cdc <USB_ActivateEndpoint+0x364>)
 800499e:	400a      	ands	r2, r1
 80049a0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d020      	beq.n	80049ec <USB_ActivateEndpoint+0x74>
 80049aa:	dc02      	bgt.n	80049b2 <USB_ActivateEndpoint+0x3a>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <USB_ActivateEndpoint+0x44>
 80049b0:	e025      	b.n	80049fe <USB_ActivateEndpoint+0x86>
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d00b      	beq.n	80049ce <USB_ActivateEndpoint+0x56>
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d00f      	beq.n	80049da <USB_ActivateEndpoint+0x62>
 80049ba:	e020      	b.n	80049fe <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049bc:	2264      	movs	r2, #100	; 0x64
 80049be:	18bb      	adds	r3, r7, r2
 80049c0:	18ba      	adds	r2, r7, r2
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	0089      	lsls	r1, r1, #2
 80049c8:	430a      	orrs	r2, r1
 80049ca:	801a      	strh	r2, [r3, #0]
      break;
 80049cc:	e01c      	b.n	8004a08 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80049ce:	2264      	movs	r2, #100	; 0x64
 80049d0:	18bb      	adds	r3, r7, r2
 80049d2:	18ba      	adds	r2, r7, r2
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	801a      	strh	r2, [r3, #0]
      break;
 80049d8:	e016      	b.n	8004a08 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049da:	2264      	movs	r2, #100	; 0x64
 80049dc:	18bb      	adds	r3, r7, r2
 80049de:	18ba      	adds	r2, r7, r2
 80049e0:	8812      	ldrh	r2, [r2, #0]
 80049e2:	21c0      	movs	r1, #192	; 0xc0
 80049e4:	00c9      	lsls	r1, r1, #3
 80049e6:	430a      	orrs	r2, r1
 80049e8:	801a      	strh	r2, [r3, #0]
      break;
 80049ea:	e00d      	b.n	8004a08 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049ec:	2264      	movs	r2, #100	; 0x64
 80049ee:	18bb      	adds	r3, r7, r2
 80049f0:	18ba      	adds	r2, r7, r2
 80049f2:	8812      	ldrh	r2, [r2, #0]
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	00c9      	lsls	r1, r1, #3
 80049f8:	430a      	orrs	r2, r1
 80049fa:	801a      	strh	r2, [r3, #0]
      break;
 80049fc:	e004      	b.n	8004a08 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80049fe:	2367      	movs	r3, #103	; 0x67
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	18d3      	adds	r3, r2, r3
 8004a12:	2264      	movs	r2, #100	; 0x64
 8004a14:	18ba      	adds	r2, r7, r2
 8004a16:	8812      	ldrh	r2, [r2, #0]
 8004a18:	49b1      	ldr	r1, [pc, #708]	; (8004ce0 <USB_ActivateEndpoint+0x368>)
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	4aac      	ldr	r2, [pc, #688]	; (8004ce4 <USB_ActivateEndpoint+0x36c>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	b21a      	sxth	r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b21b      	sxth	r3, r3
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	b21a      	sxth	r2, r3
 8004a40:	215e      	movs	r1, #94	; 0x5e
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	801a      	strh	r2, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	18d3      	adds	r3, r2, r3
 8004a50:	187a      	adds	r2, r7, r1
 8004a52:	8812      	ldrh	r2, [r2, #0]
 8004a54:	49a2      	ldr	r1, [pc, #648]	; (8004ce0 <USB_ActivateEndpoint+0x368>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	7b1b      	ldrb	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d000      	beq.n	8004a66 <USB_ActivateEndpoint+0xee>
 8004a64:	e150      	b.n	8004d08 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d100      	bne.n	8004a70 <USB_ActivateEndpoint+0xf8>
 8004a6e:	e07a      	b.n	8004b66 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2250      	movs	r2, #80	; 0x50
 8004a78:	5a9b      	ldrh	r3, [r3, r2]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	00da      	lsls	r2, r3, #3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	18d3      	adds	r3, r2, r3
 8004a8e:	2280      	movs	r2, #128	; 0x80
 8004a90:	00d2      	lsls	r2, r2, #3
 8004a92:	4694      	mov	ip, r2
 8004a94:	4463      	add	r3, ip
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	88db      	ldrh	r3, [r3, #6]
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	18db      	adds	r3, r3, r3
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18d2      	adds	r2, r2, r3
 8004ab2:	210e      	movs	r1, #14
 8004ab4:	187b      	adds	r3, r7, r1
 8004ab6:	8812      	ldrh	r2, [r2, #0]
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	187b      	adds	r3, r7, r1
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d016      	beq.n	8004af2 <USB_ActivateEndpoint+0x17a>
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	200c      	movs	r0, #12
 8004ad4:	183b      	adds	r3, r7, r0
 8004ad6:	4983      	ldr	r1, [pc, #524]	; (8004ce4 <USB_ActivateEndpoint+0x36c>)
 8004ad8:	400a      	ands	r2, r1
 8004ada:	801a      	strh	r2, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	18d3      	adds	r3, r2, r3
 8004ae6:	183a      	adds	r2, r7, r0
 8004ae8:	8812      	ldrh	r2, [r2, #0]
 8004aea:	497f      	ldr	r1, [pc, #508]	; (8004ce8 <USB_ActivateEndpoint+0x370>)
 8004aec:	430a      	orrs	r2, r1
 8004aee:	b292      	uxth	r2, r2
 8004af0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	78db      	ldrb	r3, [r3, #3]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d01d      	beq.n	8004b36 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	2008      	movs	r0, #8
 8004b0a:	183b      	adds	r3, r7, r0
 8004b0c:	4977      	ldr	r1, [pc, #476]	; (8004cec <USB_ActivateEndpoint+0x374>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	801a      	strh	r2, [r3, #0]
 8004b12:	183b      	adds	r3, r7, r0
 8004b14:	183a      	adds	r2, r7, r0
 8004b16:	8812      	ldrh	r2, [r2, #0]
 8004b18:	2120      	movs	r1, #32
 8004b1a:	404a      	eors	r2, r1
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	183a      	adds	r2, r7, r0
 8004b2a:	8812      	ldrh	r2, [r2, #0]
 8004b2c:	496c      	ldr	r1, [pc, #432]	; (8004ce0 <USB_ActivateEndpoint+0x368>)
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	b292      	uxth	r2, r2
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e25e      	b.n	8004ff4 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	18d3      	adds	r3, r2, r3
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	200a      	movs	r0, #10
 8004b46:	183b      	adds	r3, r7, r0
 8004b48:	4968      	ldr	r1, [pc, #416]	; (8004cec <USB_ActivateEndpoint+0x374>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	18d3      	adds	r3, r2, r3
 8004b58:	183a      	adds	r2, r7, r0
 8004b5a:	8812      	ldrh	r2, [r2, #0]
 8004b5c:	4960      	ldr	r1, [pc, #384]	; (8004ce0 <USB_ActivateEndpoint+0x368>)
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	b292      	uxth	r2, r2
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e246      	b.n	8004ff4 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2250      	movs	r2, #80	; 0x50
 8004b6e:	5a9b      	ldrh	r3, [r3, r2]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	001a      	movs	r2, r3
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00da      	lsls	r2, r3, #3
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	18d3      	adds	r3, r2, r3
 8004b84:	4a5a      	ldr	r2, [pc, #360]	; (8004cf0 <USB_ActivateEndpoint+0x378>)
 8004b86:	4694      	mov	ip, r2
 8004b88:	4463      	add	r3, ip
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	88db      	ldrh	r3, [r3, #6]
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	18db      	adds	r3, r3, r3
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2250      	movs	r2, #80	; 0x50
 8004ba4:	5a9b      	ldrh	r3, [r3, r2]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	001a      	movs	r2, r3
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	00da      	lsls	r2, r3, #3
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	18d3      	adds	r3, r2, r3
 8004bba:	4a4e      	ldr	r2, [pc, #312]	; (8004cf4 <USB_ActivateEndpoint+0x37c>)
 8004bbc:	4694      	mov	ip, r2
 8004bbe:	4463      	add	r3, ip
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d110      	bne.n	8004bec <USB_ActivateEndpoint+0x274>
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4a49      	ldr	r2, [pc, #292]	; (8004cf8 <USB_ActivateEndpoint+0x380>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4a46      	ldr	r2, [pc, #280]	; (8004cfc <USB_ActivateEndpoint+0x384>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	e02b      	b.n	8004c44 <USB_ActivateEndpoint+0x2cc>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf2:	d812      	bhi.n	8004c1a <USB_ActivateEndpoint+0x2a2>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4013      	ands	r3, r2
 8004c04:	d002      	beq.n	8004c0c <USB_ActivateEndpoint+0x294>
 8004c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c08:	3301      	adds	r3, #1
 8004c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	029b      	lsls	r3, r3, #10
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	e014      	b.n	8004c44 <USB_ActivateEndpoint+0x2cc>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	663b      	str	r3, [r7, #96]	; 0x60
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	221f      	movs	r2, #31
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d102      	bne.n	8004c32 <USB_ActivateEndpoint+0x2ba>
 8004c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	663b      	str	r3, [r7, #96]	; 0x60
 8004c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	029b      	lsls	r3, r3, #10
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4a30      	ldr	r2, [pc, #192]	; (8004cfc <USB_ActivateEndpoint+0x384>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	18d2      	adds	r2, r2, r3
 8004c4e:	211e      	movs	r1, #30
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	8812      	ldrh	r2, [r2, #0]
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	187b      	adds	r3, r7, r1
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	01db      	lsls	r3, r3, #7
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d016      	beq.n	8004c90 <USB_ActivateEndpoint+0x318>
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	18d3      	adds	r3, r2, r3
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	201c      	movs	r0, #28
 8004c72:	183b      	adds	r3, r7, r0
 8004c74:	491b      	ldr	r1, [pc, #108]	; (8004ce4 <USB_ActivateEndpoint+0x36c>)
 8004c76:	400a      	ands	r2, r1
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	18d3      	adds	r3, r2, r3
 8004c84:	183a      	adds	r2, r7, r0
 8004c86:	8812      	ldrh	r2, [r2, #0]
 8004c88:	491d      	ldr	r1, [pc, #116]	; (8004d00 <USB_ActivateEndpoint+0x388>)
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	18d3      	adds	r3, r2, r3
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	201a      	movs	r0, #26
 8004ca0:	183b      	adds	r3, r7, r0
 8004ca2:	4918      	ldr	r1, [pc, #96]	; (8004d04 <USB_ActivateEndpoint+0x38c>)
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	183a      	adds	r2, r7, r0
 8004cac:	8812      	ldrh	r2, [r2, #0]
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	0149      	lsls	r1, r1, #5
 8004cb2:	404a      	eors	r2, r1
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	183b      	adds	r3, r7, r0
 8004cb8:	183a      	adds	r2, r7, r0
 8004cba:	8812      	ldrh	r2, [r2, #0]
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	0189      	lsls	r1, r1, #6
 8004cc0:	404a      	eors	r2, r1
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	18d3      	adds	r3, r2, r3
 8004cce:	183a      	adds	r2, r7, r0
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	4903      	ldr	r1, [pc, #12]	; (8004ce0 <USB_ActivateEndpoint+0x368>)
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e18b      	b.n	8004ff4 <USB_ActivateEndpoint+0x67c>
 8004cdc:	ffff898f 	.word	0xffff898f
 8004ce0:	ffff8080 	.word	0xffff8080
 8004ce4:	ffff8f8f 	.word	0xffff8f8f
 8004ce8:	ffff80c0 	.word	0xffff80c0
 8004cec:	ffff8fbf 	.word	0xffff8fbf
 8004cf0:	00000404 	.word	0x00000404
 8004cf4:	00000406 	.word	0x00000406
 8004cf8:	ffff83ff 	.word	0xffff83ff
 8004cfc:	ffff8000 	.word	0xffff8000
 8004d00:	ffffc080 	.word	0xffffc080
 8004d04:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	205c      	movs	r0, #92	; 0x5c
 8004d18:	183b      	adds	r3, r7, r0
 8004d1a:	49ba      	ldr	r1, [pc, #744]	; (8005004 <USB_ActivateEndpoint+0x68c>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	18d3      	adds	r3, r2, r3
 8004d2a:	183a      	adds	r2, r7, r0
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	49b6      	ldr	r1, [pc, #728]	; (8005008 <USB_ActivateEndpoint+0x690>)
 8004d30:	430a      	orrs	r2, r1
 8004d32:	b292      	uxth	r2, r2
 8004d34:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2250      	movs	r2, #80	; 0x50
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	001a      	movs	r2, r3
 8004d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	00da      	lsls	r2, r3, #3
 8004d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d52:	18d3      	adds	r3, r2, r3
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	00d2      	lsls	r2, r2, #3
 8004d58:	4694      	mov	ip, r2
 8004d5a:	4463      	add	r3, ip
 8004d5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	891b      	ldrh	r3, [r3, #8]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	18db      	adds	r3, r3, r3
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	653b      	str	r3, [r7, #80]	; 0x50
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2250      	movs	r2, #80	; 0x50
 8004d76:	5a9b      	ldrh	r3, [r3, r2]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	653b      	str	r3, [r7, #80]	; 0x50
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	00da      	lsls	r2, r3, #3
 8004d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8a:	18d3      	adds	r3, r2, r3
 8004d8c:	4a9f      	ldr	r2, [pc, #636]	; (800500c <USB_ActivateEndpoint+0x694>)
 8004d8e:	4694      	mov	ip, r2
 8004d90:	4463      	add	r3, ip
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	895b      	ldrh	r3, [r3, #10]
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	18db      	adds	r3, r3, r3
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d000      	beq.n	8004dae <USB_ActivateEndpoint+0x436>
 8004dac:	e087      	b.n	8004ebe <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	18d2      	adds	r2, r2, r3
 8004db8:	213c      	movs	r1, #60	; 0x3c
 8004dba:	187b      	adds	r3, r7, r1
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	801a      	strh	r2, [r3, #0]
 8004dc0:	187b      	adds	r3, r7, r1
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	01db      	lsls	r3, r3, #7
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d016      	beq.n	8004dfa <USB_ActivateEndpoint+0x482>
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	203a      	movs	r0, #58	; 0x3a
 8004ddc:	183b      	adds	r3, r7, r0
 8004dde:	4989      	ldr	r1, [pc, #548]	; (8005004 <USB_ActivateEndpoint+0x68c>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	18d3      	adds	r3, r2, r3
 8004dee:	183a      	adds	r2, r7, r0
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	4987      	ldr	r1, [pc, #540]	; (8005010 <USB_ActivateEndpoint+0x698>)
 8004df4:	430a      	orrs	r2, r1
 8004df6:	b292      	uxth	r2, r2
 8004df8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	18d2      	adds	r2, r2, r3
 8004e04:	2138      	movs	r1, #56	; 0x38
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	8812      	ldrh	r2, [r2, #0]
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	2240      	movs	r2, #64	; 0x40
 8004e12:	4013      	ands	r3, r2
 8004e14:	d016      	beq.n	8004e44 <USB_ActivateEndpoint+0x4cc>
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	18d3      	adds	r3, r2, r3
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	2036      	movs	r0, #54	; 0x36
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	4976      	ldr	r1, [pc, #472]	; (8005004 <USB_ActivateEndpoint+0x68c>)
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	183a      	adds	r2, r7, r0
 8004e3a:	8812      	ldrh	r2, [r2, #0]
 8004e3c:	4975      	ldr	r1, [pc, #468]	; (8005014 <USB_ActivateEndpoint+0x69c>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	b292      	uxth	r2, r2
 8004e42:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	18d3      	adds	r3, r2, r3
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	2034      	movs	r0, #52	; 0x34
 8004e54:	183b      	adds	r3, r7, r0
 8004e56:	4970      	ldr	r1, [pc, #448]	; (8005018 <USB_ActivateEndpoint+0x6a0>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	183b      	adds	r3, r7, r0
 8004e5e:	183a      	adds	r2, r7, r0
 8004e60:	8812      	ldrh	r2, [r2, #0]
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	0149      	lsls	r1, r1, #5
 8004e66:	404a      	eors	r2, r1
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	183b      	adds	r3, r7, r0
 8004e6c:	183a      	adds	r2, r7, r0
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	0189      	lsls	r1, r1, #6
 8004e74:	404a      	eors	r2, r1
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	18d3      	adds	r3, r2, r3
 8004e82:	183a      	adds	r2, r7, r0
 8004e84:	8812      	ldrh	r2, [r2, #0]
 8004e86:	4965      	ldr	r1, [pc, #404]	; (800501c <USB_ActivateEndpoint+0x6a4>)
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	2032      	movs	r0, #50	; 0x32
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	495f      	ldr	r1, [pc, #380]	; (8005020 <USB_ActivateEndpoint+0x6a8>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	183a      	adds	r2, r7, r0
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	4959      	ldr	r1, [pc, #356]	; (800501c <USB_ActivateEndpoint+0x6a4>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e09a      	b.n	8004ff4 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	18d2      	adds	r2, r2, r3
 8004ec8:	214a      	movs	r1, #74	; 0x4a
 8004eca:	187b      	adds	r3, r7, r1
 8004ecc:	8812      	ldrh	r2, [r2, #0]
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	187b      	adds	r3, r7, r1
 8004ed2:	881a      	ldrh	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d016      	beq.n	8004f0a <USB_ActivateEndpoint+0x592>
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	2048      	movs	r0, #72	; 0x48
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	4945      	ldr	r1, [pc, #276]	; (8005004 <USB_ActivateEndpoint+0x68c>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	183a      	adds	r2, r7, r0
 8004f00:	8812      	ldrh	r2, [r2, #0]
 8004f02:	4943      	ldr	r1, [pc, #268]	; (8005010 <USB_ActivateEndpoint+0x698>)
 8004f04:	430a      	orrs	r2, r1
 8004f06:	b292      	uxth	r2, r2
 8004f08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	18d2      	adds	r2, r2, r3
 8004f14:	2146      	movs	r1, #70	; 0x46
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	8812      	ldrh	r2, [r2, #0]
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	2240      	movs	r2, #64	; 0x40
 8004f22:	4013      	ands	r3, r2
 8004f24:	d016      	beq.n	8004f54 <USB_ActivateEndpoint+0x5dc>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	18d3      	adds	r3, r2, r3
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	2044      	movs	r0, #68	; 0x44
 8004f36:	183b      	adds	r3, r7, r0
 8004f38:	4932      	ldr	r1, [pc, #200]	; (8005004 <USB_ActivateEndpoint+0x68c>)
 8004f3a:	400a      	ands	r2, r1
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	18d3      	adds	r3, r2, r3
 8004f48:	183a      	adds	r2, r7, r0
 8004f4a:	8812      	ldrh	r2, [r2, #0]
 8004f4c:	4931      	ldr	r1, [pc, #196]	; (8005014 <USB_ActivateEndpoint+0x69c>)
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	b292      	uxth	r2, r2
 8004f52:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	78db      	ldrb	r3, [r3, #3]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d01d      	beq.n	8004f98 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	2040      	movs	r0, #64	; 0x40
 8004f6c:	183b      	adds	r3, r7, r0
 8004f6e:	492c      	ldr	r1, [pc, #176]	; (8005020 <USB_ActivateEndpoint+0x6a8>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	183b      	adds	r3, r7, r0
 8004f76:	183a      	adds	r2, r7, r0
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	2120      	movs	r1, #32
 8004f7c:	404a      	eors	r2, r1
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	18d3      	adds	r3, r2, r3
 8004f8a:	183a      	adds	r2, r7, r0
 8004f8c:	8812      	ldrh	r2, [r2, #0]
 8004f8e:	4923      	ldr	r1, [pc, #140]	; (800501c <USB_ActivateEndpoint+0x6a4>)
 8004f90:	430a      	orrs	r2, r1
 8004f92:	b292      	uxth	r2, r2
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e016      	b.n	8004fc6 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	18d3      	adds	r3, r2, r3
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	2042      	movs	r0, #66	; 0x42
 8004fa8:	183b      	adds	r3, r7, r0
 8004faa:	491d      	ldr	r1, [pc, #116]	; (8005020 <USB_ActivateEndpoint+0x6a8>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	18d3      	adds	r3, r2, r3
 8004fba:	183a      	adds	r2, r7, r0
 8004fbc:	8812      	ldrh	r2, [r2, #0]
 8004fbe:	4917      	ldr	r1, [pc, #92]	; (800501c <USB_ActivateEndpoint+0x6a4>)
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	18d3      	adds	r3, r2, r3
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	203e      	movs	r0, #62	; 0x3e
 8004fd6:	183b      	adds	r3, r7, r0
 8004fd8:	490f      	ldr	r1, [pc, #60]	; (8005018 <USB_ActivateEndpoint+0x6a0>)
 8004fda:	400a      	ands	r2, r1
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	18d3      	adds	r3, r2, r3
 8004fe8:	183a      	adds	r2, r7, r0
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	490b      	ldr	r1, [pc, #44]	; (800501c <USB_ActivateEndpoint+0x6a4>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004ff4:	2367      	movs	r3, #103	; 0x67
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
}
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b01a      	add	sp, #104	; 0x68
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	ffff8f8f 	.word	0xffff8f8f
 8005008:	ffff8180 	.word	0xffff8180
 800500c:	00000404 	.word	0x00000404
 8005010:	ffffc080 	.word	0xffffc080
 8005014:	ffff80c0 	.word	0xffff80c0
 8005018:	ffffbf8f 	.word	0xffffbf8f
 800501c:	ffff8080 	.word	0xffff8080
 8005020:	ffff8fbf 	.word	0xffff8fbf

08005024 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08c      	sub	sp, #48	; 0x30
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	7b1b      	ldrb	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d000      	beq.n	8005038 <USB_DeactivateEndpoint+0x14>
 8005036:	e07e      	b.n	8005136 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d03c      	beq.n	80050ba <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	18d2      	adds	r2, r2, r3
 800504a:	210c      	movs	r1, #12
 800504c:	187b      	adds	r3, r7, r1
 800504e:	8812      	ldrh	r2, [r2, #0]
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	187b      	adds	r3, r7, r1
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	4013      	ands	r3, r2
 800505a:	d016      	beq.n	800508a <USB_DeactivateEndpoint+0x66>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	18d3      	adds	r3, r2, r3
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	200a      	movs	r0, #10
 800506c:	183b      	adds	r3, r7, r0
 800506e:	49c7      	ldr	r1, [pc, #796]	; (800538c <USB_DeactivateEndpoint+0x368>)
 8005070:	400a      	ands	r2, r1
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	183a      	adds	r2, r7, r0
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	49c3      	ldr	r1, [pc, #780]	; (8005390 <USB_DeactivateEndpoint+0x36c>)
 8005084:	430a      	orrs	r2, r1
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	18d3      	adds	r3, r2, r3
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29a      	uxth	r2, r3
 8005098:	2008      	movs	r0, #8
 800509a:	183b      	adds	r3, r7, r0
 800509c:	49bd      	ldr	r1, [pc, #756]	; (8005394 <USB_DeactivateEndpoint+0x370>)
 800509e:	400a      	ands	r2, r1
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	183a      	adds	r2, r7, r0
 80050ae:	8812      	ldrh	r2, [r2, #0]
 80050b0:	49b9      	ldr	r1, [pc, #740]	; (8005398 <USB_DeactivateEndpoint+0x374>)
 80050b2:	430a      	orrs	r2, r1
 80050b4:	b292      	uxth	r2, r2
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e163      	b.n	8005382 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	18d2      	adds	r2, r2, r3
 80050c4:	2112      	movs	r1, #18
 80050c6:	187b      	adds	r3, r7, r1
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	01db      	lsls	r3, r3, #7
 80050d4:	4013      	ands	r3, r2
 80050d6:	d016      	beq.n	8005106 <USB_DeactivateEndpoint+0xe2>
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	18d3      	adds	r3, r2, r3
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	2010      	movs	r0, #16
 80050e8:	183b      	adds	r3, r7, r0
 80050ea:	49a8      	ldr	r1, [pc, #672]	; (800538c <USB_DeactivateEndpoint+0x368>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	18d3      	adds	r3, r2, r3
 80050fa:	183a      	adds	r2, r7, r0
 80050fc:	8812      	ldrh	r2, [r2, #0]
 80050fe:	49a7      	ldr	r1, [pc, #668]	; (800539c <USB_DeactivateEndpoint+0x378>)
 8005100:	430a      	orrs	r2, r1
 8005102:	b292      	uxth	r2, r2
 8005104:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	18d3      	adds	r3, r2, r3
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29a      	uxth	r2, r3
 8005114:	200e      	movs	r0, #14
 8005116:	183b      	adds	r3, r7, r0
 8005118:	49a1      	ldr	r1, [pc, #644]	; (80053a0 <USB_DeactivateEndpoint+0x37c>)
 800511a:	400a      	ands	r2, r1
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	18d3      	adds	r3, r2, r3
 8005128:	183a      	adds	r2, r7, r0
 800512a:	8812      	ldrh	r2, [r2, #0]
 800512c:	499a      	ldr	r1, [pc, #616]	; (8005398 <USB_DeactivateEndpoint+0x374>)
 800512e:	430a      	orrs	r2, r1
 8005130:	b292      	uxth	r2, r2
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	e125      	b.n	8005382 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d000      	beq.n	8005140 <USB_DeactivateEndpoint+0x11c>
 800513e:	e090      	b.n	8005262 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	18d2      	adds	r2, r2, r3
 800514a:	2120      	movs	r1, #32
 800514c:	187b      	adds	r3, r7, r1
 800514e:	8812      	ldrh	r2, [r2, #0]
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	187b      	adds	r3, r7, r1
 8005154:	881a      	ldrh	r2, [r3, #0]
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	4013      	ands	r3, r2
 800515c:	d016      	beq.n	800518c <USB_DeactivateEndpoint+0x168>
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	18d3      	adds	r3, r2, r3
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29a      	uxth	r2, r3
 800516c:	201e      	movs	r0, #30
 800516e:	183b      	adds	r3, r7, r0
 8005170:	4986      	ldr	r1, [pc, #536]	; (800538c <USB_DeactivateEndpoint+0x368>)
 8005172:	400a      	ands	r2, r1
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	18d3      	adds	r3, r2, r3
 8005180:	183a      	adds	r2, r7, r0
 8005182:	8812      	ldrh	r2, [r2, #0]
 8005184:	4985      	ldr	r1, [pc, #532]	; (800539c <USB_DeactivateEndpoint+0x378>)
 8005186:	430a      	orrs	r2, r1
 8005188:	b292      	uxth	r2, r2
 800518a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	18d2      	adds	r2, r2, r3
 8005196:	211c      	movs	r1, #28
 8005198:	187b      	adds	r3, r7, r1
 800519a:	8812      	ldrh	r2, [r2, #0]
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	4013      	ands	r3, r2
 80051a6:	d016      	beq.n	80051d6 <USB_DeactivateEndpoint+0x1b2>
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	18d3      	adds	r3, r2, r3
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	201a      	movs	r0, #26
 80051b8:	183b      	adds	r3, r7, r0
 80051ba:	4974      	ldr	r1, [pc, #464]	; (800538c <USB_DeactivateEndpoint+0x368>)
 80051bc:	400a      	ands	r2, r1
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	183a      	adds	r2, r7, r0
 80051cc:	8812      	ldrh	r2, [r2, #0]
 80051ce:	4970      	ldr	r1, [pc, #448]	; (8005390 <USB_DeactivateEndpoint+0x36c>)
 80051d0:	430a      	orrs	r2, r1
 80051d2:	b292      	uxth	r2, r2
 80051d4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	18d3      	adds	r3, r2, r3
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	2018      	movs	r0, #24
 80051e6:	183b      	adds	r3, r7, r0
 80051e8:	4968      	ldr	r1, [pc, #416]	; (800538c <USB_DeactivateEndpoint+0x368>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	18d3      	adds	r3, r2, r3
 80051f8:	183a      	adds	r2, r7, r0
 80051fa:	8812      	ldrh	r2, [r2, #0]
 80051fc:	4964      	ldr	r1, [pc, #400]	; (8005390 <USB_DeactivateEndpoint+0x36c>)
 80051fe:	430a      	orrs	r2, r1
 8005200:	b292      	uxth	r2, r2
 8005202:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	18d3      	adds	r3, r2, r3
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29a      	uxth	r2, r3
 8005212:	2016      	movs	r0, #22
 8005214:	183b      	adds	r3, r7, r0
 8005216:	4962      	ldr	r1, [pc, #392]	; (80053a0 <USB_DeactivateEndpoint+0x37c>)
 8005218:	400a      	ands	r2, r1
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	183a      	adds	r2, r7, r0
 8005228:	8812      	ldrh	r2, [r2, #0]
 800522a:	495b      	ldr	r1, [pc, #364]	; (8005398 <USB_DeactivateEndpoint+0x374>)
 800522c:	430a      	orrs	r2, r1
 800522e:	b292      	uxth	r2, r2
 8005230:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	18d3      	adds	r3, r2, r3
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29a      	uxth	r2, r3
 8005240:	2014      	movs	r0, #20
 8005242:	183b      	adds	r3, r7, r0
 8005244:	4953      	ldr	r1, [pc, #332]	; (8005394 <USB_DeactivateEndpoint+0x370>)
 8005246:	400a      	ands	r2, r1
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	18d3      	adds	r3, r2, r3
 8005254:	183a      	adds	r2, r7, r0
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	494f      	ldr	r1, [pc, #316]	; (8005398 <USB_DeactivateEndpoint+0x374>)
 800525a:	430a      	orrs	r2, r1
 800525c:	b292      	uxth	r2, r2
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	e08f      	b.n	8005382 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	18d2      	adds	r2, r2, r3
 800526c:	212e      	movs	r1, #46	; 0x2e
 800526e:	187b      	adds	r3, r7, r1
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	187b      	adds	r3, r7, r1
 8005276:	881a      	ldrh	r2, [r3, #0]
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	4013      	ands	r3, r2
 800527e:	d016      	beq.n	80052ae <USB_DeactivateEndpoint+0x28a>
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	202c      	movs	r0, #44	; 0x2c
 8005290:	183b      	adds	r3, r7, r0
 8005292:	493e      	ldr	r1, [pc, #248]	; (800538c <USB_DeactivateEndpoint+0x368>)
 8005294:	400a      	ands	r2, r1
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	18d3      	adds	r3, r2, r3
 80052a2:	183a      	adds	r2, r7, r0
 80052a4:	8812      	ldrh	r2, [r2, #0]
 80052a6:	493d      	ldr	r1, [pc, #244]	; (800539c <USB_DeactivateEndpoint+0x378>)
 80052a8:	430a      	orrs	r2, r1
 80052aa:	b292      	uxth	r2, r2
 80052ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	18d2      	adds	r2, r2, r3
 80052b8:	212a      	movs	r1, #42	; 0x2a
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	8812      	ldrh	r2, [r2, #0]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	187b      	adds	r3, r7, r1
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	2240      	movs	r2, #64	; 0x40
 80052c6:	4013      	ands	r3, r2
 80052c8:	d016      	beq.n	80052f8 <USB_DeactivateEndpoint+0x2d4>
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	2028      	movs	r0, #40	; 0x28
 80052da:	183b      	adds	r3, r7, r0
 80052dc:	492b      	ldr	r1, [pc, #172]	; (800538c <USB_DeactivateEndpoint+0x368>)
 80052de:	400a      	ands	r2, r1
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	18d3      	adds	r3, r2, r3
 80052ec:	183a      	adds	r2, r7, r0
 80052ee:	8812      	ldrh	r2, [r2, #0]
 80052f0:	4927      	ldr	r1, [pc, #156]	; (8005390 <USB_DeactivateEndpoint+0x36c>)
 80052f2:	430a      	orrs	r2, r1
 80052f4:	b292      	uxth	r2, r2
 80052f6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	18d3      	adds	r3, r2, r3
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29a      	uxth	r2, r3
 8005306:	2026      	movs	r0, #38	; 0x26
 8005308:	183b      	adds	r3, r7, r0
 800530a:	4920      	ldr	r1, [pc, #128]	; (800538c <USB_DeactivateEndpoint+0x368>)
 800530c:	400a      	ands	r2, r1
 800530e:	801a      	strh	r2, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	18d3      	adds	r3, r2, r3
 800531a:	183a      	adds	r2, r7, r0
 800531c:	8812      	ldrh	r2, [r2, #0]
 800531e:	491f      	ldr	r1, [pc, #124]	; (800539c <USB_DeactivateEndpoint+0x378>)
 8005320:	430a      	orrs	r2, r1
 8005322:	b292      	uxth	r2, r2
 8005324:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	18d3      	adds	r3, r2, r3
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29a      	uxth	r2, r3
 8005334:	2024      	movs	r0, #36	; 0x24
 8005336:	183b      	adds	r3, r7, r0
 8005338:	4916      	ldr	r1, [pc, #88]	; (8005394 <USB_DeactivateEndpoint+0x370>)
 800533a:	400a      	ands	r2, r1
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	18d3      	adds	r3, r2, r3
 8005348:	183a      	adds	r2, r7, r0
 800534a:	8812      	ldrh	r2, [r2, #0]
 800534c:	4912      	ldr	r1, [pc, #72]	; (8005398 <USB_DeactivateEndpoint+0x374>)
 800534e:	430a      	orrs	r2, r1
 8005350:	b292      	uxth	r2, r2
 8005352:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	18d3      	adds	r3, r2, r3
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	2022      	movs	r0, #34	; 0x22
 8005364:	183b      	adds	r3, r7, r0
 8005366:	490e      	ldr	r1, [pc, #56]	; (80053a0 <USB_DeactivateEndpoint+0x37c>)
 8005368:	400a      	ands	r2, r1
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	18d3      	adds	r3, r2, r3
 8005376:	183a      	adds	r2, r7, r0
 8005378:	8812      	ldrh	r2, [r2, #0]
 800537a:	4907      	ldr	r1, [pc, #28]	; (8005398 <USB_DeactivateEndpoint+0x374>)
 800537c:	430a      	orrs	r2, r1
 800537e:	b292      	uxth	r2, r2
 8005380:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b00c      	add	sp, #48	; 0x30
 800538a:	bd80      	pop	{r7, pc}
 800538c:	ffff8f8f 	.word	0xffff8f8f
 8005390:	ffff80c0 	.word	0xffff80c0
 8005394:	ffff8fbf 	.word	0xffff8fbf
 8005398:	ffff8080 	.word	0xffff8080
 800539c:	ffffc080 	.word	0xffffc080
 80053a0:	ffffbf8f 	.word	0xffffbf8f

080053a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b0c4      	sub	sp, #272	; 0x110
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d001      	beq.n	80053ba <USB_EPStartXfer+0x16>
 80053b6:	f000 fd63 	bl	8005e80 <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d906      	bls.n	80053d4 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2286      	movs	r2, #134	; 0x86
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	18ba      	adds	r2, r7, r2
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e005      	b.n	80053e0 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2286      	movs	r2, #134	; 0x86
 80053da:	0052      	lsls	r2, r2, #1
 80053dc:	18ba      	adds	r2, r7, r2
 80053de:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	7b1b      	ldrb	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d125      	bne.n	8005434 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6959      	ldr	r1, [r3, #20]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	88da      	ldrh	r2, [r3, #6]
 80053f0:	2486      	movs	r4, #134	; 0x86
 80053f2:	0064      	lsls	r4, r4, #1
 80053f4:	193b      	adds	r3, r7, r4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fa62 	bl	80068c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2250      	movs	r2, #80	; 0x50
 8005408:	5a9b      	ldrh	r3, [r3, r2]
 800540a:	b29b      	uxth	r3, r3
 800540c:	001a      	movs	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	189b      	adds	r3, r3, r2
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	00da      	lsls	r2, r3, #3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	18d3      	adds	r3, r2, r3
 800541e:	4ad4      	ldr	r2, [pc, #848]	; (8005770 <USB_EPStartXfer+0x3cc>)
 8005420:	4694      	mov	ip, r2
 8005422:	4463      	add	r3, ip
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	193b      	adds	r3, r7, r4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b29a      	uxth	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	f000 fce4 	bl	8005dfc <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d000      	beq.n	800543e <USB_EPStartXfer+0x9a>
 800543c:	e358      	b.n	8005af0 <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d800      	bhi.n	800544c <USB_EPStartXfer+0xa8>
 800544a:	e2fe      	b.n	8005a4a <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29a      	uxth	r2, r3
 800545a:	205a      	movs	r0, #90	; 0x5a
 800545c:	183b      	adds	r3, r7, r0
 800545e:	49c5      	ldr	r1, [pc, #788]	; (8005774 <USB_EPStartXfer+0x3d0>)
 8005460:	400a      	ands	r2, r1
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	18d3      	adds	r3, r2, r3
 800546e:	183a      	adds	r2, r7, r0
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	49c1      	ldr	r1, [pc, #772]	; (8005778 <USB_EPStartXfer+0x3d4>)
 8005474:	430a      	orrs	r2, r1
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	2386      	movs	r3, #134	; 0x86
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	18d3      	adds	r3, r2, r3
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	001a      	movs	r2, r3
 800549c:	2340      	movs	r3, #64	; 0x40
 800549e:	4013      	ands	r3, r2
 80054a0:	d100      	bne.n	80054a4 <USB_EPStartXfer+0x100>
 80054a2:	e171      	b.n	8005788 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d16c      	bne.n	800558a <USB_EPStartXfer+0x1e6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2250      	movs	r2, #80	; 0x50
 80054b8:	5a9b      	ldrh	r3, [r3, r2]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	001a      	movs	r2, r3
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00da      	lsls	r2, r3, #3
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	18d3      	adds	r3, r2, r3
 80054ce:	4aab      	ldr	r2, [pc, #684]	; (800577c <USB_EPStartXfer+0x3d8>)
 80054d0:	4694      	mov	ip, r2
 80054d2:	4463      	add	r3, ip
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d6:	2386      	movs	r3, #134	; 0x86
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d110      	bne.n	8005504 <USB_EPStartXfer+0x160>
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4aa5      	ldr	r2, [pc, #660]	; (8005780 <USB_EPStartXfer+0x3dc>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4aa2      	ldr	r2, [pc, #648]	; (8005784 <USB_EPStartXfer+0x3e0>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e05e      	b.n	80055c2 <USB_EPStartXfer+0x21e>
 8005504:	2386      	movs	r3, #134	; 0x86
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b3e      	cmp	r3, #62	; 0x3e
 800550e:	d81c      	bhi.n	800554a <USB_EPStartXfer+0x1a6>
 8005510:	2286      	movs	r2, #134	; 0x86
 8005512:	0052      	lsls	r2, r2, #1
 8005514:	18bb      	adds	r3, r7, r2
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	1d79      	adds	r1, r7, #5
 800551c:	31ff      	adds	r1, #255	; 0xff
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	18bb      	adds	r3, r7, r2
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d006      	beq.n	8005538 <USB_EPStartXfer+0x194>
 800552a:	1d7b      	adds	r3, r7, #5
 800552c:	33ff      	adds	r3, #255	; 0xff
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	1d7a      	adds	r2, r7, #5
 8005534:	32ff      	adds	r2, #255	; 0xff
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	1d7b      	adds	r3, r7, #5
 800553a:	33ff      	adds	r3, #255	; 0xff
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	b29a      	uxth	r2, r3
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e03b      	b.n	80055c2 <USB_EPStartXfer+0x21e>
 800554a:	2286      	movs	r2, #134	; 0x86
 800554c:	0052      	lsls	r2, r2, #1
 800554e:	18bb      	adds	r3, r7, r2
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	1d79      	adds	r1, r7, #5
 8005556:	31ff      	adds	r1, #255	; 0xff
 8005558:	600b      	str	r3, [r1, #0]
 800555a:	18bb      	adds	r3, r7, r2
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	221f      	movs	r2, #31
 8005560:	4013      	ands	r3, r2
 8005562:	d106      	bne.n	8005572 <USB_EPStartXfer+0x1ce>
 8005564:	1d7b      	adds	r3, r7, #5
 8005566:	33ff      	adds	r3, #255	; 0xff
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3b01      	subs	r3, #1
 800556c:	1d7a      	adds	r2, r7, #5
 800556e:	32ff      	adds	r2, #255	; 0xff
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	1d7b      	adds	r3, r7, #5
 8005574:	33ff      	adds	r3, #255	; 0xff
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	b29b      	uxth	r3, r3
 800557e:	4a81      	ldr	r2, [pc, #516]	; (8005784 <USB_EPStartXfer+0x3e0>)
 8005580:	4313      	orrs	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e01b      	b.n	80055c2 <USB_EPStartXfer+0x21e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d117      	bne.n	80055c2 <USB_EPStartXfer+0x21e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2250      	movs	r2, #80	; 0x50
 8005596:	5a9b      	ldrh	r3, [r3, r2]
 8005598:	b29b      	uxth	r3, r3
 800559a:	001a      	movs	r2, r3
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	00da      	lsls	r2, r3, #3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	18d3      	adds	r3, r2, r3
 80055ac:	4a73      	ldr	r2, [pc, #460]	; (800577c <USB_EPStartXfer+0x3d8>)
 80055ae:	4694      	mov	ip, r2
 80055b0:	4463      	add	r3, ip
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
 80055b4:	2386      	movs	r3, #134	; 0x86
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055c2:	2085      	movs	r0, #133	; 0x85
 80055c4:	0040      	lsls	r0, r0, #1
 80055c6:	183b      	adds	r3, r7, r0
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	8952      	ldrh	r2, [r2, #10]
 80055cc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6959      	ldr	r1, [r3, #20]
 80055d2:	2586      	movs	r5, #134	; 0x86
 80055d4:	006d      	lsls	r5, r5, #1
 80055d6:	197b      	adds	r3, r7, r5
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	b29c      	uxth	r4, r3
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	881a      	ldrh	r2, [r3, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	0023      	movs	r3, r4
 80055e4:	f001 f96e 	bl	80068c4 <USB_WritePMA>
            ep->xfer_buff += len;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	197b      	adds	r3, r7, r5
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	18d2      	adds	r2, r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d909      	bls.n	8005616 <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	2386      	movs	r3, #134	; 0x86
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	621a      	str	r2, [r3, #32]
 8005614:	e008      	b.n	8005628 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	2286      	movs	r2, #134	; 0x86
 800561c:	0052      	lsls	r2, r2, #1
 800561e:	18ba      	adds	r2, r7, r2
 8005620:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2200      	movs	r2, #0
 8005626:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d16c      	bne.n	800570a <USB_EPStartXfer+0x366>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2250      	movs	r2, #80	; 0x50
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	001a      	movs	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	189b      	adds	r3, r3, r2
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	00da      	lsls	r2, r3, #3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	18d3      	adds	r3, r2, r3
 800564e:	4a48      	ldr	r2, [pc, #288]	; (8005770 <USB_EPStartXfer+0x3cc>)
 8005650:	4694      	mov	ip, r2
 8005652:	4463      	add	r3, ip
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	2386      	movs	r3, #134	; 0x86
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d110      	bne.n	8005684 <USB_EPStartXfer+0x2e0>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	4a45      	ldr	r2, [pc, #276]	; (8005780 <USB_EPStartXfer+0x3dc>)
 800566a:	4013      	ands	r3, r2
 800566c:	b29a      	uxth	r2, r3
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	4a42      	ldr	r2, [pc, #264]	; (8005784 <USB_EPStartXfer+0x3e0>)
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e060      	b.n	8005746 <USB_EPStartXfer+0x3a2>
 8005684:	2386      	movs	r3, #134	; 0x86
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b3e      	cmp	r3, #62	; 0x3e
 800568e:	d81c      	bhi.n	80056ca <USB_EPStartXfer+0x326>
 8005690:	2286      	movs	r2, #134	; 0x86
 8005692:	0052      	lsls	r2, r2, #1
 8005694:	18bb      	adds	r3, r7, r2
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	1c79      	adds	r1, r7, #1
 800569c:	31ff      	adds	r1, #255	; 0xff
 800569e:	600b      	str	r3, [r1, #0]
 80056a0:	18bb      	adds	r3, r7, r2
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	4013      	ands	r3, r2
 80056a8:	d006      	beq.n	80056b8 <USB_EPStartXfer+0x314>
 80056aa:	1c7b      	adds	r3, r7, #1
 80056ac:	33ff      	adds	r3, #255	; 0xff
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	1c7a      	adds	r2, r7, #1
 80056b4:	32ff      	adds	r2, #255	; 0xff
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	1c7b      	adds	r3, r7, #1
 80056ba:	33ff      	adds	r3, #255	; 0xff
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e03d      	b.n	8005746 <USB_EPStartXfer+0x3a2>
 80056ca:	2286      	movs	r2, #134	; 0x86
 80056cc:	0052      	lsls	r2, r2, #1
 80056ce:	18bb      	adds	r3, r7, r2
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	1c79      	adds	r1, r7, #1
 80056d6:	31ff      	adds	r1, #255	; 0xff
 80056d8:	600b      	str	r3, [r1, #0]
 80056da:	18bb      	adds	r3, r7, r2
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	221f      	movs	r2, #31
 80056e0:	4013      	ands	r3, r2
 80056e2:	d106      	bne.n	80056f2 <USB_EPStartXfer+0x34e>
 80056e4:	1c7b      	adds	r3, r7, #1
 80056e6:	33ff      	adds	r3, #255	; 0xff
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	1c7a      	adds	r2, r7, #1
 80056ee:	32ff      	adds	r2, #255	; 0xff
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	1c7b      	adds	r3, r7, #1
 80056f4:	33ff      	adds	r3, #255	; 0xff
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4a21      	ldr	r2, [pc, #132]	; (8005784 <USB_EPStartXfer+0x3e0>)
 8005700:	4313      	orrs	r3, r2
 8005702:	b29a      	uxth	r2, r3
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e01d      	b.n	8005746 <USB_EPStartXfer+0x3a2>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d119      	bne.n	8005746 <USB_EPStartXfer+0x3a2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2250      	movs	r2, #80	; 0x50
 800571a:	5a9b      	ldrh	r3, [r3, r2]
 800571c:	b29b      	uxth	r3, r3
 800571e:	001a      	movs	r2, r3
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	189b      	adds	r3, r3, r2
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	00da      	lsls	r2, r3, #3
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	18d3      	adds	r3, r2, r3
 8005730:	4a0f      	ldr	r2, [pc, #60]	; (8005770 <USB_EPStartXfer+0x3cc>)
 8005732:	4694      	mov	ip, r2
 8005734:	4463      	add	r3, ip
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	2386      	movs	r3, #134	; 0x86
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	b29a      	uxth	r2, r3
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005746:	2085      	movs	r0, #133	; 0x85
 8005748:	0040      	lsls	r0, r0, #1
 800574a:	183b      	adds	r3, r7, r0
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	8912      	ldrh	r2, [r2, #8]
 8005750:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6959      	ldr	r1, [r3, #20]
 8005756:	2386      	movs	r3, #134	; 0x86
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	b29c      	uxth	r4, r3
 8005760:	183b      	adds	r3, r7, r0
 8005762:	881a      	ldrh	r2, [r3, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	0023      	movs	r3, r4
 8005768:	f001 f8ac 	bl	80068c4 <USB_WritePMA>
 800576c:	e346      	b.n	8005dfc <USB_EPStartXfer+0xa58>
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	00000402 	.word	0x00000402
 8005774:	ffff8f8f 	.word	0xffff8f8f
 8005778:	ffff8180 	.word	0xffff8180
 800577c:	00000406 	.word	0x00000406
 8005780:	ffff83ff 	.word	0xffff83ff
 8005784:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d16a      	bne.n	8005866 <USB_EPStartXfer+0x4c2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2250      	movs	r2, #80	; 0x50
 8005798:	5a9b      	ldrh	r3, [r3, r2]
 800579a:	b29b      	uxth	r3, r3
 800579c:	001a      	movs	r2, r3
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	189b      	adds	r3, r3, r2
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00da      	lsls	r2, r3, #3
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	18d3      	adds	r3, r2, r3
 80057ae:	4aca      	ldr	r2, [pc, #808]	; (8005ad8 <USB_EPStartXfer+0x734>)
 80057b0:	4694      	mov	ip, r2
 80057b2:	4463      	add	r3, ip
 80057b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b6:	2386      	movs	r3, #134	; 0x86
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d110      	bne.n	80057e4 <USB_EPStartXfer+0x440>
 80057c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4ac4      	ldr	r2, [pc, #784]	; (8005adc <USB_EPStartXfer+0x738>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4ac1      	ldr	r2, [pc, #772]	; (8005ae0 <USB_EPStartXfer+0x73c>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	e05e      	b.n	80058a2 <USB_EPStartXfer+0x4fe>
 80057e4:	2386      	movs	r3, #134	; 0x86
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b3e      	cmp	r3, #62	; 0x3e
 80057ee:	d81b      	bhi.n	8005828 <USB_EPStartXfer+0x484>
 80057f0:	2286      	movs	r2, #134	; 0x86
 80057f2:	0052      	lsls	r2, r2, #1
 80057f4:	18bb      	adds	r3, r7, r2
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	21fc      	movs	r1, #252	; 0xfc
 80057fc:	1879      	adds	r1, r7, r1
 80057fe:	600b      	str	r3, [r1, #0]
 8005800:	18bb      	adds	r3, r7, r2
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	4013      	ands	r3, r2
 8005808:	d005      	beq.n	8005816 <USB_EPStartXfer+0x472>
 800580a:	22fc      	movs	r2, #252	; 0xfc
 800580c:	18bb      	adds	r3, r7, r2
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	18ba      	adds	r2, r7, r2
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	23fc      	movs	r3, #252	; 0xfc
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	029b      	lsls	r3, r3, #10
 8005820:	b29a      	uxth	r2, r3
 8005822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e03c      	b.n	80058a2 <USB_EPStartXfer+0x4fe>
 8005828:	2286      	movs	r2, #134	; 0x86
 800582a:	0052      	lsls	r2, r2, #1
 800582c:	18bb      	adds	r3, r7, r2
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	21fc      	movs	r1, #252	; 0xfc
 8005834:	1879      	adds	r1, r7, r1
 8005836:	600b      	str	r3, [r1, #0]
 8005838:	18bb      	adds	r3, r7, r2
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	221f      	movs	r2, #31
 800583e:	4013      	ands	r3, r2
 8005840:	d105      	bne.n	800584e <USB_EPStartXfer+0x4aa>
 8005842:	22fc      	movs	r2, #252	; 0xfc
 8005844:	18bb      	adds	r3, r7, r2
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	18ba      	adds	r2, r7, r2
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	23fc      	movs	r3, #252	; 0xfc
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	4aa1      	ldr	r2, [pc, #644]	; (8005ae0 <USB_EPStartXfer+0x73c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	b29a      	uxth	r2, r3
 8005860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e01d      	b.n	80058a2 <USB_EPStartXfer+0x4fe>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d119      	bne.n	80058a2 <USB_EPStartXfer+0x4fe>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	657b      	str	r3, [r7, #84]	; 0x54
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2250      	movs	r2, #80	; 0x50
 8005876:	5a9b      	ldrh	r3, [r3, r2]
 8005878:	b29b      	uxth	r3, r3
 800587a:	001a      	movs	r2, r3
 800587c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587e:	189b      	adds	r3, r3, r2
 8005880:	657b      	str	r3, [r7, #84]	; 0x54
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	00da      	lsls	r2, r3, #3
 8005888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	4a92      	ldr	r2, [pc, #584]	; (8005ad8 <USB_EPStartXfer+0x734>)
 800588e:	4694      	mov	ip, r2
 8005890:	4463      	add	r3, ip
 8005892:	653b      	str	r3, [r7, #80]	; 0x50
 8005894:	2386      	movs	r3, #134	; 0x86
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	b29a      	uxth	r2, r3
 800589e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058a2:	2085      	movs	r0, #133	; 0x85
 80058a4:	0040      	lsls	r0, r0, #1
 80058a6:	183b      	adds	r3, r7, r0
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	8912      	ldrh	r2, [r2, #8]
 80058ac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	2586      	movs	r5, #134	; 0x86
 80058b4:	006d      	lsls	r5, r5, #1
 80058b6:	197b      	adds	r3, r7, r5
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	b29c      	uxth	r4, r3
 80058bc:	183b      	adds	r3, r7, r0
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	0023      	movs	r3, r4
 80058c4:	f000 fffe 	bl	80068c4 <USB_WritePMA>
            ep->xfer_buff += len;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	197b      	adds	r3, r7, r5
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	18d2      	adds	r2, r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d909      	bls.n	80058f6 <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	2386      	movs	r3, #134	; 0x86
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	621a      	str	r2, [r3, #32]
 80058f4:	e008      	b.n	8005908 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	2286      	movs	r2, #134	; 0x86
 80058fc:	0052      	lsls	r2, r2, #1
 80058fe:	18ba      	adds	r2, r7, r2
 8005900:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d16a      	bne.n	80059ea <USB_EPStartXfer+0x646>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2250      	movs	r2, #80	; 0x50
 800591c:	5a9b      	ldrh	r3, [r3, r2]
 800591e:	b29b      	uxth	r3, r3
 8005920:	001a      	movs	r2, r3
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	189b      	adds	r3, r3, r2
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	00da      	lsls	r2, r3, #3
 800592e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005930:	18d3      	adds	r3, r2, r3
 8005932:	4a6c      	ldr	r2, [pc, #432]	; (8005ae4 <USB_EPStartXfer+0x740>)
 8005934:	4694      	mov	ip, r2
 8005936:	4463      	add	r3, ip
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
 800593a:	2386      	movs	r3, #134	; 0x86
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d110      	bne.n	8005968 <USB_EPStartXfer+0x5c4>
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	4a63      	ldr	r2, [pc, #396]	; (8005adc <USB_EPStartXfer+0x738>)
 800594e:	4013      	ands	r3, r2
 8005950:	b29a      	uxth	r2, r3
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	4a60      	ldr	r2, [pc, #384]	; (8005ae0 <USB_EPStartXfer+0x73c>)
 800595e:	4313      	orrs	r3, r2
 8005960:	b29a      	uxth	r2, r3
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e05c      	b.n	8005a22 <USB_EPStartXfer+0x67e>
 8005968:	2386      	movs	r3, #134	; 0x86
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b3e      	cmp	r3, #62	; 0x3e
 8005972:	d81b      	bhi.n	80059ac <USB_EPStartXfer+0x608>
 8005974:	2286      	movs	r2, #134	; 0x86
 8005976:	0052      	lsls	r2, r2, #1
 8005978:	18bb      	adds	r3, r7, r2
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	21f8      	movs	r1, #248	; 0xf8
 8005980:	1879      	adds	r1, r7, r1
 8005982:	600b      	str	r3, [r1, #0]
 8005984:	18bb      	adds	r3, r7, r2
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	4013      	ands	r3, r2
 800598c:	d005      	beq.n	800599a <USB_EPStartXfer+0x5f6>
 800598e:	22f8      	movs	r2, #248	; 0xf8
 8005990:	18bb      	adds	r3, r7, r2
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	18ba      	adds	r2, r7, r2
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	23f8      	movs	r3, #248	; 0xf8
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e03a      	b.n	8005a22 <USB_EPStartXfer+0x67e>
 80059ac:	2286      	movs	r2, #134	; 0x86
 80059ae:	0052      	lsls	r2, r2, #1
 80059b0:	18bb      	adds	r3, r7, r2
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	21f8      	movs	r1, #248	; 0xf8
 80059b8:	1879      	adds	r1, r7, r1
 80059ba:	600b      	str	r3, [r1, #0]
 80059bc:	18bb      	adds	r3, r7, r2
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	221f      	movs	r2, #31
 80059c2:	4013      	ands	r3, r2
 80059c4:	d105      	bne.n	80059d2 <USB_EPStartXfer+0x62e>
 80059c6:	22f8      	movs	r2, #248	; 0xf8
 80059c8:	18bb      	adds	r3, r7, r2
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	18ba      	adds	r2, r7, r2
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	23f8      	movs	r3, #248	; 0xf8
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <USB_EPStartXfer+0x73c>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e01b      	b.n	8005a22 <USB_EPStartXfer+0x67e>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d117      	bne.n	8005a22 <USB_EPStartXfer+0x67e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2250      	movs	r2, #80	; 0x50
 80059f6:	5a9b      	ldrh	r3, [r3, r2]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	001a      	movs	r2, r3
 80059fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	00da      	lsls	r2, r3, #3
 8005a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0a:	18d3      	adds	r3, r2, r3
 8005a0c:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <USB_EPStartXfer+0x740>)
 8005a0e:	4694      	mov	ip, r2
 8005a10:	4463      	add	r3, ip
 8005a12:	643b      	str	r3, [r7, #64]	; 0x40
 8005a14:	2386      	movs	r3, #134	; 0x86
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a22:	2085      	movs	r0, #133	; 0x85
 8005a24:	0040      	lsls	r0, r0, #1
 8005a26:	183b      	adds	r3, r7, r0
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	8952      	ldrh	r2, [r2, #10]
 8005a2c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6959      	ldr	r1, [r3, #20]
 8005a32:	2386      	movs	r3, #134	; 0x86
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	b29c      	uxth	r4, r3
 8005a3c:	183b      	adds	r3, r7, r0
 8005a3e:	881a      	ldrh	r2, [r3, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	0023      	movs	r3, r4
 8005a44:	f000 ff3e 	bl	80068c4 <USB_WritePMA>
 8005a48:	e1d8      	b.n	8005dfc <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	2086      	movs	r0, #134	; 0x86
 8005a50:	0040      	lsls	r0, r0, #1
 8005a52:	183a      	adds	r2, r7, r0
 8005a54:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	18d3      	adds	r3, r2, r3
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	2466      	movs	r4, #102	; 0x66
 8005a66:	193b      	adds	r3, r7, r4
 8005a68:	491f      	ldr	r1, [pc, #124]	; (8005ae8 <USB_EPStartXfer+0x744>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	18d3      	adds	r3, r2, r3
 8005a78:	193a      	adds	r2, r7, r4
 8005a7a:	8812      	ldrh	r2, [r2, #0]
 8005a7c:	491b      	ldr	r1, [pc, #108]	; (8005aec <USB_EPStartXfer+0x748>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	b292      	uxth	r2, r2
 8005a82:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	663b      	str	r3, [r7, #96]	; 0x60
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2250      	movs	r2, #80	; 0x50
 8005a8c:	5a9b      	ldrh	r3, [r3, r2]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	001a      	movs	r2, r3
 8005a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a94:	189b      	adds	r3, r3, r2
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	00da      	lsls	r2, r3, #3
 8005a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa0:	18d3      	adds	r3, r2, r3
 8005aa2:	4a0d      	ldr	r2, [pc, #52]	; (8005ad8 <USB_EPStartXfer+0x734>)
 8005aa4:	4694      	mov	ip, r2
 8005aa6:	4463      	add	r3, ip
 8005aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aaa:	183b      	adds	r3, r7, r0
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ab4:	2585      	movs	r5, #133	; 0x85
 8005ab6:	006d      	lsls	r5, r5, #1
 8005ab8:	197b      	adds	r3, r7, r5
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	8912      	ldrh	r2, [r2, #8]
 8005abe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6959      	ldr	r1, [r3, #20]
 8005ac4:	183b      	adds	r3, r7, r0
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	b29c      	uxth	r4, r3
 8005aca:	197b      	adds	r3, r7, r5
 8005acc:	881a      	ldrh	r2, [r3, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	0023      	movs	r3, r4
 8005ad2:	f000 fef7 	bl	80068c4 <USB_WritePMA>
 8005ad6:	e191      	b.n	8005dfc <USB_EPStartXfer+0xa58>
 8005ad8:	00000402 	.word	0x00000402
 8005adc:	ffff83ff 	.word	0xffff83ff
 8005ae0:	ffff8000 	.word	0xffff8000
 8005ae4:	00000406 	.word	0x00000406
 8005ae8:	ffff8e8f 	.word	0xffff8e8f
 8005aec:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	18d3      	adds	r3, r2, r3
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	001a      	movs	r2, r3
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	4013      	ands	r3, r2
 8005b04:	d100      	bne.n	8005b08 <USB_EPStartXfer+0x764>
 8005b06:	e093      	b.n	8005c30 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d16a      	bne.n	8005bea <USB_EPStartXfer+0x846>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	673b      	str	r3, [r7, #112]	; 0x70
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2250      	movs	r2, #80	; 0x50
 8005b1c:	5a9b      	ldrh	r3, [r3, r2]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	001a      	movs	r2, r3
 8005b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	673b      	str	r3, [r7, #112]	; 0x70
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	00da      	lsls	r2, r3, #3
 8005b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b30:	18d3      	adds	r3, r2, r3
 8005b32:	4ae0      	ldr	r2, [pc, #896]	; (8005eb4 <USB_EPStartXfer+0xb10>)
 8005b34:	4694      	mov	ip, r2
 8005b36:	4463      	add	r3, ip
 8005b38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b3a:	2386      	movs	r3, #134	; 0x86
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d110      	bne.n	8005b68 <USB_EPStartXfer+0x7c4>
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4ada      	ldr	r2, [pc, #872]	; (8005eb8 <USB_EPStartXfer+0xb14>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4ad7      	ldr	r2, [pc, #860]	; (8005ebc <USB_EPStartXfer+0xb18>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e05c      	b.n	8005c22 <USB_EPStartXfer+0x87e>
 8005b68:	2386      	movs	r3, #134	; 0x86
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b3e      	cmp	r3, #62	; 0x3e
 8005b72:	d81b      	bhi.n	8005bac <USB_EPStartXfer+0x808>
 8005b74:	2286      	movs	r2, #134	; 0x86
 8005b76:	0052      	lsls	r2, r2, #1
 8005b78:	18bb      	adds	r3, r7, r2
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	21f4      	movs	r1, #244	; 0xf4
 8005b80:	1879      	adds	r1, r7, r1
 8005b82:	600b      	str	r3, [r1, #0]
 8005b84:	18bb      	adds	r3, r7, r2
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d005      	beq.n	8005b9a <USB_EPStartXfer+0x7f6>
 8005b8e:	22f4      	movs	r2, #244	; 0xf4
 8005b90:	18bb      	adds	r3, r7, r2
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	18ba      	adds	r2, r7, r2
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	23f4      	movs	r3, #244	; 0xf4
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e03a      	b.n	8005c22 <USB_EPStartXfer+0x87e>
 8005bac:	2286      	movs	r2, #134	; 0x86
 8005bae:	0052      	lsls	r2, r2, #1
 8005bb0:	18bb      	adds	r3, r7, r2
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	21f4      	movs	r1, #244	; 0xf4
 8005bb8:	1879      	adds	r1, r7, r1
 8005bba:	600b      	str	r3, [r1, #0]
 8005bbc:	18bb      	adds	r3, r7, r2
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	221f      	movs	r2, #31
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d105      	bne.n	8005bd2 <USB_EPStartXfer+0x82e>
 8005bc6:	22f4      	movs	r2, #244	; 0xf4
 8005bc8:	18bb      	adds	r3, r7, r2
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	18ba      	adds	r2, r7, r2
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	23f4      	movs	r3, #244	; 0xf4
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4ab7      	ldr	r2, [pc, #732]	; (8005ebc <USB_EPStartXfer+0xb18>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e01b      	b.n	8005c22 <USB_EPStartXfer+0x87e>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d117      	bne.n	8005c22 <USB_EPStartXfer+0x87e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2250      	movs	r2, #80	; 0x50
 8005bf6:	5a9b      	ldrh	r3, [r3, r2]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	001a      	movs	r2, r3
 8005bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0a:	18d3      	adds	r3, r2, r3
 8005c0c:	4aa9      	ldr	r2, [pc, #676]	; (8005eb4 <USB_EPStartXfer+0xb10>)
 8005c0e:	4694      	mov	ip, r2
 8005c10:	4463      	add	r3, ip
 8005c12:	677b      	str	r3, [r7, #116]	; 0x74
 8005c14:	2386      	movs	r3, #134	; 0x86
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c22:	2385      	movs	r3, #133	; 0x85
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	8952      	ldrh	r2, [r2, #10]
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e09f      	b.n	8005d70 <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d16f      	bne.n	8005d18 <USB_EPStartXfer+0x974>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2180      	movs	r1, #128	; 0x80
 8005c3c:	187a      	adds	r2, r7, r1
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2250      	movs	r2, #80	; 0x50
 8005c44:	5a9b      	ldrh	r3, [r3, r2]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	001a      	movs	r2, r3
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	187a      	adds	r2, r7, r1
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	00da      	lsls	r2, r3, #3
 8005c5a:	187b      	adds	r3, r7, r1
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	18d3      	adds	r3, r2, r3
 8005c60:	4a97      	ldr	r2, [pc, #604]	; (8005ec0 <USB_EPStartXfer+0xb1c>)
 8005c62:	4694      	mov	ip, r2
 8005c64:	4463      	add	r3, ip
 8005c66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c68:	2386      	movs	r3, #134	; 0x86
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d110      	bne.n	8005c96 <USB_EPStartXfer+0x8f2>
 8005c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4a8f      	ldr	r2, [pc, #572]	; (8005eb8 <USB_EPStartXfer+0xb14>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4a8c      	ldr	r2, [pc, #560]	; (8005ebc <USB_EPStartXfer+0xb18>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e066      	b.n	8005d64 <USB_EPStartXfer+0x9c0>
 8005c96:	2386      	movs	r3, #134	; 0x86
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca0:	d81b      	bhi.n	8005cda <USB_EPStartXfer+0x936>
 8005ca2:	2286      	movs	r2, #134	; 0x86
 8005ca4:	0052      	lsls	r2, r2, #1
 8005ca6:	18bb      	adds	r3, r7, r2
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	21f0      	movs	r1, #240	; 0xf0
 8005cae:	1879      	adds	r1, r7, r1
 8005cb0:	600b      	str	r3, [r1, #0]
 8005cb2:	18bb      	adds	r3, r7, r2
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d005      	beq.n	8005cc8 <USB_EPStartXfer+0x924>
 8005cbc:	22f0      	movs	r2, #240	; 0xf0
 8005cbe:	18bb      	adds	r3, r7, r2
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	18ba      	adds	r2, r7, r2
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	23f0      	movs	r3, #240	; 0xf0
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	029b      	lsls	r3, r3, #10
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e044      	b.n	8005d64 <USB_EPStartXfer+0x9c0>
 8005cda:	2286      	movs	r2, #134	; 0x86
 8005cdc:	0052      	lsls	r2, r2, #1
 8005cde:	18bb      	adds	r3, r7, r2
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	21f0      	movs	r1, #240	; 0xf0
 8005ce6:	1879      	adds	r1, r7, r1
 8005ce8:	600b      	str	r3, [r1, #0]
 8005cea:	18bb      	adds	r3, r7, r2
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	221f      	movs	r2, #31
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d105      	bne.n	8005d00 <USB_EPStartXfer+0x95c>
 8005cf4:	22f0      	movs	r2, #240	; 0xf0
 8005cf6:	18bb      	adds	r3, r7, r2
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	18ba      	adds	r2, r7, r2
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	23f0      	movs	r3, #240	; 0xf0
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4a6b      	ldr	r2, [pc, #428]	; (8005ebc <USB_EPStartXfer+0xb18>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e025      	b.n	8005d64 <USB_EPStartXfer+0x9c0>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d121      	bne.n	8005d64 <USB_EPStartXfer+0x9c0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2188      	movs	r1, #136	; 0x88
 8005d24:	187a      	adds	r2, r7, r1
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2250      	movs	r2, #80	; 0x50
 8005d2c:	5a9b      	ldrh	r3, [r3, r2]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	001a      	movs	r2, r3
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	187a      	adds	r2, r7, r1
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	187b      	adds	r3, r7, r1
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	18d3      	adds	r3, r2, r3
 8005d48:	4a5d      	ldr	r2, [pc, #372]	; (8005ec0 <USB_EPStartXfer+0xb1c>)
 8005d4a:	4694      	mov	ip, r2
 8005d4c:	4463      	add	r3, ip
 8005d4e:	2184      	movs	r1, #132	; 0x84
 8005d50:	187a      	adds	r2, r7, r1
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	2386      	movs	r3, #134	; 0x86
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	187b      	adds	r3, r7, r1
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d64:	2385      	movs	r3, #133	; 0x85
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	8912      	ldrh	r2, [r2, #8]
 8005d6e:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6959      	ldr	r1, [r3, #20]
 8005d74:	2386      	movs	r3, #134	; 0x86
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	b29c      	uxth	r4, r3
 8005d7e:	2385      	movs	r3, #133	; 0x85
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	881a      	ldrh	r2, [r3, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	0023      	movs	r3, r4
 8005d8a:	f000 fd9b 	bl	80068c4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d117      	bne.n	8005dc6 <USB_EPStartXfer+0xa22>
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	2068      	movs	r0, #104	; 0x68
 8005da6:	183b      	adds	r3, r7, r0
 8005da8:	4946      	ldr	r1, [pc, #280]	; (8005ec4 <USB_EPStartXfer+0xb20>)
 8005daa:	400a      	ands	r2, r1
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	18d3      	adds	r3, r2, r3
 8005db8:	183a      	adds	r2, r7, r0
 8005dba:	8812      	ldrh	r2, [r2, #0]
 8005dbc:	4942      	ldr	r1, [pc, #264]	; (8005ec8 <USB_EPStartXfer+0xb24>)
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	b292      	uxth	r2, r2
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e01a      	b.n	8005dfc <USB_EPStartXfer+0xa58>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d116      	bne.n	8005dfc <USB_EPStartXfer+0xa58>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	18d3      	adds	r3, r2, r3
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	206a      	movs	r0, #106	; 0x6a
 8005dde:	183b      	adds	r3, r7, r0
 8005de0:	4938      	ldr	r1, [pc, #224]	; (8005ec4 <USB_EPStartXfer+0xb20>)
 8005de2:	400a      	ands	r2, r1
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	183a      	adds	r2, r7, r0
 8005df2:	8812      	ldrh	r2, [r2, #0]
 8005df4:	4935      	ldr	r1, [pc, #212]	; (8005ecc <USB_EPStartXfer+0xb28>)
 8005df6:	430a      	orrs	r2, r1
 8005df8:	b292      	uxth	r2, r2
 8005dfa:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <USB_EPStartXfer+0xb2c>)
 8005e0c:	2188      	movs	r1, #136	; 0x88
 8005e0e:	0049      	lsls	r1, r1, #1
 8005e10:	468c      	mov	ip, r1
 8005e12:	44bc      	add	ip, r7
 8005e14:	4463      	add	r3, ip
 8005e16:	492f      	ldr	r1, [pc, #188]	; (8005ed4 <USB_EPStartXfer+0xb30>)
 8005e18:	400a      	ands	r2, r1
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <USB_EPStartXfer+0xb2c>)
 8005e1e:	2288      	movs	r2, #136	; 0x88
 8005e20:	0052      	lsls	r2, r2, #1
 8005e22:	4694      	mov	ip, r2
 8005e24:	44bc      	add	ip, r7
 8005e26:	4463      	add	r3, ip
 8005e28:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <USB_EPStartXfer+0xb2c>)
 8005e2a:	2188      	movs	r1, #136	; 0x88
 8005e2c:	0049      	lsls	r1, r1, #1
 8005e2e:	468c      	mov	ip, r1
 8005e30:	44bc      	add	ip, r7
 8005e32:	4462      	add	r2, ip
 8005e34:	8812      	ldrh	r2, [r2, #0]
 8005e36:	2110      	movs	r1, #16
 8005e38:	404a      	eors	r2, r1
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <USB_EPStartXfer+0xb2c>)
 8005e3e:	2288      	movs	r2, #136	; 0x88
 8005e40:	0052      	lsls	r2, r2, #1
 8005e42:	4694      	mov	ip, r2
 8005e44:	44bc      	add	ip, r7
 8005e46:	4463      	add	r3, ip
 8005e48:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <USB_EPStartXfer+0xb2c>)
 8005e4a:	2188      	movs	r1, #136	; 0x88
 8005e4c:	0049      	lsls	r1, r1, #1
 8005e4e:	468c      	mov	ip, r1
 8005e50:	44bc      	add	ip, r7
 8005e52:	4462      	add	r2, ip
 8005e54:	8812      	ldrh	r2, [r2, #0]
 8005e56:	2120      	movs	r1, #32
 8005e58:	404a      	eors	r2, r1
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	18d3      	adds	r3, r2, r3
 8005e66:	4a1a      	ldr	r2, [pc, #104]	; (8005ed0 <USB_EPStartXfer+0xb2c>)
 8005e68:	2188      	movs	r1, #136	; 0x88
 8005e6a:	0049      	lsls	r1, r1, #1
 8005e6c:	468c      	mov	ip, r1
 8005e6e:	44bc      	add	ip, r7
 8005e70:	4462      	add	r2, ip
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	4918      	ldr	r1, [pc, #96]	; (8005ed8 <USB_EPStartXfer+0xb34>)
 8005e76:	430a      	orrs	r2, r1
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	f000 fbdd 	bl	800663a <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	7b1b      	ldrb	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d000      	beq.n	8005e8a <USB_EPStartXfer+0xae6>
 8005e88:	e0ac      	b.n	8005fe4 <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d922      	bls.n	8005edc <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2186      	movs	r1, #134	; 0x86
 8005e9c:	0049      	lsls	r1, r1, #1
 8005e9e:	187a      	adds	r2, r7, r1
 8005ea0:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	187b      	adds	r3, r7, r1
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	1ad2      	subs	r2, r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	619a      	str	r2, [r3, #24]
 8005eb0:	e01d      	b.n	8005eee <USB_EPStartXfer+0xb4a>
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	00000406 	.word	0x00000406
 8005eb8:	ffff83ff 	.word	0xffff83ff
 8005ebc:	ffff8000 	.word	0xffff8000
 8005ec0:	00000402 	.word	0x00000402
 8005ec4:	ffff8f8f 	.word	0xffff8f8f
 8005ec8:	ffff80c0 	.word	0xffff80c0
 8005ecc:	ffffc080 	.word	0xffffc080
 8005ed0:	fffffefe 	.word	0xfffffefe
 8005ed4:	ffff8fbf 	.word	0xffff8fbf
 8005ed8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2286      	movs	r2, #134	; 0x86
 8005ee2:	0052      	lsls	r2, r2, #1
 8005ee4:	18ba      	adds	r2, r7, r2
 8005ee6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2194      	movs	r1, #148	; 0x94
 8005ef2:	187a      	adds	r2, r7, r1
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2250      	movs	r2, #80	; 0x50
 8005efa:	5a9b      	ldrh	r3, [r3, r2]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	001a      	movs	r2, r3
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	189b      	adds	r3, r3, r2
 8005f06:	187a      	adds	r2, r7, r1
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	00da      	lsls	r2, r3, #3
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	4ac2      	ldr	r2, [pc, #776]	; (8006220 <USB_EPStartXfer+0xe7c>)
 8005f18:	4694      	mov	ip, r2
 8005f1a:	4463      	add	r3, ip
 8005f1c:	2290      	movs	r2, #144	; 0x90
 8005f1e:	18ba      	adds	r2, r7, r2
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	2386      	movs	r3, #134	; 0x86
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d115      	bne.n	8005f5a <USB_EPStartXfer+0xbb6>
 8005f2e:	2190      	movs	r1, #144	; 0x90
 8005f30:	187b      	adds	r3, r7, r1
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4aba      	ldr	r2, [pc, #744]	; (8006224 <USB_EPStartXfer+0xe80>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4ab6      	ldr	r2, [pc, #728]	; (8006228 <USB_EPStartXfer+0xe84>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	187b      	adds	r3, r7, r1
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e34a      	b.n	80065f0 <USB_EPStartXfer+0x124c>
 8005f5a:	2386      	movs	r3, #134	; 0x86
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b3e      	cmp	r3, #62	; 0x3e
 8005f64:	d81d      	bhi.n	8005fa2 <USB_EPStartXfer+0xbfe>
 8005f66:	2286      	movs	r2, #134	; 0x86
 8005f68:	0052      	lsls	r2, r2, #1
 8005f6a:	18bb      	adds	r3, r7, r2
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	21ec      	movs	r1, #236	; 0xec
 8005f72:	1879      	adds	r1, r7, r1
 8005f74:	600b      	str	r3, [r1, #0]
 8005f76:	18bb      	adds	r3, r7, r2
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d005      	beq.n	8005f8c <USB_EPStartXfer+0xbe8>
 8005f80:	22ec      	movs	r2, #236	; 0xec
 8005f82:	18bb      	adds	r3, r7, r2
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	18ba      	adds	r2, r7, r2
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	23ec      	movs	r3, #236	; 0xec
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	029b      	lsls	r3, r3, #10
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	2390      	movs	r3, #144	; 0x90
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e326      	b.n	80065f0 <USB_EPStartXfer+0x124c>
 8005fa2:	2286      	movs	r2, #134	; 0x86
 8005fa4:	0052      	lsls	r2, r2, #1
 8005fa6:	18bb      	adds	r3, r7, r2
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	21ec      	movs	r1, #236	; 0xec
 8005fae:	1879      	adds	r1, r7, r1
 8005fb0:	600b      	str	r3, [r1, #0]
 8005fb2:	18bb      	adds	r3, r7, r2
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	221f      	movs	r2, #31
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d105      	bne.n	8005fc8 <USB_EPStartXfer+0xc24>
 8005fbc:	22ec      	movs	r2, #236	; 0xec
 8005fbe:	18bb      	adds	r3, r7, r2
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	18ba      	adds	r2, r7, r2
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	23ec      	movs	r3, #236	; 0xec
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	029b      	lsls	r3, r3, #10
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4a94      	ldr	r2, [pc, #592]	; (8006228 <USB_EPStartXfer+0xe84>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	2390      	movs	r3, #144	; 0x90
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e305      	b.n	80065f0 <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d000      	beq.n	8005fee <USB_EPStartXfer+0xc4a>
 8005fec:	e182      	b.n	80062f4 <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d000      	beq.n	8005ff8 <USB_EPStartXfer+0xc54>
 8005ff6:	e072      	b.n	80060de <USB_EPStartXfer+0xd3a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	21b0      	movs	r1, #176	; 0xb0
 8005ffc:	187a      	adds	r2, r7, r1
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2250      	movs	r2, #80	; 0x50
 8006004:	5a9b      	ldrh	r3, [r3, r2]
 8006006:	b29b      	uxth	r3, r3
 8006008:	001a      	movs	r2, r3
 800600a:	187b      	adds	r3, r7, r1
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	189b      	adds	r3, r3, r2
 8006010:	187a      	adds	r2, r7, r1
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	00da      	lsls	r2, r3, #3
 800601a:	187b      	adds	r3, r7, r1
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	18d3      	adds	r3, r2, r3
 8006020:	4a82      	ldr	r2, [pc, #520]	; (800622c <USB_EPStartXfer+0xe88>)
 8006022:	4694      	mov	ip, r2
 8006024:	4463      	add	r3, ip
 8006026:	22ac      	movs	r2, #172	; 0xac
 8006028:	18ba      	adds	r2, r7, r2
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d115      	bne.n	8006060 <USB_EPStartXfer+0xcbc>
 8006034:	21ac      	movs	r1, #172	; 0xac
 8006036:	187b      	adds	r3, r7, r1
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	4a79      	ldr	r2, [pc, #484]	; (8006224 <USB_EPStartXfer+0xe80>)
 8006040:	4013      	ands	r3, r2
 8006042:	b29a      	uxth	r2, r3
 8006044:	187b      	adds	r3, r7, r1
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	187b      	adds	r3, r7, r1
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	4a75      	ldr	r2, [pc, #468]	; (8006228 <USB_EPStartXfer+0xe84>)
 8006054:	4313      	orrs	r3, r2
 8006056:	b29a      	uxth	r2, r3
 8006058:	187b      	adds	r3, r7, r1
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e062      	b.n	8006126 <USB_EPStartXfer+0xd82>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b3e      	cmp	r3, #62	; 0x3e
 8006066:	d81b      	bhi.n	80060a0 <USB_EPStartXfer+0xcfc>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	22e8      	movs	r2, #232	; 0xe8
 8006070:	18ba      	adds	r2, r7, r2
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2201      	movs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	d005      	beq.n	800608a <USB_EPStartXfer+0xce6>
 800607e:	22e8      	movs	r2, #232	; 0xe8
 8006080:	18bb      	adds	r3, r7, r2
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	18ba      	adds	r2, r7, r2
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	23e8      	movs	r3, #232	; 0xe8
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	029b      	lsls	r3, r3, #10
 8006094:	b29a      	uxth	r2, r3
 8006096:	23ac      	movs	r3, #172	; 0xac
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	e042      	b.n	8006126 <USB_EPStartXfer+0xd82>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	22e8      	movs	r2, #232	; 0xe8
 80060a8:	18ba      	adds	r2, r7, r2
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	221f      	movs	r2, #31
 80060b2:	4013      	ands	r3, r2
 80060b4:	d105      	bne.n	80060c2 <USB_EPStartXfer+0xd1e>
 80060b6:	22e8      	movs	r2, #232	; 0xe8
 80060b8:	18bb      	adds	r3, r7, r2
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3b01      	subs	r3, #1
 80060be:	18ba      	adds	r2, r7, r2
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	23e8      	movs	r3, #232	; 0xe8
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4a56      	ldr	r2, [pc, #344]	; (8006228 <USB_EPStartXfer+0xe84>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	23ac      	movs	r3, #172	; 0xac
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	e023      	b.n	8006126 <USB_EPStartXfer+0xd82>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d11f      	bne.n	8006126 <USB_EPStartXfer+0xd82>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	21b8      	movs	r1, #184	; 0xb8
 80060ea:	187a      	adds	r2, r7, r1
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2250      	movs	r2, #80	; 0x50
 80060f2:	5a9b      	ldrh	r3, [r3, r2]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	001a      	movs	r2, r3
 80060f8:	187b      	adds	r3, r7, r1
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	187a      	adds	r2, r7, r1
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	00da      	lsls	r2, r3, #3
 8006108:	187b      	adds	r3, r7, r1
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	18d3      	adds	r3, r2, r3
 800610e:	4a47      	ldr	r2, [pc, #284]	; (800622c <USB_EPStartXfer+0xe88>)
 8006110:	4694      	mov	ip, r2
 8006112:	4463      	add	r3, ip
 8006114:	21b4      	movs	r1, #180	; 0xb4
 8006116:	187a      	adds	r2, r7, r1
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	b29a      	uxth	r2, r3
 8006120:	187b      	adds	r3, r7, r1
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	22a8      	movs	r2, #168	; 0xa8
 800612a:	18ba      	adds	r2, r7, r2
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d000      	beq.n	8006138 <USB_EPStartXfer+0xd94>
 8006136:	e07b      	b.n	8006230 <USB_EPStartXfer+0xe8c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	21a0      	movs	r1, #160	; 0xa0
 800613c:	187a      	adds	r2, r7, r1
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2250      	movs	r2, #80	; 0x50
 8006144:	5a9b      	ldrh	r3, [r3, r2]
 8006146:	b29b      	uxth	r3, r3
 8006148:	001a      	movs	r2, r3
 800614a:	187b      	adds	r3, r7, r1
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	189b      	adds	r3, r3, r2
 8006150:	187a      	adds	r2, r7, r1
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	00da      	lsls	r2, r3, #3
 800615a:	187b      	adds	r3, r7, r1
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	18d3      	adds	r3, r2, r3
 8006160:	4a2f      	ldr	r2, [pc, #188]	; (8006220 <USB_EPStartXfer+0xe7c>)
 8006162:	4694      	mov	ip, r2
 8006164:	4463      	add	r3, ip
 8006166:	229c      	movs	r2, #156	; 0x9c
 8006168:	18ba      	adds	r2, r7, r2
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d115      	bne.n	80061a0 <USB_EPStartXfer+0xdfc>
 8006174:	219c      	movs	r1, #156	; 0x9c
 8006176:	187b      	adds	r3, r7, r1
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	4a29      	ldr	r2, [pc, #164]	; (8006224 <USB_EPStartXfer+0xe80>)
 8006180:	4013      	ands	r3, r2
 8006182:	b29a      	uxth	r2, r3
 8006184:	187b      	adds	r3, r7, r1
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	187b      	adds	r3, r7, r1
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	4a25      	ldr	r2, [pc, #148]	; (8006228 <USB_EPStartXfer+0xe84>)
 8006194:	4313      	orrs	r3, r2
 8006196:	b29a      	uxth	r2, r3
 8006198:	187b      	adds	r3, r7, r1
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e068      	b.n	8006272 <USB_EPStartXfer+0xece>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b3e      	cmp	r3, #62	; 0x3e
 80061a6:	d81b      	bhi.n	80061e0 <USB_EPStartXfer+0xe3c>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	22e4      	movs	r2, #228	; 0xe4
 80061b0:	18ba      	adds	r2, r7, r2
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2201      	movs	r2, #1
 80061ba:	4013      	ands	r3, r2
 80061bc:	d005      	beq.n	80061ca <USB_EPStartXfer+0xe26>
 80061be:	22e4      	movs	r2, #228	; 0xe4
 80061c0:	18bb      	adds	r3, r7, r2
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	18ba      	adds	r2, r7, r2
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	23e4      	movs	r3, #228	; 0xe4
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	029b      	lsls	r3, r3, #10
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	239c      	movs	r3, #156	; 0x9c
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e048      	b.n	8006272 <USB_EPStartXfer+0xece>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	22e4      	movs	r2, #228	; 0xe4
 80061e8:	18ba      	adds	r2, r7, r2
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	221f      	movs	r2, #31
 80061f2:	4013      	ands	r3, r2
 80061f4:	d105      	bne.n	8006202 <USB_EPStartXfer+0xe5e>
 80061f6:	22e4      	movs	r2, #228	; 0xe4
 80061f8:	18bb      	adds	r3, r7, r2
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	18ba      	adds	r2, r7, r2
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	23e4      	movs	r3, #228	; 0xe4
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	029b      	lsls	r3, r3, #10
 800620c:	b29b      	uxth	r3, r3
 800620e:	4a06      	ldr	r2, [pc, #24]	; (8006228 <USB_EPStartXfer+0xe84>)
 8006210:	4313      	orrs	r3, r2
 8006212:	b29a      	uxth	r2, r3
 8006214:	239c      	movs	r3, #156	; 0x9c
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e029      	b.n	8006272 <USB_EPStartXfer+0xece>
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	00000406 	.word	0x00000406
 8006224:	ffff83ff 	.word	0xffff83ff
 8006228:	ffff8000 	.word	0xffff8000
 800622c:	00000402 	.word	0x00000402
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d11c      	bne.n	8006272 <USB_EPStartXfer+0xece>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2250      	movs	r2, #80	; 0x50
 800623c:	5a9b      	ldrh	r3, [r3, r2]
 800623e:	b29b      	uxth	r3, r3
 8006240:	001a      	movs	r2, r3
 8006242:	21a8      	movs	r1, #168	; 0xa8
 8006244:	187b      	adds	r3, r7, r1
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	189b      	adds	r3, r3, r2
 800624a:	187a      	adds	r2, r7, r1
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	00da      	lsls	r2, r3, #3
 8006254:	187b      	adds	r3, r7, r1
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	18d3      	adds	r3, r2, r3
 800625a:	4acc      	ldr	r2, [pc, #816]	; (800658c <USB_EPStartXfer+0x11e8>)
 800625c:	4694      	mov	ip, r2
 800625e:	4463      	add	r3, ip
 8006260:	21a4      	movs	r1, #164	; 0xa4
 8006262:	187a      	adds	r2, r7, r1
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	b29a      	uxth	r2, r3
 800626c:	187b      	adds	r3, r7, r1
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d100      	bne.n	800627c <USB_EPStartXfer+0xed8>
 800627a:	e1b9      	b.n	80065f0 <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	18d2      	adds	r2, r2, r3
 8006286:	219a      	movs	r1, #154	; 0x9a
 8006288:	187b      	adds	r3, r7, r1
 800628a:	8812      	ldrh	r2, [r2, #0]
 800628c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800628e:	187b      	adds	r3, r7, r1
 8006290:	881a      	ldrh	r2, [r3, #0]
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	4013      	ands	r3, r2
 8006298:	d005      	beq.n	80062a6 <USB_EPStartXfer+0xf02>
 800629a:	239a      	movs	r3, #154	; 0x9a
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	4013      	ands	r3, r2
 80062a4:	d10e      	bne.n	80062c4 <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062a6:	239a      	movs	r3, #154	; 0x9a
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	01db      	lsls	r3, r3, #7
 80062b0:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062b2:	d000      	beq.n	80062b6 <USB_EPStartXfer+0xf12>
 80062b4:	e19c      	b.n	80065f0 <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062b6:	239a      	movs	r3, #154	; 0x9a
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	2240      	movs	r2, #64	; 0x40
 80062be:	4013      	ands	r3, r2
 80062c0:	d000      	beq.n	80062c4 <USB_EPStartXfer+0xf20>
 80062c2:	e195      	b.n	80065f0 <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	18d3      	adds	r3, r2, r3
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	2098      	movs	r0, #152	; 0x98
 80062d4:	183b      	adds	r3, r7, r0
 80062d6:	49ae      	ldr	r1, [pc, #696]	; (8006590 <USB_EPStartXfer+0x11ec>)
 80062d8:	400a      	ands	r2, r1
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	183a      	adds	r2, r7, r0
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	49aa      	ldr	r1, [pc, #680]	; (8006594 <USB_EPStartXfer+0x11f0>)
 80062ec:	430a      	orrs	r2, r1
 80062ee:	b292      	uxth	r2, r2
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	e17d      	b.n	80065f0 <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	78db      	ldrb	r3, [r3, #3]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d000      	beq.n	80062fe <USB_EPStartXfer+0xf5a>
 80062fc:	e176      	b.n	80065ec <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	429a      	cmp	r2, r3
 8006308:	d90d      	bls.n	8006326 <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2186      	movs	r1, #134	; 0x86
 8006310:	0049      	lsls	r1, r1, #1
 8006312:	187a      	adds	r2, r7, r1
 8006314:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	187b      	adds	r3, r7, r1
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	619a      	str	r2, [r3, #24]
 8006324:	e008      	b.n	8006338 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2286      	movs	r2, #134	; 0x86
 800632c:	0052      	lsls	r2, r2, #1
 800632e:	18ba      	adds	r2, r7, r2
 8006330:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d000      	beq.n	8006342 <USB_EPStartXfer+0xf9e>
 8006340:	e07a      	b.n	8006438 <USB_EPStartXfer+0x1094>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	21d0      	movs	r1, #208	; 0xd0
 8006346:	187a      	adds	r2, r7, r1
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2250      	movs	r2, #80	; 0x50
 800634e:	5a9b      	ldrh	r3, [r3, r2]
 8006350:	b29b      	uxth	r3, r3
 8006352:	001a      	movs	r2, r3
 8006354:	187b      	adds	r3, r7, r1
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	189b      	adds	r3, r3, r2
 800635a:	187a      	adds	r2, r7, r1
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	00da      	lsls	r2, r3, #3
 8006364:	187b      	adds	r3, r7, r1
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	18d3      	adds	r3, r2, r3
 800636a:	4a8b      	ldr	r2, [pc, #556]	; (8006598 <USB_EPStartXfer+0x11f4>)
 800636c:	4694      	mov	ip, r2
 800636e:	4463      	add	r3, ip
 8006370:	22cc      	movs	r2, #204	; 0xcc
 8006372:	18ba      	adds	r2, r7, r2
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	2386      	movs	r3, #134	; 0x86
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d115      	bne.n	80063ae <USB_EPStartXfer+0x100a>
 8006382:	21cc      	movs	r1, #204	; 0xcc
 8006384:	187b      	adds	r3, r7, r1
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	4a83      	ldr	r2, [pc, #524]	; (800659c <USB_EPStartXfer+0x11f8>)
 800638e:	4013      	ands	r3, r2
 8006390:	b29a      	uxth	r2, r3
 8006392:	187b      	adds	r3, r7, r1
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	187b      	adds	r3, r7, r1
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4a7f      	ldr	r2, [pc, #508]	; (80065a0 <USB_EPStartXfer+0x11fc>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	187b      	adds	r3, r7, r1
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	e06a      	b.n	8006484 <USB_EPStartXfer+0x10e0>
 80063ae:	2386      	movs	r3, #134	; 0x86
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b3e      	cmp	r3, #62	; 0x3e
 80063b8:	d81d      	bhi.n	80063f6 <USB_EPStartXfer+0x1052>
 80063ba:	2286      	movs	r2, #134	; 0x86
 80063bc:	0052      	lsls	r2, r2, #1
 80063be:	18bb      	adds	r3, r7, r2
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	21e0      	movs	r1, #224	; 0xe0
 80063c6:	1879      	adds	r1, r7, r1
 80063c8:	600b      	str	r3, [r1, #0]
 80063ca:	18bb      	adds	r3, r7, r2
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2201      	movs	r2, #1
 80063d0:	4013      	ands	r3, r2
 80063d2:	d005      	beq.n	80063e0 <USB_EPStartXfer+0x103c>
 80063d4:	22e0      	movs	r2, #224	; 0xe0
 80063d6:	18bb      	adds	r3, r7, r2
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	18ba      	adds	r2, r7, r2
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	23e0      	movs	r3, #224	; 0xe0
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	029b      	lsls	r3, r3, #10
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	23cc      	movs	r3, #204	; 0xcc
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e046      	b.n	8006484 <USB_EPStartXfer+0x10e0>
 80063f6:	2286      	movs	r2, #134	; 0x86
 80063f8:	0052      	lsls	r2, r2, #1
 80063fa:	18bb      	adds	r3, r7, r2
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	21e0      	movs	r1, #224	; 0xe0
 8006402:	1879      	adds	r1, r7, r1
 8006404:	600b      	str	r3, [r1, #0]
 8006406:	18bb      	adds	r3, r7, r2
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	221f      	movs	r2, #31
 800640c:	4013      	ands	r3, r2
 800640e:	d105      	bne.n	800641c <USB_EPStartXfer+0x1078>
 8006410:	22e0      	movs	r2, #224	; 0xe0
 8006412:	18bb      	adds	r3, r7, r2
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3b01      	subs	r3, #1
 8006418:	18ba      	adds	r2, r7, r2
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	23e0      	movs	r3, #224	; 0xe0
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29b      	uxth	r3, r3
 8006428:	4a5d      	ldr	r2, [pc, #372]	; (80065a0 <USB_EPStartXfer+0x11fc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	23cc      	movs	r3, #204	; 0xcc
 8006430:	18fb      	adds	r3, r7, r3
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e025      	b.n	8006484 <USB_EPStartXfer+0x10e0>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d121      	bne.n	8006484 <USB_EPStartXfer+0x10e0>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	21d8      	movs	r1, #216	; 0xd8
 8006444:	187a      	adds	r2, r7, r1
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2250      	movs	r2, #80	; 0x50
 800644c:	5a9b      	ldrh	r3, [r3, r2]
 800644e:	b29b      	uxth	r3, r3
 8006450:	001a      	movs	r2, r3
 8006452:	187b      	adds	r3, r7, r1
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	189b      	adds	r3, r3, r2
 8006458:	187a      	adds	r2, r7, r1
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	00da      	lsls	r2, r3, #3
 8006462:	187b      	adds	r3, r7, r1
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	18d3      	adds	r3, r2, r3
 8006468:	4a4b      	ldr	r2, [pc, #300]	; (8006598 <USB_EPStartXfer+0x11f4>)
 800646a:	4694      	mov	ip, r2
 800646c:	4463      	add	r3, ip
 800646e:	21d4      	movs	r1, #212	; 0xd4
 8006470:	187a      	adds	r2, r7, r1
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	2386      	movs	r3, #134	; 0x86
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	b29a      	uxth	r2, r3
 800647e:	187b      	adds	r3, r7, r1
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22c8      	movs	r2, #200	; 0xc8
 8006488:	18ba      	adds	r2, r7, r2
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d000      	beq.n	8006496 <USB_EPStartXfer+0x10f2>
 8006494:	e086      	b.n	80065a4 <USB_EPStartXfer+0x1200>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	21c0      	movs	r1, #192	; 0xc0
 800649a:	187a      	adds	r2, r7, r1
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2250      	movs	r2, #80	; 0x50
 80064a2:	5a9b      	ldrh	r3, [r3, r2]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	001a      	movs	r2, r3
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	189b      	adds	r3, r3, r2
 80064ae:	187a      	adds	r2, r7, r1
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	00da      	lsls	r2, r3, #3
 80064b8:	187b      	adds	r3, r7, r1
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	18d3      	adds	r3, r2, r3
 80064be:	4a33      	ldr	r2, [pc, #204]	; (800658c <USB_EPStartXfer+0x11e8>)
 80064c0:	4694      	mov	ip, r2
 80064c2:	4463      	add	r3, ip
 80064c4:	22bc      	movs	r2, #188	; 0xbc
 80064c6:	18ba      	adds	r2, r7, r2
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	2386      	movs	r3, #134	; 0x86
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	18fb      	adds	r3, r7, r3
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <USB_EPStartXfer+0x115e>
 80064d6:	21bc      	movs	r1, #188	; 0xbc
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <USB_EPStartXfer+0x11f8>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	187b      	adds	r3, r7, r1
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	4a2a      	ldr	r2, [pc, #168]	; (80065a0 <USB_EPStartXfer+0x11fc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	187b      	adds	r3, r7, r1
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e076      	b.n	80065f0 <USB_EPStartXfer+0x124c>
 8006502:	2386      	movs	r3, #134	; 0x86
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b3e      	cmp	r3, #62	; 0x3e
 800650c:	d81d      	bhi.n	800654a <USB_EPStartXfer+0x11a6>
 800650e:	2286      	movs	r2, #134	; 0x86
 8006510:	0052      	lsls	r2, r2, #1
 8006512:	18bb      	adds	r3, r7, r2
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	21dc      	movs	r1, #220	; 0xdc
 800651a:	1879      	adds	r1, r7, r1
 800651c:	600b      	str	r3, [r1, #0]
 800651e:	18bb      	adds	r3, r7, r2
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	4013      	ands	r3, r2
 8006526:	d005      	beq.n	8006534 <USB_EPStartXfer+0x1190>
 8006528:	22dc      	movs	r2, #220	; 0xdc
 800652a:	18bb      	adds	r3, r7, r2
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	18ba      	adds	r2, r7, r2
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	23dc      	movs	r3, #220	; 0xdc
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	029b      	lsls	r3, r3, #10
 800653e:	b29a      	uxth	r2, r3
 8006540:	23bc      	movs	r3, #188	; 0xbc
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e052      	b.n	80065f0 <USB_EPStartXfer+0x124c>
 800654a:	2286      	movs	r2, #134	; 0x86
 800654c:	0052      	lsls	r2, r2, #1
 800654e:	18bb      	adds	r3, r7, r2
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	21dc      	movs	r1, #220	; 0xdc
 8006556:	1879      	adds	r1, r7, r1
 8006558:	600b      	str	r3, [r1, #0]
 800655a:	18bb      	adds	r3, r7, r2
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	221f      	movs	r2, #31
 8006560:	4013      	ands	r3, r2
 8006562:	d105      	bne.n	8006570 <USB_EPStartXfer+0x11cc>
 8006564:	22dc      	movs	r2, #220	; 0xdc
 8006566:	18bb      	adds	r3, r7, r2
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3b01      	subs	r3, #1
 800656c:	18ba      	adds	r2, r7, r2
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	23dc      	movs	r3, #220	; 0xdc
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29b      	uxth	r3, r3
 800657c:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <USB_EPStartXfer+0x11fc>)
 800657e:	4313      	orrs	r3, r2
 8006580:	b29a      	uxth	r2, r3
 8006582:	23bc      	movs	r3, #188	; 0xbc
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	e031      	b.n	80065f0 <USB_EPStartXfer+0x124c>
 800658c:	00000406 	.word	0x00000406
 8006590:	ffff8f8f 	.word	0xffff8f8f
 8006594:	ffff80c0 	.word	0xffff80c0
 8006598:	00000402 	.word	0x00000402
 800659c:	ffff83ff 	.word	0xffff83ff
 80065a0:	ffff8000 	.word	0xffff8000
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d121      	bne.n	80065f0 <USB_EPStartXfer+0x124c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2250      	movs	r2, #80	; 0x50
 80065b0:	5a9b      	ldrh	r3, [r3, r2]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	001a      	movs	r2, r3
 80065b6:	21c8      	movs	r1, #200	; 0xc8
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	189b      	adds	r3, r3, r2
 80065be:	187a      	adds	r2, r7, r1
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	00da      	lsls	r2, r3, #3
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	18d3      	adds	r3, r2, r3
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <USB_EPStartXfer+0x12a0>)
 80065d0:	4694      	mov	ip, r2
 80065d2:	4463      	add	r3, ip
 80065d4:	21c4      	movs	r1, #196	; 0xc4
 80065d6:	187a      	adds	r2, r7, r1
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	2386      	movs	r3, #134	; 0x86
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	e001      	b.n	80065f0 <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e025      	b.n	800663c <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	18d3      	adds	r3, r2, r3
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	208e      	movs	r0, #142	; 0x8e
 8006600:	183b      	adds	r3, r7, r0
 8006602:	4911      	ldr	r1, [pc, #68]	; (8006648 <USB_EPStartXfer+0x12a4>)
 8006604:	400a      	ands	r2, r1
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	183b      	adds	r3, r7, r0
 800660a:	183a      	adds	r2, r7, r0
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	0149      	lsls	r1, r1, #5
 8006612:	404a      	eors	r2, r1
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	183b      	adds	r3, r7, r0
 8006618:	183a      	adds	r2, r7, r0
 800661a:	8812      	ldrh	r2, [r2, #0]
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	0189      	lsls	r1, r1, #6
 8006620:	404a      	eors	r2, r1
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	18d3      	adds	r3, r2, r3
 800662e:	183a      	adds	r2, r7, r0
 8006630:	8812      	ldrh	r2, [r2, #0]
 8006632:	4906      	ldr	r1, [pc, #24]	; (800664c <USB_EPStartXfer+0x12a8>)
 8006634:	430a      	orrs	r2, r1
 8006636:	b292      	uxth	r2, r2
 8006638:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b044      	add	sp, #272	; 0x110
 8006642:	bdb0      	pop	{r4, r5, r7, pc}
 8006644:	00000406 	.word	0x00000406
 8006648:	ffffbf8f 	.word	0xffffbf8f
 800664c:	ffff8080 	.word	0xffff8080

08006650 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01d      	beq.n	800669e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	18d3      	adds	r3, r2, r3
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29a      	uxth	r2, r3
 8006670:	200c      	movs	r0, #12
 8006672:	183b      	adds	r3, r7, r0
 8006674:	491b      	ldr	r1, [pc, #108]	; (80066e4 <USB_EPSetStall+0x94>)
 8006676:	400a      	ands	r2, r1
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	183b      	adds	r3, r7, r0
 800667c:	183a      	adds	r2, r7, r0
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	2110      	movs	r1, #16
 8006682:	404a      	eors	r2, r1
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	18d3      	adds	r3, r2, r3
 8006690:	183a      	adds	r2, r7, r0
 8006692:	8812      	ldrh	r2, [r2, #0]
 8006694:	4914      	ldr	r1, [pc, #80]	; (80066e8 <USB_EPSetStall+0x98>)
 8006696:	430a      	orrs	r2, r1
 8006698:	b292      	uxth	r2, r2
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e01d      	b.n	80066da <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	18d3      	adds	r3, r2, r3
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	200e      	movs	r0, #14
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	490e      	ldr	r1, [pc, #56]	; (80066ec <USB_EPSetStall+0x9c>)
 80066b2:	400a      	ands	r2, r1
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	183b      	adds	r3, r7, r0
 80066b8:	183a      	adds	r2, r7, r0
 80066ba:	8812      	ldrh	r2, [r2, #0]
 80066bc:	2180      	movs	r1, #128	; 0x80
 80066be:	0149      	lsls	r1, r1, #5
 80066c0:	404a      	eors	r2, r1
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	18d3      	adds	r3, r2, r3
 80066ce:	183a      	adds	r2, r7, r0
 80066d0:	8812      	ldrh	r2, [r2, #0]
 80066d2:	4905      	ldr	r1, [pc, #20]	; (80066e8 <USB_EPSetStall+0x98>)
 80066d4:	430a      	orrs	r2, r1
 80066d6:	b292      	uxth	r2, r2
 80066d8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b004      	add	sp, #16
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	ffff8fbf 	.word	0xffff8fbf
 80066e8:	ffff8080 	.word	0xffff8080
 80066ec:	ffffbf8f 	.word	0xffffbf8f

080066f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d000      	beq.n	8006704 <USB_EPClearStall+0x14>
 8006702:	e095      	b.n	8006830 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d046      	beq.n	800679a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	18d2      	adds	r2, r2, r3
 8006716:	2110      	movs	r1, #16
 8006718:	187b      	adds	r3, r7, r1
 800671a:	8812      	ldrh	r2, [r2, #0]
 800671c:	801a      	strh	r2, [r3, #0]
 800671e:	187b      	adds	r3, r7, r1
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	2240      	movs	r2, #64	; 0x40
 8006724:	4013      	ands	r3, r2
 8006726:	d016      	beq.n	8006756 <USB_EPClearStall+0x66>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	18d3      	adds	r3, r2, r3
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29a      	uxth	r2, r3
 8006736:	200e      	movs	r0, #14
 8006738:	183b      	adds	r3, r7, r0
 800673a:	4940      	ldr	r1, [pc, #256]	; (800683c <USB_EPClearStall+0x14c>)
 800673c:	400a      	ands	r2, r1
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	18d3      	adds	r3, r2, r3
 800674a:	183a      	adds	r2, r7, r0
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	493c      	ldr	r1, [pc, #240]	; (8006840 <USB_EPClearStall+0x150>)
 8006750:	430a      	orrs	r2, r1
 8006752:	b292      	uxth	r2, r2
 8006754:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	78db      	ldrb	r3, [r3, #3]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d068      	beq.n	8006830 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	18d3      	adds	r3, r2, r3
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29a      	uxth	r2, r3
 800676c:	200c      	movs	r0, #12
 800676e:	183b      	adds	r3, r7, r0
 8006770:	4934      	ldr	r1, [pc, #208]	; (8006844 <USB_EPClearStall+0x154>)
 8006772:	400a      	ands	r2, r1
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	183b      	adds	r3, r7, r0
 8006778:	183a      	adds	r2, r7, r0
 800677a:	8812      	ldrh	r2, [r2, #0]
 800677c:	2120      	movs	r1, #32
 800677e:	404a      	eors	r2, r1
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	18d3      	adds	r3, r2, r3
 800678c:	183a      	adds	r2, r7, r0
 800678e:	8812      	ldrh	r2, [r2, #0]
 8006790:	492d      	ldr	r1, [pc, #180]	; (8006848 <USB_EPClearStall+0x158>)
 8006792:	430a      	orrs	r2, r1
 8006794:	b292      	uxth	r2, r2
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e04a      	b.n	8006830 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	18d2      	adds	r2, r2, r3
 80067a4:	2116      	movs	r1, #22
 80067a6:	187b      	adds	r3, r7, r1
 80067a8:	8812      	ldrh	r2, [r2, #0]
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	187b      	adds	r3, r7, r1
 80067ae:	881a      	ldrh	r2, [r3, #0]
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	01db      	lsls	r3, r3, #7
 80067b4:	4013      	ands	r3, r2
 80067b6:	d016      	beq.n	80067e6 <USB_EPClearStall+0xf6>
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	18d3      	adds	r3, r2, r3
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	2014      	movs	r0, #20
 80067c8:	183b      	adds	r3, r7, r0
 80067ca:	491c      	ldr	r1, [pc, #112]	; (800683c <USB_EPClearStall+0x14c>)
 80067cc:	400a      	ands	r2, r1
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	18d3      	adds	r3, r2, r3
 80067da:	183a      	adds	r2, r7, r0
 80067dc:	8812      	ldrh	r2, [r2, #0]
 80067de:	491b      	ldr	r1, [pc, #108]	; (800684c <USB_EPClearStall+0x15c>)
 80067e0:	430a      	orrs	r2, r1
 80067e2:	b292      	uxth	r2, r2
 80067e4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	18d3      	adds	r3, r2, r3
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	2012      	movs	r0, #18
 80067f6:	183b      	adds	r3, r7, r0
 80067f8:	4915      	ldr	r1, [pc, #84]	; (8006850 <USB_EPClearStall+0x160>)
 80067fa:	400a      	ands	r2, r1
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	183b      	adds	r3, r7, r0
 8006800:	183a      	adds	r2, r7, r0
 8006802:	8812      	ldrh	r2, [r2, #0]
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	0149      	lsls	r1, r1, #5
 8006808:	404a      	eors	r2, r1
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	183b      	adds	r3, r7, r0
 800680e:	183a      	adds	r2, r7, r0
 8006810:	8812      	ldrh	r2, [r2, #0]
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	0189      	lsls	r1, r1, #6
 8006816:	404a      	eors	r2, r1
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	18d3      	adds	r3, r2, r3
 8006824:	183a      	adds	r2, r7, r0
 8006826:	8812      	ldrh	r2, [r2, #0]
 8006828:	4907      	ldr	r1, [pc, #28]	; (8006848 <USB_EPClearStall+0x158>)
 800682a:	430a      	orrs	r2, r1
 800682c:	b292      	uxth	r2, r2
 800682e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b006      	add	sp, #24
 8006838:	bd80      	pop	{r7, pc}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	ffff8f8f 	.word	0xffff8f8f
 8006840:	ffff80c0 	.word	0xffff80c0
 8006844:	ffff8fbf 	.word	0xffff8fbf
 8006848:	ffff8080 	.word	0xffff8080
 800684c:	ffffc080 	.word	0xffffc080
 8006850:	ffffbf8f 	.word	0xffffbf8f

08006854 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	000a      	movs	r2, r1
 800685e:	1cfb      	adds	r3, r7, #3
 8006860:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006862:	1cfb      	adds	r3, r7, #3
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	224c      	movs	r2, #76	; 0x4c
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}

0800687c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2258      	movs	r2, #88	; 0x58
 8006888:	5a9b      	ldrh	r3, [r3, r2]
 800688a:	b29b      	uxth	r3, r3
 800688c:	4a05      	ldr	r2, [pc, #20]	; (80068a4 <USB_DevConnect+0x28>)
 800688e:	4313      	orrs	r3, r2
 8006890:	b299      	uxth	r1, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2258      	movs	r2, #88	; 0x58
 8006896:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b002      	add	sp, #8
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	ffff8000 	.word	0xffff8000

080068a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2244      	movs	r2, #68	; 0x44
 80068b4:	5a9b      	ldrh	r3, [r3, r2]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068ba:	68fb      	ldr	r3, [r7, #12]
}
 80068bc:	0018      	movs	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	b004      	add	sp, #16
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08c      	sub	sp, #48	; 0x30
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	0019      	movs	r1, r3
 80068d0:	1dbb      	adds	r3, r7, #6
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	1d3b      	adds	r3, r7, #4
 80068d6:	1c0a      	adds	r2, r1, #0
 80068d8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068ec:	1dbb      	adds	r3, r7, #6
 80068ee:	881a      	ldrh	r2, [r3, #0]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	18d3      	adds	r3, r2, r3
 80068f4:	2280      	movs	r2, #128	; 0x80
 80068f6:	00d2      	lsls	r2, r2, #3
 80068f8:	4694      	mov	ip, r2
 80068fa:	4463      	add	r3, ip
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006902:	e01b      	b.n	800693c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	3301      	adds	r3, #1
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	b29b      	uxth	r3, r3
 800691a:	001a      	movs	r2, r3
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	b29a      	uxth	r2, r3
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	3302      	adds	r3, #2
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	3301      	adds	r3, #1
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	3b01      	subs	r3, #1
 800693a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e0      	bne.n	8006904 <USB_WritePMA+0x40>
  }
}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	46bd      	mov	sp, r7
 8006946:	b00c      	add	sp, #48	; 0x30
 8006948:	bd80      	pop	{r7, pc}

0800694a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b08a      	sub	sp, #40	; 0x28
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	0019      	movs	r1, r3
 8006956:	1dbb      	adds	r3, r7, #6
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	1d3b      	adds	r3, r7, #4
 800695c:	1c0a      	adds	r2, r1, #0
 800695e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006972:	1dbb      	adds	r3, r7, #6
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	18d3      	adds	r3, r2, r3
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	00d2      	lsls	r2, r2, #3
 800697e:	4694      	mov	ip, r2
 8006980:	4463      	add	r3, ip
 8006982:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
 8006988:	e018      	b.n	80069bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	3302      	adds	r3, #2
 8006996:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	3b01      	subs	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e3      	bne.n	800698a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	2201      	movs	r2, #1
 80069c8:	4013      	ands	r3, r2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	701a      	strb	r2, [r3, #0]
  }
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b00a      	add	sp, #40	; 0x28
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	000a      	movs	r2, r1
 80069f2:	1cfb      	adds	r3, r7, #3
 80069f4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80069f6:	230f      	movs	r3, #15
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7c1b      	ldrb	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d116      	bne.n	8006a34 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	2181      	movs	r1, #129	; 0x81
 8006a10:	f001 ff7e 	bl	8008910 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a1a:	2380      	movs	r3, #128	; 0x80
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	2101      	movs	r1, #1
 8006a24:	f001 ff74 	bl	8008910 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	23ac      	movs	r3, #172	; 0xac
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	2101      	movs	r1, #1
 8006a30:	50d1      	str	r1, [r2, r3]
 8006a32:	e013      	b.n	8006a5c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	2202      	movs	r2, #2
 8006a3a:	2181      	movs	r1, #129	; 0x81
 8006a3c:	f001 ff68 	bl	8008910 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	f001 ff5f 	bl	8008910 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	23ac      	movs	r3, #172	; 0xac
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	2101      	movs	r1, #1
 8006a5a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	2308      	movs	r3, #8
 8006a60:	2203      	movs	r2, #3
 8006a62:	2182      	movs	r1, #130	; 0x82
 8006a64:	f001 ff54 	bl	8008910 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006a6e:	2387      	movs	r3, #135	; 0x87
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	0018      	movs	r0, r3
 8006a74:	f002 f8ea 	bl	8008c4c <USBD_static_malloc>
 8006a78:	0001      	movs	r1, r0
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	23a4      	movs	r3, #164	; 0xa4
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	23a4      	movs	r3, #164	; 0xa4
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	58d3      	ldr	r3, [r2, r3]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8006a8e:	230f      	movs	r3, #15
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e02c      	b.n	8006af2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	23a4      	movs	r3, #164	; 0xa4
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	58d3      	ldr	r3, [r2, r3]
 8006aa0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	23a5      	movs	r3, #165	; 0xa5
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	58d3      	ldr	r3, [r2, r3]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	2385      	movs	r3, #133	; 0x85
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	2386      	movs	r3, #134	; 0x86
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	2100      	movs	r1, #0
 8006ac0:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7c1b      	ldrb	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	2381      	movs	r3, #129	; 0x81
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	58d2      	ldr	r2, [r2, r3]
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	f002 f869 	bl	8008bb0 <USBD_LL_PrepareReceive>
 8006ade:	e008      	b.n	8006af2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	2381      	movs	r3, #129	; 0x81
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	58d2      	ldr	r2, [r2, r3]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	2101      	movs	r1, #1
 8006aee:	f002 f85f 	bl	8008bb0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006af2:	230f      	movs	r3, #15
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	781b      	ldrb	r3, [r3, #0]
}
 8006af8:	0018      	movs	r0, r3
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b004      	add	sp, #16
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	000a      	movs	r2, r1
 8006b0a:	1cfb      	adds	r3, r7, #3
 8006b0c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8006b0e:	230f      	movs	r3, #15
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2181      	movs	r1, #129	; 0x81
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f001 ff2f 	bl	800897e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2101      	movs	r1, #1
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f001 ff27 	bl	800897e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	23ac      	movs	r3, #172	; 0xac
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	2100      	movs	r1, #0
 8006b38:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2182      	movs	r1, #130	; 0x82
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f001 ff1d 	bl	800897e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	23a4      	movs	r3, #164	; 0xa4
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	58d3      	ldr	r3, [r2, r3]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	23a5      	movs	r3, #165	; 0xa5
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	58d3      	ldr	r3, [r2, r3]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	23a4      	movs	r3, #164	; 0xa4
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	58d3      	ldr	r3, [r2, r3]
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f002 f87a 	bl	8008c64 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	23a4      	movs	r3, #164	; 0xa4
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	2100      	movs	r1, #0
 8006b78:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8006b7a:	230f      	movs	r3, #15
 8006b7c:	18fb      	adds	r3, r7, r3
 8006b7e:	781b      	ldrb	r3, [r3, #0]
}
 8006b80:	0018      	movs	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b004      	add	sp, #16
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	23a4      	movs	r3, #164	; 0xa4
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	58d3      	ldr	r3, [r2, r3]
 8006b9a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b9c:	230f      	movs	r3, #15
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	18fb      	adds	r3, r7, r3
 8006ba8:	2200      	movs	r2, #0
 8006baa:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8006bac:	2317      	movs	r3, #23
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	001a      	movs	r2, r3
 8006bba:	2360      	movs	r3, #96	; 0x60
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d03d      	beq.n	8006c3c <USBD_CDC_Setup+0xb4>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d000      	beq.n	8006bc6 <USBD_CDC_Setup+0x3e>
 8006bc4:	e092      	b.n	8006cec <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d02b      	beq.n	8006c26 <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da12      	bge.n	8006bfe <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	23a5      	movs	r3, #165	; 0xa5
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	58d3      	ldr	r3, [r2, r3]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006be6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	88d2      	ldrh	r2, [r2, #6]
 8006bec:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bee:	6939      	ldr	r1, [r7, #16]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	88da      	ldrh	r2, [r3, #6]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f001 fadc 	bl	80081b4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006bfc:	e081      	b.n	8006d02 <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	7859      	ldrb	r1, [r3, #1]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	88db      	ldrh	r3, [r3, #6]
 8006c0e:	b2d9      	uxtb	r1, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4a3f      	ldr	r2, [pc, #252]	; (8006d10 <USBD_CDC_Setup+0x188>)
 8006c14:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c16:	6939      	ldr	r1, [r7, #16]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88da      	ldrh	r2, [r3, #6]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f001 fafb 	bl	800821a <USBD_CtlPrepareRx>
    break;
 8006c24:	e06d      	b.n	8006d02 <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	23a5      	movs	r3, #165	; 0xa5
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	58d3      	ldr	r3, [r2, r3]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	7850      	ldrb	r0, [r2, #1]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	4798      	blx	r3
    break;
 8006c3a:	e062      	b.n	8006d02 <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b0a      	cmp	r3, #10
 8006c42:	d01c      	beq.n	8006c7e <USBD_CDC_Setup+0xf6>
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	d033      	beq.n	8006cb0 <USBD_CDC_Setup+0x128>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d142      	bne.n	8006cd2 <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	239d      	movs	r3, #157	; 0x9d
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	5cd3      	ldrb	r3, [r2, r3]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d107      	bne.n	8006c68 <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c58:	230c      	movs	r3, #12
 8006c5a:	18f9      	adds	r1, r7, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	0018      	movs	r0, r3
 8006c62:	f001 faa7 	bl	80081b4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c66:	e040      	b.n	8006cea <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f001 fa21 	bl	80080b6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c74:	2317      	movs	r3, #23
 8006c76:	18fb      	adds	r3, r7, r3
 8006c78:	2202      	movs	r2, #2
 8006c7a:	701a      	strb	r2, [r3, #0]
      break;
 8006c7c:	e035      	b.n	8006cea <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	239d      	movs	r3, #157	; 0x9d
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	5cd3      	ldrb	r3, [r2, r3]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d107      	bne.n	8006c9a <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006c8a:	230f      	movs	r3, #15
 8006c8c:	18f9      	adds	r1, r7, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	0018      	movs	r0, r3
 8006c94:	f001 fa8e 	bl	80081b4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c98:	e027      	b.n	8006cea <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	0011      	movs	r1, r2
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f001 fa08 	bl	80080b6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006ca6:	2317      	movs	r3, #23
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	2202      	movs	r2, #2
 8006cac:	701a      	strb	r2, [r3, #0]
      break;
 8006cae:	e01c      	b.n	8006cea <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	239d      	movs	r3, #157	; 0x9d
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d015      	beq.n	8006ce8 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0011      	movs	r1, r2
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f001 f9f7 	bl	80080b6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006cc8:	2317      	movs	r3, #23
 8006cca:	18fb      	adds	r3, r7, r3
 8006ccc:	2202      	movs	r2, #2
 8006cce:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006cd0:	e00a      	b.n	8006ce8 <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	0011      	movs	r1, r2
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f001 f9ec 	bl	80080b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cde:	2317      	movs	r3, #23
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	e000      	b.n	8006cea <USBD_CDC_Setup+0x162>
      break;
 8006ce8:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006cea:	e00a      	b.n	8006d02 <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0011      	movs	r1, r2
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f001 f9df 	bl	80080b6 <USBD_CtlError>
    ret = USBD_FAIL;
 8006cf8:	2317      	movs	r3, #23
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	701a      	strb	r2, [r3, #0]
    break;
 8006d00:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006d02:	2317      	movs	r3, #23
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	781b      	ldrb	r3, [r3, #0]
}
 8006d08:	0018      	movs	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b006      	add	sp, #24
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	00000201 	.word	0x00000201

08006d14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	000a      	movs	r2, r1
 8006d1e:	1cfb      	adds	r3, r7, #3
 8006d20:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	23a4      	movs	r3, #164	; 0xa4
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	58d3      	ldr	r3, [r2, r3]
 8006d2a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	23a6      	movs	r3, #166	; 0xa6
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	58d3      	ldr	r3, [r2, r3]
 8006d34:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	23a4      	movs	r3, #164	; 0xa4
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	58d3      	ldr	r3, [r2, r3]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03e      	beq.n	8006dc0 <USBD_CDC_DataIn+0xac>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d42:	1cfb      	adds	r3, r7, #3
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	0013      	movs	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	189b      	adds	r3, r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	18cb      	adds	r3, r1, r3
 8006d52:	331c      	adds	r3, #28
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02b      	beq.n	8006db2 <USBD_CDC_DataIn+0x9e>
 8006d5a:	1cfb      	adds	r3, r7, #3
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	0013      	movs	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	189b      	adds	r3, r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18cb      	adds	r3, r1, r3
 8006d6a:	331c      	adds	r3, #28
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	1cfb      	adds	r3, r7, #3
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	0013      	movs	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	189b      	adds	r3, r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	18cb      	adds	r3, r1, r3
 8006d7e:	3338      	adds	r3, #56	; 0x38
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	0019      	movs	r1, r3
 8006d84:	f7f9 fa46 	bl	8000214 <__aeabi_uidivmod>
 8006d88:	1e0b      	subs	r3, r1, #0
 8006d8a:	d112      	bne.n	8006db2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006d8c:	1cfb      	adds	r3, r7, #3
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	0013      	movs	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	18cb      	adds	r3, r1, r3
 8006d9c:	331c      	adds	r3, #28
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006da2:	1cfb      	adds	r3, r7, #3
 8006da4:	7819      	ldrb	r1, [r3, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	2300      	movs	r3, #0
 8006daa:	2200      	movs	r2, #0
 8006dac:	f001 fec8 	bl	8008b40 <USBD_LL_Transmit>
 8006db0:	e004      	b.n	8006dbc <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	2385      	movs	r3, #133	; 0x85
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	2100      	movs	r1, #0
 8006dba:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	000a      	movs	r2, r1
 8006dd4:	1cfb      	adds	r3, r7, #3
 8006dd6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	23a4      	movs	r3, #164	; 0xa4
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	58d3      	ldr	r3, [r2, r3]
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006de2:	1cfb      	adds	r3, r7, #3
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f001 ff18 	bl	8008c20 <USBD_LL_GetRxDataSize>
 8006df0:	0001      	movs	r1, r0
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	2383      	movs	r3, #131	; 0x83
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	23a4      	movs	r3, #164	; 0xa4
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	58d3      	ldr	r3, [r2, r3]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	23a5      	movs	r3, #165	; 0xa5
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	58d3      	ldr	r3, [r2, r3]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68f9      	ldr	r1, [r7, #12]
 8006e12:	2281      	movs	r2, #129	; 0x81
 8006e14:	0092      	lsls	r2, r2, #2
 8006e16:	5888      	ldr	r0, [r1, r2]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	2183      	movs	r1, #131	; 0x83
 8006e1c:	0089      	lsls	r1, r1, #2
 8006e1e:	468c      	mov	ip, r1
 8006e20:	4462      	add	r2, ip
 8006e22:	0011      	movs	r1, r2
 8006e24:	4798      	blx	r3

    return USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b004      	add	sp, #16
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	23a4      	movs	r3, #164	; 0xa4
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	58d3      	ldr	r3, [r2, r3]
 8006e44:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	23a5      	movs	r3, #165	; 0xa5
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	58d3      	ldr	r3, [r2, r3]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01a      	beq.n	8006e88 <USBD_CDC_EP0_RxReady+0x54>
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	5cd3      	ldrb	r3, [r2, r3]
 8006e5a:	2bff      	cmp	r3, #255	; 0xff
 8006e5c:	d014      	beq.n	8006e88 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	23a5      	movs	r3, #165	; 0xa5
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	58d3      	ldr	r3, [r2, r3]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	0092      	lsls	r2, r2, #2
 8006e6e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8006e70:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4907      	ldr	r1, [pc, #28]	; (8006e94 <USBD_CDC_EP0_RxReady+0x60>)
 8006e76:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	0021      	movs	r1, r4
 8006e7c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	21ff      	movs	r1, #255	; 0xff
 8006e86:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b005      	add	sp, #20
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	00000201 	.word	0x00000201

08006e98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2243      	movs	r2, #67	; 0x43
 8006ea4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ea6:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b002      	add	sp, #8
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000094 	.word	0x20000094

08006eb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2243      	movs	r2, #67	; 0x43
 8006ec0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ec2:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b002      	add	sp, #8
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000050 	.word	0x20000050

08006ed0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2243      	movs	r2, #67	; 0x43
 8006edc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006ede:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	200000d8 	.word	0x200000d8

08006eec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006efa:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8006efc:	0018      	movs	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b002      	add	sp, #8
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2000000c 	.word	0x2000000c

08006f08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f12:	230f      	movs	r3, #15
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	23a5      	movs	r3, #165	; 0xa5
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8006f2a:	230f      	movs	r3, #15
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006f32:	230f      	movs	r3, #15
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	781b      	ldrb	r3, [r3, #0]
}
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b004      	add	sp, #16
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	1dbb      	adds	r3, r7, #6
 8006f4c:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	23a4      	movs	r3, #164	; 0xa4
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	58d3      	ldr	r3, [r2, r3]
 8006f56:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	2382      	movs	r3, #130	; 0x82
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8006f62:	1dbb      	adds	r3, r7, #6
 8006f64:	8819      	ldrh	r1, [r3, #0]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	2384      	movs	r3, #132	; 0x84
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b006      	add	sp, #24
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	23a4      	movs	r3, #164	; 0xa4
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	58d3      	ldr	r3, [r2, r3]
 8006f8a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	2381      	movs	r3, #129	; 0x81
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	23a4      	movs	r3, #164	; 0xa4
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	58d3      	ldr	r3, [r2, r3]
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	23a4      	movs	r3, #164	; 0xa4
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	58d3      	ldr	r3, [r2, r3]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d019      	beq.n	8006ff2 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7c1b      	ldrb	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	2381      	movs	r3, #129	; 0x81
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	58d2      	ldr	r2, [r2, r3]
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	f001 fdeb 	bl	8008bb0 <USBD_LL_PrepareReceive>
 8006fda:	e008      	b.n	8006fee <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	2381      	movs	r3, #129	; 0x81
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	58d2      	ldr	r2, [r2, r3]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	2101      	movs	r1, #1
 8006fea:	f001 fde1 	bl	8008bb0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
  }
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b004      	add	sp, #16
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	1dfb      	adds	r3, r7, #7
 8007008:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007010:	2302      	movs	r3, #2
 8007012:	e020      	b.n	8007056 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	23a3      	movs	r3, #163	; 0xa3
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	58d3      	ldr	r3, [r2, r3]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	23a3      	movs	r3, #163	; 0xa3
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	2100      	movs	r1, #0
 8007028:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	23a2      	movs	r3, #162	; 0xa2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	239d      	movs	r3, #157	; 0x9d
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	2101      	movs	r1, #1
 8007042:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	1dfa      	adds	r2, r7, #7
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	0018      	movs	r0, r3
 8007050:	f001 fbd4 	bl	80087fc <USBD_LL_Init>

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	0018      	movs	r0, r3
 8007058:	46bd      	mov	sp, r7
 800705a:	b004      	add	sp, #16
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007068:	230f      	movs	r3, #15
 800706a:	18fb      	adds	r3, r7, r3
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	23a3      	movs	r3, #163	; 0xa3
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007080:	230f      	movs	r3, #15
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e003      	b.n	8007092 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800708a:	230f      	movs	r3, #15
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2202      	movs	r2, #2
 8007090:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007092:	230f      	movs	r3, #15
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	781b      	ldrb	r3, [r3, #0]
}
 8007098:	0018      	movs	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	b004      	add	sp, #16
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f001 fc0a 	bl	80088c4 <USBD_LL_Start>

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	0018      	movs	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b002      	add	sp, #8
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	0018      	movs	r0, r3
 80070c6:	46bd      	mov	sp, r7
 80070c8:	b002      	add	sp, #8
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	000a      	movs	r2, r1
 80070d6:	1cfb      	adds	r3, r7, #3
 80070d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80070da:	230f      	movs	r3, #15
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	2202      	movs	r2, #2
 80070e0:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	23a3      	movs	r3, #163	; 0xa3
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	58d3      	ldr	r3, [r2, r3]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	23a3      	movs	r3, #163	; 0xa3
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	58d3      	ldr	r3, [r2, r3]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	1cfa      	adds	r2, r7, #3
 80070fa:	7811      	ldrb	r1, [r2, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	0010      	movs	r0, r2
 8007100:	4798      	blx	r3
 8007102:	1e03      	subs	r3, r0, #0
 8007104:	d103      	bne.n	800710e <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8007106:	230f      	movs	r3, #15
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800710e:	230f      	movs	r3, #15
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	781b      	ldrb	r3, [r3, #0]
}
 8007114:	0018      	movs	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	b004      	add	sp, #16
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	000a      	movs	r2, r1
 8007126:	1cfb      	adds	r3, r7, #3
 8007128:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	23a3      	movs	r3, #163	; 0xa3
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	58d3      	ldr	r3, [r2, r3]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	1cfa      	adds	r2, r7, #3
 8007136:	7811      	ldrb	r1, [r2, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	0010      	movs	r0, r2
 800713c:	4798      	blx	r3
  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b002      	add	sp, #8
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	22a0      	movs	r2, #160	; 0xa0
 8007156:	0092      	lsls	r2, r2, #2
 8007158:	4694      	mov	ip, r2
 800715a:	4463      	add	r3, ip
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f000 ff6d 	bl	8008040 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	239b      	movs	r3, #155	; 0x9b
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	2101      	movs	r1, #1
 800716e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a22      	ldr	r2, [pc, #136]	; (80071fc <USBD_LL_SetupStage+0xb4>)
 8007174:	5a9b      	ldrh	r3, [r3, r2]
 8007176:	0019      	movs	r1, r3
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	239c      	movs	r3, #156	; 0x9c
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	23a0      	movs	r3, #160	; 0xa0
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	001a      	movs	r2, r3
 800718a:	231f      	movs	r3, #31
 800718c:	4013      	ands	r3, r2
 800718e:	2b01      	cmp	r3, #1
 8007190:	d00d      	beq.n	80071ae <USBD_LL_SetupStage+0x66>
 8007192:	d302      	bcc.n	800719a <USBD_LL_SetupStage+0x52>
 8007194:	2b02      	cmp	r3, #2
 8007196:	d014      	beq.n	80071c2 <USBD_LL_SetupStage+0x7a>
 8007198:	e01d      	b.n	80071d6 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	22a0      	movs	r2, #160	; 0xa0
 800719e:	0092      	lsls	r2, r2, #2
 80071a0:	189a      	adds	r2, r3, r2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	0011      	movs	r1, r2
 80071a6:	0018      	movs	r0, r3
 80071a8:	f000 fa0a 	bl	80075c0 <USBD_StdDevReq>
    break;
 80071ac:	e020      	b.n	80071f0 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	22a0      	movs	r2, #160	; 0xa0
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	189a      	adds	r2, r3, r2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0011      	movs	r1, r2
 80071ba:	0018      	movs	r0, r3
 80071bc:	f000 fa72 	bl	80076a4 <USBD_StdItfReq>
    break;
 80071c0:	e016      	b.n	80071f0 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	22a0      	movs	r2, #160	; 0xa0
 80071c6:	0092      	lsls	r2, r2, #2
 80071c8:	189a      	adds	r2, r3, r2
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	0011      	movs	r1, r2
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 fabf 	bl	8007752 <USBD_StdEPReq>
    break;
 80071d4:	e00c      	b.n	80071f0 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	23a0      	movs	r3, #160	; 0xa0
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	5cd3      	ldrb	r3, [r2, r3]
 80071de:	227f      	movs	r2, #127	; 0x7f
 80071e0:	4393      	bics	r3, r2
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	0011      	movs	r1, r2
 80071e8:	0018      	movs	r0, r3
 80071ea:	f001 fbf4 	bl	80089d6 <USBD_LL_StallEP>
    break;
 80071ee:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b002      	add	sp, #8
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	00000286 	.word	0x00000286

08007200 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	200b      	movs	r0, #11
 800720c:	183b      	adds	r3, r7, r0
 800720e:	1c0a      	adds	r2, r1, #0
 8007210:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007212:	183b      	adds	r3, r7, r0
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d154      	bne.n	80072c4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3341      	adds	r3, #65	; 0x41
 800721e:	33ff      	adds	r3, #255	; 0xff
 8007220:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	239b      	movs	r3, #155	; 0x9b
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	58d3      	ldr	r3, [r2, r3]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d139      	bne.n	80072a2 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	429a      	cmp	r2, r3
 8007238:	d919      	bls.n	800726e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007250:	429a      	cmp	r2, r3
 8007252:	d203      	bcs.n	800725c <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007258:	b29b      	uxth	r3, r3
 800725a:	e002      	b.n	8007262 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007260:	b29b      	uxth	r3, r3
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	001a      	movs	r2, r3
 8007268:	f000 fffb 	bl	8008262 <USBD_CtlContinueRx>
 800726c:	e045      	b.n	80072fa <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	23a3      	movs	r3, #163	; 0xa3
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	58d3      	ldr	r3, [r2, r3]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00d      	beq.n	8007298 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	239d      	movs	r3, #157	; 0x9d
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007284:	2b03      	cmp	r3, #3
 8007286:	d107      	bne.n	8007298 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	23a3      	movs	r3, #163	; 0xa3
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	58d3      	ldr	r3, [r2, r3]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	0010      	movs	r0, r2
 8007296:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	0018      	movs	r0, r3
 800729c:	f000 fff4 	bl	8008288 <USBD_CtlSendStatus>
 80072a0:	e02b      	b.n	80072fa <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	239b      	movs	r3, #155	; 0x9b
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	58d3      	ldr	r3, [r2, r3]
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d125      	bne.n	80072fa <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	239b      	movs	r3, #155	; 0x9b
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	2100      	movs	r1, #0
 80072b6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2100      	movs	r1, #0
 80072bc:	0018      	movs	r0, r3
 80072be:	f001 fb8a 	bl	80089d6 <USBD_LL_StallEP>
 80072c2:	e01a      	b.n	80072fa <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	23a3      	movs	r3, #163	; 0xa3
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	58d3      	ldr	r3, [r2, r3]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d011      	beq.n	80072f6 <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	239d      	movs	r3, #157	; 0x9d
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d10b      	bne.n	80072f6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	23a3      	movs	r3, #163	; 0xa3
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	58d3      	ldr	r3, [r2, r3]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	220b      	movs	r2, #11
 80072ea:	18ba      	adds	r2, r7, r2
 80072ec:	7811      	ldrb	r1, [r2, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	0010      	movs	r0, r2
 80072f2:	4798      	blx	r3
 80072f4:	e001      	b.n	80072fa <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072f6:	2302      	movs	r3, #2
 80072f8:	e000      	b.n	80072fc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	0018      	movs	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	b006      	add	sp, #24
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	200b      	movs	r0, #11
 8007310:	183b      	adds	r3, r7, r0
 8007312:	1c0a      	adds	r2, r1, #0
 8007314:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007316:	183b      	adds	r3, r7, r0
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d000      	beq.n	8007320 <USBD_LL_DataInStage+0x1c>
 800731e:	e08e      	b.n	800743e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3314      	adds	r3, #20
 8007324:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	239b      	movs	r3, #155	; 0x9b
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	58d3      	ldr	r3, [r2, r3]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d164      	bne.n	80073fc <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	429a      	cmp	r2, r3
 800733c:	d915      	bls.n	800736a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	1ad2      	subs	r2, r2, r3
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	b29a      	uxth	r2, r3
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 ff4c 	bl	80081f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	2300      	movs	r3, #0
 8007360:	2200      	movs	r2, #0
 8007362:	2100      	movs	r1, #0
 8007364:	f001 fc24 	bl	8008bb0 <USBD_LL_PrepareReceive>
 8007368:	e059      	b.n	800741e <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	0019      	movs	r1, r3
 8007374:	0010      	movs	r0, r2
 8007376:	f7f8 ff4d 	bl	8000214 <__aeabi_uidivmod>
 800737a:	1e0b      	subs	r3, r1, #0
 800737c:	d11f      	bne.n	80073be <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007386:	429a      	cmp	r2, r3
 8007388:	d319      	bcc.n	80073be <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	239c      	movs	r3, #156	; 0x9c
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d211      	bcs.n	80073be <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	0018      	movs	r0, r3
 80073a2:	f000 ff27 	bl	80081f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	239c      	movs	r3, #156	; 0x9c
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	2100      	movs	r1, #0
 80073ae:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	2300      	movs	r3, #0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	f001 fbfa 	bl	8008bb0 <USBD_LL_PrepareReceive>
 80073bc:	e02f      	b.n	800741e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	23a3      	movs	r3, #163	; 0xa3
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	58d3      	ldr	r3, [r2, r3]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	239d      	movs	r3, #157	; 0x9d
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d107      	bne.n	80073e8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	23a3      	movs	r3, #163	; 0xa3
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	58d3      	ldr	r3, [r2, r3]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	0010      	movs	r0, r2
 80073e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2180      	movs	r1, #128	; 0x80
 80073ec:	0018      	movs	r0, r3
 80073ee:	f001 faf2 	bl	80089d6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f000 ff5b 	bl	80082b0 <USBD_CtlReceiveStatus>
 80073fa:	e010      	b.n	800741e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	239b      	movs	r3, #155	; 0x9b
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	58d3      	ldr	r3, [r2, r3]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d005      	beq.n	8007414 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	239b      	movs	r3, #155	; 0x9b
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2180      	movs	r1, #128	; 0x80
 8007418:	0018      	movs	r0, r3
 800741a:	f001 fadc 	bl	80089d6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	239e      	movs	r3, #158	; 0x9e
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	5cd3      	ldrb	r3, [r2, r3]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d124      	bne.n	8007474 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0018      	movs	r0, r3
 800742e:	f7ff fe44 	bl	80070ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	239e      	movs	r3, #158	; 0x9e
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	2100      	movs	r1, #0
 800743a:	54d1      	strb	r1, [r2, r3]
 800743c:	e01a      	b.n	8007474 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	23a3      	movs	r3, #163	; 0xa3
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	58d3      	ldr	r3, [r2, r3]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d011      	beq.n	8007470 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	239d      	movs	r3, #157	; 0x9d
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 8007454:	2b03      	cmp	r3, #3
 8007456:	d10b      	bne.n	8007470 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	23a3      	movs	r3, #163	; 0xa3
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	58d3      	ldr	r3, [r2, r3]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	220b      	movs	r2, #11
 8007464:	18ba      	adds	r2, r7, r2
 8007466:	7811      	ldrb	r1, [r2, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	0010      	movs	r0, r2
 800746c:	4798      	blx	r3
 800746e:	e001      	b.n	8007474 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	e000      	b.n	8007476 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b006      	add	sp, #24
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	f001 fa3f 	bl	8008910 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	23a2      	movs	r3, #162	; 0xa2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	2101      	movs	r1, #1
 800749a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	23a8      	movs	r3, #168	; 0xa8
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	2140      	movs	r1, #64	; 0x40
 80074a4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	2200      	movs	r2, #0
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	f001 fa2f 	bl	8008910 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2240      	movs	r2, #64	; 0x40
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	239d      	movs	r3, #157	; 0x9d
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	2101      	movs	r1, #1
 80074c6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	239b      	movs	r3, #155	; 0x9b
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	2100      	movs	r1, #0
 80074d0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	239f      	movs	r3, #159	; 0x9f
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	2100      	movs	r1, #0
 80074e0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	23a4      	movs	r3, #164	; 0xa4
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	58d3      	ldr	r3, [r2, r3]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	23a3      	movs	r3, #163	; 0xa3
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	58d3      	ldr	r3, [r2, r3]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	b2d9      	uxtb	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	0018      	movs	r0, r3
 8007502:	4790      	blx	r2
  }

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	0018      	movs	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	b002      	add	sp, #8
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	000a      	movs	r2, r1
 8007518:	1cfb      	adds	r3, r7, #3
 800751a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1cfa      	adds	r2, r7, #3
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	0018      	movs	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	b002      	add	sp, #8
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	239d      	movs	r3, #157	; 0x9d
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	5cd1      	ldrb	r1, [r2, r3]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a06      	ldr	r2, [pc, #24]	; (800755c <USBD_LL_Suspend+0x2c>)
 8007544:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	239d      	movs	r3, #157	; 0x9d
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	2104      	movs	r1, #4
 800754e:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	0018      	movs	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	b002      	add	sp, #8
 8007558:	bd80      	pop	{r7, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	00000275 	.word	0x00000275

08007560 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a05      	ldr	r2, [pc, #20]	; (8007580 <USBD_LL_Resume+0x20>)
 800756c:	5c99      	ldrb	r1, [r3, r2]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	239d      	movs	r3, #157	; 0x9d
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b002      	add	sp, #8
 800757e:	bd80      	pop	{r7, pc}
 8007580:	00000275 	.word	0x00000275

08007584 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	239d      	movs	r3, #157	; 0x9d
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	5cd3      	ldrb	r3, [r2, r3]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d10e      	bne.n	80075b6 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	23a3      	movs	r3, #163	; 0xa3
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	58d3      	ldr	r3, [r2, r3]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	23a3      	movs	r3, #163	; 0xa3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	58d3      	ldr	r3, [r2, r3]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	0010      	movs	r0, r2
 80075b4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ca:	230f      	movs	r3, #15
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	001a      	movs	r2, r3
 80075d8:	2360      	movs	r3, #96	; 0x60
 80075da:	4013      	ands	r3, r2
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d004      	beq.n	80075ea <USBD_StdDevReq+0x2a>
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d002      	beq.n	80075ea <USBD_StdDevReq+0x2a>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <USBD_StdDevReq+0x3e>
 80075e8:	e04b      	b.n	8007682 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	23a3      	movs	r3, #163	; 0xa3
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	58d3      	ldr	r3, [r2, r3]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	0010      	movs	r0, r2
 80075fa:	4798      	blx	r3
    break;
 80075fc:	e048      	b.n	8007690 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b09      	cmp	r3, #9
 8007604:	d835      	bhi.n	8007672 <USBD_StdDevReq+0xb2>
 8007606:	009a      	lsls	r2, r3, #2
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <USBD_StdDevReq+0xe0>)
 800760a:	18d3      	adds	r3, r2, r3
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	0011      	movs	r1, r2
 8007616:	0018      	movs	r0, r3
 8007618:	f000 fa58 	bl	8007acc <USBD_GetDescriptor>
      break;
 800761c:	e030      	b.n	8007680 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	0011      	movs	r1, r2
 8007624:	0018      	movs	r0, r3
 8007626:	f000 fb63 	bl	8007cf0 <USBD_SetAddress>
      break;
 800762a:	e029      	b.n	8007680 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0011      	movs	r1, r2
 8007632:	0018      	movs	r0, r3
 8007634:	f000 fbb0 	bl	8007d98 <USBD_SetConfig>
      break;
 8007638:	e022      	b.n	8007680 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	0011      	movs	r1, r2
 8007640:	0018      	movs	r0, r3
 8007642:	f000 fc4d 	bl	8007ee0 <USBD_GetConfig>
      break;
 8007646:	e01b      	b.n	8007680 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	0011      	movs	r1, r2
 800764e:	0018      	movs	r0, r3
 8007650:	f000 fc80 	bl	8007f54 <USBD_GetStatus>
      break;
 8007654:	e014      	b.n	8007680 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	0011      	movs	r1, r2
 800765c:	0018      	movs	r0, r3
 800765e:	f000 fcb3 	bl	8007fc8 <USBD_SetFeature>
      break;
 8007662:	e00d      	b.n	8007680 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	0011      	movs	r1, r2
 800766a:	0018      	movs	r0, r3
 800766c:	f000 fcc2 	bl	8007ff4 <USBD_ClrFeature>
      break;
 8007670:	e006      	b.n	8007680 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	0011      	movs	r1, r2
 8007678:	0018      	movs	r0, r3
 800767a:	f000 fd1c 	bl	80080b6 <USBD_CtlError>
      break;
 800767e:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8007680:	e006      	b.n	8007690 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	0011      	movs	r1, r2
 8007688:	0018      	movs	r0, r3
 800768a:	f000 fd14 	bl	80080b6 <USBD_CtlError>
    break;
 800768e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007690:	230f      	movs	r3, #15
 8007692:	18fb      	adds	r3, r7, r3
 8007694:	781b      	ldrb	r3, [r3, #0]
}
 8007696:	0018      	movs	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	b004      	add	sp, #16
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	08008e14 	.word	0x08008e14

080076a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ae:	230f      	movs	r3, #15
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	001a      	movs	r2, r3
 80076bc:	2360      	movs	r3, #96	; 0x60
 80076be:	4013      	ands	r3, r2
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d003      	beq.n	80076cc <USBD_StdItfReq+0x28>
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d001      	beq.n	80076cc <USBD_StdItfReq+0x28>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d136      	bne.n	800773a <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	239d      	movs	r3, #157	; 0x9d
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	5cd3      	ldrb	r3, [r2, r3]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d826      	bhi.n	8007728 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	889b      	ldrh	r3, [r3, #4]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d81a      	bhi.n	800771a <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	23a3      	movs	r3, #163	; 0xa3
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	58d3      	ldr	r3, [r2, r3]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	220f      	movs	r2, #15
 80076f0:	18bc      	adds	r4, r7, r2
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	0010      	movs	r0, r2
 80076f8:	4798      	blx	r3
 80076fa:	0003      	movs	r3, r0
 80076fc:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d117      	bne.n	8007736 <USBD_StdItfReq+0x92>
 8007706:	230f      	movs	r3, #15
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d112      	bne.n	8007736 <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	0018      	movs	r0, r3
 8007714:	f000 fdb8 	bl	8008288 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007718:	e00d      	b.n	8007736 <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	0011      	movs	r1, r2
 8007720:	0018      	movs	r0, r3
 8007722:	f000 fcc8 	bl	80080b6 <USBD_CtlError>
      break;
 8007726:	e006      	b.n	8007736 <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0011      	movs	r1, r2
 800772e:	0018      	movs	r0, r3
 8007730:	f000 fcc1 	bl	80080b6 <USBD_CtlError>
      break;
 8007734:	e000      	b.n	8007738 <USBD_StdItfReq+0x94>
      break;
 8007736:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8007738:	e006      	b.n	8007748 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	0011      	movs	r1, r2
 8007740:	0018      	movs	r0, r3
 8007742:	f000 fcb8 	bl	80080b6 <USBD_CtlError>
    break;
 8007746:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	0018      	movs	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	b005      	add	sp, #20
 8007750:	bd90      	pop	{r4, r7, pc}

08007752 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007752:	b5b0      	push	{r4, r5, r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800775c:	230f      	movs	r3, #15
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	889a      	ldrh	r2, [r3, #4]
 8007768:	230e      	movs	r3, #14
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	001a      	movs	r2, r3
 8007774:	2360      	movs	r3, #96	; 0x60
 8007776:	4013      	ands	r3, r2
 8007778:	2b20      	cmp	r3, #32
 800777a:	d004      	beq.n	8007786 <USBD_StdEPReq+0x34>
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d002      	beq.n	8007786 <USBD_StdEPReq+0x34>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <USBD_StdEPReq+0x48>
 8007784:	e193      	b.n	8007aae <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	23a3      	movs	r3, #163	; 0xa3
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	58d3      	ldr	r3, [r2, r3]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	0010      	movs	r0, r2
 8007796:	4798      	blx	r3
    break;
 8007798:	e190      	b.n	8007abc <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	001a      	movs	r2, r3
 80077a0:	2360      	movs	r3, #96	; 0x60
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d10f      	bne.n	80077c8 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	23a3      	movs	r3, #163	; 0xa3
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	58d3      	ldr	r3, [r2, r3]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	250f      	movs	r5, #15
 80077b4:	197c      	adds	r4, r7, r5
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	0010      	movs	r0, r2
 80077bc:	4798      	blx	r3
 80077be:	0003      	movs	r3, r0
 80077c0:	7023      	strb	r3, [r4, #0]

      return ret;
 80077c2:	197b      	adds	r3, r7, r5
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	e17c      	b.n	8007ac2 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d054      	beq.n	800787a <USBD_StdEPReq+0x128>
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d003      	beq.n	80077dc <USBD_StdEPReq+0x8a>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d100      	bne.n	80077da <USBD_StdEPReq+0x88>
 80077d8:	e097      	b.n	800790a <USBD_StdEPReq+0x1b8>
 80077da:	e160      	b.n	8007a9e <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	239d      	movs	r3, #157	; 0x9d
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	5cd3      	ldrb	r3, [r2, r3]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d002      	beq.n	80077ee <USBD_StdEPReq+0x9c>
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d01f      	beq.n	800782c <USBD_StdEPReq+0xda>
 80077ec:	e03d      	b.n	800786a <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ee:	230e      	movs	r3, #14
 80077f0:	18fb      	adds	r3, r7, r3
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d012      	beq.n	800781e <USBD_StdEPReq+0xcc>
 80077f8:	230e      	movs	r3, #14
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d00d      	beq.n	800781e <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007802:	230e      	movs	r3, #14
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	0011      	movs	r1, r2
 800780c:	0018      	movs	r0, r3
 800780e:	f001 f8e2 	bl	80089d6 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2180      	movs	r1, #128	; 0x80
 8007816:	0018      	movs	r0, r3
 8007818:	f001 f8dd 	bl	80089d6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800781c:	e02c      	b.n	8007878 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	0011      	movs	r1, r2
 8007824:	0018      	movs	r0, r3
 8007826:	f000 fc46 	bl	80080b6 <USBD_CtlError>
        break;
 800782a:	e025      	b.n	8007878 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	885b      	ldrh	r3, [r3, #2]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d115      	bne.n	8007860 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007834:	230e      	movs	r3, #14
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d010      	beq.n	8007860 <USBD_StdEPReq+0x10e>
 800783e:	230e      	movs	r3, #14
 8007840:	18fb      	adds	r3, r7, r3
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d00b      	beq.n	8007860 <USBD_StdEPReq+0x10e>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	88db      	ldrh	r3, [r3, #6]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d107      	bne.n	8007860 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007850:	230e      	movs	r3, #14
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	781a      	ldrb	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0011      	movs	r1, r2
 800785a:	0018      	movs	r0, r3
 800785c:	f001 f8bb 	bl	80089d6 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	0018      	movs	r0, r3
 8007864:	f000 fd10 	bl	8008288 <USBD_CtlSendStatus>

        break;
 8007868:	e006      	b.n	8007878 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	0011      	movs	r1, r2
 8007870:	0018      	movs	r0, r3
 8007872:	f000 fc20 	bl	80080b6 <USBD_CtlError>
        break;
 8007876:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007878:	e118      	b.n	8007aac <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	239d      	movs	r3, #157	; 0x9d
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	5cd3      	ldrb	r3, [r2, r3]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d002      	beq.n	800788c <USBD_StdEPReq+0x13a>
 8007886:	2b03      	cmp	r3, #3
 8007888:	d01f      	beq.n	80078ca <USBD_StdEPReq+0x178>
 800788a:	e035      	b.n	80078f8 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800788c:	230e      	movs	r3, #14
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d012      	beq.n	80078bc <USBD_StdEPReq+0x16a>
 8007896:	230e      	movs	r3, #14
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b80      	cmp	r3, #128	; 0x80
 800789e:	d00d      	beq.n	80078bc <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80078a0:	230e      	movs	r3, #14
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	0011      	movs	r1, r2
 80078aa:	0018      	movs	r0, r3
 80078ac:	f001 f893 	bl	80089d6 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2180      	movs	r1, #128	; 0x80
 80078b4:	0018      	movs	r0, r3
 80078b6:	f001 f88e 	bl	80089d6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078ba:	e025      	b.n	8007908 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0011      	movs	r1, r2
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 fbf7 	bl	80080b6 <USBD_CtlError>
        break;
 80078c8:	e01e      	b.n	8007908 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	885b      	ldrh	r3, [r3, #2]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d119      	bne.n	8007906 <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078d2:	230e      	movs	r3, #14
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	227f      	movs	r2, #127	; 0x7f
 80078da:	4013      	ands	r3, r2
 80078dc:	d007      	beq.n	80078ee <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80078de:	230e      	movs	r3, #14
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	0011      	movs	r1, r2
 80078e8:	0018      	movs	r0, r3
 80078ea:	f001 f8a0 	bl	8008a2e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 fcc9 	bl	8008288 <USBD_CtlSendStatus>
        }
        break;
 80078f6:	e006      	b.n	8007906 <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	0011      	movs	r1, r2
 80078fe:	0018      	movs	r0, r3
 8007900:	f000 fbd9 	bl	80080b6 <USBD_CtlError>
        break;
 8007904:	e000      	b.n	8007908 <USBD_StdEPReq+0x1b6>
        break;
 8007906:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007908:	e0d0      	b.n	8007aac <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	239d      	movs	r3, #157	; 0x9d
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	5cd3      	ldrb	r3, [r2, r3]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d002      	beq.n	800791c <USBD_StdEPReq+0x1ca>
 8007916:	2b03      	cmp	r3, #3
 8007918:	d03d      	beq.n	8007996 <USBD_StdEPReq+0x244>
 800791a:	e0b8      	b.n	8007a8e <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800791c:	230e      	movs	r3, #14
 800791e:	18fb      	adds	r3, r7, r3
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <USBD_StdEPReq+0x1ec>
 8007926:	230e      	movs	r3, #14
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b80      	cmp	r3, #128	; 0x80
 800792e:	d006      	beq.n	800793e <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	0011      	movs	r1, r2
 8007936:	0018      	movs	r0, r3
 8007938:	f000 fbbd 	bl	80080b6 <USBD_CtlError>
          break;
 800793c:	e0ae      	b.n	8007a9c <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800793e:	230e      	movs	r3, #14
 8007940:	18fb      	adds	r3, r7, r3
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b25b      	sxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	da0d      	bge.n	8007966 <USBD_StdEPReq+0x214>
 800794a:	230e      	movs	r3, #14
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	227f      	movs	r2, #127	; 0x7f
 8007952:	401a      	ands	r2, r3
 8007954:	0013      	movs	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	189b      	adds	r3, r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	3310      	adds	r3, #16
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	18d3      	adds	r3, r2, r3
 8007962:	3304      	adds	r3, #4
 8007964:	e00c      	b.n	8007980 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007966:	230e      	movs	r3, #14
 8007968:	18fb      	adds	r3, r7, r3
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	227f      	movs	r2, #127	; 0x7f
 800796e:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007970:	0013      	movs	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	189b      	adds	r3, r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	3341      	adds	r3, #65	; 0x41
 800797a:	33ff      	adds	r3, #255	; 0xff
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	18d3      	adds	r3, r2, r3
 8007980:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	0018      	movs	r0, r3
 8007990:	f000 fc10 	bl	80081b4 <USBD_CtlSendData>
          break;
 8007994:	e082      	b.n	8007a9c <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007996:	230e      	movs	r3, #14
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b25b      	sxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da15      	bge.n	80079ce <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a2:	230e      	movs	r3, #14
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	220f      	movs	r2, #15
 80079aa:	401a      	ands	r2, r3
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	0013      	movs	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	189b      	adds	r3, r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	18cb      	adds	r3, r1, r3
 80079b8:	3318      	adds	r3, #24
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11e      	bne.n	80079fe <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	0011      	movs	r1, r2
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 fb75 	bl	80080b6 <USBD_CtlError>
            break;
 80079cc:	e066      	b.n	8007a9c <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ce:	230e      	movs	r3, #14
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	220f      	movs	r2, #15
 80079d6:	401a      	ands	r2, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	23a2      	movs	r3, #162	; 0xa2
 80079dc:	0059      	lsls	r1, r3, #1
 80079de:	0013      	movs	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	18c3      	adds	r3, r0, r3
 80079e8:	185b      	adds	r3, r3, r1
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	0011      	movs	r1, r2
 80079f6:	0018      	movs	r0, r3
 80079f8:	f000 fb5d 	bl	80080b6 <USBD_CtlError>
            break;
 80079fc:	e04e      	b.n	8007a9c <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80079fe:	230e      	movs	r3, #14
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	b25b      	sxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da0d      	bge.n	8007a26 <USBD_StdEPReq+0x2d4>
 8007a0a:	230e      	movs	r3, #14
 8007a0c:	18fb      	adds	r3, r7, r3
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	227f      	movs	r2, #127	; 0x7f
 8007a12:	401a      	ands	r2, r3
 8007a14:	0013      	movs	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	189b      	adds	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	3310      	adds	r3, #16
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	18d3      	adds	r3, r2, r3
 8007a22:	3304      	adds	r3, #4
 8007a24:	e00c      	b.n	8007a40 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007a26:	230e      	movs	r3, #14
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	227f      	movs	r2, #127	; 0x7f
 8007a2e:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a30:	0013      	movs	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	3341      	adds	r3, #65	; 0x41
 8007a3a:	33ff      	adds	r3, #255	; 0xff
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	18d3      	adds	r3, r2, r3
 8007a40:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a42:	230e      	movs	r3, #14
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <USBD_StdEPReq+0x304>
 8007a4c:	230e      	movs	r3, #14
 8007a4e:	18fb      	adds	r3, r7, r3
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d103      	bne.n	8007a5e <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e010      	b.n	8007a80 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007a5e:	230e      	movs	r3, #14
 8007a60:	18fb      	adds	r3, r7, r3
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	0011      	movs	r1, r2
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f001 f80c 	bl	8008a86 <USBD_LL_IsStallEP>
 8007a6e:	1e03      	subs	r3, r0, #0
 8007a70:	d003      	beq.n	8007a7a <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2201      	movs	r2, #1
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e002      	b.n	8007a80 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	0018      	movs	r0, r3
 8007a88:	f000 fb94 	bl	80081b4 <USBD_CtlSendData>
          break;
 8007a8c:	e006      	b.n	8007a9c <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	0011      	movs	r1, r2
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 fb0e 	bl	80080b6 <USBD_CtlError>
        break;
 8007a9a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007a9c:	e006      	b.n	8007aac <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f000 fb06 	bl	80080b6 <USBD_CtlError>
      break;
 8007aaa:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8007aac:	e006      	b.n	8007abc <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f000 fafe 	bl	80080b6 <USBD_CtlError>
    break;
 8007aba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007abc:	230f      	movs	r3, #15
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	781b      	ldrb	r3, [r3, #0]
}
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b004      	add	sp, #16
 8007ac8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007acc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	885b      	ldrh	r3, [r3, #2]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b07      	cmp	r3, #7
 8007ae0:	d900      	bls.n	8007ae4 <USBD_GetDescriptor+0x18>
 8007ae2:	e0ce      	b.n	8007c82 <USBD_GetDescriptor+0x1b6>
 8007ae4:	009a      	lsls	r2, r3, #2
 8007ae6:	4b80      	ldr	r3, [pc, #512]	; (8007ce8 <USBD_GetDescriptor+0x21c>)
 8007ae8:	18d3      	adds	r3, r2, r3
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	23a2      	movs	r3, #162	; 0xa2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	58d3      	ldr	r3, [r2, r3]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
 8007afc:	210a      	movs	r1, #10
 8007afe:	1879      	adds	r1, r7, r1
 8007b00:	0010      	movs	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	0003      	movs	r3, r0
 8007b06:	60fb      	str	r3, [r7, #12]
    break;
 8007b08:	e0c2      	b.n	8007c90 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	7c1b      	ldrb	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10f      	bne.n	8007b32 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	23a3      	movs	r3, #163	; 0xa3
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	58d3      	ldr	r3, [r2, r3]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	18ba      	adds	r2, r7, r2
 8007b20:	0010      	movs	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	0003      	movs	r3, r0
 8007b26:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b30:	e0ae      	b.n	8007c90 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	23a3      	movs	r3, #163	; 0xa3
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	58d3      	ldr	r3, [r2, r3]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	18ba      	adds	r2, r7, r2
 8007b40:	0010      	movs	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	0003      	movs	r3, r0
 8007b46:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	701a      	strb	r2, [r3, #0]
    break;
 8007b50:	e09e      	b.n	8007c90 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d858      	bhi.n	8007c0e <USBD_GetDescriptor+0x142>
 8007b5c:	009a      	lsls	r2, r3, #2
 8007b5e:	4b63      	ldr	r3, [pc, #396]	; (8007cec <USBD_GetDescriptor+0x220>)
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	23a2      	movs	r3, #162	; 0xa2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	58d3      	ldr	r3, [r2, r3]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	210a      	movs	r1, #10
 8007b76:	1879      	adds	r1, r7, r1
 8007b78:	0010      	movs	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	60fb      	str	r3, [r7, #12]
      break;
 8007b80:	e04c      	b.n	8007c1c <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	23a2      	movs	r3, #162	; 0xa2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	58d3      	ldr	r3, [r2, r3]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	210a      	movs	r1, #10
 8007b92:	1879      	adds	r1, r7, r1
 8007b94:	0010      	movs	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	0003      	movs	r3, r0
 8007b9a:	60fb      	str	r3, [r7, #12]
      break;
 8007b9c:	e03e      	b.n	8007c1c <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	23a2      	movs	r3, #162	; 0xa2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	58d3      	ldr	r3, [r2, r3]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	210a      	movs	r1, #10
 8007bae:	1879      	adds	r1, r7, r1
 8007bb0:	0010      	movs	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	60fb      	str	r3, [r7, #12]
      break;
 8007bb8:	e030      	b.n	8007c1c <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	23a2      	movs	r3, #162	; 0xa2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	58d3      	ldr	r3, [r2, r3]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7c12      	ldrb	r2, [r2, #16]
 8007bc8:	210a      	movs	r1, #10
 8007bca:	1879      	adds	r1, r7, r1
 8007bcc:	0010      	movs	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	60fb      	str	r3, [r7, #12]
      break;
 8007bd4:	e022      	b.n	8007c1c <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	23a2      	movs	r3, #162	; 0xa2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	58d3      	ldr	r3, [r2, r3]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7c12      	ldrb	r2, [r2, #16]
 8007be4:	210a      	movs	r1, #10
 8007be6:	1879      	adds	r1, r7, r1
 8007be8:	0010      	movs	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	0003      	movs	r3, r0
 8007bee:	60fb      	str	r3, [r7, #12]
      break;
 8007bf0:	e014      	b.n	8007c1c <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	23a2      	movs	r3, #162	; 0xa2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	58d3      	ldr	r3, [r2, r3]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	210a      	movs	r1, #10
 8007c02:	1879      	adds	r1, r7, r1
 8007c04:	0010      	movs	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	0003      	movs	r3, r0
 8007c0a:	60fb      	str	r3, [r7, #12]
      break;
 8007c0c:	e006      	b.n	8007c1c <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	0011      	movs	r1, r2
 8007c14:	0018      	movs	r0, r3
 8007c16:	f000 fa4e 	bl	80080b6 <USBD_CtlError>
      return;
 8007c1a:	e061      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8007c1c:	e038      	b.n	8007c90 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c1b      	ldrb	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10b      	bne.n	8007c3e <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	23a3      	movs	r3, #163	; 0xa3
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	58d3      	ldr	r3, [r2, r3]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	220a      	movs	r2, #10
 8007c32:	18ba      	adds	r2, r7, r2
 8007c34:	0010      	movs	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	0003      	movs	r3, r0
 8007c3a:	60fb      	str	r3, [r7, #12]
      break;
 8007c3c:	e028      	b.n	8007c90 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0011      	movs	r1, r2
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 fa36 	bl	80080b6 <USBD_CtlError>
      return;
 8007c4a:	e049      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7c1b      	ldrb	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10f      	bne.n	8007c74 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	23a3      	movs	r3, #163	; 0xa3
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	58d3      	ldr	r3, [r2, r3]
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	220a      	movs	r2, #10
 8007c60:	18ba      	adds	r2, r7, r2
 8007c62:	0010      	movs	r0, r2
 8007c64:	4798      	blx	r3
 8007c66:	0003      	movs	r3, r0
 8007c68:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	2207      	movs	r2, #7
 8007c70:	701a      	strb	r2, [r3, #0]
      break;
 8007c72:	e00d      	b.n	8007c90 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	0011      	movs	r1, r2
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f000 fa1b 	bl	80080b6 <USBD_CtlError>
      return;
 8007c80:	e02e      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	0011      	movs	r1, r2
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f000 fa14 	bl	80080b6 <USBD_CtlError>
    return;
 8007c8e:	e027      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007c90:	230a      	movs	r3, #10
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d01a      	beq.n	8007cd0 <USBD_GetDescriptor+0x204>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	88db      	ldrh	r3, [r3, #6]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d016      	beq.n	8007cd0 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88da      	ldrh	r2, [r3, #6]
 8007ca6:	230a      	movs	r3, #10
 8007ca8:	18fb      	adds	r3, r7, r3
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	1c18      	adds	r0, r3, #0
 8007cae:	1c11      	adds	r1, r2, #0
 8007cb0:	b28a      	uxth	r2, r1
 8007cb2:	b283      	uxth	r3, r0
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d900      	bls.n	8007cba <USBD_GetDescriptor+0x1ee>
 8007cb8:	1c01      	adds	r1, r0, #0
 8007cba:	b28a      	uxth	r2, r1
 8007cbc:	210a      	movs	r1, #10
 8007cbe:	187b      	adds	r3, r7, r1
 8007cc0:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	881a      	ldrh	r2, [r3, #0]
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f000 fa72 	bl	80081b4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	88db      	ldrh	r3, [r3, #6]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d103      	bne.n	8007ce0 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 fad4 	bl	8008288 <USBD_CtlSendStatus>
  }
}
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b004      	add	sp, #16
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	08008e3c 	.word	0x08008e3c
 8007cec:	08008e5c 	.word	0x08008e5c

08007cf0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d13d      	bne.n	8007d7e <USBD_SetAddress+0x8e>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d139      	bne.n	8007d7e <USBD_SetAddress+0x8e>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d10:	d835      	bhi.n	8007d7e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	230f      	movs	r3, #15
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	217f      	movs	r1, #127	; 0x7f
 8007d1e:	400a      	ands	r2, r1
 8007d20:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	239d      	movs	r3, #157	; 0x9d
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	5cd3      	ldrb	r3, [r2, r3]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d106      	bne.n	8007d3c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	0011      	movs	r1, r2
 8007d34:	0018      	movs	r0, r3
 8007d36:	f000 f9be 	bl	80080b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3a:	e026      	b.n	8007d8a <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	240f      	movs	r4, #15
 8007d40:	193a      	adds	r2, r7, r4
 8007d42:	4914      	ldr	r1, [pc, #80]	; (8007d94 <USBD_SetAddress+0xa4>)
 8007d44:	7812      	ldrb	r2, [r2, #0]
 8007d46:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d48:	193b      	adds	r3, r7, r4
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	0011      	movs	r1, r2
 8007d50:	0018      	movs	r0, r3
 8007d52:	f000 fec9 	bl	8008ae8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f000 fa95 	bl	8008288 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	239d      	movs	r3, #157	; 0x9d
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d70:	e00b      	b.n	8007d8a <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	239d      	movs	r3, #157	; 0x9d
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	2101      	movs	r1, #1
 8007d7a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7c:	e005      	b.n	8007d8a <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	0011      	movs	r1, r2
 8007d84:	0018      	movs	r0, r3
 8007d86:	f000 f996 	bl	80080b6 <USBD_CtlError>
  }
}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b005      	add	sp, #20
 8007d90:	bd90      	pop	{r4, r7, pc}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	00000276 	.word	0x00000276

08007d98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	4b4c      	ldr	r3, [pc, #304]	; (8007edc <USBD_SetConfig+0x144>)
 8007daa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dac:	4b4b      	ldr	r3, [pc, #300]	; (8007edc <USBD_SetConfig+0x144>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d906      	bls.n	8007dc2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	0011      	movs	r1, r2
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 f97b 	bl	80080b6 <USBD_CtlError>
 8007dc0:	e088      	b.n	8007ed4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	239d      	movs	r3, #157	; 0x9d
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	5cd3      	ldrb	r3, [r2, r3]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d002      	beq.n	8007dd4 <USBD_SetConfig+0x3c>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d029      	beq.n	8007e26 <USBD_SetConfig+0x8e>
 8007dd2:	e071      	b.n	8007eb8 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007dd4:	4b41      	ldr	r3, [pc, #260]	; (8007edc <USBD_SetConfig+0x144>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01f      	beq.n	8007e1c <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 8007ddc:	4b3f      	ldr	r3, [pc, #252]	; (8007edc <USBD_SetConfig+0x144>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	001a      	movs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	239d      	movs	r3, #157	; 0x9d
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	2103      	movs	r1, #3
 8007dee:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007df0:	4b3a      	ldr	r3, [pc, #232]	; (8007edc <USBD_SetConfig+0x144>)
 8007df2:	781a      	ldrb	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	0011      	movs	r1, r2
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f7ff f967 	bl	80070cc <USBD_SetClassConfig>
 8007dfe:	0003      	movs	r3, r0
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d106      	bne.n	8007e12 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0011      	movs	r1, r2
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 f953 	bl	80080b6 <USBD_CtlError>
          return;
 8007e10:	e060      	b.n	8007ed4 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	0018      	movs	r0, r3
 8007e16:	f000 fa37 	bl	8008288 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007e1a:	e05b      	b.n	8007ed4 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f000 fa32 	bl	8008288 <USBD_CtlSendStatus>
      break;
 8007e24:	e056      	b.n	8007ed4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e26:	4b2d      	ldr	r3, [pc, #180]	; (8007edc <USBD_SetConfig+0x144>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d115      	bne.n	8007e5a <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	239d      	movs	r3, #157	; 0x9d
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	2102      	movs	r1, #2
 8007e36:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8007e38:	4b28      	ldr	r3, [pc, #160]	; (8007edc <USBD_SetConfig+0x144>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	001a      	movs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e42:	4b26      	ldr	r3, [pc, #152]	; (8007edc <USBD_SetConfig+0x144>)
 8007e44:	781a      	ldrb	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	0011      	movs	r1, r2
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f7ff f966 	bl	800711c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	0018      	movs	r0, r3
 8007e54:	f000 fa18 	bl	8008288 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007e58:	e03c      	b.n	8007ed4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007e5a:	4b20      	ldr	r3, [pc, #128]	; (8007edc <USBD_SetConfig+0x144>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	001a      	movs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d022      	beq.n	8007eae <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	0011      	movs	r1, r2
 8007e72:	0018      	movs	r0, r3
 8007e74:	f7ff f952 	bl	800711c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e78:	4b18      	ldr	r3, [pc, #96]	; (8007edc <USBD_SetConfig+0x144>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	001a      	movs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <USBD_SetConfig+0x144>)
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0011      	movs	r1, r2
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f7ff f91e 	bl	80070cc <USBD_SetClassConfig>
 8007e90:	0003      	movs	r3, r0
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d106      	bne.n	8007ea4 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	0011      	movs	r1, r2
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f000 f90a 	bl	80080b6 <USBD_CtlError>
          return;
 8007ea2:	e017      	b.n	8007ed4 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	f000 f9ee 	bl	8008288 <USBD_CtlSendStatus>
      break;
 8007eac:	e012      	b.n	8007ed4 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f000 f9e9 	bl	8008288 <USBD_CtlSendStatus>
      break;
 8007eb6:	e00d      	b.n	8007ed4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f000 f8f9 	bl	80080b6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <USBD_SetConfig+0x144>)
 8007ec6:	781a      	ldrb	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	0011      	movs	r1, r2
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f7ff f925 	bl	800711c <USBD_ClrClassConfig>
      break;
 8007ed2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b002      	add	sp, #8
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	20000198 	.word	0x20000198

08007ee0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	88db      	ldrh	r3, [r3, #6]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d006      	beq.n	8007f00 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	0011      	movs	r1, r2
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f000 f8dc 	bl	80080b6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007efe:	e025      	b.n	8007f4c <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	239d      	movs	r3, #157	; 0x9d
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	5cd3      	ldrb	r3, [r2, r3]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	db18      	blt.n	8007f3e <USBD_GetConfig+0x5e>
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	dd02      	ble.n	8007f16 <USBD_GetConfig+0x36>
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d00c      	beq.n	8007f2e <USBD_GetConfig+0x4e>
 8007f14:	e013      	b.n	8007f3e <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	0019      	movs	r1, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	0018      	movs	r0, r3
 8007f28:	f000 f944 	bl	80081b4 <USBD_CtlSendData>
      break;
 8007f2c:	e00e      	b.n	8007f4c <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	1d19      	adds	r1, r3, #4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	0018      	movs	r0, r3
 8007f38:	f000 f93c 	bl	80081b4 <USBD_CtlSendData>
      break;
 8007f3c:	e006      	b.n	8007f4c <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	0011      	movs	r1, r2
 8007f44:	0018      	movs	r0, r3
 8007f46:	f000 f8b6 	bl	80080b6 <USBD_CtlError>
      break;
 8007f4a:	46c0      	nop			; (mov r8, r8)
}
 8007f4c:	46c0      	nop			; (mov r8, r8)
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b002      	add	sp, #8
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	239d      	movs	r3, #157	; 0x9d
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	5cd3      	ldrb	r3, [r2, r3]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d822      	bhi.n	8007fb2 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	88db      	ldrh	r3, [r3, #6]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d006      	beq.n	8007f82 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	0011      	movs	r1, r2
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f000 f89b 	bl	80080b6 <USBD_CtlError>
      break;
 8007f80:	e01e      	b.n	8007fc0 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	239f      	movs	r3, #159	; 0x9f
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	58d3      	ldr	r3, [r2, r3]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	0019      	movs	r1, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	0018      	movs	r0, r3
 8007fac:	f000 f902 	bl	80081b4 <USBD_CtlSendData>
    break;
 8007fb0:	e006      	b.n	8007fc0 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	0011      	movs	r1, r2
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f000 f87c 	bl	80080b6 <USBD_CtlError>
    break;
 8007fbe:	46c0      	nop			; (mov r8, r8)
  }
}
 8007fc0:	46c0      	nop			; (mov r8, r8)
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b002      	add	sp, #8
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d108      	bne.n	8007fec <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	239f      	movs	r3, #159	; 0x9f
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f000 f94e 	bl	8008288 <USBD_CtlSendStatus>
  }

}
 8007fec:	46c0      	nop			; (mov r8, r8)
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b002      	add	sp, #8
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	239d      	movs	r3, #157	; 0x9d
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	5cd3      	ldrb	r3, [r2, r3]
 8008006:	3b01      	subs	r3, #1
 8008008:	2b02      	cmp	r3, #2
 800800a:	d80d      	bhi.n	8008028 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d110      	bne.n	8008036 <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	239f      	movs	r3, #159	; 0x9f
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	2100      	movs	r1, #0
 800801c:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	0018      	movs	r0, r3
 8008022:	f000 f931 	bl	8008288 <USBD_CtlSendStatus>
    }
    break;
 8008026:	e006      	b.n	8008036 <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	0011      	movs	r1, r2
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f841 	bl	80080b6 <USBD_CtlError>
    break;
 8008034:	e000      	b.n	8008038 <USBD_ClrFeature+0x44>
    break;
 8008036:	46c0      	nop			; (mov r8, r8)
  }
}
 8008038:	46c0      	nop			; (mov r8, r8)
 800803a:	46bd      	mov	sp, r7
 800803c:	b002      	add	sp, #8
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	785a      	ldrb	r2, [r3, #1]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	3302      	adds	r3, #2
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b29a      	uxth	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	3303      	adds	r3, #3
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	b29b      	uxth	r3, r3
 800806e:	18d3      	adds	r3, r2, r3
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	3304      	adds	r3, #4
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b29a      	uxth	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	3305      	adds	r3, #5
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	b29b      	uxth	r3, r3
 800808a:	18d3      	adds	r3, r2, r3
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	3306      	adds	r3, #6
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	b29a      	uxth	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	3307      	adds	r3, #7
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	18d3      	adds	r3, r2, r3
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	80da      	strh	r2, [r3, #6]

}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b002      	add	sp, #8
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	0018      	movs	r0, r3
 80080c6:	f000 fc86 	bl	80089d6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2100      	movs	r1, #0
 80080ce:	0018      	movs	r0, r3
 80080d0:	f000 fc81 	bl	80089d6 <USBD_LL_StallEP>
}
 80080d4:	46c0      	nop			; (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080e8:	2317      	movs	r3, #23
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d03d      	beq.n	8008172 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	0018      	movs	r0, r3
 80080fa:	f000 f83e 	bl	800817a <USBD_GetLen>
 80080fe:	0003      	movs	r3, r0
 8008100:	3301      	adds	r3, #1
 8008102:	b29b      	uxth	r3, r3
 8008104:	18db      	adds	r3, r3, r3
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800810c:	2017      	movs	r0, #23
 800810e:	183b      	adds	r3, r7, r0
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	183a      	adds	r2, r7, r0
 8008114:	1c59      	adds	r1, r3, #1
 8008116:	7011      	strb	r1, [r2, #0]
 8008118:	001a      	movs	r2, r3
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	189b      	adds	r3, r3, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	7812      	ldrb	r2, [r2, #0]
 8008122:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008124:	183b      	adds	r3, r7, r0
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	183a      	adds	r2, r7, r0
 800812a:	1c59      	adds	r1, r3, #1
 800812c:	7011      	strb	r1, [r2, #0]
 800812e:	001a      	movs	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	189b      	adds	r3, r3, r2
 8008134:	2203      	movs	r2, #3
 8008136:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008138:	e017      	b.n	800816a <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	60fa      	str	r2, [r7, #12]
 8008140:	2417      	movs	r4, #23
 8008142:	193a      	adds	r2, r7, r4
 8008144:	7812      	ldrb	r2, [r2, #0]
 8008146:	1939      	adds	r1, r7, r4
 8008148:	1c50      	adds	r0, r2, #1
 800814a:	7008      	strb	r0, [r1, #0]
 800814c:	0011      	movs	r1, r2
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	1852      	adds	r2, r2, r1
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008156:	193b      	adds	r3, r7, r4
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	193a      	adds	r2, r7, r4
 800815c:	1c59      	adds	r1, r3, #1
 800815e:	7011      	strb	r1, [r2, #0]
 8008160:	001a      	movs	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	189b      	adds	r3, r3, r2
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e3      	bne.n	800813a <USBD_GetString+0x5e>
    }
  }
}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	46bd      	mov	sp, r7
 8008176:	b007      	add	sp, #28
 8008178:	bd90      	pop	{r4, r7, pc}

0800817a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008182:	230f      	movs	r3, #15
 8008184:	18fb      	adds	r3, r7, r3
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 800818a:	e008      	b.n	800819e <USBD_GetLen+0x24>
    {
        len++;
 800818c:	210f      	movs	r1, #15
 800818e:	187b      	adds	r3, r7, r1
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	187b      	adds	r3, r7, r1
 8008194:	3201      	adds	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
        buf++;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3301      	adds	r3, #1
 800819c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f2      	bne.n	800818c <USBD_GetLen+0x12>
    }

    return len;
 80081a6:	230f      	movs	r3, #15
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	781b      	ldrb	r3, [r3, #0]
}
 80081ac:	0018      	movs	r0, r3
 80081ae:	46bd      	mov	sp, r7
 80081b0:	b004      	add	sp, #16
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	1dbb      	adds	r3, r7, #6
 80081c0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	239b      	movs	r3, #155	; 0x9b
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	2102      	movs	r1, #2
 80081ca:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80081cc:	1dbb      	adds	r3, r7, #6
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081d4:	1dbb      	adds	r3, r7, #6
 80081d6:	881a      	ldrh	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80081dc:	1dbb      	adds	r3, r7, #6
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	2100      	movs	r1, #0
 80081e6:	f000 fcab 	bl	8008b40 <USBD_LL_Transmit>

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b004      	add	sp, #16
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	1dbb      	adds	r3, r7, #6
 8008200:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008202:	1dbb      	adds	r3, r7, #6
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	2100      	movs	r1, #0
 800820c:	f000 fc98 	bl	8008b40 <USBD_LL_Transmit>

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	0018      	movs	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	b004      	add	sp, #16
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	239b      	movs	r3, #155	; 0x9b
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	2103      	movs	r1, #3
 8008230:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008232:	1dbb      	adds	r3, r7, #6
 8008234:	8819      	ldrh	r1, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	23a4      	movs	r3, #164	; 0xa4
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800823e:	1dbb      	adds	r3, r7, #6
 8008240:	8819      	ldrh	r1, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	23a6      	movs	r3, #166	; 0xa6
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800824a:	1dbb      	adds	r3, r7, #6
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	2100      	movs	r1, #0
 8008254:	f000 fcac 	bl	8008bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	0018      	movs	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	b004      	add	sp, #16
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	1dbb      	adds	r3, r7, #6
 800826e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008270:	1dbb      	adds	r3, r7, #6
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	2100      	movs	r1, #0
 800827a:	f000 fc99 	bl	8008bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	0018      	movs	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	b004      	add	sp, #16
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	239b      	movs	r3, #155	; 0x9b
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	2104      	movs	r1, #4
 8008298:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	2300      	movs	r3, #0
 800829e:	2200      	movs	r2, #0
 80082a0:	2100      	movs	r1, #0
 80082a2:	f000 fc4d 	bl	8008b40 <USBD_LL_Transmit>

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	0018      	movs	r0, r3
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b002      	add	sp, #8
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	239b      	movs	r3, #155	; 0x9b
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	2105      	movs	r1, #5
 80082c0:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	2300      	movs	r3, #0
 80082c6:	2200      	movs	r2, #0
 80082c8:	2100      	movs	r1, #0
 80082ca:	f000 fc71 	bl	8008bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	0018      	movs	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b002      	add	sp, #8
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082dc:	4914      	ldr	r1, [pc, #80]	; (8008330 <MX_USB_DEVICE_Init+0x58>)
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <MX_USB_DEVICE_Init+0x5c>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7fe fe8a 	bl	8006ffc <USBD_Init>
 80082e8:	1e03      	subs	r3, r0, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082ec:	f7f8 fb08 	bl	8000900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <MX_USB_DEVICE_Init+0x60>)
 80082f2:	4b10      	ldr	r3, [pc, #64]	; (8008334 <MX_USB_DEVICE_Init+0x5c>)
 80082f4:	0011      	movs	r1, r2
 80082f6:	0018      	movs	r0, r3
 80082f8:	f7fe feb1 	bl	800705e <USBD_RegisterClass>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d001      	beq.n	8008304 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008300:	f7f8 fafe 	bl	8000900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008304:	4a0d      	ldr	r2, [pc, #52]	; (800833c <MX_USB_DEVICE_Init+0x64>)
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <MX_USB_DEVICE_Init+0x5c>)
 8008308:	0011      	movs	r1, r2
 800830a:	0018      	movs	r0, r3
 800830c:	f7fe fdfc 	bl	8006f08 <USBD_CDC_RegisterInterface>
 8008310:	1e03      	subs	r3, r0, #0
 8008312:	d001      	beq.n	8008318 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008314:	f7f8 faf4 	bl	8000900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008318:	4b06      	ldr	r3, [pc, #24]	; (8008334 <MX_USB_DEVICE_Init+0x5c>)
 800831a:	0018      	movs	r0, r3
 800831c:	f7fe fec0 	bl	80070a0 <USBD_Start>
 8008320:	1e03      	subs	r3, r0, #0
 8008322:	d001      	beq.n	8008328 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8008324:	f7f8 faec 	bl	8000900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008328:	46c0      	nop			; (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	2000012c 	.word	0x2000012c
 8008334:	20000580 	.word	0x20000580
 8008338:	20000018 	.word	0x20000018
 800833c:	2000011c 	.word	0x2000011c

08008340 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008344:	4907      	ldr	r1, [pc, #28]	; (8008364 <CDC_Init_FS+0x24>)
 8008346:	4b08      	ldr	r3, [pc, #32]	; (8008368 <CDC_Init_FS+0x28>)
 8008348:	2200      	movs	r2, #0
 800834a:	0018      	movs	r0, r3
 800834c:	f7fe fdf8 	bl	8006f40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008350:	4a06      	ldr	r2, [pc, #24]	; (800836c <CDC_Init_FS+0x2c>)
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <CDC_Init_FS+0x28>)
 8008354:	0011      	movs	r1, r2
 8008356:	0018      	movs	r0, r3
 8008358:	f7fe fe0e 	bl	8006f78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800835c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800835e:	0018      	movs	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20000c04 	.word	0x20000c04
 8008368:	20000580 	.word	0x20000580
 800836c:	2000081c 	.word	0x2000081c

08008370 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008374:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008376:	0018      	movs	r0, r3
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6039      	str	r1, [r7, #0]
 8008384:	0011      	movs	r1, r2
 8008386:	1dfb      	adds	r3, r7, #7
 8008388:	1c02      	adds	r2, r0, #0
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	1d3b      	adds	r3, r7, #4
 800838e:	1c0a      	adds	r2, r1, #0
 8008390:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008392:	1dfb      	adds	r3, r7, #7
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b23      	cmp	r3, #35	; 0x23
 8008398:	d804      	bhi.n	80083a4 <CDC_Control_FS+0x28>
 800839a:	009a      	lsls	r2, r3, #2
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <CDC_Control_FS+0x34>)
 800839e:	18d3      	adds	r3, r2, r3
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083a4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80083a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083a8:	0018      	movs	r0, r3
 80083aa:	46bd      	mov	sp, r7
 80083ac:	b002      	add	sp, #8
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	08008e74 	.word	0x08008e74

080083b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <CDC_Receive_FS+0x28>)
 80083c2:	0011      	movs	r1, r2
 80083c4:	0018      	movs	r0, r3
 80083c6:	f7fe fdd7 	bl	8006f78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083ca:	4b04      	ldr	r3, [pc, #16]	; (80083dc <CDC_Receive_FS+0x28>)
 80083cc:	0018      	movs	r0, r3
 80083ce:	f7fe fde7 	bl	8006fa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083d4:	0018      	movs	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b002      	add	sp, #8
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000580 	.word	0x20000580

080083e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	0002      	movs	r2, r0
 80083e8:	6039      	str	r1, [r7, #0]
 80083ea:	1dfb      	adds	r3, r7, #7
 80083ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2212      	movs	r2, #18
 80083f2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083f6:	0018      	movs	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b002      	add	sp, #8
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	20000148 	.word	0x20000148

08008404 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	0002      	movs	r2, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	1dfb      	adds	r3, r7, #7
 8008410:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2204      	movs	r2, #4
 8008416:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800841a:	0018      	movs	r0, r3
 800841c:	46bd      	mov	sp, r7
 800841e:	b002      	add	sp, #8
 8008420:	bd80      	pop	{r7, pc}
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	2000015c 	.word	0x2000015c

08008428 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	0002      	movs	r2, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	1dfb      	adds	r3, r7, #7
 8008434:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008436:	1dfb      	adds	r3, r7, #7
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4908      	ldr	r1, [pc, #32]	; (8008464 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <USBD_FS_ProductStrDescriptor+0x40>)
 8008444:	0018      	movs	r0, r3
 8008446:	f7ff fe49 	bl	80080dc <USBD_GetString>
 800844a:	e005      	b.n	8008458 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	4905      	ldr	r1, [pc, #20]	; (8008464 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <USBD_FS_ProductStrDescriptor+0x40>)
 8008452:	0018      	movs	r0, r3
 8008454:	f7ff fe42 	bl	80080dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800845a:	0018      	movs	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	b002      	add	sp, #8
 8008460:	bd80      	pop	{r7, pc}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	20000fec 	.word	0x20000fec
 8008468:	08008d60 	.word	0x08008d60

0800846c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	0002      	movs	r2, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	1dfb      	adds	r3, r7, #7
 8008478:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4904      	ldr	r1, [pc, #16]	; (8008490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008480:	0018      	movs	r0, r3
 8008482:	f7ff fe2b 	bl	80080dc <USBD_GetString>
  return USBD_StrDesc;
 8008486:	4b02      	ldr	r3, [pc, #8]	; (8008490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008488:	0018      	movs	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	b002      	add	sp, #8
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000fec 	.word	0x20000fec
 8008494:	08008d78 	.word	0x08008d78

08008498 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	0002      	movs	r2, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	1dfb      	adds	r3, r7, #7
 80084a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	221a      	movs	r2, #26
 80084aa:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084ac:	f000 f84c 	bl	8008548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80084b2:	0018      	movs	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	b002      	add	sp, #8
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	20000160 	.word	0x20000160

080084c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	0002      	movs	r2, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	1dfb      	adds	r3, r7, #7
 80084cc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80084ce:	1dfb      	adds	r3, r7, #7
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4908      	ldr	r1, [pc, #32]	; (80084fc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x40>)
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff fdfd 	bl	80080dc <USBD_GetString>
 80084e2:	e005      	b.n	80084f0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	4905      	ldr	r1, [pc, #20]	; (80084fc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x40>)
 80084ea:	0018      	movs	r0, r3
 80084ec:	f7ff fdf6 	bl	80080dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f0:	4b02      	ldr	r3, [pc, #8]	; (80084fc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b002      	add	sp, #8
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	20000fec 	.word	0x20000fec
 8008500:	08008d8c 	.word	0x08008d8c

08008504 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	0002      	movs	r2, r0
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	1dfb      	adds	r3, r7, #7
 8008510:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008512:	1dfb      	adds	r3, r7, #7
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	4908      	ldr	r1, [pc, #32]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008520:	0018      	movs	r0, r3
 8008522:	f7ff fddb 	bl	80080dc <USBD_GetString>
 8008526:	e005      	b.n	8008534 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4905      	ldr	r1, [pc, #20]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800852e:	0018      	movs	r0, r3
 8008530:	f7ff fdd4 	bl	80080dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008536:	0018      	movs	r0, r3
 8008538:	46bd      	mov	sp, r7
 800853a:	b002      	add	sp, #8
 800853c:	bd80      	pop	{r7, pc}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	20000fec 	.word	0x20000fec
 8008544:	08008d98 	.word	0x08008d98

08008548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800854e:	4b10      	ldr	r3, [pc, #64]	; (8008590 <Get_SerialNum+0x48>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <Get_SerialNum+0x4c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800855a:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <Get_SerialNum+0x50>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	18d3      	adds	r3, r2, r3
 8008566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800856e:	490b      	ldr	r1, [pc, #44]	; (800859c <Get_SerialNum+0x54>)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2208      	movs	r2, #8
 8008574:	0018      	movs	r0, r3
 8008576:	f000 f815 	bl	80085a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800857a:	4909      	ldr	r1, [pc, #36]	; (80085a0 <Get_SerialNum+0x58>)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2204      	movs	r2, #4
 8008580:	0018      	movs	r0, r3
 8008582:	f000 f80f 	bl	80085a4 <IntToUnicode>
  }
}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	46bd      	mov	sp, r7
 800858a:	b004      	add	sp, #16
 800858c:	bd80      	pop	{r7, pc}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	1ff80050 	.word	0x1ff80050
 8008594:	1ff80054 	.word	0x1ff80054
 8008598:	1ff80058 	.word	0x1ff80058
 800859c:	20000162 	.word	0x20000162
 80085a0:	20000172 	.word	0x20000172

080085a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	1dfb      	adds	r3, r7, #7
 80085b0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80085b2:	2117      	movs	r1, #23
 80085b4:	187b      	adds	r3, r7, r1
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80085ba:	187b      	adds	r3, r7, r1
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e02f      	b.n	8008622 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	0f1b      	lsrs	r3, r3, #28
 80085c6:	2b09      	cmp	r3, #9
 80085c8:	d80d      	bhi.n	80085e6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	0f1b      	lsrs	r3, r3, #28
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	2317      	movs	r3, #23
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	0019      	movs	r1, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	185b      	adds	r3, r3, r1
 80085de:	3230      	adds	r2, #48	; 0x30
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]
 80085e4:	e00c      	b.n	8008600 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	0f1b      	lsrs	r3, r3, #28
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	2317      	movs	r3, #23
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	0019      	movs	r1, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	185b      	adds	r3, r3, r1
 80085fa:	3237      	adds	r2, #55	; 0x37
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008606:	2117      	movs	r1, #23
 8008608:	187b      	adds	r3, r7, r1
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	3301      	adds	r3, #1
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	18d3      	adds	r3, r2, r3
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008618:	187b      	adds	r3, r7, r1
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	187b      	adds	r3, r7, r1
 800861e:	3201      	adds	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	2317      	movs	r3, #23
 8008624:	18fa      	adds	r2, r7, r3
 8008626:	1dfb      	adds	r3, r7, #7
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d3c8      	bcc.n	80085c2 <IntToUnicode+0x1e>
  }
}
 8008630:	46c0      	nop			; (mov r8, r8)
 8008632:	46bd      	mov	sp, r7
 8008634:	b006      	add	sp, #24
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <HAL_PCD_MspInit+0x38>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d10e      	bne.n	8008668 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <HAL_PCD_MspInit+0x3c>)
 800864c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <HAL_PCD_MspInit+0x3c>)
 8008650:	2180      	movs	r1, #128	; 0x80
 8008652:	0409      	lsls	r1, r1, #16
 8008654:	430a      	orrs	r2, r1
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	201f      	movs	r0, #31
 800865e:	f7f8 fcd1 	bl	8001004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008662:	201f      	movs	r0, #31
 8008664:	f7f8 fce3 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008668:	46c0      	nop			; (mov r8, r8)
 800866a:	46bd      	mov	sp, r7
 800866c:	b002      	add	sp, #8
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40005c00 	.word	0x40005c00
 8008674:	40021000 	.word	0x40021000

08008678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	23bc      	movs	r3, #188	; 0xbc
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	58d2      	ldr	r2, [r2, r3]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	21ac      	movs	r1, #172	; 0xac
 800868c:	0089      	lsls	r1, r1, #2
 800868e:	468c      	mov	ip, r1
 8008690:	4463      	add	r3, ip
 8008692:	0019      	movs	r1, r3
 8008694:	0010      	movs	r0, r2
 8008696:	f7fe fd57 	bl	8007148 <USBD_LL_SetupStage>
}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	46bd      	mov	sp, r7
 800869e:	b002      	add	sp, #8
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a2:	b590      	push	{r4, r7, lr}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	000a      	movs	r2, r1
 80086ac:	1cfb      	adds	r3, r7, #3
 80086ae:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	23bc      	movs	r3, #188	; 0xbc
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	58d4      	ldr	r4, [r2, r3]
 80086b8:	1cfb      	adds	r3, r7, #3
 80086ba:	781a      	ldrb	r2, [r3, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	23be      	movs	r3, #190	; 0xbe
 80086c0:	0059      	lsls	r1, r3, #1
 80086c2:	0013      	movs	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	18c3      	adds	r3, r0, r3
 80086cc:	185b      	adds	r3, r3, r1
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	1cfb      	adds	r3, r7, #3
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	0019      	movs	r1, r3
 80086d6:	0020      	movs	r0, r4
 80086d8:	f7fe fd92 	bl	8007200 <USBD_LL_DataOutStage>
}
 80086dc:	46c0      	nop			; (mov r8, r8)
 80086de:	46bd      	mov	sp, r7
 80086e0:	b003      	add	sp, #12
 80086e2:	bd90      	pop	{r4, r7, pc}

080086e4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	000a      	movs	r2, r1
 80086ee:	1cfb      	adds	r3, r7, #3
 80086f0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	23bc      	movs	r3, #188	; 0xbc
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	58d0      	ldr	r0, [r2, r3]
 80086fa:	1cfb      	adds	r3, r7, #3
 80086fc:	781a      	ldrb	r2, [r3, #0]
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	0013      	movs	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	189b      	adds	r3, r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	18cb      	adds	r3, r1, r3
 800870a:	333c      	adds	r3, #60	; 0x3c
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	1cfb      	adds	r3, r7, #3
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	0019      	movs	r1, r3
 8008714:	f7fe fdf6 	bl	8007304 <USBD_LL_DataInStage>
}
 8008718:	46c0      	nop			; (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b002      	add	sp, #8
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	23bc      	movs	r3, #188	; 0xbc
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	58d3      	ldr	r3, [r2, r3]
 8008730:	0018      	movs	r0, r3
 8008732:	f7fe ff27 	bl	8007584 <USBD_LL_SOF>
}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	46bd      	mov	sp, r7
 800873a:	b002      	add	sp, #8
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008746:	230f      	movs	r3, #15
 8008748:	18fb      	adds	r3, r7, r3
 800874a:	2201      	movs	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d001      	beq.n	800875a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008756:	f7f8 f8d3 	bl	8000900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	23bc      	movs	r3, #188	; 0xbc
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	58d2      	ldr	r2, [r2, r3]
 8008762:	230f      	movs	r3, #15
 8008764:	18fb      	adds	r3, r7, r3
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	0019      	movs	r1, r3
 800876a:	0010      	movs	r0, r2
 800876c:	f7fe fecf 	bl	800750e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	23bc      	movs	r3, #188	; 0xbc
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	58d3      	ldr	r3, [r2, r3]
 8008778:	0018      	movs	r0, r3
 800877a:	f7fe fe80 	bl	800747e <USBD_LL_Reset>
}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	46bd      	mov	sp, r7
 8008782:	b004      	add	sp, #16
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	23bc      	movs	r3, #188	; 0xbc
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	58d3      	ldr	r3, [r2, r3]
 8008798:	0018      	movs	r0, r3
 800879a:	f7fe fec9 	bl	8007530 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087a6:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_PCD_SuspendCallback+0x34>)
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	4b04      	ldr	r3, [pc, #16]	; (80087bc <HAL_PCD_SuspendCallback+0x34>)
 80087ac:	2106      	movs	r1, #6
 80087ae:	430a      	orrs	r2, r1
 80087b0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b002      	add	sp, #8
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	e000ed00 	.word	0xe000ed00

080087c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d0:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <HAL_PCD_ResumeCallback+0x38>)
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <HAL_PCD_ResumeCallback+0x38>)
 80087d6:	2106      	movs	r1, #6
 80087d8:	438a      	bics	r2, r1
 80087da:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80087dc:	f000 fa4a 	bl	8008c74 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	23bc      	movs	r3, #188	; 0xbc
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	58d3      	ldr	r3, [r2, r3]
 80087e8:	0018      	movs	r0, r3
 80087ea:	f7fe feb9 	bl	8007560 <USBD_LL_Resume>
}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	46bd      	mov	sp, r7
 80087f2:	b002      	add	sp, #8
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	e000ed00 	.word	0xe000ed00

080087fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008804:	4a2d      	ldr	r2, [pc, #180]	; (80088bc <USBD_LL_Init+0xc0>)
 8008806:	23bc      	movs	r3, #188	; 0xbc
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	23a6      	movs	r3, #166	; 0xa6
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4929      	ldr	r1, [pc, #164]	; (80088bc <USBD_LL_Init+0xc0>)
 8008816:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008818:	4b28      	ldr	r3, [pc, #160]	; (80088bc <USBD_LL_Init+0xc0>)
 800881a:	4a29      	ldr	r2, [pc, #164]	; (80088c0 <USBD_LL_Init+0xc4>)
 800881c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800881e:	4b27      	ldr	r3, [pc, #156]	; (80088bc <USBD_LL_Init+0xc0>)
 8008820:	2208      	movs	r2, #8
 8008822:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <USBD_LL_Init+0xc0>)
 8008826:	2202      	movs	r2, #2
 8008828:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800882a:	4b24      	ldr	r3, [pc, #144]	; (80088bc <USBD_LL_Init+0xc0>)
 800882c:	2202      	movs	r2, #2
 800882e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008830:	4b22      	ldr	r3, [pc, #136]	; (80088bc <USBD_LL_Init+0xc0>)
 8008832:	2200      	movs	r2, #0
 8008834:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008836:	4b21      	ldr	r3, [pc, #132]	; (80088bc <USBD_LL_Init+0xc0>)
 8008838:	2200      	movs	r2, #0
 800883a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800883c:	4b1f      	ldr	r3, [pc, #124]	; (80088bc <USBD_LL_Init+0xc0>)
 800883e:	2200      	movs	r2, #0
 8008840:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008842:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <USBD_LL_Init+0xc0>)
 8008844:	0018      	movs	r0, r3
 8008846:	f7f8 fed1 	bl	80015ec <HAL_PCD_Init>
 800884a:	1e03      	subs	r3, r0, #0
 800884c:	d001      	beq.n	8008852 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800884e:	f7f8 f857 	bl	8000900 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	23a6      	movs	r3, #166	; 0xa6
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	58d0      	ldr	r0, [r2, r3]
 800885a:	2318      	movs	r3, #24
 800885c:	2200      	movs	r2, #0
 800885e:	2100      	movs	r1, #0
 8008860:	f7fa fae2 	bl	8002e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	23a6      	movs	r3, #166	; 0xa6
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	58d0      	ldr	r0, [r2, r3]
 800886c:	2358      	movs	r3, #88	; 0x58
 800886e:	2200      	movs	r2, #0
 8008870:	2180      	movs	r1, #128	; 0x80
 8008872:	f7fa fad9 	bl	8002e28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	23a6      	movs	r3, #166	; 0xa6
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	58d0      	ldr	r0, [r2, r3]
 800887e:	23c0      	movs	r3, #192	; 0xc0
 8008880:	2200      	movs	r2, #0
 8008882:	2181      	movs	r1, #129	; 0x81
 8008884:	f7fa fad0 	bl	8002e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	23a6      	movs	r3, #166	; 0xa6
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	58d0      	ldr	r0, [r2, r3]
 8008890:	2388      	movs	r3, #136	; 0x88
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	2200      	movs	r2, #0
 8008896:	2101      	movs	r1, #1
 8008898:	f7fa fac6 	bl	8002e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	23a6      	movs	r3, #166	; 0xa6
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	58d0      	ldr	r0, [r2, r3]
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	2200      	movs	r2, #0
 80088aa:	2182      	movs	r1, #130	; 0x82
 80088ac:	f7fa fabc 	bl	8002e28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	0018      	movs	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b002      	add	sp, #8
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	200011ec 	.word	0x200011ec
 80088c0:	40005c00 	.word	0x40005c00

080088c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088cc:	210f      	movs	r1, #15
 80088ce:	187b      	adds	r3, r7, r1
 80088d0:	2200      	movs	r2, #0
 80088d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d4:	260e      	movs	r6, #14
 80088d6:	19bb      	adds	r3, r7, r6
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	23a6      	movs	r3, #166	; 0xa6
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	58d3      	ldr	r3, [r2, r3]
 80088e4:	000d      	movs	r5, r1
 80088e6:	187c      	adds	r4, r7, r1
 80088e8:	0018      	movs	r0, r3
 80088ea:	f7f8 ff8f 	bl	800180c <HAL_PCD_Start>
 80088ee:	0003      	movs	r3, r0
 80088f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f2:	19bc      	adds	r4, r7, r6
 80088f4:	0029      	movs	r1, r5
 80088f6:	187b      	adds	r3, r7, r1
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 f9c1 	bl	8008c82 <USBD_Get_USB_Status>
 8008900:	0003      	movs	r3, r0
 8008902:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008904:	19bb      	adds	r3, r7, r6
 8008906:	781b      	ldrb	r3, [r3, #0]
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b005      	add	sp, #20
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008910 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	000c      	movs	r4, r1
 800891a:	0010      	movs	r0, r2
 800891c:	0019      	movs	r1, r3
 800891e:	1cfb      	adds	r3, r7, #3
 8008920:	1c22      	adds	r2, r4, #0
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	1cbb      	adds	r3, r7, #2
 8008926:	1c02      	adds	r2, r0, #0
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	003b      	movs	r3, r7
 800892c:	1c0a      	adds	r2, r1, #0
 800892e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008930:	260f      	movs	r6, #15
 8008932:	19bb      	adds	r3, r7, r6
 8008934:	2200      	movs	r2, #0
 8008936:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008938:	250e      	movs	r5, #14
 800893a:	197b      	adds	r3, r7, r5
 800893c:	2200      	movs	r2, #0
 800893e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	23a6      	movs	r3, #166	; 0xa6
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	58d0      	ldr	r0, [r2, r3]
 8008948:	19bc      	adds	r4, r7, r6
 800894a:	1cbb      	adds	r3, r7, #2
 800894c:	781d      	ldrb	r5, [r3, #0]
 800894e:	003b      	movs	r3, r7
 8008950:	881a      	ldrh	r2, [r3, #0]
 8008952:	1cfb      	adds	r3, r7, #3
 8008954:	7819      	ldrb	r1, [r3, #0]
 8008956:	002b      	movs	r3, r5
 8008958:	f7f9 f925 	bl	8001ba6 <HAL_PCD_EP_Open>
 800895c:	0003      	movs	r3, r0
 800895e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008960:	250e      	movs	r5, #14
 8008962:	197c      	adds	r4, r7, r5
 8008964:	19bb      	adds	r3, r7, r6
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	0018      	movs	r0, r3
 800896a:	f000 f98a 	bl	8008c82 <USBD_Get_USB_Status>
 800896e:	0003      	movs	r3, r0
 8008970:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008972:	197b      	adds	r3, r7, r5
 8008974:	781b      	ldrb	r3, [r3, #0]
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b005      	add	sp, #20
 800897c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800897e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800897e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	000a      	movs	r2, r1
 8008988:	1cfb      	adds	r3, r7, #3
 800898a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898c:	210f      	movs	r1, #15
 800898e:	187b      	adds	r3, r7, r1
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008994:	260e      	movs	r6, #14
 8008996:	19bb      	adds	r3, r7, r6
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	23a6      	movs	r3, #166	; 0xa6
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	58d2      	ldr	r2, [r2, r3]
 80089a4:	000d      	movs	r5, r1
 80089a6:	187c      	adds	r4, r7, r1
 80089a8:	1cfb      	adds	r3, r7, #3
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	0019      	movs	r1, r3
 80089ae:	0010      	movs	r0, r2
 80089b0:	f7f9 f971 	bl	8001c96 <HAL_PCD_EP_Close>
 80089b4:	0003      	movs	r3, r0
 80089b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b8:	19bc      	adds	r4, r7, r6
 80089ba:	0029      	movs	r1, r5
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	0018      	movs	r0, r3
 80089c2:	f000 f95e 	bl	8008c82 <USBD_Get_USB_Status>
 80089c6:	0003      	movs	r3, r0
 80089c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80089ca:	19bb      	adds	r3, r7, r6
 80089cc:	781b      	ldrb	r3, [r3, #0]
}
 80089ce:	0018      	movs	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b005      	add	sp, #20
 80089d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d8:	b085      	sub	sp, #20
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	000a      	movs	r2, r1
 80089e0:	1cfb      	adds	r3, r7, #3
 80089e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e4:	210f      	movs	r1, #15
 80089e6:	187b      	adds	r3, r7, r1
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ec:	260e      	movs	r6, #14
 80089ee:	19bb      	adds	r3, r7, r6
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	23a6      	movs	r3, #166	; 0xa6
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	58d2      	ldr	r2, [r2, r3]
 80089fc:	000d      	movs	r5, r1
 80089fe:	187c      	adds	r4, r7, r1
 8008a00:	1cfb      	adds	r3, r7, #3
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	0019      	movs	r1, r3
 8008a06:	0010      	movs	r0, r2
 8008a08:	f7f9 fa3c 	bl	8001e84 <HAL_PCD_EP_SetStall>
 8008a0c:	0003      	movs	r3, r0
 8008a0e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a10:	19bc      	adds	r4, r7, r6
 8008a12:	0029      	movs	r1, r5
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	0018      	movs	r0, r3
 8008a1a:	f000 f932 	bl	8008c82 <USBD_Get_USB_Status>
 8008a1e:	0003      	movs	r3, r0
 8008a20:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008a22:	19bb      	adds	r3, r7, r6
 8008a24:	781b      	ldrb	r3, [r3, #0]
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b005      	add	sp, #20
 8008a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	000a      	movs	r2, r1
 8008a38:	1cfb      	adds	r3, r7, #3
 8008a3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	210f      	movs	r1, #15
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a44:	260e      	movs	r6, #14
 8008a46:	19bb      	adds	r3, r7, r6
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	23a6      	movs	r3, #166	; 0xa6
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	58d2      	ldr	r2, [r2, r3]
 8008a54:	000d      	movs	r5, r1
 8008a56:	187c      	adds	r4, r7, r1
 8008a58:	1cfb      	adds	r3, r7, #3
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	0019      	movs	r1, r3
 8008a5e:	0010      	movs	r0, r2
 8008a60:	f7f9 fa6c 	bl	8001f3c <HAL_PCD_EP_ClrStall>
 8008a64:	0003      	movs	r3, r0
 8008a66:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a68:	19bc      	adds	r4, r7, r6
 8008a6a:	0029      	movs	r1, r5
 8008a6c:	187b      	adds	r3, r7, r1
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	0018      	movs	r0, r3
 8008a72:	f000 f906 	bl	8008c82 <USBD_Get_USB_Status>
 8008a76:	0003      	movs	r3, r0
 8008a78:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008a7a:	19bb      	adds	r3, r7, r6
 8008a7c:	781b      	ldrb	r3, [r3, #0]
}
 8008a7e:	0018      	movs	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	b005      	add	sp, #20
 8008a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a86 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	000a      	movs	r2, r1
 8008a90:	1cfb      	adds	r3, r7, #3
 8008a92:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	23a6      	movs	r3, #166	; 0xa6
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	58d3      	ldr	r3, [r2, r3]
 8008a9c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a9e:	1cfb      	adds	r3, r7, #3
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0d      	bge.n	8008ac4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aa8:	1cfb      	adds	r3, r7, #3
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	227f      	movs	r2, #127	; 0x7f
 8008aae:	4013      	ands	r3, r2
 8008ab0:	68f9      	ldr	r1, [r7, #12]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	0013      	movs	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	189b      	adds	r3, r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	18cb      	adds	r3, r1, r3
 8008abe:	3302      	adds	r3, #2
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	e00d      	b.n	8008ae0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ac4:	1cfb      	adds	r3, r7, #3
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	227f      	movs	r2, #127	; 0x7f
 8008aca:	401a      	ands	r2, r3
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	23b5      	movs	r3, #181	; 0xb5
 8008ad0:	0059      	lsls	r1, r3, #1
 8008ad2:	0013      	movs	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	189b      	adds	r3, r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	18c3      	adds	r3, r0, r3
 8008adc:	185b      	adds	r3, r3, r1
 8008ade:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b004      	add	sp, #16
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	000a      	movs	r2, r1
 8008af2:	1cfb      	adds	r3, r7, #3
 8008af4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af6:	210f      	movs	r1, #15
 8008af8:	187b      	adds	r3, r7, r1
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afe:	260e      	movs	r6, #14
 8008b00:	19bb      	adds	r3, r7, r6
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	23a6      	movs	r3, #166	; 0xa6
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	58d2      	ldr	r2, [r2, r3]
 8008b0e:	000d      	movs	r5, r1
 8008b10:	187c      	adds	r4, r7, r1
 8008b12:	1cfb      	adds	r3, r7, #3
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	0019      	movs	r1, r3
 8008b18:	0010      	movs	r0, r2
 8008b1a:	f7f9 f819 	bl	8001b50 <HAL_PCD_SetAddress>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b22:	19bc      	adds	r4, r7, r6
 8008b24:	0029      	movs	r1, r5
 8008b26:	187b      	adds	r3, r7, r1
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f000 f8a9 	bl	8008c82 <USBD_Get_USB_Status>
 8008b30:	0003      	movs	r3, r0
 8008b32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008b34:	19bb      	adds	r3, r7, r6
 8008b36:	781b      	ldrb	r3, [r3, #0]
}
 8008b38:	0018      	movs	r0, r3
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	b005      	add	sp, #20
 8008b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b40 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	0008      	movs	r0, r1
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	0019      	movs	r1, r3
 8008b4e:	230b      	movs	r3, #11
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	1c02      	adds	r2, r0, #0
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	2408      	movs	r4, #8
 8008b58:	193b      	adds	r3, r7, r4
 8008b5a:	1c0a      	adds	r2, r1, #0
 8008b5c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5e:	2117      	movs	r1, #23
 8008b60:	187b      	adds	r3, r7, r1
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b66:	2516      	movs	r5, #22
 8008b68:	197b      	adds	r3, r7, r5
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	23a6      	movs	r3, #166	; 0xa6
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	58d0      	ldr	r0, [r2, r3]
 8008b76:	193b      	adds	r3, r7, r4
 8008b78:	881d      	ldrh	r5, [r3, #0]
 8008b7a:	000e      	movs	r6, r1
 8008b7c:	187c      	adds	r4, r7, r1
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	230b      	movs	r3, #11
 8008b82:	18fb      	adds	r3, r7, r3
 8008b84:	7819      	ldrb	r1, [r3, #0]
 8008b86:	002b      	movs	r3, r5
 8008b88:	f7f9 f933 	bl	8001df2 <HAL_PCD_EP_Transmit>
 8008b8c:	0003      	movs	r3, r0
 8008b8e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b90:	2516      	movs	r5, #22
 8008b92:	197c      	adds	r4, r7, r5
 8008b94:	0031      	movs	r1, r6
 8008b96:	187b      	adds	r3, r7, r1
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f000 f871 	bl	8008c82 <USBD_Get_USB_Status>
 8008ba0:	0003      	movs	r3, r0
 8008ba2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008ba4:	197b      	adds	r3, r7, r5
 8008ba6:	781b      	ldrb	r3, [r3, #0]
}
 8008ba8:	0018      	movs	r0, r3
 8008baa:	46bd      	mov	sp, r7
 8008bac:	b007      	add	sp, #28
 8008bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	0008      	movs	r0, r1
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	0019      	movs	r1, r3
 8008bbe:	230b      	movs	r3, #11
 8008bc0:	18fb      	adds	r3, r7, r3
 8008bc2:	1c02      	adds	r2, r0, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	2408      	movs	r4, #8
 8008bc8:	193b      	adds	r3, r7, r4
 8008bca:	1c0a      	adds	r2, r1, #0
 8008bcc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2117      	movs	r1, #23
 8008bd0:	187b      	adds	r3, r7, r1
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd6:	2516      	movs	r5, #22
 8008bd8:	197b      	adds	r3, r7, r5
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	23a6      	movs	r3, #166	; 0xa6
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	58d0      	ldr	r0, [r2, r3]
 8008be6:	193b      	adds	r3, r7, r4
 8008be8:	881d      	ldrh	r5, [r3, #0]
 8008bea:	000e      	movs	r6, r1
 8008bec:	187c      	adds	r4, r7, r1
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	230b      	movs	r3, #11
 8008bf2:	18fb      	adds	r3, r7, r3
 8008bf4:	7819      	ldrb	r1, [r3, #0]
 8008bf6:	002b      	movs	r3, r5
 8008bf8:	f7f9 f89e 	bl	8001d38 <HAL_PCD_EP_Receive>
 8008bfc:	0003      	movs	r3, r0
 8008bfe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c00:	2516      	movs	r5, #22
 8008c02:	197c      	adds	r4, r7, r5
 8008c04:	0031      	movs	r1, r6
 8008c06:	187b      	adds	r3, r7, r1
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f000 f839 	bl	8008c82 <USBD_Get_USB_Status>
 8008c10:	0003      	movs	r3, r0
 8008c12:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008c14:	197b      	adds	r3, r7, r5
 8008c16:	781b      	ldrb	r3, [r3, #0]
}
 8008c18:	0018      	movs	r0, r3
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	b007      	add	sp, #28
 8008c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c20 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	000a      	movs	r2, r1
 8008c2a:	1cfb      	adds	r3, r7, #3
 8008c2c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	23a6      	movs	r3, #166	; 0xa6
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	58d2      	ldr	r2, [r2, r3]
 8008c36:	1cfb      	adds	r3, r7, #3
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	0019      	movs	r1, r3
 8008c3c:	0010      	movs	r0, r2
 8008c3e:	f7f9 f8bf 	bl	8001dc0 <HAL_PCD_EP_GetRxCount>
 8008c42:	0003      	movs	r3, r0
}
 8008c44:	0018      	movs	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b002      	add	sp, #8
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_static_malloc+0x14>)
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b002      	add	sp, #8
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	46c0      	nop			; (mov r8, r8)
 8008c60:	2000019c 	.word	0x2000019c

08008c64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

}
 8008c6c:	46c0      	nop			; (mov r8, r8)
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	b002      	add	sp, #8
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008c78:	f7f7 fbf4 	bl	8000464 <SystemClock_Config>
}
 8008c7c:	46c0      	nop			; (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	0002      	movs	r2, r0
 8008c8a:	1dfb      	adds	r3, r7, #7
 8008c8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8e:	230f      	movs	r3, #15
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	2200      	movs	r2, #0
 8008c94:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008c96:	1dfb      	adds	r3, r7, #7
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d00d      	beq.n	8008cba <USBD_Get_USB_Status+0x38>
 8008c9e:	dc02      	bgt.n	8008ca6 <USBD_Get_USB_Status+0x24>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <USBD_Get_USB_Status+0x2e>
 8008ca4:	e018      	b.n	8008cd8 <USBD_Get_USB_Status+0x56>
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d00c      	beq.n	8008cc4 <USBD_Get_USB_Status+0x42>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d00f      	beq.n	8008cce <USBD_Get_USB_Status+0x4c>
 8008cae:	e013      	b.n	8008cd8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cb0:	230f      	movs	r3, #15
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
    break;
 8008cb8:	e013      	b.n	8008ce2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cba:	230f      	movs	r3, #15
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	701a      	strb	r2, [r3, #0]
    break;
 8008cc2:	e00e      	b.n	8008ce2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cc4:	230f      	movs	r3, #15
 8008cc6:	18fb      	adds	r3, r7, r3
 8008cc8:	2201      	movs	r2, #1
 8008cca:	701a      	strb	r2, [r3, #0]
    break;
 8008ccc:	e009      	b.n	8008ce2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cce:	230f      	movs	r3, #15
 8008cd0:	18fb      	adds	r3, r7, r3
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	701a      	strb	r2, [r3, #0]
    break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008cd8:	230f      	movs	r3, #15
 8008cda:	18fb      	adds	r3, r7, r3
 8008cdc:	2202      	movs	r2, #2
 8008cde:	701a      	strb	r2, [r3, #0]
    break;
 8008ce0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008ce2:	230f      	movs	r3, #15
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	781b      	ldrb	r3, [r3, #0]
}
 8008ce8:	0018      	movs	r0, r3
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b004      	add	sp, #16
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <__libc_init_array>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	4d0c      	ldr	r5, [pc, #48]	; (8008d28 <__libc_init_array+0x38>)
 8008cf6:	4c0d      	ldr	r4, [pc, #52]	; (8008d2c <__libc_init_array+0x3c>)
 8008cf8:	1b64      	subs	r4, r4, r5
 8008cfa:	10a4      	asrs	r4, r4, #2
 8008cfc:	42a6      	cmp	r6, r4
 8008cfe:	d109      	bne.n	8008d14 <__libc_init_array+0x24>
 8008d00:	2600      	movs	r6, #0
 8008d02:	f000 f821 	bl	8008d48 <_init>
 8008d06:	4d0a      	ldr	r5, [pc, #40]	; (8008d30 <__libc_init_array+0x40>)
 8008d08:	4c0a      	ldr	r4, [pc, #40]	; (8008d34 <__libc_init_array+0x44>)
 8008d0a:	1b64      	subs	r4, r4, r5
 8008d0c:	10a4      	asrs	r4, r4, #2
 8008d0e:	42a6      	cmp	r6, r4
 8008d10:	d105      	bne.n	8008d1e <__libc_init_array+0x2e>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	00b3      	lsls	r3, r6, #2
 8008d16:	58eb      	ldr	r3, [r5, r3]
 8008d18:	4798      	blx	r3
 8008d1a:	3601      	adds	r6, #1
 8008d1c:	e7ee      	b.n	8008cfc <__libc_init_array+0xc>
 8008d1e:	00b3      	lsls	r3, r6, #2
 8008d20:	58eb      	ldr	r3, [r5, r3]
 8008d22:	4798      	blx	r3
 8008d24:	3601      	adds	r6, #1
 8008d26:	e7f2      	b.n	8008d0e <__libc_init_array+0x1e>
 8008d28:	08008f0c 	.word	0x08008f0c
 8008d2c:	08008f0c 	.word	0x08008f0c
 8008d30:	08008f0c 	.word	0x08008f0c
 8008d34:	08008f10 	.word	0x08008f10

08008d38 <memset>:
 8008d38:	0003      	movs	r3, r0
 8008d3a:	1812      	adds	r2, r2, r0
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d100      	bne.n	8008d42 <memset+0xa>
 8008d40:	4770      	bx	lr
 8008d42:	7019      	strb	r1, [r3, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	e7f9      	b.n	8008d3c <memset+0x4>

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	46c0      	nop			; (mov r8, r8)
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
