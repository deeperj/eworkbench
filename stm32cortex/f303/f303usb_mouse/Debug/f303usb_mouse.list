
f303usb_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007a3c  08007a3c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a3c  08007a3c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000164  08007ba8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08007ba8  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a1d  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e7c  00000000  00000000  00035bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  000398e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049f9  00000000  00000000  0003a628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7f8  00000000  00000000  0003f021  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097a8c  00000000  00000000  0004e819  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e62a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba8  00000000  00000000  000e6320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079ac 	.word	0x080079ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	080079ac 	.word	0x080079ac

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 faad 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f821 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8ff 	bl	80003d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f87f 	bl	80002dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80001de:	f000 f8bd 	bl	800035c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e2:	f006 ffd3 	bl	800718c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  buffer[1]=100;
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <main+0x48>)
 80001e8:	2264      	movs	r2, #100	; 0x64
 80001ea:	705a      	strb	r2, [r3, #1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET){
 80001ec:	2101      	movs	r1, #1
 80001ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f2:	f000 fdaf 	bl	8000d54 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d1f7      	bne.n	80001ec <main+0x24>
		  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 80001fc:	2204      	movs	r2, #4
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <main+0x48>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x4c>)
 8000202:	f005 fed9 	bl	8005fb8 <USBD_HID_SendReport>
		  HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f000 faf6 	bl	80007f8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET){
 800020c:	e7ee      	b.n	80001ec <main+0x24>
 800020e:	bf00      	nop
 8000210:	200001e4 	.word	0x200001e4
 8000214:	2000025c 	.word	0x2000025c

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09e      	sub	sp, #120	; 0x78
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f007 fbb8 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	223c      	movs	r2, #60	; 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f007 fbaa 	bl	800799c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000248:	2303      	movs	r3, #3
 800024a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800024c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000250:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800026c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000272:	4618      	mov	r0, r3
 8000274:	f002 f998 	bl	80025a8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027e:	f000 f92b 	bl	80004d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 f88a 	bl	80033b8 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002aa:	f000 f915 	bl	80004d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <SystemClock_Config+0xc0>)
 80002b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fa60 	bl	8003784 <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002ca:	f000 f905 	bl	80004d8 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3778      	adds	r7, #120	; 0x78
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	00020020 	.word	0x00020020

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <MX_I2C1_Init+0x74>)
 8000318:	f000 fd4c 	bl	8000db4 <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f8d9 	bl	80004d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <MX_I2C1_Init+0x74>)
 800032a:	f000 fdd2 	bl	8000ed2 <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f8d0 	bl	80004d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_I2C1_Init+0x74>)
 800033c:	f000 fe14 	bl	8000f68 <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f8c7 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000198 	.word	0x20000198
 8000354:	40005400 	.word	0x40005400
 8000358:	2000090e 	.word	0x2000090e

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <MX_SPI1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000376:	f44f 7240 	mov.w	r2, #768	; 0x300
 800037a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_SPI1_Init+0x74>)
 800038a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000392:	2208      	movs	r2, #8
 8000394:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_SPI1_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_SPI1_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_SPI1_Init+0x74>)
 80003bc:	f003 fb92 	bl	8003ae4 <HAL_SPI_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f887 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200001f4 	.word	0x200001f4
 80003d4:	40013000 	.word	0x40013000

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <MX_GPIO_Init+0xf4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a36      	ldr	r2, [pc, #216]	; (80004cc <MX_GPIO_Init+0xf4>)
 80003f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b34      	ldr	r3, [pc, #208]	; (80004cc <MX_GPIO_Init+0xf4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b31      	ldr	r3, [pc, #196]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a30      	ldr	r2, [pc, #192]	; (80004cc <MX_GPIO_Init+0xf4>)
 800040c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0xf4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a24      	ldr	r2, [pc, #144]	; (80004cc <MX_GPIO_Init+0xf4>)
 800043c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a1e      	ldr	r2, [pc, #120]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_GPIO_Init+0xf4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000466:	2200      	movs	r2, #0
 8000468:	f64f 7108 	movw	r1, #65288	; 0xff08
 800046c:	4818      	ldr	r0, [pc, #96]	; (80004d0 <MX_GPIO_Init+0xf8>)
 800046e:	f000 fc89 	bl	8000d84 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000472:	2337      	movs	r3, #55	; 0x37
 8000474:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <MX_GPIO_Init+0xfc>)
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	4812      	ldr	r0, [pc, #72]	; (80004d0 <MX_GPIO_Init+0xf8>)
 8000486:	f000 faeb 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800048a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800048e:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	2301      	movs	r3, #1
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2300      	movs	r3, #0
 800049a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	4619      	mov	r1, r3
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <MX_GPIO_Init+0xf8>)
 80004a4:	f000 fadc 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4619      	mov	r1, r3
 80004ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004be:	f000 facf 	bl	8000a60 <HAL_GPIO_Init>

}
 80004c2:	bf00      	nop
 80004c4:	3728      	adds	r7, #40	; 0x28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48001000 	.word	0x48001000
 80004d4:	10120000 	.word	0x10120000

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_MspInit+0x44>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <HAL_MspInit+0x44>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <HAL_MspInit+0x44>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_MspInit+0x44>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800051e:	2007      	movs	r0, #7
 8000520:	f000 fa5c 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_I2C_MspInit+0x7c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d127      	bne.n	80005a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_I2C_MspInit+0x80>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <HAL_I2C_MspInit+0x80>)
 8000558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_I2C_MspInit+0x80>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800056a:	23c0      	movs	r3, #192	; 0xc0
 800056c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056e:	2312      	movs	r3, #18
 8000570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000572:	2301      	movs	r3, #1
 8000574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000576:	2303      	movs	r3, #3
 8000578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800057a:	2304      	movs	r3, #4
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <HAL_I2C_MspInit+0x84>)
 8000586:	f000 fa6b 	bl	8000a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_I2C_MspInit+0x80>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_I2C_MspInit+0x80>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_I2C_MspInit+0x80>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	; 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40005400 	.word	0x40005400
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400

080005b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <HAL_SPI_MspInit+0x7c>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d128      	bne.n	800062c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_SPI_MspInit+0x80>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <HAL_SPI_MspInit+0x80>)
 80005e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_SPI_MspInit+0x80>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_SPI_MspInit+0x80>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <HAL_SPI_MspInit+0x80>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <HAL_SPI_MspInit+0x80>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800060a:	23e0      	movs	r3, #224	; 0xe0
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800061a:	2305      	movs	r3, #5
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f000 fa1a 	bl	8000a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013000 	.word	0x40013000
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f892 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800069e:	f000 fdb3 	bl	8001208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000720 	.word	0x20000720

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <SystemInit+0x28>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <SystemInit+0x28>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x28>)
 80006c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c6:	609a      	str	r2, [r3, #8]
#endif
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006de:	e003      	b.n	80006e8 <LoopCopyDataInit>

080006e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006e6:	3104      	adds	r1, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <LoopForever+0xe>)
	adds	r2, r0, r1
 80006ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006f0:	d3f6      	bcc.n	80006e0 <CopyDataInit>
	ldr	r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006f4:	e002      	b.n	80006fc <LoopFillZerobss>

080006f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006f8:	f842 3b04 	str.w	r3, [r2], #4

080006fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <LoopForever+0x16>)
	cmp	r2, r3
 80006fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000700:	d3f9      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000702:	f7ff ffd3 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f007 f925 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fd5d 	bl	80001c8 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000714:	08007a44 	.word	0x08007a44
	ldr	r0, =_sdata
 8000718:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800071c:	20000164 	.word	0x20000164
	ldr	r2, =_sbss
 8000720:	20000164 	.word	0x20000164
	ldr	r3, = _ebss
 8000724:	20000a0c 	.word	0x20000a0c

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f94d 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff fece 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f965 	bl	8000a46 <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 f92d 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_IncTick+0x20>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x24>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_IncTick+0x24>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000258 	.word	0x20000258

080007e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_GetTick+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000258 	.word	0x20000258

080007f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff ffee 	bl	80007e0 <HAL_GetTick>
 8000804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000810:	d005      	beq.n	800081e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_Delay+0x40>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800081e:	bf00      	nop
 8000820:	f7ff ffde 	bl	80007e0 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d8f7      	bhi.n	8000820 <HAL_Delay+0x28>
  {
  }
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000008 	.word	0x20000008

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4907      	ldr	r1, [pc, #28]	; (80008d8 <__NVIC_EnableIRQ+0x38>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	; 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff8e 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff29 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff3e 	bl	8000884 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff8e 	bl	8000930 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5d 	bl	80008dc <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff31 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffa2 	bl	8000998 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e154      	b.n	8000d1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 8146 	beq.w	8000d14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d00b      	beq.n	8000aa8 <HAL_GPIO_Init+0x48>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9c:	2b11      	cmp	r3, #17
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b12      	cmp	r3, #18
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	f003 0201 	and.w	r2, r3, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_Init+0xea>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b12      	cmp	r3, #18
 8000b48:	d123      	bne.n	8000b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0203 	and.w	r2, r3, #3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 80a0 	beq.w	8000d14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd4:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a57      	ldr	r2, [pc, #348]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b55      	ldr	r3, [pc, #340]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bec:	4a53      	ldr	r2, [pc, #332]	; (8000d3c <HAL_GPIO_Init+0x2dc>)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c16:	d019      	beq.n	8000c4c <HAL_GPIO_Init+0x1ec>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d013      	beq.n	8000c48 <HAL_GPIO_Init+0x1e8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_GPIO_Init+0x2e4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d00d      	beq.n	8000c44 <HAL_GPIO_Init+0x1e4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a47      	ldr	r2, [pc, #284]	; (8000d48 <HAL_GPIO_Init+0x2e8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d007      	beq.n	8000c40 <HAL_GPIO_Init+0x1e0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <HAL_GPIO_Init+0x2ec>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d101      	bne.n	8000c3c <HAL_GPIO_Init+0x1dc>
 8000c38:	2304      	movs	r3, #4
 8000c3a:	e008      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5e:	4937      	ldr	r1, [pc, #220]	; (8000d3c <HAL_GPIO_Init+0x2dc>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c6c:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c90:	4a2f      	ldr	r2, [pc, #188]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cba:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa22 f303 	lsr.w	r3, r2, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f47f aea3 	bne.w	8000a70 <HAL_GPIO_Init+0x10>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e001      	b.n	8000d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
 8000d90:	4613      	mov	r3, r2
 8000d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e081      	b.n	8000eca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fba8 	bl	8000530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2224      	movs	r2, #36	; 0x24
 8000de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0201 	bic.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	e006      	b.n	8000e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d104      	bne.n	8000e4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	ea42 0103 	orr.w	r1, r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	021a      	lsls	r2, r3, #8
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69d9      	ldr	r1, [r3, #28]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1a      	ldr	r2, [r3, #32]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b20      	cmp	r3, #32
 8000ee6:	d138      	bne.n	8000f5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e032      	b.n	8000f5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2224      	movs	r2, #36	; 0x24
 8000f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0201 	orr.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f5a:	2302      	movs	r3, #2
  }
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	d139      	bne.n	8000ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e033      	b.n	8000ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2224      	movs	r2, #36	; 0x24
 8000f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ff2:	2302      	movs	r3, #2
  }
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af06      	add	r7, sp, #24
 8001006:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0d0      	b.n	80011b4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f006 f9e4 	bl	80073f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fdfc 	bl	8003c36 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e04c      	b.n	80010de <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	440b      	add	r3, r1
 8001054:	3301      	adds	r3, #1
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	b298      	uxth	r0, r3
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	3336      	adds	r3, #54	; 0x36
 8001082:	4602      	mov	r2, r0
 8001084:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3303      	adds	r3, #3
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	3338      	adds	r3, #56	; 0x38
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	333c      	adds	r3, #60	; 0x3c
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3340      	adds	r3, #64	; 0x40
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3301      	adds	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ad      	bcc.n	8001044 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e044      	b.n	8001178 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	3301      	adds	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3b5      	bcc.n	80010ee <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	687e      	ldr	r6, [r7, #4]
 800118a:	466d      	mov	r5, sp
 800118c:	f106 0410 	add.w	r4, r6, #16
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	602b      	str	r3, [r5, #0]
 8001198:	1d33      	adds	r3, r6, #4
 800119a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	f002 fd65 	bl	8003c6c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_PCD_Start+0x16>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e016      	b.n	8001200 <HAL_PCD_Start+0x44>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fd12 	bl	8003c08 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011e4:	2101      	movs	r1, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f006 fb7c 	bl	80078e4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fceb 	bl	8005bcc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fce4 	bl	8005be2 <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001224:	d102      	bne.n	800122c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fade 	bl	80017e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f004 fcd6 	bl	8005be2 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d112      	bne.n	8001268 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001254:	b292      	uxth	r2, r2
 8001256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f006 f96b 	bl	8007536 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001260:	2100      	movs	r1, #0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8c7 	bl	80013f6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f004 fcb8 	bl	8005be2 <USB_ReadInterrupts>
 8001272:	4603      	mov	r3, r0
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800127c:	d10b      	bne.n	8001296 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001290:	b292      	uxth	r2, r2
 8001292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fca1 	bl	8005be2 <USB_ReadInterrupts>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012aa:	d10b      	bne.n	80012c4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012be:	b292      	uxth	r2, r2
 80012c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 fc8a 	bl	8005be2 <USB_ReadInterrupts>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d8:	d126      	bne.n	8001328 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0204 	bic.w	r2, r2, #4
 80012ec:	b292      	uxth	r2, r2
 80012ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0208 	bic.w	r2, r2, #8
 8001304:	b292      	uxth	r2, r2
 8001306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f006 f94c 	bl	80075a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fc58 	bl	8005be2 <USB_ReadInterrupts>
 8001332:	4603      	mov	r3, r0
 8001334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133c:	d126      	bne.n	800138c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0208 	orr.w	r2, r2, #8
 8001350:	b292      	uxth	r2, r2
 8001352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0204 	orr.w	r2, r2, #4
 8001380:	b292      	uxth	r2, r2
 8001382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f006 f8f4 	bl	8007574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fc26 	bl	8005be2 <USB_ReadInterrupts>
 8001396:	4603      	mov	r3, r0
 8001398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a0:	d10e      	bne.n	80013c0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013b4:	b292      	uxth	r2, r2
 80013b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f006 f8ad 	bl	800751a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 fc0c 	bl	8005be2 <USB_ReadInterrupts>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d4:	d10b      	bne.n	80013ee <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e8:	b292      	uxth	r2, r2
 80013ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_PCD_SetAddress+0x1a>
 800140c:	2302      	movs	r3, #2
 800140e:	e013      	b.n	8001438 <HAL_PCD_SetAddress+0x42>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fbbb 	bl	8005ba4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	460b      	mov	r3, r1
 8001454:	803b      	strh	r3, [r7, #0]
 8001456:	4613      	mov	r3, r2
 8001458:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800145e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	da0e      	bge.n	8001484 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	705a      	strb	r2, [r3, #1]
 8001482:	e00e      	b.n	80014a2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 0207 	and.w	r2, r3, #7
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014ae:	883a      	ldrh	r2, [r7, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	78ba      	ldrb	r2, [r7, #2]
 80014b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d102      	bne.n	80014d8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_EP_Open+0xa6>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e00e      	b.n	8001504 <HAL_PCD_EP_Open+0xc4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fbdb 	bl	8003cb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001502:	7afb      	ldrb	r3, [r7, #11]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0e      	bge.n	800153e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	705a      	strb	r2, [r3, #1]
 800153c:	e00e      	b.n	800155c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	f003 0207 	and.w	r2, r3, #7
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_PCD_EP_Close+0x6a>
 8001572:	2302      	movs	r3, #2
 8001574:	e00e      	b.n	8001594 <HAL_PCD_EP_Close+0x88>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 ff01 	bl	800438c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	460b      	mov	r3, r1
 80015aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	f003 0207 	and.w	r2, r3, #7
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2200      	movs	r2, #0
 80015da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6979      	ldr	r1, [r7, #20]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 f8b4 	bl	8004766 <USB_EPStartXfer>
 80015fe:	e005      	b.n	800160c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6979      	ldr	r1, [r7, #20]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 f8ad 	bl	8004766 <USB_EPStartXfer>
  }

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	460b      	mov	r3, r1
 8001624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2201      	movs	r2, #1
 8001660:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	b2da      	uxtb	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2b00      	cmp	r3, #0
 8001676:	d106      	bne.n	8001686 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6979      	ldr	r1, [r7, #20]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 f871 	bl	8004766 <USB_EPStartXfer>
 8001684:	e005      	b.n	8001692 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6979      	ldr	r1, [r7, #20]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 f86a 	bl	8004766 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	f003 0207 	and.w	r2, r3, #7
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d901      	bls.n	80016ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e03e      	b.n	8001738 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da0e      	bge.n	80016e0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	705a      	strb	r2, [r3, #1]
 80016de:	e00c      	b.n	80016fa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	b2da      	uxtb	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_PCD_EP_SetStall+0x7e>
 8001716:	2302      	movs	r3, #2
 8001718:	e00e      	b.n	8001738 <HAL_PCD_EP_SetStall+0x9c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68f9      	ldr	r1, [r7, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f004 f93c 	bl	80059a6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 020f 	and.w	r2, r3, #15
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	d901      	bls.n	800175e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e040      	b.n	80017e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800175e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001762:	2b00      	cmp	r3, #0
 8001764:	da0e      	bge.n	8001784 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	705a      	strb	r2, [r3, #1]
 8001782:	e00e      	b.n	80017a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 0207 	and.w	r2, r3, #7
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_PCD_EP_ClrStall+0x82>
 80017be:	2302      	movs	r3, #2
 80017c0:	e00e      	b.n	80017e0 <HAL_PCD_EP_ClrStall+0xa0>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 f939 	bl	8005a48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017f0:	e2df      	b.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001808:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 8158 	bne.w	8001ac2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	d152      	bne.n	80018c2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182c:	81fb      	strh	r3, [r7, #14]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800183c:	b29b      	uxth	r3, r3
 800183e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3328      	adds	r3, #40	; 0x28
 8001844:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	3302      	adds	r3, #2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	441a      	add	r2, r3
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f005 fe2f 	bl	80074e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 828e 	beq.w	8001db2 <PCD_EP_ISR_Handler+0x5ca>
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 8289 	bne.w	8001db2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018c0:	e277      	b.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d034      	beq.n	8001946 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	3306      	adds	r3, #6
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800191a:	b29b      	uxth	r3, r3
 800191c:	f004 f9b6 	bl	8005c8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f640 738f 	movw	r3, #3983	; 0xf8f
 800192c:	4013      	ands	r3, r2
 800192e:	823b      	strh	r3, [r7, #16]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	8a3a      	ldrh	r2, [r7, #16]
 8001936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800193a:	b292      	uxth	r2, r2
 800193c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f005 fda4 	bl	800748c <HAL_PCD_SetupStageCallback>
 8001944:	e235      	b.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001946:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800194a:	2b00      	cmp	r3, #0
 800194c:	f280 8231 	bge.w	8001db2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b29a      	uxth	r2, r3
 8001958:	f640 738f 	movw	r3, #3983	; 0xf8f
 800195c:	4013      	ands	r3, r2
 800195e:	83bb      	strh	r3, [r7, #28]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	8bba      	ldrh	r2, [r7, #28]
 8001966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800196a:	b292      	uxth	r2, r2
 800196c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	3306      	adds	r3, #6
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d019      	beq.n	80019d6 <PCD_EP_ISR_Handler+0x1ee>
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	6959      	ldr	r1, [r3, #20]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f004 f966 	bl	8005c8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	441a      	add	r2, r3
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019ce:	2100      	movs	r1, #0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f005 fd6d 	bl	80074b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	4413      	add	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d112      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x23c>
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	e02f      	b.n	8001a84 <PCD_EP_ISR_Handler+0x29c>
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b3e      	cmp	r3, #62	; 0x3e
 8001a2a:	d813      	bhi.n	8001a54 <PCD_EP_ISR_Handler+0x26c>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <PCD_EP_ISR_Handler+0x25e>
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	3301      	adds	r3, #1
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	e017      	b.n	8001a84 <PCD_EP_ISR_Handler+0x29c>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <PCD_EP_ISR_Handler+0x286>
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a94:	827b      	strh	r3, [r7, #18]
 8001a96:	8a7b      	ldrh	r3, [r7, #18]
 8001a98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a9c:	827b      	strh	r3, [r7, #18]
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001aa4:	827b      	strh	r3, [r7, #18]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]
 8001ac0:	e177      	b.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ad4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f280 80ea 	bge.w	8001cb2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001af4:	4013      	ands	r3, r2
 8001af6:	853b      	strh	r3, [r7, #40]	; 0x28
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b10:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	7b1b      	ldrb	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d122      	bne.n	8001b74 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	3306      	adds	r3, #6
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	6959      	ldr	r1, [r3, #20]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	88da      	ldrh	r2, [r3, #6]
 8001b6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b6e:	f004 f88d 	bl	8005c8c <USB_ReadPMA>
 8001b72:	e07c      	b.n	8001c6e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	78db      	ldrb	r3, [r3, #3]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d108      	bne.n	8001b8e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b7e:	461a      	mov	r2, r3
 8001b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f923 	bl	8001dce <HAL_PCD_EP_DB_Receive>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001b8c:	e06f      	b.n	8001c6e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba8:	847b      	strh	r3, [r7, #34]	; 0x22
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	441a      	add	r2, r3
 8001bb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d021      	beq.n	8001c2c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c10:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d02a      	beq.n	8001c6e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	6959      	ldr	r1, [r3, #20]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	891a      	ldrh	r2, [r3, #8]
 8001c24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c26:	f004 f831 	bl	8005c8c <USB_ReadPMA>
 8001c2a:	e020      	b.n	8001c6e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3306      	adds	r3, #6
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c54:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	6959      	ldr	r1, [r3, #20]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	895a      	ldrh	r2, [r3, #10]
 8001c68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c6a:	f004 f80f 	bl	8005c8c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c74:	441a      	add	r2, r3
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c80:	441a      	add	r2, r3
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <PCD_EP_ISR_Handler+0x4b0>
 8001c8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d206      	bcs.n	8001ca6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f005 fc06 	bl	80074b0 <HAL_PCD_DataOutStageCallback>
 8001ca4:	e005      	b.n	8001cb2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f002 fd5a 	bl	8004766 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d07a      	beq.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cea:	843b      	strh	r3, [r7, #32]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	441a      	add	r2, r3
 8001cfa:	8c3b      	ldrh	r3, [r7, #32]
 8001cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	78db      	ldrb	r3, [r3, #3]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d108      	bne.n	8001d22 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d146      	bne.n	8001da6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d141      	bne.n	8001da6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	3302      	adds	r3, #2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	8bfb      	ldrh	r3, [r7, #30]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d906      	bls.n	8001d64 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	8bfb      	ldrh	r3, [r7, #30]
 8001d5c:	1ad2      	subs	r2, r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	619a      	str	r2, [r3, #24]
 8001d62:	e002      	b.n	8001d6a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f005 fbb4 	bl	80074e6 <HAL_PCD_DataInStageCallback>
 8001d7e:	e018      	b.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	8bfb      	ldrh	r3, [r7, #30]
 8001d86:	441a      	add	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	8bfb      	ldrh	r3, [r7, #30]
 8001d92:	441a      	add	r2, r3
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fce1 	bl	8004766 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001da4:	e005      	b.n	8001db2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001da6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001da8:	461a      	mov	r2, r3
 8001daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f91b 	bl	8001fe8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f6ff ad17 	blt.w	80017f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3738      	adds	r7, #56	; 0x38
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b088      	sub	sp, #32
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d07e      	beq.n	8001ee4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	8b7b      	ldrh	r3, [r7, #26]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d306      	bcc.n	8001e28 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	8b7b      	ldrh	r3, [r7, #26]
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	619a      	str	r2, [r3, #24]
 8001e26:	e002      	b.n	8001e2e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d123      	bne.n	8001e7e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e50:	833b      	strh	r3, [r7, #24]
 8001e52:	8b3b      	ldrh	r3, [r7, #24]
 8001e54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e58:	833b      	strh	r3, [r7, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	441a      	add	r2, r3
 8001e68:	8b3b      	ldrh	r3, [r7, #24]
 8001e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01f      	beq.n	8001ec8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	82fb      	strh	r3, [r7, #22]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	8afb      	ldrh	r3, [r7, #22]
 8001eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ec8:	8b7b      	ldrh	r3, [r7, #26]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6959      	ldr	r1, [r3, #20]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	891a      	ldrh	r2, [r3, #8]
 8001edc:	8b7b      	ldrh	r3, [r7, #26]
 8001ede:	f003 fed5 	bl	8005c8c <USB_ReadPMA>
 8001ee2:	e07c      	b.n	8001fde <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3306      	adds	r3, #6
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	8b7b      	ldrh	r3, [r7, #26]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d306      	bcc.n	8001f26 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	8b7b      	ldrh	r3, [r7, #26]
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	e002      	b.n	8001f2c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d123      	bne.n	8001f7c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4e:	83fb      	strh	r3, [r7, #30]
 8001f50:	8bfb      	ldrh	r3, [r7, #30]
 8001f52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f56:	83fb      	strh	r3, [r7, #30]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	8bfb      	ldrh	r3, [r7, #30]
 8001f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	83bb      	strh	r3, [r7, #28]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	8bbb      	ldrh	r3, [r7, #28]
 8001fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fc6:	8b7b      	ldrh	r3, [r7, #26]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6959      	ldr	r1, [r3, #20]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	895a      	ldrh	r2, [r3, #10]
 8001fd8:	8b7b      	ldrh	r3, [r7, #26]
 8001fda:	f003 fe57 	bl	8005c8c <USB_ReadPMA>
    }
  }

  return count;
 8001fde:	8b7b      	ldrh	r3, [r7, #26]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b092      	sub	sp, #72	; 0x48
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8132 	beq.w	8002266 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	3302      	adds	r3, #2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002032:	429a      	cmp	r2, r3
 8002034:	d906      	bls.n	8002044 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	e002      	b.n	800204a <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d12c      	bne.n	80020ac <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f005 fa44 	bl	80074e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 822f 	beq.w	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002084:	827b      	strh	r3, [r7, #18]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	441a      	add	r2, r3
 8002094:	8a7b      	ldrh	r3, [r7, #18]
 8002096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800209a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	8013      	strh	r3, [r2, #0]
 80020aa:	e20d      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01f      	beq.n	80020f6 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	441a      	add	r2, r3
 80020e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	f040 81e3 	bne.w	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002108:	441a      	add	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002114:	441a      	add	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d309      	bcc.n	800213a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	1ad2      	subs	r2, r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	621a      	str	r2, [r3, #32]
 8002138:	e014      	b.n	8002164 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800214e:	e009      	b.n	8002164 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d155      	bne.n	8002218 <HAL_PCD_EP_DB_Transmit+0x230>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4413      	add	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	011a      	lsls	r2, r3, #4
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4413      	add	r3, r2
 800218e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	801a      	strh	r2, [r3, #0]
 80021be:	e047      	b.n	8002250 <HAL_PCD_EP_DB_Transmit+0x268>
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	2b3e      	cmp	r3, #62	; 0x3e
 80021c4:	d811      	bhi.n	80021ea <HAL_PCD_EP_DB_Transmit+0x202>
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80021cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_PCD_EP_DB_Transmit+0x1f4>
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	3301      	adds	r3, #1
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	b29b      	uxth	r3, r3
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	801a      	strh	r2, [r3, #0]
 80021e8:	e032      	b.n	8002250 <HAL_PCD_EP_DB_Transmit+0x268>
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0x218>
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	b29b      	uxth	r3, r3
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	b29b      	uxth	r3, r3
 8002208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002210:	b29a      	uxth	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	e01b      	b.n	8002250 <HAL_PCD_EP_DB_Transmit+0x268>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d117      	bne.n	8002250 <HAL_PCD_EP_DB_Transmit+0x268>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	4413      	add	r3, r2
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	011a      	lsls	r2, r3, #4
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	4413      	add	r3, r2
 8002242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	b29a      	uxth	r2, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6959      	ldr	r1, [r3, #20]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	891a      	ldrh	r2, [r3, #8]
 800225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225e:	b29b      	uxth	r3, r3
 8002260:	f003 fccf 	bl	8005c02 <USB_WritePMA>
 8002264:	e130      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226e:	b29b      	uxth	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	3306      	adds	r3, #6
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002296:	429a      	cmp	r2, r3
 8002298:	d306      	bcc.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	619a      	str	r2, [r3, #24]
 80022a6:	e002      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12c      	bne.n	8002310 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f005 f912 	bl	80074e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 80fd 	bne.w	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]
 800230e:	e0db      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11f      	bne.n	800235a <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	b29b      	uxth	r3, r3
 8002358:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 80b1 	bne.w	80024c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800236c:	441a      	add	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002378:	441a      	add	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d309      	bcc.n	800239e <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	e014      	b.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80023a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023b2:	e009      	b.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d155      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0x49a>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	647b      	str	r3, [r7, #68]	; 0x44
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ea:	4413      	add	r3, r2
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	011a      	lsls	r2, r3, #4
 80023f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f6:	4413      	add	r3, r2
 80023f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002400:	2b00      	cmp	r3, #0
 8002402:	d112      	bne.n	800242a <HAL_PCD_EP_DB_Transmit+0x442>
 8002404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800240e:	b29a      	uxth	r2, r3
 8002410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002422:	b29a      	uxth	r2, r3
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	e044      	b.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	2b3e      	cmp	r3, #62	; 0x3e
 800242e:	d811      	bhi.n	8002454 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002442:	3301      	adds	r3, #1
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	b29b      	uxth	r3, r3
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	b29a      	uxth	r2, r3
 800244e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	e02f      	b.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x482>
 8002464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002466:	3b01      	subs	r3, #1
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246c:	b29b      	uxth	r3, r3
 800246e:	029b      	lsls	r3, r3, #10
 8002470:	b29b      	uxth	r3, r3
 8002472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247a:	b29a      	uxth	r2, r3
 800247c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	e018      	b.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d114      	bne.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	4413      	add	r3, r2
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	011a      	lsls	r2, r3, #4
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	4413      	add	r3, r2
 80024a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6959      	ldr	r1, [r3, #20]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	895a      	ldrh	r2, [r3, #10]
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f003 fb9d 	bl	8005c02 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e2:	823b      	strh	r3, [r7, #16]
 80024e4:	8a3b      	ldrh	r3, [r7, #16]
 80024e6:	f083 0310 	eor.w	r3, r3, #16
 80024ea:	823b      	strh	r3, [r7, #16]
 80024ec:	8a3b      	ldrh	r3, [r7, #16]
 80024ee:	f083 0320 	eor.w	r3, r3, #32
 80024f2:	823b      	strh	r3, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	8a3b      	ldrh	r3, [r7, #16]
 8002504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	b29b      	uxth	r3, r3
 8002516:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3748      	adds	r7, #72	; 0x48
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002522:	b480      	push	{r7}
 8002524:	b087      	sub	sp, #28
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
 8002530:	4613      	mov	r3, r2
 8002532:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002534:	897b      	ldrh	r3, [r7, #10]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002540:	897b      	ldrh	r3, [r7, #10]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e009      	b.n	800256c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002558:	897a      	ldrh	r2, [r7, #10]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d107      	bne.n	8002582 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	b29a      	uxth	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	80da      	strh	r2, [r3, #6]
 8002580:	e00b      	b.n	800259a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2201      	movs	r2, #1
 8002586:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	b29a      	uxth	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	b29a      	uxth	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f000 bef4 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 816a 	beq.w	80028a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025d2:	4bb3      	ldr	r3, [pc, #716]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d00c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025de:	4bb0      	ldr	r3, [pc, #704]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d159      	bne.n	800269e <HAL_RCC_OscConfig+0xf6>
 80025ea:	4bad      	ldr	r3, [pc, #692]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d152      	bne.n	800269e <HAL_RCC_OscConfig+0xf6>
 80025f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800260c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <HAL_RCC_OscConfig+0x82>
 8002624:	4b9e      	ldr	r3, [pc, #632]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0xae>
 800262a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002646:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800265e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002662:	fa92 f2a2 	rbit	r2, r2
 8002666:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800266a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 810c 	beq.w	80028a4 <HAL_RCC_OscConfig+0x2fc>
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8106 	bne.w	80028a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f000 be86 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d106      	bne.n	80026b8 <HAL_RCC_OscConfig+0x110>
 80026aa:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e030      	b.n	800271a <HAL_RCC_OscConfig+0x172>
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x134>
 80026c2:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a76      	ldr	r2, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01e      	b.n	800271a <HAL_RCC_OscConfig+0x172>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x15a>
 80026e8:	4b6d      	ldr	r3, [pc, #436]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a6c      	ldr	r2, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x172>
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	495d      	ldr	r1, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d059      	beq.n	80027ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe f852 	bl	80007e0 <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002742:	f7fe f84d 	bl	80007e0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d902      	bls.n	8002758 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	f000 be29 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800276c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x1e2>
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x20e>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800279e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ab      	beq.n	8002742 <HAL_RCC_OscConfig+0x19a>
 80027ea:	e05c      	b.n	80028a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fd fff8 	bl	80007e0 <HAL_GetTick>
 80027f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f6:	f7fd fff3 	bl	80007e0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d902      	bls.n	800280c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	f000 bdcf 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 800280c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002810:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002820:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_RCC_OscConfig+0x296>
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x2c2>
 800283e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002842:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002856:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800285a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800286e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002872:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800287e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ab      	bne.n	80027f6 <HAL_RCC_OscConfig+0x24e>
 800289e:	e002      	b.n	80028a6 <HAL_RCC_OscConfig+0x2fe>
 80028a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 816f 	beq.w	8002b94 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028b6:	4bd0      	ldr	r3, [pc, #832]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028c2:	4bcd      	ldr	r3, [pc, #820]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d16c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x400>
 80028ce:	4bca      	ldr	r3, [pc, #808]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d166      	bne.n	80029a8 <HAL_RCC_OscConfig+0x400>
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_RCC_OscConfig+0x362>
 8002904:	4bbc      	ldr	r3, [pc, #752]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	e013      	b.n	8002932 <HAL_RCC_OscConfig+0x38a>
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002922:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800292e:	4bb2      	ldr	r3, [pc, #712]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2202      	movs	r2, #2
 8002934:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002938:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002944:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f002 021f 	and.w	r2, r2, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_RCC_OscConfig+0x3cc>
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d002      	beq.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f000 bd1b 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4ba0      	ldr	r3, [pc, #640]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	21f8      	movs	r1, #248	; 0xf8
 8002984:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800298c:	fa91 f1a1 	rbit	r1, r1
 8002990:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002994:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002998:	fab1 f181 	clz	r1, r1
 800299c:	b2c9      	uxtb	r1, r1
 800299e:	408b      	lsls	r3, r1
 80029a0:	4995      	ldr	r1, [pc, #596]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e0f5      	b.n	8002b94 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8085 	beq.w	8002abe <HAL_RCC_OscConfig+0x516>
 80029b4:	2301      	movs	r3, #1
 80029b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	461a      	mov	r2, r3
 80029dc:	2301      	movs	r3, #1
 80029de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fd fefe 	bl	80007e0 <HAL_GetTick>
 80029e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fd fef9 	bl	80007e0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d902      	bls.n	8002a00 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f000 bcd5 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_OscConfig+0x488>
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	e013      	b.n	8002a58 <HAL_RCC_OscConfig+0x4b0>
 8002a30:	2302      	movs	r3, #2
 8002a32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a42:	2302      	movs	r3, #2
 8002a44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a62:	fa92 f2a2 	rbit	r2, r2
 8002a66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0220 	orr.w	r2, r2, #32
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0af      	beq.n	80029ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	21f8      	movs	r1, #248	; 0xf8
 8002a9a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002aa2:	fa91 f1a1 	rbit	r1, r1
 8002aa6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002aaa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002aae:	fab1 f181 	clz	r1, r1
 8002ab2:	b2c9      	uxtb	r1, r1
 8002ab4:	408b      	lsls	r3, r1
 8002ab6:	4950      	ldr	r1, [pc, #320]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e06a      	b.n	8002b94 <HAL_RCC_OscConfig+0x5ec>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fd fe79 	bl	80007e0 <HAL_GetTick>
 8002aee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fd fe74 	bl	80007e0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d902      	bls.n	8002b0a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f000 bc50 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_OscConfig+0x592>
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	e013      	b.n	8002b62 <HAL_RCC_OscConfig+0x5ba>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2202      	movs	r2, #2
 8002b64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b78:	fab2 f282 	clz	r2, r2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f002 021f 	and.w	r2, r2, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1af      	bne.n	8002af4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80da 	beq.w	8002d58 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d069      	beq.n	8002c82 <HAL_RCC_OscConfig+0x6da>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x654>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fd fe02 	bl	80007e0 <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be0:	e00e      	b.n	8002c00 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be2:	f7fd fdfd 	bl	80007e0 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d906      	bls.n	8002c00 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e3d9      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	10908120 	.word	0x10908120
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c16:	2202      	movs	r2, #2
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c2e:	2202      	movs	r2, #2
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4ba5      	ldr	r3, [pc, #660]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	6019      	str	r1, [r3, #0]
 8002c4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f1a3 	rbit	r1, r3
 8002c58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c5c:	6019      	str	r1, [r3, #0]
  return result;
 8002c5e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0b0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x63a>
 8002c80:	e06a      	b.n	8002d58 <HAL_RCC_OscConfig+0x7b0>
 8002c82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c98:	601a      	str	r2, [r3, #0]
  return result;
 8002c9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	; (8002edc <HAL_RCC_OscConfig+0x934>)
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fd fd94 	bl	80007e0 <HAL_GetTick>
 8002cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e009      	b.n	8002cd2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fd fd8f 	bl	80007e0 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e36b      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002cd2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	fa93 f2a3 	rbit	r2, r3
 8002d14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d22:	2102      	movs	r1, #2
 8002d24:	6019      	str	r1, [r3, #0]
 8002d26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f1a3 	rbit	r1, r3
 8002d30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d34:	6019      	str	r1, [r3, #0]
  return result;
 8002d36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1b2      	bne.n	8002cbe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8158 	beq.w	8003018 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6e:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	61d3      	str	r3, [r2, #28]
 8002d86:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f107 0308 	add.w	r3, r7, #8
 8002d98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11a      	bne.n	8002de2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db8:	f7fd fd12 	bl	80007e0 <HAL_GetTick>
 8002dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e009      	b.n	8002dd6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fd fd0d 	bl	80007e0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e2e9      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ef      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x852>
 8002dec:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e02f      	b.n	8002e5a <HAL_RCC_OscConfig+0x8b2>
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x876>
 8002e04:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e01d      	b.n	8002e5a <HAL_RCC_OscConfig+0x8b2>
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x89a>
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x8b2>
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6213      	str	r3, [r2, #32]
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d06b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fd fcbc 	bl	80007e0 <HAL_GetTick>
 8002e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fd fcb7 	bl	80007e0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e291      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002e86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eb4:	601a      	str	r2, [r3, #0]
  return result;
 8002eb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x93c>
 8002ed0:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x958>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	10908120 	.word	0x10908120
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4bbb      	ldr	r3, [pc, #748]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f04:	2102      	movs	r1, #2
 8002f06:	6011      	str	r1, [r2, #0]
 8002f08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	fa92 f1a2 	rbit	r1, r2
 8002f12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f16:	6011      	str	r1, [r2, #0]
  return result;
 8002f18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f002 021f 	and.w	r2, r2, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d099      	beq.n	8002e6e <HAL_RCC_OscConfig+0x8c6>
 8002f3a:	e063      	b.n	8003004 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fc50 	bl	80007e0 <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00b      	b.n	8002f5e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fd fc4b 	bl	80007e0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e225      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002f5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f62:	2202      	movs	r2, #2
 8002f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f8c:	601a      	str	r2, [r3, #0]
  return result;
 8002f8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_OscConfig+0xa06>
 8002fa8:	4b90      	ldr	r3, [pc, #576]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	e00d      	b.n	8002fca <HAL_RCC_OscConfig+0xa22>
 8002fae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fce:	2102      	movs	r1, #2
 8002fd0:	6011      	str	r1, [r2, #0]
 8002fd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	fa92 f1a2 	rbit	r1, r2
 8002fdc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fe0:	6011      	str	r1, [r2, #0]
  return result;
 8002fe2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f002 021f 	and.w	r2, r2, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1a0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003004:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b77      	ldr	r3, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a76      	ldr	r2, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 81c2 	beq.w	80033a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	4b71      	ldr	r3, [pc, #452]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	f000 819c 	beq.w	800336a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f040 8114 	bne.w	8003266 <HAL_RCC_OscConfig+0xcbe>
 800303e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003042:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800305c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fd fbb4 	bl	80007e0 <HAL_GetTick>
 8003078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	e009      	b.n	8003092 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fd fbaf 	bl	80007e0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e18b      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8003092:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030aa:	601a      	str	r2, [r3, #0]
  return result;
 80030ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_OscConfig+0xb24>
 80030c6:	4b49      	ldr	r3, [pc, #292]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0xb5c>
 80030cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003108:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fa92 f1a2 	rbit	r1, r2
 8003118:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800311c:	6011      	str	r1, [r2, #0]
  return result;
 800311e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0220 	orr.w	r2, r2, #32
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d19e      	bne.n	800307e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	430b      	orrs	r3, r1
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
 800315c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003174:	601a      	str	r2, [r3, #0]
  return result;
 8003176:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800317a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003186:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2301      	movs	r3, #1
 8003190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fd fb25 	bl	80007e0 <HAL_GetTick>
 8003196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319a:	e009      	b.n	80031b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd fb20 	bl	80007e0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0fc      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 80031b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031c8:	601a      	str	r2, [r3, #0]
  return result;
 80031ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0xc48>
 80031e4:	4b01      	ldr	r3, [pc, #4]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	e01e      	b.n	8003228 <HAL_RCC_OscConfig+0xc80>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800320e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	fa93 f2a3 	rbit	r2, r3
 800321e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800322c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	fa92 f1a2 	rbit	r1, r2
 800323c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003240:	6011      	str	r1, [r2, #0]
  return result;
 8003242:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fab2 f282 	clz	r2, r2
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f002 021f 	and.w	r2, r2, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d09b      	beq.n	800319c <HAL_RCC_OscConfig+0xbf4>
 8003264:	e0a0      	b.n	80033a8 <HAL_RCC_OscConfig+0xe00>
 8003266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800326a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327e:	601a      	str	r2, [r3, #0]
  return result;
 8003280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003284:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	2300      	movs	r3, #0
 800329a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fd faa0 	bl	80007e0 <HAL_GetTick>
 80032a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fd fa9b 	bl	80007e0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e077      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 80032ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fa93 f2a3 	rbit	r2, r3
 80032ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d2:	601a      	str	r2, [r3, #0]
  return result;
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_OscConfig+0xd4c>
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0xd84>
 80032f4:	f107 0320 	add.w	r3, r7, #32
 80032f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 0320 	add.w	r3, r7, #32
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f107 0318 	add.w	r3, r7, #24
 8003312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f107 0210 	add.w	r2, r7, #16
 8003330:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	f107 0210 	add.w	r2, r7, #16
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	fa92 f1a2 	rbit	r1, r2
 8003340:	f107 020c 	add.w	r2, r7, #12
 8003344:	6011      	str	r1, [r2, #0]
  return result;
 8003346:	f107 020c 	add.w	r2, r7, #12
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d19e      	bne.n	80032a6 <HAL_RCC_OscConfig+0xcfe>
 8003368:	e01e      	b.n	80033a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e018      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003380:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	429a      	cmp	r2, r3
 8003390:	d108      	bne.n	80033a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003392:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b09e      	sub	sp, #120	; 0x78
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e162      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b90      	ldr	r3, [pc, #576]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	498b      	ldr	r1, [pc, #556]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e14a      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	497f      	ldr	r1, [pc, #508]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80dc 	beq.w	80035e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d13c      	bne.n	80034ae <HAL_RCC_ClockConfig+0xf6>
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <HAL_RCC_ClockConfig+0xa6>
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e00f      	b.n	800347e <HAL_RCC_ClockConfig+0xc6>
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	667b      	str	r3, [r7, #100]	; 0x64
 800346c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
 8003472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003482:	65ba      	str	r2, [r7, #88]	; 0x58
 8003484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800348c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d17b      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0f3      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d13c      	bne.n	8003530 <HAL_RCC_ClockConfig+0x178>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x128>
 80034da:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_RCC_ClockConfig+0x148>
 80034e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fc:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003504:	63ba      	str	r2, [r7, #56]	; 0x38
 8003506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800350e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d13a      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b2      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_ClockConfig+0x1a0>
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e00d      	b.n	8003574 <HAL_RCC_ClockConfig+0x1bc>
 8003558:	2302      	movs	r3, #2
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	2302      	movs	r3, #2
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2202      	movs	r2, #2
 8003576:	61ba      	str	r2, [r7, #24]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	617a      	str	r2, [r7, #20]
  return result;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e079      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fd f914 	bl	80007e0 <HAL_GetTick>
 80035b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd f910 	bl	80007e0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e061      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d214      	bcs.n	800361c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e040      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	491a      	ldr	r1, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4912      	ldr	r1, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365a:	f000 f829 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800365e:	4601      	mov	r1, r0
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	60fa      	str	r2, [r7, #12]
  return result;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	40d3      	lsrs	r3, r2
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	fa21 f303 	lsr.w	r3, r1, r3
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_RCC_ClockConfig+0x2f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd f862 	bl	8000758 <HAL_InitTick>
  
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3778      	adds	r7, #120	; 0x78
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08007a0c 	.word	0x08007a0c
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
 80036b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x30>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x36>
 80036de:	e03c      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036e2:	623b      	str	r3, [r7, #32]
      break;
 80036e4:	e03c      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	607a      	str	r2, [r7, #4]
  return result;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	40d3      	lsrs	r3, r2
 8003704:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	220f      	movs	r2, #15
 8003714:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	60fa      	str	r2, [r7, #12]
  return result;
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	40d3      	lsrs	r3, r2
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_RCC_GetSysClockFreq+0xcc>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003738:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	e004      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	623b      	str	r3, [r7, #32]
      break;
 8003758:	e002      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800375c:	623b      	str	r3, [r7, #32]
      break;
 800375e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003760:	6a3b      	ldr	r3, [r7, #32]
}
 8003762:	4618      	mov	r0, r3
 8003764:	372c      	adds	r7, #44	; 0x2c
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	08007a1c 	.word	0x08007a1c
 800377c:	08007a2c 	.word	0x08007a2c
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b092      	sub	sp, #72	; 0x48
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80d7 	beq.w	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a8:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10e      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037de:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ea:	f7fc fff9 	bl	80007e0 <HAL_GetTick>
 80037ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	e008      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7fc fff5 	bl	80007e0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	; 0x64
 80037fe:	d901      	bls.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e169      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003818:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8084 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800382c:	429a      	cmp	r2, r3
 800382e:	d07c      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	461a      	mov	r2, r3
 800385a:	2301      	movs	r3, #1
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	461a      	mov	r2, r3
 800387e:	2300      	movs	r3, #0
 8003880:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003886:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d04b      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fc ffa5 	bl	80007e0 <HAL_GetTick>
 8003896:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fc ffa1 	bl	80007e0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e113      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80038b0:	2302      	movs	r3, #2
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	2302      	movs	r3, #2
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	61fb      	str	r3, [r7, #28]
  return result;
 80038c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d108      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038de:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	e00d      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40007000 	.word	0x40007000
 80038ec:	10908100 	.word	0x10908100
 80038f0:	2302      	movs	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	4b78      	ldr	r3, [pc, #480]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2202      	movs	r2, #2
 8003902:	613a      	str	r2, [r7, #16]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	fa92 f2a2 	rbit	r2, r2
 800390a:	60fa      	str	r2, [r7, #12]
  return result;
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f002 021f 	and.w	r2, r2, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0b7      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800392a:	4b6d      	ldr	r3, [pc, #436]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	496a      	ldr	r1, [pc, #424]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800393c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4a65      	ldr	r2, [pc, #404]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395c:	4b60      	ldr	r3, [pc, #384]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f023 0203 	bic.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	495d      	ldr	r1, [pc, #372]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4956      	ldr	r1, [pc, #344]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003998:	4b51      	ldr	r3, [pc, #324]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	494e      	ldr	r1, [pc, #312]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b6:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f023 0210 	bic.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4947      	ldr	r1, [pc, #284]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	493f      	ldr	r1, [pc, #252]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f2:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f023 0220 	bic.w	r2, r3, #32
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4938      	ldr	r1, [pc, #224]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a10:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4930      	ldr	r1, [pc, #192]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	4929      	ldr	r1, [pc, #164]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4921      	ldr	r1, [pc, #132]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	491a      	ldr	r1, [pc, #104]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	4912      	ldr	r1, [pc, #72]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	490b      	ldr	r1, [pc, #44]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3748      	adds	r7, #72	; 0x48
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e084      	b.n	8003c00 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fc fd51 	bl	80005b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b36:	d902      	bls.n	8003b3e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b4c:	d007      	beq.n	8003b5e <HAL_SPI_Init+0x7a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b56:	d002      	beq.n	8003b5e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b6e:	d903      	bls.n	8003b78 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
 8003b76:	e002      	b.n	8003b7e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0204 	and.w	r2, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	ea42 0103 	orr.w	r1, r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c3e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	f107 0014 	add.w	r0, r7, #20
 8003c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	b004      	add	sp, #16
 8003cac:	4770      	bx	lr
	...

08003cb0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b09b      	sub	sp, #108	; 0x6c
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	78db      	ldrb	r3, [r3, #3]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d81f      	bhi.n	8003d22 <USB_ActivateEndpoint+0x72>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <USB_ActivateEndpoint+0x38>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d15 	.word	0x08003d15
 8003cf0:	08003d2b 	.word	0x08003d2b
 8003cf4:	08003d07 	.word	0x08003d07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003cf8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d04:	e012      	b.n	8003d2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d0a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d12:	e00b      	b.n	8003d2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d20:	e004      	b.n	8003d2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003d28:	e000      	b.n	8003d2c <USB_ActivateEndpoint+0x7c>
      break;
 8003d2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b21b      	sxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b21b      	sxth	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	7b1b      	ldrb	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 8149 	bne.w	8004034 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8084 	beq.w	8003eb4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	011a      	lsls	r2, r3, #4
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	88db      	ldrh	r3, [r3, #6]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	81fb      	strh	r3, [r7, #14]
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01b      	beq.n	8003e30 <USB_ActivateEndpoint+0x180>
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	81bb      	strh	r3, [r7, #12]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	441a      	add	r2, r3
 8003e1a:	89bb      	ldrh	r3, [r7, #12]
 8003e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	78db      	ldrb	r3, [r3, #3]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d020      	beq.n	8003e7a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	813b      	strh	r3, [r7, #8]
 8003e50:	893b      	ldrh	r3, [r7, #8]
 8003e52:	f083 0320 	eor.w	r3, r3, #32
 8003e56:	813b      	strh	r3, [r7, #8]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	893b      	ldrh	r3, [r7, #8]
 8003e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8013      	strh	r3, [r2, #0]
 8003e78:	e27f      	b.n	800437a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]
 8003eb2:	e262      	b.n	800437a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	4413      	add	r3, r2
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	88db      	ldrh	r3, [r3, #6]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	4413      	add	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	4413      	add	r3, r2
 8003f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d112      	bne.n	8003f3a <USB_ActivateEndpoint+0x28a>
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	e02f      	b.n	8003f9a <USB_ActivateEndpoint+0x2ea>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f40:	d813      	bhi.n	8003f6a <USB_ActivateEndpoint+0x2ba>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <USB_ActivateEndpoint+0x2ac>
 8003f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f58:	3301      	adds	r3, #1
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	e017      	b.n	8003f9a <USB_ActivateEndpoint+0x2ea>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	663b      	str	r3, [r7, #96]	; 0x60
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <USB_ActivateEndpoint+0x2d4>
 8003f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f80:	3b01      	subs	r3, #1
 8003f82:	663b      	str	r3, [r7, #96]	; 0x60
 8003f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	83fb      	strh	r3, [r7, #30]
 8003fa8:	8bfb      	ldrh	r3, [r7, #30]
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01b      	beq.n	8003fea <USB_ActivateEndpoint+0x33a>
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	83bb      	strh	r3, [r7, #28]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	8bbb      	ldrh	r3, [r7, #28]
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004000:	837b      	strh	r3, [r7, #26]
 8004002:	8b7b      	ldrh	r3, [r7, #26]
 8004004:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004008:	837b      	strh	r3, [r7, #26]
 800400a:	8b7b      	ldrh	r3, [r7, #26]
 800400c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004010:	837b      	strh	r3, [r7, #26]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	8b7b      	ldrh	r3, [r7, #26]
 800401e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402e:	b29b      	uxth	r3, r3
 8004030:	8013      	strh	r3, [r2, #0]
 8004032:	e1a2      	b.n	800437a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004064:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	65bb      	str	r3, [r7, #88]	; 0x58
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004080:	4413      	add	r3, r2
 8004082:	65bb      	str	r3, [r7, #88]	; 0x58
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	011a      	lsls	r2, r3, #4
 800408a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800408c:	4413      	add	r3, r2
 800408e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	891b      	ldrh	r3, [r3, #8]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	b29b      	uxth	r3, r3
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	653b      	str	r3, [r7, #80]	; 0x50
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b4:	4413      	add	r3, r2
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	895b      	ldrh	r3, [r3, #10]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 8091 	bne.w	8004204 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80040f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80040f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01b      	beq.n	8004132 <USB_ActivateEndpoint+0x482>
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004110:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	441a      	add	r2, r3
 800411c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800411e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01b      	beq.n	8004182 <USB_ActivateEndpoint+0x4d2>
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800416e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800417e:	b29b      	uxth	r3, r3
 8004180:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	86bb      	strh	r3, [r7, #52]	; 0x34
 800419a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800419c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8013      	strh	r3, [r2, #0]
 8004202:	e0ba      	b.n	800437a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004214:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01d      	beq.n	800425c <USB_ActivateEndpoint+0x5ac>
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004258:	b29b      	uxth	r3, r3
 800425a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800426c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01d      	beq.n	80042b4 <USB_ActivateEndpoint+0x604>
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d024      	beq.n	8004306 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80042d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042da:	f083 0320 	eor.w	r3, r3, #32
 80042de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]
 8004304:	e01d      	b.n	8004342 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800432e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433e:	b29b      	uxth	r3, r3
 8004340:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004358:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	441a      	add	r2, r3
 8004364:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004376:	b29b      	uxth	r3, r3
 8004378:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800437a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800437e:	4618      	mov	r0, r3
 8004380:	376c      	adds	r7, #108	; 0x6c
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop

0800438c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800438c:	b480      	push	{r7}
 800438e:	b08d      	sub	sp, #52	; 0x34
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	7b1b      	ldrb	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 808e 	bne.w	80044bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d044      	beq.n	8004432 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	81bb      	strh	r3, [r7, #12]
 80043b6:	89bb      	ldrh	r3, [r7, #12]
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <USB_DeactivateEndpoint+0x6c>
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	817b      	strh	r3, [r7, #10]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	813b      	strh	r3, [r7, #8]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	893b      	ldrh	r3, [r7, #8]
 800441c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442c:	b29b      	uxth	r3, r3
 800442e:	8013      	strh	r3, [r2, #0]
 8004430:	e192      	b.n	8004758 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	827b      	strh	r3, [r7, #18]
 8004440:	8a7b      	ldrh	r3, [r7, #18]
 8004442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <USB_DeactivateEndpoint+0xf6>
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004460:	823b      	strh	r3, [r7, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8a3b      	ldrh	r3, [r7, #16]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004498:	81fb      	strh	r3, [r7, #14]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]
 80044ba:	e14d      	b.n	8004758 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	785b      	ldrb	r3, [r3, #1]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 80a5 	bne.w	8004610 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	843b      	strh	r3, [r7, #32]
 80044d4:	8c3b      	ldrh	r3, [r7, #32]
 80044d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01b      	beq.n	8004516 <USB_DeactivateEndpoint+0x18a>
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	83fb      	strh	r3, [r7, #30]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	8bfb      	ldrh	r3, [r7, #30]
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800450e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	83bb      	strh	r3, [r7, #28]
 8004524:	8bbb      	ldrh	r3, [r7, #28]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01b      	beq.n	8004566 <USB_DeactivateEndpoint+0x1da>
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004544:	837b      	strh	r3, [r7, #26]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8b7b      	ldrh	r3, [r7, #26]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	833b      	strh	r3, [r7, #24]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8b3b      	ldrh	r3, [r7, #24]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b4:	82fb      	strh	r3, [r7, #22]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	441a      	add	r2, r3
 80045c0:	8afb      	ldrh	r3, [r7, #22]
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	82bb      	strh	r3, [r7, #20]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8abb      	ldrh	r3, [r7, #20]
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]
 800460e:	e0a3      	b.n	8004758 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800461e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <USB_DeactivateEndpoint+0x2d4>
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800464c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465c:	b29b      	uxth	r3, r3
 800465e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800466e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <USB_DeactivateEndpoint+0x324>
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	847b      	strh	r3, [r7, #34]	; 0x22
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3734      	adds	r7, #52	; 0x34
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b0c4      	sub	sp, #272	; 0x110
 800476a:	af00      	add	r7, sp, #0
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	6018      	str	r0, [r3, #0]
 8004770:	463b      	mov	r3, r7
 8004772:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004774:	463b      	mov	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b01      	cmp	r3, #1
 800477c:	f040 8557 	bne.w	800522e <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004780:	463b      	mov	r3, r7
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	463b      	mov	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d905      	bls.n	800479c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004790:	463b      	mov	r3, r7
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800479a:	e004      	b.n	80047a6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	7b1b      	ldrb	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d12c      	bne.n	800480a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047b0:	463b      	mov	r3, r7
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6959      	ldr	r1, [r3, #20]
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	88da      	ldrh	r2, [r3, #6]
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	1d38      	adds	r0, r7, #4
 80047c4:	6800      	ldr	r0, [r0, #0]
 80047c6:	f001 fa1c 	bl	8005c02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	4413      	add	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	463b      	mov	r3, r7
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011a      	lsls	r2, r3, #4
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80047f2:	f107 0310 	add.w	r3, r7, #16
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	f107 0310 	add.w	r3, r7, #16
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	f000 bcdd 	b.w	80051c4 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800480a:	463b      	mov	r3, r7
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	78db      	ldrb	r3, [r3, #3]
 8004810:	2b02      	cmp	r3, #2
 8004812:	f040 8347 	bne.w	8004ea4 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004816:	463b      	mov	r3, r7
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	429a      	cmp	r2, r3
 8004824:	f240 82eb 	bls.w	8004dfe <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	463b      	mov	r3, r7
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	463b      	mov	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004860:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	463b      	mov	r3, r7
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8159 	beq.w	8004b4c <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d164      	bne.n	8004974 <USB_EPStartXfer+0x20e>
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	4413      	add	r3, r2
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c2:	463b      	mov	r3, r7
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d112      	bne.n	8004902 <USB_EPStartXfer+0x19c>
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	801a      	strh	r2, [r3, #0]
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	e054      	b.n	80049ac <USB_EPStartXfer+0x246>
 8004902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004906:	2b3e      	cmp	r3, #62	; 0x3e
 8004908:	d817      	bhi.n	800493a <USB_EPStartXfer+0x1d4>
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <USB_EPStartXfer+0x1c4>
 8004920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004924:	3301      	adds	r3, #1
 8004926:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492e:	b29b      	uxth	r3, r3
 8004930:	029b      	lsls	r3, r3, #10
 8004932:	b29a      	uxth	r2, r3
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	e038      	b.n	80049ac <USB_EPStartXfer+0x246>
 800493a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <USB_EPStartXfer+0x1f4>
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004954:	3b01      	subs	r3, #1
 8004956:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495e:	b29b      	uxth	r3, r3
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	b29b      	uxth	r3, r3
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29a      	uxth	r2, r3
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e01b      	b.n	80049ac <USB_EPStartXfer+0x246>
 8004974:	463b      	mov	r3, r7
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d116      	bne.n	80049ac <USB_EPStartXfer+0x246>
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004986:	b29b      	uxth	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	4413      	add	r3, r2
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
 8004990:	463b      	mov	r3, r7
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	011a      	lsls	r2, r3, #4
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	4413      	add	r3, r2
 800499c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80049ac:	463b      	mov	r3, r7
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	895b      	ldrh	r3, [r3, #10]
 80049b2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049b6:	463b      	mov	r3, r7
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6959      	ldr	r1, [r3, #20]
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80049c6:	1d38      	adds	r0, r7, #4
 80049c8:	6800      	ldr	r0, [r0, #0]
 80049ca:	f001 f91a 	bl	8005c02 <USB_WritePMA>
            ep->xfer_buff += len;
 80049ce:	463b      	mov	r3, r7
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	441a      	add	r2, r3
 80049da:	463b      	mov	r3, r7
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80049e0:	463b      	mov	r3, r7
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	463b      	mov	r3, r7
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d909      	bls.n	8004a04 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80049f0:	463b      	mov	r3, r7
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	463b      	mov	r3, r7
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	621a      	str	r2, [r3, #32]
 8004a02:	e008      	b.n	8004a16 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a04:	463b      	mov	r3, r7
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004a0e:	463b      	mov	r3, r7
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a16:	463b      	mov	r3, r7
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d164      	bne.n	8004aea <USB_EPStartXfer+0x384>
 8004a20:	1d3b      	adds	r3, r7, #4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	463b      	mov	r3, r7
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	011a      	lsls	r2, r3, #4
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d112      	bne.n	8004a78 <USB_EPStartXfer+0x312>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	e057      	b.n	8004b28 <USB_EPStartXfer+0x3c2>
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7e:	d817      	bhi.n	8004ab0 <USB_EPStartXfer+0x34a>
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <USB_EPStartXfer+0x33a>
 8004a96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004aa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	029b      	lsls	r3, r3, #10
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	e03b      	b.n	8004b28 <USB_EPStartXfer+0x3c2>
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <USB_EPStartXfer+0x36a>
 8004ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ad0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	e01e      	b.n	8004b28 <USB_EPStartXfer+0x3c2>
 8004aea:	463b      	mov	r3, r7
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d119      	bne.n	8004b28 <USB_EPStartXfer+0x3c2>
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	4413      	add	r3, r2
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	011a      	lsls	r2, r3, #4
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	4413      	add	r3, r2
 8004b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b28:	463b      	mov	r3, r7
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	891b      	ldrh	r3, [r3, #8]
 8004b2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6959      	ldr	r1, [r3, #20]
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b42:	1d38      	adds	r0, r7, #4
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	f001 f85c 	bl	8005c02 <USB_WritePMA>
 8004b4a:	e33b      	b.n	80051c4 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d164      	bne.n	8004c20 <USB_EPStartXfer+0x4ba>
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6a:	4413      	add	r3, r2
 8004b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d112      	bne.n	8004bae <USB_EPStartXfer+0x448>
 8004b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	e057      	b.n	8004c5e <USB_EPStartXfer+0x4f8>
 8004bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb4:	d817      	bhi.n	8004be6 <USB_EPStartXfer+0x480>
 8004bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <USB_EPStartXfer+0x470>
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	e03b      	b.n	8004c5e <USB_EPStartXfer+0x4f8>
 8004be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <USB_EPStartXfer+0x4a0>
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c00:	3b01      	subs	r3, #1
 8004c02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	e01e      	b.n	8004c5e <USB_EPStartXfer+0x4f8>
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d119      	bne.n	8004c5e <USB_EPStartXfer+0x4f8>
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3e:	4413      	add	r3, r2
 8004c40:	657b      	str	r3, [r7, #84]	; 0x54
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	011a      	lsls	r2, r3, #4
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c52:	653b      	str	r3, [r7, #80]	; 0x50
 8004c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c5e:	463b      	mov	r3, r7
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	891b      	ldrh	r3, [r3, #8]
 8004c64:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c68:	463b      	mov	r3, r7
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6959      	ldr	r1, [r3, #20]
 8004c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004c78:	1d38      	adds	r0, r7, #4
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	f000 ffc1 	bl	8005c02 <USB_WritePMA>
            ep->xfer_buff += len;
 8004c80:	463b      	mov	r3, r7
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8a:	441a      	add	r2, r3
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c92:	463b      	mov	r3, r7
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a1a      	ldr	r2, [r3, #32]
 8004c98:	463b      	mov	r3, r7
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d909      	bls.n	8004cb6 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cac:	1ad2      	subs	r2, r2, r3
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	621a      	str	r2, [r3, #32]
 8004cb4:	e008      	b.n	8004cc8 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cc8:	1d3b      	adds	r3, r7, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cce:	463b      	mov	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d164      	bne.n	8004da2 <USB_EPStartXfer+0x63c>
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	4413      	add	r3, r2
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	011a      	lsls	r2, r3, #4
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d112      	bne.n	8004d30 <USB_EPStartXfer+0x5ca>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e054      	b.n	8004dda <USB_EPStartXfer+0x674>
 8004d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d34:	2b3e      	cmp	r3, #62	; 0x3e
 8004d36:	d817      	bhi.n	8004d68 <USB_EPStartXfer+0x602>
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <USB_EPStartXfer+0x5f2>
 8004d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d52:	3301      	adds	r3, #1
 8004d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	e038      	b.n	8004dda <USB_EPStartXfer+0x674>
 8004d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <USB_EPStartXfer+0x622>
 8004d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d82:	3b01      	subs	r3, #1
 8004d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	029b      	lsls	r3, r3, #10
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	e01b      	b.n	8004dda <USB_EPStartXfer+0x674>
 8004da2:	463b      	mov	r3, r7
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d116      	bne.n	8004dda <USB_EPStartXfer+0x674>
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	4413      	add	r3, r2
 8004dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	011a      	lsls	r2, r3, #4
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	4413      	add	r3, r2
 8004dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dce:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	895b      	ldrh	r3, [r3, #10]
 8004de0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004de4:	463b      	mov	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6959      	ldr	r1, [r3, #20]
 8004dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004df4:	1d38      	adds	r0, r7, #4
 8004df6:	6800      	ldr	r0, [r0, #0]
 8004df8:	f000 ff03 	bl	8005c02 <USB_WritePMA>
 8004dfc:	e1e2      	b.n	80051c4 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004dfe:	463b      	mov	r3, r7
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e4c:	1d3b      	adds	r3, r7, #4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e60:	4413      	add	r3, r2
 8004e62:	663b      	str	r3, [r7, #96]	; 0x60
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	011a      	lsls	r2, r3, #4
 8004e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e6e:	4413      	add	r3, r2
 8004e70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e80:	463b      	mov	r3, r7
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	891b      	ldrh	r3, [r3, #8]
 8004e86:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6959      	ldr	r1, [r3, #20]
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e9a:	1d38      	adds	r0, r7, #4
 8004e9c:	6800      	ldr	r0, [r0, #0]
 8004e9e:	f000 feb0 	bl	8005c02 <USB_WritePMA>
 8004ea2:	e18f      	b.n	80051c4 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 808f 	beq.w	8004fde <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d164      	bne.n	8004f9a <USB_EPStartXfer+0x834>
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee4:	4413      	add	r3, r2
 8004ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d112      	bne.n	8004f28 <USB_EPStartXfer+0x7c2>
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	e054      	b.n	8004fd2 <USB_EPStartXfer+0x86c>
 8004f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f2e:	d817      	bhi.n	8004f60 <USB_EPStartXfer+0x7fa>
 8004f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <USB_EPStartXfer+0x7ea>
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	029b      	lsls	r3, r3, #10
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	e038      	b.n	8004fd2 <USB_EPStartXfer+0x86c>
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <USB_EPStartXfer+0x81a>
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	029b      	lsls	r3, r3, #10
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	e01b      	b.n	8004fd2 <USB_EPStartXfer+0x86c>
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d116      	bne.n	8004fd2 <USB_EPStartXfer+0x86c>
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb2:	4413      	add	r3, r2
 8004fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	011a      	lsls	r2, r3, #4
 8004fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fc6:	677b      	str	r3, [r7, #116]	; 0x74
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	895b      	ldrh	r3, [r3, #10]
 8004fd8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004fdc:	e097      	b.n	800510e <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d168      	bne.n	80050ba <USB_EPStartXfer+0x954>
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005000:	4413      	add	r3, r2
 8005002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	011a      	lsls	r2, r3, #4
 800500e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005012:	4413      	add	r3, r2
 8005014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005018:	67fb      	str	r3, [r7, #124]	; 0x7c
 800501a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d112      	bne.n	8005048 <USB_EPStartXfer+0x8e2>
 8005022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502c:	b29a      	uxth	r2, r3
 800502e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005040:	b29a      	uxth	r2, r3
 8005042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e05d      	b.n	8005104 <USB_EPStartXfer+0x99e>
 8005048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504c:	2b3e      	cmp	r3, #62	; 0x3e
 800504e:	d817      	bhi.n	8005080 <USB_EPStartXfer+0x91a>
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800505a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <USB_EPStartXfer+0x90a>
 8005066:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800506a:	3301      	adds	r3, #1
 800506c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005074:	b29b      	uxth	r3, r3
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	b29a      	uxth	r2, r3
 800507a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e041      	b.n	8005104 <USB_EPStartXfer+0x99e>
 8005080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <USB_EPStartXfer+0x93a>
 8005096:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800509a:	3b01      	subs	r3, #1
 800509c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e024      	b.n	8005104 <USB_EPStartXfer+0x99e>
 80050ba:	463b      	mov	r3, r7
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d11f      	bne.n	8005104 <USB_EPStartXfer+0x99e>
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050dc:	4413      	add	r3, r2
 80050de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	011a      	lsls	r2, r3, #4
 80050ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ee:	4413      	add	r3, r2
 80050f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005102:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	891b      	ldrh	r3, [r3, #8]
 800510a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800510e:	463b      	mov	r3, r7
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6959      	ldr	r1, [r3, #20]
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	b29b      	uxth	r3, r3
 800511a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800511e:	1d38      	adds	r0, r7, #4
 8005120:	6800      	ldr	r0, [r0, #0]
 8005122:	f000 fd6e 	bl	8005c02 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d122      	bne.n	8005176 <USB_EPStartXfer+0xa10>
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]
 8005174:	e026      	b.n	80051c4 <USB_EPStartXfer+0xa5e>
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d121      	bne.n	80051c4 <USB_EPStartXfer+0xa5e>
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80051b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f107 020e 	add.w	r2, r7, #14
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e2:	8013      	strh	r3, [r2, #0]
 80051e4:	f107 030e 	add.w	r3, r7, #14
 80051e8:	f107 020e 	add.w	r2, r7, #14
 80051ec:	8812      	ldrh	r2, [r2, #0]
 80051ee:	f082 0210 	eor.w	r2, r2, #16
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	f107 030e 	add.w	r3, r7, #14
 80051f8:	f107 020e 	add.w	r2, r7, #14
 80051fc:	8812      	ldrh	r2, [r2, #0]
 80051fe:	f082 0220 	eor.w	r2, r2, #32
 8005202:	801a      	strh	r2, [r3, #0]
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	f107 030e 	add.w	r3, r7, #14
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
 800522c:	e3b5      	b.n	800599a <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800522e:	463b      	mov	r3, r7
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	7b1b      	ldrb	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 8090 	bne.w	800535a <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d90e      	bls.n	8005268 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005254:	463b      	mov	r3, r7
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	619a      	str	r2, [r3, #24]
 8005266:	e008      	b.n	800527a <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005272:	463b      	mov	r3, r7
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005292:	4413      	add	r3, r2
 8005294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005298:	463b      	mov	r3, r7
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	011a      	lsls	r2, r3, #4
 80052a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d116      	bne.n	80052e4 <USB_EPStartXfer+0xb7e>
 80052b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052da:	b29a      	uxth	r2, r3
 80052dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e32c      	b.n	800593e <USB_EPStartXfer+0x11d8>
 80052e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e8:	2b3e      	cmp	r3, #62	; 0x3e
 80052ea:	d818      	bhi.n	800531e <USB_EPStartXfer+0xbb8>
 80052ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <USB_EPStartXfer+0xba6>
 8005302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005306:	3301      	adds	r3, #1
 8005308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800530c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29a      	uxth	r2, r3
 8005316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e30f      	b.n	800593e <USB_EPStartXfer+0x11d8>
 800531e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <USB_EPStartXfer+0xbd8>
 8005334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005338:	3b01      	subs	r3, #1
 800533a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800533e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005342:	b29b      	uxth	r3, r3
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	b29b      	uxth	r3, r3
 8005348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005350:	b29a      	uxth	r2, r3
 8005352:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e2f1      	b.n	800593e <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	78db      	ldrb	r3, [r3, #3]
 8005360:	2b02      	cmp	r3, #2
 8005362:	f040 818f 	bne.w	8005684 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d175      	bne.n	800545c <USB_EPStartXfer+0xcf6>
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005380:	b29b      	uxth	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005388:	4413      	add	r3, r2
 800538a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800539a:	4413      	add	r3, r2
 800539c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053a4:	463b      	mov	r3, r7
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d116      	bne.n	80053dc <USB_EPStartXfer+0xc76>
 80053ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e065      	b.n	80054a8 <USB_EPStartXfer+0xd42>
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b3e      	cmp	r3, #62	; 0x3e
 80053e4:	d81a      	bhi.n	800541c <USB_EPStartXfer+0xcb6>
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <USB_EPStartXfer+0xca4>
 8005400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005404:	3301      	adds	r3, #1
 8005406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800540a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800540e:	b29b      	uxth	r3, r3
 8005410:	029b      	lsls	r3, r3, #10
 8005412:	b29a      	uxth	r2, r3
 8005414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e045      	b.n	80054a8 <USB_EPStartXfer+0xd42>
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_EPStartXfer+0xcda>
 8005436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800543a:	3b01      	subs	r3, #1
 800543c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29b      	uxth	r3, r3
 800544a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005452:	b29a      	uxth	r2, r3
 8005454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	e025      	b.n	80054a8 <USB_EPStartXfer+0xd42>
 800545c:	463b      	mov	r3, r7
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d120      	bne.n	80054a8 <USB_EPStartXfer+0xd42>
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800547e:	4413      	add	r3, r2
 8005480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005484:	463b      	mov	r3, r7
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	011a      	lsls	r2, r3, #4
 800548c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005490:	4413      	add	r3, r2
 8005492:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	1d3b      	adds	r3, r7, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054b0:	463b      	mov	r3, r7
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d175      	bne.n	80055a6 <USB_EPStartXfer+0xe40>
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054d2:	4413      	add	r3, r2
 80054d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054d8:	463b      	mov	r3, r7
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	011a      	lsls	r2, r3, #4
 80054e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054e4:	4413      	add	r3, r2
 80054e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d116      	bne.n	8005526 <USB_EPStartXfer+0xdc0>
 80054f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005504:	b29a      	uxth	r2, r3
 8005506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551c:	b29a      	uxth	r2, r3
 800551e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e061      	b.n	80055ea <USB_EPStartXfer+0xe84>
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b3e      	cmp	r3, #62	; 0x3e
 800552e:	d81a      	bhi.n	8005566 <USB_EPStartXfer+0xe00>
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d004      	beq.n	8005554 <USB_EPStartXfer+0xdee>
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554e:	3301      	adds	r3, #1
 8005550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29a      	uxth	r2, r3
 800555e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	e041      	b.n	80055ea <USB_EPStartXfer+0xe84>
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <USB_EPStartXfer+0xe24>
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005584:	3b01      	subs	r3, #1
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	b29b      	uxth	r3, r3
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	b29b      	uxth	r3, r3
 8005594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559c:	b29a      	uxth	r2, r3
 800559e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e021      	b.n	80055ea <USB_EPStartXfer+0xe84>
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d11c      	bne.n	80055ea <USB_EPStartXfer+0xe84>
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055c0:	4413      	add	r3, r2
 80055c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	011a      	lsls	r2, r3, #4
 80055ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055d2:	4413      	add	r3, r2
 80055d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 81a4 	beq.w	800593e <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800560a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800560e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <USB_EPStartXfer+0xebc>
 8005616:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005622:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 8187 	bne.w	800593e <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005630:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 8180 	bne.w	800593e <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800567e:	b29b      	uxth	r3, r3
 8005680:	8013      	strh	r3, [r2, #0]
 8005682:	e15c      	b.n	800593e <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	78db      	ldrb	r3, [r3, #3]
 800568a:	2b01      	cmp	r3, #1
 800568c:	f040 8155 	bne.w	800593a <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d90e      	bls.n	80056be <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	619a      	str	r2, [r3, #24]
 80056bc:	e008      	b.n	80056d0 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d16f      	bne.n	80057ba <USB_EPStartXfer+0x1054>
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056f2:	4413      	add	r3, r2
 80056f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005704:	4413      	add	r3, r2
 8005706:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800570e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d116      	bne.n	8005744 <USB_EPStartXfer+0xfde>
 8005716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005722:	b29a      	uxth	r2, r3
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573a:	b29a      	uxth	r2, r3
 800573c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e05f      	b.n	8005804 <USB_EPStartXfer+0x109e>
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005748:	2b3e      	cmp	r3, #62	; 0x3e
 800574a:	d818      	bhi.n	800577e <USB_EPStartXfer+0x1018>
 800574c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <USB_EPStartXfer+0x1006>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005766:	3301      	adds	r3, #1
 8005768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005770:	b29b      	uxth	r3, r3
 8005772:	029b      	lsls	r3, r3, #10
 8005774:	b29a      	uxth	r2, r3
 8005776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	e042      	b.n	8005804 <USB_EPStartXfer+0x109e>
 800577e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <USB_EPStartXfer+0x1038>
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005798:	3b01      	subs	r3, #1
 800579a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	029b      	lsls	r3, r3, #10
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	e024      	b.n	8005804 <USB_EPStartXfer+0x109e>
 80057ba:	463b      	mov	r3, r7
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d11f      	bne.n	8005804 <USB_EPStartXfer+0x109e>
 80057c4:	1d3b      	adds	r3, r7, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057dc:	4413      	add	r3, r2
 80057de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057e2:	463b      	mov	r3, r7
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	011a      	lsls	r2, r3, #4
 80057ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ee:	4413      	add	r3, r2
 80057f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d16f      	bne.n	80058f6 <USB_EPStartXfer+0x1190>
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800582e:	4413      	add	r3, r2
 8005830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	011a      	lsls	r2, r3, #4
 800583c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005840:	4413      	add	r3, r2
 8005842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d116      	bne.n	8005880 <USB_EPStartXfer+0x111a>
 8005852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005876:	b29a      	uxth	r2, r3
 8005878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e05e      	b.n	800593e <USB_EPStartXfer+0x11d8>
 8005880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005884:	2b3e      	cmp	r3, #62	; 0x3e
 8005886:	d818      	bhi.n	80058ba <USB_EPStartXfer+0x1154>
 8005888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d004      	beq.n	80058a8 <USB_EPStartXfer+0x1142>
 800589e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a2:	3301      	adds	r3, #1
 80058a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e041      	b.n	800593e <USB_EPStartXfer+0x11d8>
 80058ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <USB_EPStartXfer+0x1174>
 80058d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d4:	3b01      	subs	r3, #1
 80058d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058de:	b29b      	uxth	r3, r3
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e023      	b.n	800593e <USB_EPStartXfer+0x11d8>
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d11e      	bne.n	800593e <USB_EPStartXfer+0x11d8>
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005910:	4413      	add	r3, r2
 8005912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005922:	4413      	add	r3, r2
 8005924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800592c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e001      	b.n	800593e <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e02e      	b.n	800599c <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800595c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005960:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005964:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005968:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800596c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005970:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d020      	beq.n	80059fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ce:	81bb      	strh	r3, [r7, #12]
 80059d0:	89bb      	ldrh	r3, [r7, #12]
 80059d2:	f083 0310 	eor.w	r3, r3, #16
 80059d6:	81bb      	strh	r3, [r7, #12]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	89bb      	ldrh	r3, [r7, #12]
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
 80059f8:	e01f      	b.n	8005a3a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a10:	81fb      	strh	r3, [r7, #14]
 8005a12:	89fb      	ldrh	r3, [r7, #14]
 8005a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a18:	81fb      	strh	r3, [r7, #14]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	7b1b      	ldrb	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 809d 	bne.w	8005b96 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d04c      	beq.n	8005afe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	823b      	strh	r3, [r7, #16]
 8005a72:	8a3b      	ldrh	r3, [r7, #16]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <USB_EPClearStall+0x6c>
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	81fb      	strh	r3, [r7, #14]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d06c      	beq.n	8005b96 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	81bb      	strh	r3, [r7, #12]
 8005ad4:	89bb      	ldrh	r3, [r7, #12]
 8005ad6:	f083 0320 	eor.w	r3, r3, #32
 8005ada:	81bb      	strh	r3, [r7, #12]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	89bb      	ldrh	r3, [r7, #12]
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]
 8005afc:	e04b      	b.n	8005b96 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	82fb      	strh	r3, [r7, #22]
 8005b0c:	8afb      	ldrh	r3, [r7, #22]
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01b      	beq.n	8005b4e <USB_EPClearStall+0x106>
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	82bb      	strh	r3, [r7, #20]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8abb      	ldrh	r3, [r7, #20]
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	827b      	strh	r3, [r7, #18]
 8005b66:	8a7b      	ldrh	r3, [r7, #18]
 8005b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b6c:	827b      	strh	r3, [r7, #18]
 8005b6e:	8a7b      	ldrh	r3, [r7, #18]
 8005b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b74:	827b      	strh	r3, [r7, #18]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	8a7b      	ldrh	r3, [r7, #18]
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b08d      	sub	sp, #52	; 0x34
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	460b      	mov	r3, r1
 8005c12:	80fb      	strh	r3, [r7, #6]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c18:	88bb      	ldrh	r3, [r7, #4]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	005a      	lsls	r2, r3, #1
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3a:	e01e      	b.n	8005c7a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	3301      	adds	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	3302      	adds	r3, #2
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	3301      	adds	r3, #1
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	3b01      	subs	r3, #1
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1dd      	bne.n	8005c3c <USB_WritePMA+0x3a>
  }
}
 8005c80:	bf00      	nop
 8005c82:	3734      	adds	r7, #52	; 0x34
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b08b      	sub	sp, #44	; 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4611      	mov	r1, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	80fb      	strh	r3, [r7, #6]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ca2:	88bb      	ldrh	r3, [r7, #4]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	005a      	lsls	r2, r3, #1
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cbe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc4:	e01b      	b.n	8005cfe <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e0      	bne.n	8005cc6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d04:	88bb      	ldrh	r3, [r7, #4]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	701a      	strb	r2, [r3, #0]
  }
}
 8005d20:	bf00      	nop
 8005d22:	372c      	adds	r7, #44	; 0x2c
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005d38:	2304      	movs	r3, #4
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	2181      	movs	r1, #129	; 0x81
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 fca3 	bl	800768a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005d4a:	2010      	movs	r0, #16
 8005d4c:	f001 fdb2 	bl	80078b4 <USBD_static_malloc>
 8005d50:	4602      	mov	r2, r0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e005      	b.n	8005d72 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005d86:	2181      	movs	r1, #129	; 0x81
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fca4 	bl	80076d6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 fd93 	bl	80078d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dcc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d045      	beq.n	8005e76 <USBD_HID_Setup+0xba>
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	f040 80d3 	bne.w	8005f96 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	3b02      	subs	r3, #2
 8005df6:	2b09      	cmp	r3, #9
 8005df8:	d835      	bhi.n	8005e66 <USBD_HID_Setup+0xaa>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <USBD_HID_Setup+0x44>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e57 	.word	0x08005e57
 8005e04:	08005e37 	.word	0x08005e37
 8005e08:	08005e67 	.word	0x08005e67
 8005e0c:	08005e67 	.word	0x08005e67
 8005e10:	08005e67 	.word	0x08005e67
 8005e14:	08005e67 	.word	0x08005e67
 8005e18:	08005e67 	.word	0x08005e67
 8005e1c:	08005e67 	.word	0x08005e67
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e29 	.word	0x08005e29
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	885b      	ldrh	r3, [r3, #2]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	601a      	str	r2, [r3, #0]
          break;
 8005e34:	e01e      	b.n	8005e74 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f93f 	bl	80070c0 <USBD_CtlSendData>
          break;
 8005e42:	e017      	b.n	8005e74 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]
          break;
 8005e54:	e00e      	b.n	8005e74 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 f92e 	bl	80070c0 <USBD_CtlSendData>
          break;
 8005e64:	e006      	b.n	8005e74 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 f8be 	bl	8006fea <USBD_CtlError>
          ret = USBD_FAIL;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	75fb      	strb	r3, [r7, #23]
          break;
 8005e72:	bf00      	nop
      }
      break;
 8005e74:	e096      	b.n	8005fa4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b0b      	cmp	r3, #11
 8005e7c:	f200 8083 	bhi.w	8005f86 <USBD_HID_Setup+0x1ca>
 8005e80:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <USBD_HID_Setup+0xcc>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005eb9 	.word	0x08005eb9
 8005e8c:	08005f87 	.word	0x08005f87
 8005e90:	08005f87 	.word	0x08005f87
 8005e94:	08005f87 	.word	0x08005f87
 8005e98:	08005f87 	.word	0x08005f87
 8005e9c:	08005f87 	.word	0x08005f87
 8005ea0:	08005ee1 	.word	0x08005ee1
 8005ea4:	08005f87 	.word	0x08005f87
 8005ea8:	08005f87 	.word	0x08005f87
 8005eac:	08005f87 	.word	0x08005f87
 8005eb0:	08005f39 	.word	0x08005f39
 8005eb4:	08005f61 	.word	0x08005f61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d107      	bne.n	8005ed2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005ec2:	f107 030e 	add.w	r3, r7, #14
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 f8f8 	bl	80070c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ed0:	e060      	b.n	8005f94 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 f888 	bl	8006fea <USBD_CtlError>
            ret = USBD_FAIL;
 8005eda:	2302      	movs	r3, #2
 8005edc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ede:	e059      	b.n	8005f94 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	885b      	ldrh	r3, [r3, #2]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b22      	cmp	r3, #34	; 0x22
 8005eea:	d108      	bne.n	8005efe <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	88db      	ldrh	r3, [r3, #6]
 8005ef0:	2b4a      	cmp	r3, #74	; 0x4a
 8005ef2:	bf28      	it	cs
 8005ef4:	234a      	movcs	r3, #74	; 0x4a
 8005ef6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <USBD_HID_Setup+0x1f4>)
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e015      	b.n	8005f2a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	885b      	ldrh	r3, [r3, #2]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b21      	cmp	r3, #33	; 0x21
 8005f08:	d108      	bne.n	8005f1c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <USBD_HID_Setup+0x1f8>)
 8005f0c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	88db      	ldrh	r3, [r3, #6]
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	bf28      	it	cs
 8005f16:	2309      	movcs	r3, #9
 8005f18:	83fb      	strh	r3, [r7, #30]
 8005f1a:	e006      	b.n	8005f2a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f863 	bl	8006fea <USBD_CtlError>
            ret = USBD_FAIL;
 8005f24:	2302      	movs	r3, #2
 8005f26:	75fb      	strb	r3, [r7, #23]
            break;
 8005f28:	e034      	b.n	8005f94 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005f2a:	8bfb      	ldrh	r3, [r7, #30]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	69b9      	ldr	r1, [r7, #24]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 f8c5 	bl	80070c0 <USBD_CtlSendData>
          break;
 8005f36:	e02d      	b.n	8005f94 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d107      	bne.n	8005f52 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3308      	adds	r3, #8
 8005f46:	2201      	movs	r2, #1
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f8b8 	bl	80070c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f50:	e020      	b.n	8005f94 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 f848 	bl	8006fea <USBD_CtlError>
            ret = USBD_FAIL;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f5e:	e019      	b.n	8005f94 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d106      	bne.n	8005f78 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	885b      	ldrh	r3, [r3, #2]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f76:	e00d      	b.n	8005f94 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 f835 	bl	8006fea <USBD_CtlError>
            ret = USBD_FAIL;
 8005f80:	2302      	movs	r3, #2
 8005f82:	75fb      	strb	r3, [r7, #23]
          break;
 8005f84:	e006      	b.n	8005f94 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f82e 	bl	8006fea <USBD_CtlError>
          ret = USBD_FAIL;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	75fb      	strb	r3, [r7, #23]
          break;
 8005f92:	bf00      	nop
      }
      break;
 8005f94:	e006      	b.n	8005fa4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 f826 	bl	8006fea <USBD_CtlError>
      ret = USBD_FAIL;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa2:	bf00      	nop
  }

  return ret;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200000c8 	.word	0x200000c8
 8005fb4:	200000b0 	.word	0x200000b0

08005fb8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fcc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d10c      	bne.n	8005ff2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	7b1b      	ldrb	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	2181      	movs	r1, #129	; 0x81
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f001 fc1b 	bl	8007828 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2222      	movs	r2, #34	; 0x22
 8006008:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800600a:	4b03      	ldr	r3, [pc, #12]	; (8006018 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20000044 	.word	0x20000044

0800601c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2222      	movs	r2, #34	; 0x22
 8006028:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800602a:	4b03      	ldr	r3, [pc, #12]	; (8006038 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20000068 	.word	0x20000068

0800603c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2222      	movs	r2, #34	; 0x22
 8006048:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800604a:	4b03      	ldr	r3, [pc, #12]	; (8006058 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	2000008c 	.word	0x2000008c

0800605c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606e:	2200      	movs	r2, #0
 8006070:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	220a      	movs	r2, #10
 800608c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	200000bc 	.word	0x200000bc

080060a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060b4:	2302      	movs	r3, #2
 80060b6:	e01a      	b.n	80060ee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	79fa      	ldrb	r2, [r7, #7]
 80060e4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 fa6c 	bl	80075c4 <USBD_LL_Init>

  return USBD_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e001      	b.n	800611c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006118:	2302      	movs	r3, #2
 800611a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fa8e 	bl	8007654 <USBD_LL_Start>

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006164:	2302      	movs	r3, #2
 8006166:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	4611      	mov	r1, r2
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3

  return USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fece 	bl	8006f70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d00c      	beq.n	8006212 <USBD_LL_SetupStage+0x56>
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d302      	bcc.n	8006202 <USBD_LL_SetupStage+0x46>
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d010      	beq.n	8006222 <USBD_LL_SetupStage+0x66>
 8006200:	e017      	b.n	8006232 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9ce 	bl	80065ac <USBD_StdDevReq>
      break;
 8006210:	e01a      	b.n	8006248 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa30 	bl	8006680 <USBD_StdItfReq>
      break;
 8006220:	e012      	b.n	8006248 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa6e 	bl	800670c <USBD_StdEPReq>
      break;
 8006230:	e00a      	b.n	8006248 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 fa67 	bl	8007714 <USBD_LL_StallEP>
      break;
 8006246:	bf00      	nop
  }

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b086      	sub	sp, #24
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	460b      	mov	r3, r1
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006260:	7afb      	ldrb	r3, [r7, #11]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d14b      	bne.n	80062fe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800626c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006274:	2b03      	cmp	r3, #3
 8006276:	d134      	bne.n	80062e2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	429a      	cmp	r2, r3
 8006282:	d919      	bls.n	80062b8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	1ad2      	subs	r2, r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800629a:	429a      	cmp	r2, r3
 800629c:	d203      	bcs.n	80062a6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	e002      	b.n	80062ac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 ff33 	bl	800711c <USBD_CtlContinueRx>
 80062b6:	e038      	b.n	800632a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d105      	bne.n	80062da <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 ff30 	bl	8007140 <USBD_CtlSendStatus>
 80062e0:	e023      	b.n	800632a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d11e      	bne.n	800632a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80062f4:	2100      	movs	r1, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f001 fa0c 	bl	8007714 <USBD_LL_StallEP>
 80062fc:	e015      	b.n	800632a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006310:	2b03      	cmp	r3, #3
 8006312:	d108      	bne.n	8006326 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	7afa      	ldrb	r2, [r7, #11]
 800631e:	4611      	mov	r1, r2
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	4798      	blx	r3
 8006324:	e001      	b.n	800632a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006326:	2302      	movs	r3, #2
 8006328:	e000      	b.n	800632c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	460b      	mov	r3, r1
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d17f      	bne.n	8006448 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3314      	adds	r3, #20
 800634c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006354:	2b02      	cmp	r3, #2
 8006356:	d15c      	bne.n	8006412 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d915      	bls.n	8006390 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	1ad2      	subs	r2, r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 febb 	bl	80070f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006382:	2300      	movs	r3, #0
 8006384:	2200      	movs	r2, #0
 8006386:	2100      	movs	r1, #0
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f001 fa70 	bl	800786e <USBD_LL_PrepareReceive>
 800638e:	e04e      	b.n	800642e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	6912      	ldr	r2, [r2, #16]
 8006398:	fbb3 f1f2 	udiv	r1, r3, r2
 800639c:	fb02 f201 	mul.w	r2, r2, r1
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11c      	bne.n	80063e0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d316      	bcc.n	80063e0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063bc:	429a      	cmp	r2, r3
 80063be:	d20f      	bcs.n	80063e0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063c0:	2200      	movs	r2, #0
 80063c2:	2100      	movs	r1, #0
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fe97 	bl	80070f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063d2:	2300      	movs	r3, #0
 80063d4:	2200      	movs	r2, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f001 fa48 	bl	800786e <USBD_LL_PrepareReceive>
 80063de:	e026      	b.n	800642e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d105      	bne.n	8006402 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f001 f985 	bl	8007714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 feab 	bl	8007166 <USBD_CtlReceiveStatus>
 8006410:	e00d      	b.n	800642e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006418:	2b04      	cmp	r3, #4
 800641a:	d004      	beq.n	8006426 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f001 f973 	bl	8007714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006434:	2b01      	cmp	r3, #1
 8006436:	d11d      	bne.n	8006474 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fe82 	bl	8006142 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006446:	e015      	b.n	8006474 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800645a:	2b03      	cmp	r3, #3
 800645c:	d108      	bne.n	8006470 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	7afa      	ldrb	r2, [r7, #11]
 8006468:	4611      	mov	r1, r2
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	4798      	blx	r3
 800646e:	e001      	b.n	8006474 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006470:	2302      	movs	r3, #2
 8006472:	e000      	b.n	8006476 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006486:	2340      	movs	r3, #64	; 0x40
 8006488:	2200      	movs	r2, #0
 800648a:	2100      	movs	r1, #0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f8fc 	bl	800768a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2240      	movs	r2, #64	; 0x40
 800649e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	2200      	movs	r2, #0
 80064a6:	2180      	movs	r1, #128	; 0x80
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f8ee 	bl	800768a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2240      	movs	r2, #64	; 0x40
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6852      	ldr	r2, [r2, #4]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	4611      	mov	r1, r2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
  }

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2204      	movs	r2, #4
 8006538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	2b04      	cmp	r3, #4
 800655a:	d105      	bne.n	8006568 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006584:	2b03      	cmp	r3, #3
 8006586:	d10b      	bne.n	80065a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d004      	beq.n	80065d0 <USBD_StdDevReq+0x24>
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d002      	beq.n	80065d0 <USBD_StdDevReq+0x24>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <USBD_StdDevReq+0x34>
 80065ce:	e04c      	b.n	800666a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
      break;
 80065de:	e049      	b.n	8006674 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b09      	cmp	r3, #9
 80065e6:	d83a      	bhi.n	800665e <USBD_StdDevReq+0xb2>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <USBD_StdDevReq+0x44>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006641 	.word	0x08006641
 80065f4:	08006655 	.word	0x08006655
 80065f8:	0800665f 	.word	0x0800665f
 80065fc:	0800664b 	.word	0x0800664b
 8006600:	0800665f 	.word	0x0800665f
 8006604:	08006623 	.word	0x08006623
 8006608:	08006619 	.word	0x08006619
 800660c:	0800665f 	.word	0x0800665f
 8006610:	08006637 	.word	0x08006637
 8006614:	0800662d 	.word	0x0800662d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9d4 	bl	80069c8 <USBD_GetDescriptor>
          break;
 8006620:	e022      	b.n	8006668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb37 	bl	8006c98 <USBD_SetAddress>
          break;
 800662a:	e01d      	b.n	8006668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb74 	bl	8006d1c <USBD_SetConfig>
          break;
 8006634:	e018      	b.n	8006668 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fbfd 	bl	8006e38 <USBD_GetConfig>
          break;
 800663e:	e013      	b.n	8006668 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fc2c 	bl	8006ea0 <USBD_GetStatus>
          break;
 8006648:	e00e      	b.n	8006668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc5a 	bl	8006f06 <USBD_SetFeature>
          break;
 8006652:	e009      	b.n	8006668 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc69 	bl	8006f2e <USBD_ClrFeature>
          break;
 800665c:	e004      	b.n	8006668 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fcc2 	bl	8006fea <USBD_CtlError>
          break;
 8006666:	bf00      	nop
      }
      break;
 8006668:	e004      	b.n	8006674 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fcbc 	bl	8006fea <USBD_CtlError>
      break;
 8006672:	bf00      	nop
  }

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop

08006680 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006696:	2b20      	cmp	r3, #32
 8006698:	d003      	beq.n	80066a2 <USBD_StdItfReq+0x22>
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d001      	beq.n	80066a2 <USBD_StdItfReq+0x22>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d12a      	bne.n	80066f8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	3b01      	subs	r3, #1
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d81d      	bhi.n	80066ea <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	889b      	ldrh	r3, [r3, #4]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d813      	bhi.n	80066e0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d110      	bne.n	80066f4 <USBD_StdItfReq+0x74>
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fd31 	bl	8007140 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066de:	e009      	b.n	80066f4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc81 	bl	8006fea <USBD_CtlError>
          break;
 80066e8:	e004      	b.n	80066f4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fc7c 	bl	8006fea <USBD_CtlError>
          break;
 80066f2:	e000      	b.n	80066f6 <USBD_StdItfReq+0x76>
          break;
 80066f4:	bf00      	nop
      }
      break;
 80066f6:	e004      	b.n	8006702 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc75 	bl	8006fea <USBD_CtlError>
      break;
 8006700:	bf00      	nop
  }

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006728:	2b20      	cmp	r3, #32
 800672a:	d004      	beq.n	8006736 <USBD_StdEPReq+0x2a>
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d002      	beq.n	8006736 <USBD_StdEPReq+0x2a>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <USBD_StdEPReq+0x3a>
 8006734:	e13d      	b.n	80069b2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
      break;
 8006744:	e13a      	b.n	80069bc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800674e:	2b20      	cmp	r3, #32
 8006750:	d10a      	bne.n	8006768 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	e12a      	b.n	80069be <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d03e      	beq.n	80067ee <USBD_StdEPReq+0xe2>
 8006770:	2b03      	cmp	r3, #3
 8006772:	d002      	beq.n	800677a <USBD_StdEPReq+0x6e>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d070      	beq.n	800685a <USBD_StdEPReq+0x14e>
 8006778:	e115      	b.n	80069a6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006780:	2b02      	cmp	r3, #2
 8006782:	d002      	beq.n	800678a <USBD_StdEPReq+0x7e>
 8006784:	2b03      	cmp	r3, #3
 8006786:	d015      	beq.n	80067b4 <USBD_StdEPReq+0xa8>
 8006788:	e02b      	b.n	80067e2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00c      	beq.n	80067aa <USBD_StdEPReq+0x9e>
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d009      	beq.n	80067aa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 ffba 	bl	8007714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 ffb6 	bl	8007714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067a8:	e020      	b.n	80067ec <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fc1c 	bl	8006fea <USBD_CtlError>
              break;
 80067b2:	e01b      	b.n	80067ec <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	885b      	ldrh	r3, [r3, #2]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10e      	bne.n	80067da <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00b      	beq.n	80067da <USBD_StdEPReq+0xce>
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b80      	cmp	r3, #128	; 0x80
 80067c6:	d008      	beq.n	80067da <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	88db      	ldrh	r3, [r3, #6]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 ff9d 	bl	8007714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fcb0 	bl	8007140 <USBD_CtlSendStatus>

              break;
 80067e0:	e004      	b.n	80067ec <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fc00 	bl	8006fea <USBD_CtlError>
              break;
 80067ea:	bf00      	nop
          }
          break;
 80067ec:	e0e0      	b.n	80069b0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d002      	beq.n	80067fe <USBD_StdEPReq+0xf2>
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d015      	beq.n	8006828 <USBD_StdEPReq+0x11c>
 80067fc:	e026      	b.n	800684c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <USBD_StdEPReq+0x112>
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d009      	beq.n	800681e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 ff80 	bl	8007714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006814:	2180      	movs	r1, #128	; 0x80
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 ff7c 	bl	8007714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800681c:	e01c      	b.n	8006858 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fbe2 	bl	8006fea <USBD_CtlError>
              break;
 8006826:	e017      	b.n	8006858 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	885b      	ldrh	r3, [r3, #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d112      	bne.n	8006856 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 ff87 	bl	8007752 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fc7b 	bl	8007140 <USBD_CtlSendStatus>
              }
              break;
 800684a:	e004      	b.n	8006856 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fbcb 	bl	8006fea <USBD_CtlError>
              break;
 8006854:	e000      	b.n	8006858 <USBD_StdEPReq+0x14c>
              break;
 8006856:	bf00      	nop
          }
          break;
 8006858:	e0aa      	b.n	80069b0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006860:	2b02      	cmp	r3, #2
 8006862:	d002      	beq.n	800686a <USBD_StdEPReq+0x15e>
 8006864:	2b03      	cmp	r3, #3
 8006866:	d032      	beq.n	80068ce <USBD_StdEPReq+0x1c2>
 8006868:	e097      	b.n	800699a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <USBD_StdEPReq+0x174>
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	d004      	beq.n	8006880 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fbb6 	bl	8006fea <USBD_CtlError>
                break;
 800687e:	e091      	b.n	80069a4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006884:	2b00      	cmp	r3, #0
 8006886:	da0b      	bge.n	80068a0 <USBD_StdEPReq+0x194>
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	3310      	adds	r3, #16
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	4413      	add	r3, r2
 800689c:	3304      	adds	r3, #4
 800689e:	e00b      	b.n	80068b8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	3304      	adds	r3, #4
 80068b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2202      	movs	r2, #2
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fbfa 	bl	80070c0 <USBD_CtlSendData>
              break;
 80068cc:	e06a      	b.n	80069a4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da11      	bge.n	80068fa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	3318      	adds	r3, #24
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d117      	bne.n	8006920 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb79 	bl	8006fea <USBD_CtlError>
                  break;
 80068f8:	e054      	b.n	80069a4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	f003 020f 	and.w	r2, r3, #15
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fb66 	bl	8006fea <USBD_CtlError>
                  break;
 800691e:	e041      	b.n	80069a4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da0b      	bge.n	8006940 <USBD_StdEPReq+0x234>
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3310      	adds	r3, #16
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3304      	adds	r3, #4
 800693e:	e00b      	b.n	8006958 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <USBD_StdEPReq+0x25a>
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2b80      	cmp	r3, #128	; 0x80
 8006964:	d103      	bne.n	800696e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	e00e      	b.n	800698c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 ff0c 	bl	8007790 <USBD_LL_IsStallEP>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2201      	movs	r2, #1
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	e002      	b.n	800698c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2202      	movs	r2, #2
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb94 	bl	80070c0 <USBD_CtlSendData>
              break;
 8006998:	e004      	b.n	80069a4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb24 	bl	8006fea <USBD_CtlError>
              break;
 80069a2:	bf00      	nop
          }
          break;
 80069a4:	e004      	b.n	80069b0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fb1e 	bl	8006fea <USBD_CtlError>
          break;
 80069ae:	bf00      	nop
      }
      break;
 80069b0:	e004      	b.n	80069bc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb18 	bl	8006fea <USBD_CtlError>
      break;
 80069ba:	bf00      	nop
  }

  return ret;
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	885b      	ldrh	r3, [r3, #2]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	f200 8128 	bhi.w	8006c3e <USBD_GetDescriptor+0x276>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <USBD_GetDescriptor+0x2c>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a11 	.word	0x08006a11
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006a69 	.word	0x08006a69
 8006a00:	08006c3f 	.word	0x08006c3f
 8006a04:	08006c3f 	.word	0x08006c3f
 8006a08:	08006bdf 	.word	0x08006bdf
 8006a0c:	08006c0b 	.word	0x08006c0b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	7c12      	ldrb	r2, [r2, #16]
 8006a1c:	f107 0108 	add.w	r1, r7, #8
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	60f8      	str	r0, [r7, #12]
      break;
 8006a26:	e112      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7c1b      	ldrb	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10d      	bne.n	8006a4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f107 0208 	add.w	r2, r7, #8
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	2202      	movs	r2, #2
 8006a48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a4a:	e100      	b.n	8006c4e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f107 0208 	add.w	r2, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	2202      	movs	r2, #2
 8006a64:	701a      	strb	r2, [r3, #0]
      break;
 8006a66:	e0f2      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	885b      	ldrh	r3, [r3, #2]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	f200 80ac 	bhi.w	8006bcc <USBD_GetDescriptor+0x204>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <USBD_GetDescriptor+0xb4>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006a95 	.word	0x08006a95
 8006a80:	08006ac9 	.word	0x08006ac9
 8006a84:	08006afd 	.word	0x08006afd
 8006a88:	08006b31 	.word	0x08006b31
 8006a8c:	08006b65 	.word	0x08006b65
 8006a90:	08006b99 	.word	0x08006b99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	7c12      	ldrb	r2, [r2, #16]
 8006aac:	f107 0108 	add.w	r1, r7, #8
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
 8006ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ab6:	e091      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa95 	bl	8006fea <USBD_CtlError>
            err++;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ac6:	e089      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	7c12      	ldrb	r2, [r2, #16]
 8006ae0:	f107 0108 	add.w	r1, r7, #8
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aea:	e077      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa7b 	bl	8006fea <USBD_CtlError>
            err++;
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	3301      	adds	r3, #1
 8006af8:	72fb      	strb	r3, [r7, #11]
          break;
 8006afa:	e06f      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	7c12      	ldrb	r2, [r2, #16]
 8006b14:	f107 0108 	add.w	r1, r7, #8
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4798      	blx	r3
 8006b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b1e:	e05d      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa61 	bl	8006fea <USBD_CtlError>
            err++;
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b2e:	e055      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	7c12      	ldrb	r2, [r2, #16]
 8006b48:	f107 0108 	add.w	r1, r7, #8
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
 8006b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b52:	e043      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa47 	bl	8006fea <USBD_CtlError>
            err++;
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	72fb      	strb	r3, [r7, #11]
          break;
 8006b62:	e03b      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7c12      	ldrb	r2, [r2, #16]
 8006b7c:	f107 0108 	add.w	r1, r7, #8
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
 8006b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b86:	e029      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa2d 	bl	8006fea <USBD_CtlError>
            err++;
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	3301      	adds	r3, #1
 8006b94:	72fb      	strb	r3, [r7, #11]
          break;
 8006b96:	e021      	b.n	8006bdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	7c12      	ldrb	r2, [r2, #16]
 8006bb0:	f107 0108 	add.w	r1, r7, #8
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bba:	e00f      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa13 	bl	8006fea <USBD_CtlError>
            err++;
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bca:	e007      	b.n	8006bdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa0b 	bl	8006fea <USBD_CtlError>
          err++;
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006bda:	e038      	b.n	8006c4e <USBD_GetDescriptor+0x286>
 8006bdc:	e037      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7c1b      	ldrb	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bee:	f107 0208 	add.w	r2, r7, #8
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	4798      	blx	r3
 8006bf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bf8:	e029      	b.n	8006c4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9f4 	bl	8006fea <USBD_CtlError>
        err++;
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	3301      	adds	r3, #1
 8006c06:	72fb      	strb	r3, [r7, #11]
      break;
 8006c08:	e021      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c1b      	ldrb	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f107 0208 	add.w	r2, r7, #8
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4798      	blx	r3
 8006c22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	2207      	movs	r2, #7
 8006c2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c2c:	e00f      	b.n	8006c4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f9da 	bl	8006fea <USBD_CtlError>
        err++;
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c3c:	e007      	b.n	8006c4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f9d2 	bl	8006fea <USBD_CtlError>
      err++;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c4c:	bf00      	nop
  }

  if (err != 0U)
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11c      	bne.n	8006c8e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006c54:	893b      	ldrh	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <USBD_GetDescriptor+0x2b6>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00d      	beq.n	8006c7e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88da      	ldrh	r2, [r3, #6]
 8006c66:	893b      	ldrh	r3, [r7, #8]
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	bf28      	it	cs
 8006c6c:	4613      	movcs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c72:	893b      	ldrh	r3, [r7, #8]
 8006c74:	461a      	mov	r2, r3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa21 	bl	80070c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa5a 	bl	8007140 <USBD_CtlSendStatus>
 8006c8c:	e000      	b.n	8006c90 <USBD_GetDescriptor+0x2c8>
    return;
 8006c8e:	bf00      	nop
    }
  }
}
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop

08006c98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	889b      	ldrh	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d130      	bne.n	8006d0c <USBD_SetAddress+0x74>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d12c      	bne.n	8006d0c <USBD_SetAddress+0x74>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	885b      	ldrh	r3, [r3, #2]
 8006cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb8:	d828      	bhi.n	8006d0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	885b      	ldrh	r3, [r3, #2]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d104      	bne.n	8006cda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f989 	bl	8006fea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd8:	e01c      	b.n	8006d14 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fd7f 	bl	80077ea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa27 	bl	8007140 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d00:	e008      	b.n	8006d14 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0a:	e003      	b.n	8006d14 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f96b 	bl	8006fea <USBD_CtlError>
  }
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	885b      	ldrh	r3, [r3, #2]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	4b41      	ldr	r3, [pc, #260]	; (8006e34 <USBD_SetConfig+0x118>)
 8006d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d30:	4b40      	ldr	r3, [pc, #256]	; (8006e34 <USBD_SetConfig+0x118>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d904      	bls.n	8006d42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f955 	bl	8006fea <USBD_CtlError>
 8006d40:	e075      	b.n	8006e2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d002      	beq.n	8006d52 <USBD_SetConfig+0x36>
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d023      	beq.n	8006d98 <USBD_SetConfig+0x7c>
 8006d50:	e062      	b.n	8006e18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006d52:	4b38      	ldr	r3, [pc, #224]	; (8006e34 <USBD_SetConfig+0x118>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01a      	beq.n	8006d90 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006d5a:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <USBD_SetConfig+0x118>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2203      	movs	r2, #3
 8006d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d6c:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <USBD_SetConfig+0x118>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff f9f0 	bl	8006158 <USBD_SetClassConfig>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d104      	bne.n	8006d88 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f932 	bl	8006fea <USBD_CtlError>
            return;
 8006d86:	e052      	b.n	8006e2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f9d9 	bl	8007140 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d8e:	e04e      	b.n	8006e2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f9d5 	bl	8007140 <USBD_CtlSendStatus>
        break;
 8006d96:	e04a      	b.n	8006e2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006d98:	4b26      	ldr	r3, [pc, #152]	; (8006e34 <USBD_SetConfig+0x118>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d112      	bne.n	8006dc6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006da8:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <USBD_SetConfig+0x118>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006db2:	4b20      	ldr	r3, [pc, #128]	; (8006e34 <USBD_SetConfig+0x118>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff f9ec 	bl	8006196 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f9be 	bl	8007140 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006dc4:	e033      	b.n	8006e2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <USBD_SetConfig+0x118>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d01d      	beq.n	8006e10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff f9da 	bl	8006196 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <USBD_SetConfig+0x118>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006dec:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <USBD_SetConfig+0x118>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff f9b0 	bl	8006158 <USBD_SetClassConfig>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d104      	bne.n	8006e08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8f2 	bl	8006fea <USBD_CtlError>
            return;
 8006e06:	e012      	b.n	8006e2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f999 	bl	8007140 <USBD_CtlSendStatus>
        break;
 8006e0e:	e00e      	b.n	8006e2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f995 	bl	8007140 <USBD_CtlSendStatus>
        break;
 8006e16:	e00a      	b.n	8006e2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f8e5 	bl	8006fea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <USBD_SetConfig+0x118>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff f9b5 	bl	8006196 <USBD_ClrClassConfig>
        break;
 8006e2c:	bf00      	nop
    }
  }
}
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000180 	.word	0x20000180

08006e38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	88db      	ldrh	r3, [r3, #6]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d004      	beq.n	8006e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8cc 	bl	8006fea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e52:	e021      	b.n	8006e98 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	db17      	blt.n	8006e8e <USBD_GetConfig+0x56>
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	dd02      	ble.n	8006e68 <USBD_GetConfig+0x30>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d00b      	beq.n	8006e7e <USBD_GetConfig+0x46>
 8006e66:	e012      	b.n	8006e8e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3308      	adds	r3, #8
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f922 	bl	80070c0 <USBD_CtlSendData>
        break;
 8006e7c:	e00c      	b.n	8006e98 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3304      	adds	r3, #4
 8006e82:	2201      	movs	r2, #1
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f91a 	bl	80070c0 <USBD_CtlSendData>
        break;
 8006e8c:	e004      	b.n	8006e98 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f8aa 	bl	8006fea <USBD_CtlError>
        break;
 8006e96:	bf00      	nop
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d81e      	bhi.n	8006ef4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d004      	beq.n	8006ec8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f892 	bl	8006fea <USBD_CtlError>
        break;
 8006ec6:	e01a      	b.n	8006efe <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f043 0202 	orr.w	r2, r3, #2
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	2202      	movs	r2, #2
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8e7 	bl	80070c0 <USBD_CtlSendData>
      break;
 8006ef2:	e004      	b.n	8006efe <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f877 	bl	8006fea <USBD_CtlError>
      break;
 8006efc:	bf00      	nop
  }
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	885b      	ldrh	r3, [r3, #2]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d106      	bne.n	8006f26 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f90d 	bl	8007140 <USBD_CtlSendStatus>
  }
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d80b      	bhi.n	8006f5c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	885b      	ldrh	r3, [r3, #2]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d10c      	bne.n	8006f66 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f8f3 	bl	8007140 <USBD_CtlSendStatus>
      }
      break;
 8006f5a:	e004      	b.n	8006f66 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f843 	bl	8006fea <USBD_CtlError>
      break;
 8006f64:	e000      	b.n	8006f68 <USBD_ClrFeature+0x3a>
      break;
 8006f66:	bf00      	nop
  }
}
 8006f68:	bf00      	nop
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	785a      	ldrb	r2, [r3, #1]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	3303      	adds	r3, #3
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	3305      	adds	r3, #5
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	3306      	adds	r3, #6
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	3307      	adds	r3, #7
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	80da      	strh	r2, [r3, #6]

}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fb8c 	bl	8007714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fb88 	bl	8007714 <USBD_LL_StallEP>
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d032      	beq.n	8007088 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f834 	bl	8007090 <USBD_GetLen>
 8007028:	4603      	mov	r3, r0
 800702a:	3301      	adds	r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	75fa      	strb	r2, [r7, #23]
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	75fa      	strb	r2, [r7, #23]
 800704e:	461a      	mov	r2, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4413      	add	r3, r2
 8007054:	2203      	movs	r2, #3
 8007056:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007058:	e012      	b.n	8007080 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	60fa      	str	r2, [r7, #12]
 8007060:	7dfa      	ldrb	r2, [r7, #23]
 8007062:	1c51      	adds	r1, r2, #1
 8007064:	75f9      	strb	r1, [r7, #23]
 8007066:	4611      	mov	r1, r2
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	440a      	add	r2, r1
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	75fa      	strb	r2, [r7, #23]
 8007076:	461a      	mov	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4413      	add	r3, r2
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e8      	bne.n	800705a <USBD_GetString+0x4e>
    }
  }
}
 8007088:	bf00      	nop
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800709c:	e005      	b.n	80070aa <USBD_GetLen+0x1a>
  {
    len++;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	3301      	adds	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3301      	adds	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f5      	bne.n	800709e <USBD_GetLen+0xe>
  }

  return len;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80070dc:	88fa      	ldrh	r2, [r7, #6]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	2100      	movs	r1, #0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fb9d 	bl	8007828 <USBD_LL_Transmit>

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	2100      	movs	r1, #0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fb8b 	bl	8007828 <USBD_LL_Transmit>

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	2100      	movs	r1, #0
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fb9c 	bl	800786e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2204      	movs	r2, #4
 800714c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007150:	2300      	movs	r3, #0
 8007152:	2200      	movs	r2, #0
 8007154:	2100      	movs	r1, #0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fb66 	bl	8007828 <USBD_LL_Transmit>

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2205      	movs	r2, #5
 8007172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007176:	2300      	movs	r3, #0
 8007178:	2200      	movs	r2, #0
 800717a:	2100      	movs	r1, #0
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb76 	bl	800786e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007190:	2200      	movs	r2, #0
 8007192:	490e      	ldr	r1, [pc, #56]	; (80071cc <MX_USB_DEVICE_Init+0x40>)
 8007194:	480e      	ldr	r0, [pc, #56]	; (80071d0 <MX_USB_DEVICE_Init+0x44>)
 8007196:	f7fe ff83 	bl	80060a0 <USBD_Init>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071a0:	f7f9 f99a 	bl	80004d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80071a4:	490b      	ldr	r1, [pc, #44]	; (80071d4 <MX_USB_DEVICE_Init+0x48>)
 80071a6:	480a      	ldr	r0, [pc, #40]	; (80071d0 <MX_USB_DEVICE_Init+0x44>)
 80071a8:	f7fe ffa5 	bl	80060f6 <USBD_RegisterClass>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071b2:	f7f9 f991 	bl	80004d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071b6:	4806      	ldr	r0, [pc, #24]	; (80071d0 <MX_USB_DEVICE_Init+0x44>)
 80071b8:	f7fe ffb7 	bl	800612a <USBD_Start>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80071c2:	f7f9 f989 	bl	80004d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071c6:	bf00      	nop
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000114 	.word	0x20000114
 80071d0:	2000025c 	.word	0x2000025c
 80071d4:	2000000c 	.word	0x2000000c

080071d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2212      	movs	r2, #18
 80071e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071ea:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	20000130 	.word	0x20000130

080071fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2204      	movs	r2, #4
 800720c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	20000144 	.word	0x20000144

08007220 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4907      	ldr	r1, [pc, #28]	; (8007254 <USBD_FS_ProductStrDescriptor+0x34>)
 8007236:	4808      	ldr	r0, [pc, #32]	; (8007258 <USBD_FS_ProductStrDescriptor+0x38>)
 8007238:	f7ff fee8 	bl	800700c <USBD_GetString>
 800723c:	e004      	b.n	8007248 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <USBD_FS_ProductStrDescriptor+0x34>)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <USBD_FS_ProductStrDescriptor+0x38>)
 8007244:	f7ff fee2 	bl	800700c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000520 	.word	0x20000520
 8007258:	080079c4 	.word	0x080079c4

0800725c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	4904      	ldr	r1, [pc, #16]	; (800727c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800726c:	4804      	ldr	r0, [pc, #16]	; (8007280 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800726e:	f7ff fecd 	bl	800700c <USBD_GetString>
  return USBD_StrDesc;
 8007272:	4b02      	ldr	r3, [pc, #8]	; (800727c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000520 	.word	0x20000520
 8007280:	080079dc 	.word	0x080079dc

08007284 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	221a      	movs	r2, #26
 8007294:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007296:	f000 f843 	bl	8007320 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800729a:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000148 	.word	0x20000148

080072a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4907      	ldr	r1, [pc, #28]	; (80072dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80072be:	4808      	ldr	r0, [pc, #32]	; (80072e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072c0:	f7ff fea4 	bl	800700c <USBD_GetString>
 80072c4:	e004      	b.n	80072d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	4904      	ldr	r1, [pc, #16]	; (80072dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80072ca:	4805      	ldr	r0, [pc, #20]	; (80072e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072cc:	f7ff fe9e 	bl	800700c <USBD_GetString>
  }
  return USBD_StrDesc;
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000520 	.word	0x20000520
 80072e0:	080079f0 	.word	0x080079f0

080072e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d105      	bne.n	8007302 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	4907      	ldr	r1, [pc, #28]	; (8007318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072fa:	4808      	ldr	r0, [pc, #32]	; (800731c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072fc:	f7ff fe86 	bl	800700c <USBD_GetString>
 8007300:	e004      	b.n	800730c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4904      	ldr	r1, [pc, #16]	; (8007318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007306:	4805      	ldr	r0, [pc, #20]	; (800731c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007308:	f7ff fe80 	bl	800700c <USBD_GetString>
  }
  return USBD_StrDesc;
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000520 	.word	0x20000520
 800731c:	080079fc 	.word	0x080079fc

08007320 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007326:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <Get_SerialNum+0x44>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <Get_SerialNum+0x48>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <Get_SerialNum+0x4c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007346:	2208      	movs	r2, #8
 8007348:	4909      	ldr	r1, [pc, #36]	; (8007370 <Get_SerialNum+0x50>)
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f814 	bl	8007378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007350:	2204      	movs	r2, #4
 8007352:	4908      	ldr	r1, [pc, #32]	; (8007374 <Get_SerialNum+0x54>)
 8007354:	68b8      	ldr	r0, [r7, #8]
 8007356:	f000 f80f 	bl	8007378 <IntToUnicode>
  }
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	1ffff7ac 	.word	0x1ffff7ac
 8007368:	1ffff7b0 	.word	0x1ffff7b0
 800736c:	1ffff7b4 	.word	0x1ffff7b4
 8007370:	2000014a 	.word	0x2000014a
 8007374:	2000015a 	.word	0x2000015a

08007378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]
 800738e:	e027      	b.n	80073e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	0f1b      	lsrs	r3, r3, #28
 8007394:	2b09      	cmp	r3, #9
 8007396:	d80b      	bhi.n	80073b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	0f1b      	lsrs	r3, r3, #28
 800739c:	b2da      	uxtb	r2, r3
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4619      	mov	r1, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	440b      	add	r3, r1
 80073a8:	3230      	adds	r2, #48	; 0x30
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e00a      	b.n	80073c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	0f1b      	lsrs	r3, r3, #28
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4619      	mov	r1, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	440b      	add	r3, r1
 80073c0:	3237      	adds	r2, #55	; 0x37
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	3301      	adds	r3, #1
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4413      	add	r3, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	3301      	adds	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
 80073e0:	7dfa      	ldrb	r2, [r7, #23]
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3d3      	bcc.n	8007390 <IntToUnicode+0x18>
  }
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fc:	f107 0314 	add.w	r3, r7, #20
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1c      	ldr	r2, [pc, #112]	; (8007484 <HAL_PCD_MspInit+0x90>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d131      	bne.n	800747a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007416:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <HAL_PCD_MspInit+0x94>)
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <HAL_PCD_MspInit+0x94>)
 800741c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007420:	6153      	str	r3, [r2, #20]
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <HAL_PCD_MspInit+0x94>)
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800742e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007434:	2302      	movs	r3, #2
 8007436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800743c:	2303      	movs	r3, #3
 800743e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8007440:	230e      	movs	r3, #14
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	4619      	mov	r1, r3
 800744a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800744e:	f7f9 fb07 	bl	8000a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <HAL_PCD_MspInit+0x94>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4a0c      	ldr	r2, [pc, #48]	; (8007488 <HAL_PCD_MspInit+0x94>)
 8007458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800745c:	61d3      	str	r3, [r2, #28]
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <HAL_PCD_MspInit+0x94>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800746a:	2200      	movs	r2, #0
 800746c:	2100      	movs	r1, #0
 800746e:	2014      	movs	r0, #20
 8007470:	f7f9 fabf 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8007474:	2014      	movs	r0, #20
 8007476:	f7f9 fad8 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800747a:	bf00      	nop
 800747c:	3728      	adds	r7, #40	; 0x28
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40005c00 	.word	0x40005c00
 8007488:	40021000 	.word	0x40021000

0800748c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe fe8a 	bl	80061bc <USBD_LL_SetupStage>
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	440b      	add	r3, r1
 80074d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	4619      	mov	r1, r3
 80074da:	f7fe feba 	bl	8006252 <USBD_LL_DataOutStage>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	440b      	add	r3, r1
 8007506:	333c      	adds	r3, #60	; 0x3c
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	4619      	mov	r1, r3
 800750e:	f7fe ff11 	bl	8006334 <USBD_LL_DataInStage>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff f824 	bl	8006576 <USBD_LL_SOF>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800753e:	2301      	movs	r3, #1
 8007540:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d001      	beq.n	800754e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800754a:	f7f8 ffc5 	bl	80004d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe ffd1 	bl	8006500 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe ff8a 	bl	800647e <USBD_LL_Reset>
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe ffcc 	bl	8006520 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007590:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <HAL_PCD_SuspendCallback+0x30>)
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	4a03      	ldr	r2, [pc, #12]	; (80075a4 <HAL_PCD_SuspendCallback+0x30>)
 8007596:	f043 0306 	orr.w	r3, r3, #6
 800759a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	e000ed00 	.word	0xe000ed00

080075a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe ffc7 	bl	800654a <USBD_LL_Resume>
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <USBD_LL_Init+0x88>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	; (800764c <USBD_LL_Init+0x88>)
 80075d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <USBD_LL_Init+0x88>)
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <USBD_LL_Init+0x8c>)
 80075e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80075e2:	4b1a      	ldr	r3, [pc, #104]	; (800764c <USBD_LL_Init+0x88>)
 80075e4:	2208      	movs	r2, #8
 80075e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80075e8:	4b18      	ldr	r3, [pc, #96]	; (800764c <USBD_LL_Init+0x88>)
 80075ea:	2202      	movs	r2, #2
 80075ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075ee:	4b17      	ldr	r3, [pc, #92]	; (800764c <USBD_LL_Init+0x88>)
 80075f0:	2202      	movs	r2, #2
 80075f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80075f4:	4b15      	ldr	r3, [pc, #84]	; (800764c <USBD_LL_Init+0x88>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80075fa:	4b14      	ldr	r3, [pc, #80]	; (800764c <USBD_LL_Init+0x88>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007600:	4812      	ldr	r0, [pc, #72]	; (800764c <USBD_LL_Init+0x88>)
 8007602:	f7f9 fcfd 	bl	8001000 <HAL_PCD_Init>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800760c:	f7f8 ff64 	bl	80004d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007616:	2318      	movs	r3, #24
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	f7fa ff81 	bl	8002522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007626:	2358      	movs	r3, #88	; 0x58
 8007628:	2200      	movs	r2, #0
 800762a:	2180      	movs	r1, #128	; 0x80
 800762c:	f7fa ff79 	bl	8002522 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800763a:	2200      	movs	r2, #0
 800763c:	2181      	movs	r1, #129	; 0x81
 800763e:	f7fa ff70 	bl	8002522 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000720 	.word	0x20000720
 8007650:	40005c00 	.word	0x40005c00

08007654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800766a:	4618      	mov	r0, r3
 800766c:	f7f9 fda6 	bl	80011bc <HAL_PCD_Start>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f940 	bl	80078fc <USBD_Get_USB_Status>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007680:	7bbb      	ldrb	r3, [r7, #14]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	4608      	mov	r0, r1
 8007694:	4611      	mov	r1, r2
 8007696:	461a      	mov	r2, r3
 8007698:	4603      	mov	r3, r0
 800769a:	70fb      	strb	r3, [r7, #3]
 800769c:	460b      	mov	r3, r1
 800769e:	70bb      	strb	r3, [r7, #2]
 80076a0:	4613      	mov	r3, r2
 80076a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076b2:	78bb      	ldrb	r3, [r7, #2]
 80076b4:	883a      	ldrh	r2, [r7, #0]
 80076b6:	78f9      	ldrb	r1, [r7, #3]
 80076b8:	f7f9 fec2 	bl	8001440 <HAL_PCD_EP_Open>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 f91a 	bl	80078fc <USBD_Get_USB_Status>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7f9 ff09 	bl	800150c <HAL_PCD_EP_Close>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f8fb 	bl	80078fc <USBD_Get_USB_Status>
 8007706:	4603      	mov	r3, r0
 8007708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770a:	7bbb      	ldrb	r3, [r7, #14]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7f9 ffb2 	bl	800169c <HAL_PCD_EP_SetStall>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f8dc 	bl	80078fc <USBD_Get_USB_Status>
 8007744:	4603      	mov	r3, r0
 8007746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007748:	7bbb      	ldrb	r3, [r7, #14]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f7f9 ffe5 	bl	8001740 <HAL_PCD_EP_ClrStall>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 f8bd 	bl	80078fc <USBD_Get_USB_Status>
 8007782:	4603      	mov	r3, r0
 8007784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007786:	7bbb      	ldrb	r3, [r7, #14]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da0c      	bge.n	80077c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	440b      	add	r3, r1
 80077c0:	3302      	adds	r3, #2
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	e00b      	b.n	80077de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077cc:	68f9      	ldr	r1, [r7, #12]
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	440b      	add	r3, r1
 80077d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80077dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7f9 fdf4 	bl	80013f6 <HAL_PCD_SetAddress>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f871 	bl	80078fc <USBD_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	461a      	mov	r2, r3
 8007834:	460b      	mov	r3, r1
 8007836:	72fb      	strb	r3, [r7, #11]
 8007838:	4613      	mov	r3, r2
 800783a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800784a:	893b      	ldrh	r3, [r7, #8]
 800784c:	7af9      	ldrb	r1, [r7, #11]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	f7f9 fee1 	bl	8001616 <HAL_PCD_EP_Transmit>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f84e 	bl	80078fc <USBD_Get_USB_Status>
 8007860:	4603      	mov	r3, r0
 8007862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007864:	7dbb      	ldrb	r3, [r7, #22]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	461a      	mov	r2, r3
 800787a:	460b      	mov	r3, r1
 800787c:	72fb      	strb	r3, [r7, #11]
 800787e:	4613      	mov	r3, r2
 8007880:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007890:	893b      	ldrh	r3, [r7, #8]
 8007892:	7af9      	ldrb	r1, [r7, #11]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	f7f9 fe81 	bl	800159c <HAL_PCD_EP_Receive>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 f82b 	bl	80078fc <USBD_Get_USB_Status>
 80078a6:	4603      	mov	r3, r0
 80078a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078bc:	4b03      	ldr	r3, [pc, #12]	; (80078cc <USBD_static_malloc+0x18>)
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000184 	.word	0x20000184

080078d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d817      	bhi.n	8007940 <USBD_Get_USB_Status+0x44>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USBD_Get_USB_Status+0x1c>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007929 	.word	0x08007929
 800791c:	0800792f 	.word	0x0800792f
 8007920:	08007935 	.word	0x08007935
 8007924:	0800793b 	.word	0x0800793b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
    break;
 800792c:	e00b      	b.n	8007946 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	73fb      	strb	r3, [r7, #15]
    break;
 8007932:	e008      	b.n	8007946 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007934:	2301      	movs	r3, #1
 8007936:	73fb      	strb	r3, [r7, #15]
    break;
 8007938:	e005      	b.n	8007946 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800793a:	2302      	movs	r3, #2
 800793c:	73fb      	strb	r3, [r7, #15]
    break;
 800793e:	e002      	b.n	8007946 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007940:	2302      	movs	r3, #2
 8007942:	73fb      	strb	r3, [r7, #15]
    break;
 8007944:	bf00      	nop
  }
  return usb_status;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4e0d      	ldr	r6, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1ba4      	subs	r4, r4, r6
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2500      	movs	r5, #0
 8007960:	42a5      	cmp	r5, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4e0b      	ldr	r6, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f000 f820 	bl	80079ac <_init>
 800796c:	1ba4      	subs	r4, r4, r6
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2500      	movs	r5, #0
 8007972:	42a5      	cmp	r5, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800797c:	4798      	blx	r3
 800797e:	3501      	adds	r5, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007986:	4798      	blx	r3
 8007988:	3501      	adds	r5, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	08007a3c 	.word	0x08007a3c
 8007990:	08007a3c 	.word	0x08007a3c
 8007994:	08007a3c 	.word	0x08007a3c
 8007998:	08007a40 	.word	0x08007a40

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <_init>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr

080079b8 <_fini>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr
