
f303usb_accmouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007ac0  08007ac0  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ac0  08007ac0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000164  08007c2c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08007c2c  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a29  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e8b  00000000  00000000  00035bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00038a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  000398f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049f9  00000000  00000000  0003a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f808  00000000  00000000  0003f039  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097a8f  00000000  00000000  0004e841  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e62d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba8  00000000  00000000  000e634c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a30 	.word	0x08007a30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	08007a30 	.word	0x08007a30

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fad5 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f849 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f927 	bl	8000428 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f8a7 	bl	800032c <MX_I2C1_Init>
  MX_SPI1_Init();
 80001de:	f000 f8e5 	bl	80003ac <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e2:	f007 f815 	bl	8007210 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  buffer[0]=0;
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <main+0x90>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
  buffer[1]=100;
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <main+0x90>)
 80001ee:	2264      	movs	r2, #100	; 0x64
 80001f0:	705a      	strb	r2, [r3, #1]
  buffer[2]=0;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <main+0x90>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	709a      	strb	r2, [r3, #2]
  buffer[3]=0;
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <main+0x90>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	70da      	strb	r2, [r3, #3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t i=0;
 80001fe:	2300      	movs	r3, #0
 8000200:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */
	  if(i%10==0)HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000202:	79fa      	ldrb	r2, [r7, #7]
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x94>)
 8000206:	fba3 1302 	umull	r1, r3, r3, r2
 800020a:	08d9      	lsrs	r1, r3, #3
 800020c:	460b      	mov	r3, r1
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	440b      	add	r3, r1
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	b2db      	uxtb	r3, r3
 8000218:	2b00      	cmp	r3, #0
 800021a:	d104      	bne.n	8000226 <main+0x5e>
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	480f      	ldr	r0, [pc, #60]	; (8000260 <main+0x98>)
 8000222:	f000 fdef 	bl	8000e04 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000226:	2064      	movs	r0, #100	; 0x64
 8000228:	f000 fb0e 	bl	8000848 <HAL_Delay>
	  i++;
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	3301      	adds	r3, #1
 8000230:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET){
 8000232:	2101      	movs	r1, #1
 8000234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000238:	f000 fdb4 	bl	8000da4 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	2b01      	cmp	r3, #1
 8000240:	d1df      	bne.n	8000202 <main+0x3a>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000246:	4806      	ldr	r0, [pc, #24]	; (8000260 <main+0x98>)
 8000248:	f000 fddc 	bl	8000e04 <HAL_GPIO_TogglePin>
		  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 800024c:	2204      	movs	r2, #4
 800024e:	4902      	ldr	r1, [pc, #8]	; (8000258 <main+0x90>)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <main+0x9c>)
 8000252:	f005 fef3 	bl	800603c <USBD_HID_SendReport>
	  if(i%10==0)HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000256:	e7d4      	b.n	8000202 <main+0x3a>
 8000258:	200001e4 	.word	0x200001e4
 800025c:	cccccccd 	.word	0xcccccccd
 8000260:	48001000 	.word	0x48001000
 8000264:	2000025c 	.word	0x2000025c

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b09e      	sub	sp, #120	; 0x78
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f007 fbd2 	bl	8007a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	223c      	movs	r2, #60	; 0x3c
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f007 fbc4 	bl	8007a20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000298:	2303      	movs	r3, #3
 800029a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800029c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
 80002ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 f9b2 	bl	800262c <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ce:	f000 f92b 	bl	8000528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ec:	2101      	movs	r1, #1
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 f8a4 	bl	800343c <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002fa:	f000 f915 	bl	8000528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <SystemClock_Config+0xc0>)
 8000300:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fa7a 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800031a:	f000 f905 	bl	8000528 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3778      	adds	r7, #120	; 0x78
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	00020020 	.word	0x00020020

0800032c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_I2C1_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000338:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x7c>)
 800033a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000344:	2201      	movs	r2, #1
 8000346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000366:	480e      	ldr	r0, [pc, #56]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000368:	f000 fd66 	bl	8000e38 <HAL_I2C_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000372:	f000 f8d9 	bl	8000528 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000376:	2100      	movs	r1, #0
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <MX_I2C1_Init+0x74>)
 800037a:	f000 fdec 	bl	8000f56 <HAL_I2CEx_ConfigAnalogFilter>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000384:	f000 f8d0 	bl	8000528 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000388:	2100      	movs	r1, #0
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_I2C1_Init+0x74>)
 800038c:	f000 fe2e 	bl	8000fec <HAL_I2CEx_ConfigDigitalFilter>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000396:	f000 f8c7 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000198 	.word	0x20000198
 80003a4:	40005400 	.word	0x40005400
 80003a8:	2000090e 	.word	0x2000090e

080003ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_SPI1_Init+0x74>)
 80003b2:	4a1c      	ldr	r2, [pc, #112]	; (8000424 <MX_SPI1_Init+0x78>)
 80003b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_SPI1_Init+0x74>)
 80003b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_SPI1_Init+0x74>)
 80003c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_SPI1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_SPI1_Init+0x74>)
 80003da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_SPI1_Init+0x74>)
 80003e2:	2208      	movs	r2, #8
 80003e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_SPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_SPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_SPI1_Init+0x74>)
 80003fa:	2207      	movs	r2, #7
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_SPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_SPI1_Init+0x74>)
 8000406:	2208      	movs	r2, #8
 8000408:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_SPI1_Init+0x74>)
 800040c:	f003 fbac 	bl	8003b68 <HAL_SPI_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000416:	f000 f887 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200001f4 	.word	0x200001f4
 8000424:	40013000 	.word	0x40013000

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <MX_GPIO_Init+0xf4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a36      	ldr	r2, [pc, #216]	; (800051c <MX_GPIO_Init+0xf4>)
 8000444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b34      	ldr	r3, [pc, #208]	; (800051c <MX_GPIO_Init+0xf4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <MX_GPIO_Init+0xf4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a30      	ldr	r2, [pc, #192]	; (800051c <MX_GPIO_Init+0xf4>)
 800045c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <MX_GPIO_Init+0xf4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_GPIO_Init+0xf4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a2a      	ldr	r2, [pc, #168]	; (800051c <MX_GPIO_Init+0xf4>)
 8000474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_GPIO_Init+0xf4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_GPIO_Init+0xf4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a24      	ldr	r2, [pc, #144]	; (800051c <MX_GPIO_Init+0xf4>)
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_GPIO_Init+0xf4>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_GPIO_Init+0xf4>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a1e      	ldr	r2, [pc, #120]	; (800051c <MX_GPIO_Init+0xf4>)
 80004a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <MX_GPIO_Init+0xf4>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004b6:	2200      	movs	r2, #0
 80004b8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004bc:	4818      	ldr	r0, [pc, #96]	; (8000520 <MX_GPIO_Init+0xf8>)
 80004be:	f000 fc89 	bl	8000dd4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004c2:	2337      	movs	r3, #55	; 0x37
 80004c4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <MX_GPIO_Init+0xfc>)
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	4812      	ldr	r0, [pc, #72]	; (8000520 <MX_GPIO_Init+0xf8>)
 80004d6:	f000 faeb 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004da:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004de:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <MX_GPIO_Init+0xf8>)
 80004f4:	f000 fadc 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f8:	2301      	movs	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4619      	mov	r1, r3
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 facf 	bl	8000ab0 <HAL_GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3728      	adds	r7, #40	; 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	48001000 	.word	0x48001000
 8000524:	10120000 	.word	0x10120000

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x44>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_MspInit+0x44>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_MspInit+0x44>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_MspInit+0x44>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_MspInit+0x44>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_MspInit+0x44>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800056e:	2007      	movs	r0, #7
 8000570:	f000 fa5c 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_I2C_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d127      	bne.n	80005f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <HAL_I2C_MspInit+0x80>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a16      	ldr	r2, [pc, #88]	; (8000600 <HAL_I2C_MspInit+0x80>)
 80005a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_I2C_MspInit+0x80>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005ba:	23c0      	movs	r3, #192	; 0xc0
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005be:	2312      	movs	r3, #18
 80005c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ca:	2304      	movs	r3, #4
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <HAL_I2C_MspInit+0x84>)
 80005d6:	f000 fa6b 	bl	8000ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_I2C_MspInit+0x80>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_I2C_MspInit+0x80>)
 80005e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_I2C_MspInit+0x80>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40005400 	.word	0x40005400
 8000600:	40021000 	.word	0x40021000
 8000604:	48000400 	.word	0x48000400

08000608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_SPI_MspInit+0x7c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d128      	bne.n	800067c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_SPI_MspInit+0x80>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <HAL_SPI_MspInit+0x80>)
 8000630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_SPI_MspInit+0x80>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_SPI_MspInit+0x80>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_SPI_MspInit+0x80>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_SPI_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800065a:	23e0      	movs	r3, #224	; 0xe0
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800066a:	2305      	movs	r3, #5
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fa1a 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40013000 	.word	0x40013000
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f892 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006ee:	f000 fdcd 	bl	800128c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000720 	.word	0x20000720

080006fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SystemInit+0x28>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SystemInit+0x28>)
 8000708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SystemInit+0x28>)
 8000712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000716:	609a      	str	r2, [r3, #8]
#endif
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000760 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800072c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800072e:	e003      	b.n	8000738 <LoopCopyDataInit>

08000730 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000732:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000734:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000736:	3104      	adds	r1, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <LoopForever+0xa>)
	ldr	r3, =_edata
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <LoopForever+0xe>)
	adds	r2, r0, r1
 800073c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800073e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000740:	d3f6      	bcc.n	8000730 <CopyDataInit>
	ldr	r2, =_sbss
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000744:	e002      	b.n	800074c <LoopFillZerobss>

08000746 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000746:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000748:	f842 3b04 	str.w	r3, [r2], #4

0800074c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <LoopForever+0x16>)
	cmp	r2, r3
 800074e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000750:	d3f9      	bcc.n	8000746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000752:	f7ff ffd3 	bl	80006fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f007 f93f 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075a:	f7ff fd35 	bl	80001c8 <main>

0800075e <LoopForever>:

LoopForever:
    b LoopForever
 800075e:	e7fe      	b.n	800075e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000760:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000764:	08007ac8 	.word	0x08007ac8
	ldr	r0, =_sdata
 8000768:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800076c:	20000164 	.word	0x20000164
	ldr	r2, =_sbss
 8000770:	20000164 	.word	0x20000164
	ldr	r3, = _ebss
 8000774:	20000a0c 	.word	0x20000a0c

08000778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_2_IRQHandler>
	...

0800077c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x28>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f94d 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff fece 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40022000 	.word	0x40022000

080007a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f965 	bl	8000a96 <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f92d 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	20000258 	.word	0x20000258

08000830 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;  
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000258 	.word	0x20000258

08000848 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_Delay+0x40>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000008 	.word	0x20000008

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff29 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff3e 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff8e 	bl	8000980 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff31 	bl	80008f0 <__NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e154      	b.n	8000d6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 8146 	beq.w	8000d64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d00b      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aec:	2b11      	cmp	r3, #17
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b12      	cmp	r3, #18
 8000af6:	d130      	bne.n	8000b5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	f003 0201 	and.w	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0xea>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d123      	bne.n	8000be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	08da      	lsrs	r2, r3, #3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0203 	and.w	r2, r3, #3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80a0 	beq.w	8000d64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3c:	4a53      	ldr	r2, [pc, #332]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c66:	d019      	beq.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d013      	beq.n	8000c98 <HAL_GPIO_Init+0x1e8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_GPIO_Init+0x2e4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x1e0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2ec>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <HAL_GPIO_Init+0x1dc>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	e008      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	e006      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e004      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	f002 0203 	and.w	r2, r2, #3
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cae:	4937      	ldr	r1, [pc, #220]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cbc:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce0:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f47f aea3 	bne.w	8000ac0 <HAL_GPIO_Init+0x10>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	48000400 	.word	0x48000400
 8000d94:	48000800 	.word	0x48000800
 8000d98:	48000c00 	.word	0x48000c00
 8000d9c:	48001000 	.word	0x48001000
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
 8000de0:	4613      	mov	r3, r2
 8000de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de4:	787b      	ldrb	r3, [r7, #1]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43d9      	mvns	r1, r3
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	400b      	ands	r3, r1
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e081      	b.n	8000f4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fb8e 	bl	8000580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2224      	movs	r2, #36	; 0x24
 8000e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0201 	bic.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d107      	bne.n	8000eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	e006      	b.n	8000ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d104      	bne.n	8000ed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	ea42 0103 	orr.w	r1, r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	021a      	lsls	r2, r3, #8
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69d9      	ldr	r1, [r3, #28]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d138      	bne.n	8000fde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e032      	b.n	8000fe0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fa8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6819      	ldr	r1, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fde:	2302      	movs	r3, #2
  }
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b20      	cmp	r3, #32
 8001000:	d139      	bne.n	8001076 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800100c:	2302      	movs	r3, #2
 800100e:	e033      	b.n	8001078 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2224      	movs	r2, #36	; 0x24
 800101c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800103e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0201 	orr.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2220      	movs	r2, #32
 8001066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001076:	2302      	movs	r3, #2
  }
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	b08b      	sub	sp, #44	; 0x2c
 8001088:	af06      	add	r7, sp, #24
 800108a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0d0      	b.n	8001238 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f006 f9e4 	bl	8007478 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fdfc 	bl	8003cba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e04c      	b.n	8001162 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3301      	adds	r3, #1
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	b298      	uxth	r0, r3
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	3336      	adds	r3, #54	; 0x36
 8001106:	4602      	mov	r2, r0
 8001108:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	3303      	adds	r3, #3
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	3338      	adds	r3, #56	; 0x38
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	333c      	adds	r3, #60	; 0x3c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	3340      	adds	r3, #64	; 0x40
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3ad      	bcc.n	80010c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e044      	b.n	80011fc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	440b      	add	r3, r1
 8001196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	440b      	add	r3, r1
 80011ac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	440b      	add	r3, r1
 80011c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	3301      	adds	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3b5      	bcc.n	8001172 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	687e      	ldr	r6, [r7, #4]
 800120e:	466d      	mov	r5, sp
 8001210:	f106 0410 	add.w	r4, r6, #16
 8001214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	602b      	str	r3, [r5, #0]
 800121c:	1d33      	adds	r3, r6, #4
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f002 fd65 	bl	8003cf0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001240 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_PCD_Start+0x16>
 8001252:	2302      	movs	r3, #2
 8001254:	e016      	b.n	8001284 <HAL_PCD_Start+0x44>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fd12 	bl	8003c8c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001268:	2101      	movs	r1, #1
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f006 fb7c 	bl	8007968 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f004 fceb 	bl	8005c50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f004 fce4 	bl	8005c66 <USB_ReadInterrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a8:	d102      	bne.n	80012b0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fade 	bl	800186c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fcd6 	bl	8005c66 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c4:	d112      	bne.n	80012ec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d8:	b292      	uxth	r2, r2
 80012da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f006 f96b 	bl	80075ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f8c7 	bl	800147a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fcb8 	bl	8005c66 <USB_ReadInterrupts>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001300:	d10b      	bne.n	800131a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001314:	b292      	uxth	r2, r2
 8001316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fca1 	bl	8005c66 <USB_ReadInterrupts>
 8001324:	4603      	mov	r3, r0
 8001326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132e:	d10b      	bne.n	8001348 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001342:	b292      	uxth	r2, r2
 8001344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f004 fc8a 	bl	8005c66 <USB_ReadInterrupts>
 8001352:	4603      	mov	r3, r0
 8001354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800135c:	d126      	bne.n	80013ac <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0204 	bic.w	r2, r2, #4
 8001370:	b292      	uxth	r2, r2
 8001372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800137e:	b29a      	uxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0208 	bic.w	r2, r2, #8
 8001388:	b292      	uxth	r2, r2
 800138a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f006 f94c 	bl	800762c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013a6:	b292      	uxth	r2, r2
 80013a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fc58 	bl	8005c66 <USB_ReadInterrupts>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013c0:	d126      	bne.n	8001410 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0208 	orr.w	r2, r2, #8
 80013d4:	b292      	uxth	r2, r2
 80013d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0204 	orr.w	r2, r2, #4
 8001404:	b292      	uxth	r2, r2
 8001406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f006 f8f4 	bl	80075f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fc26 	bl	8005c66 <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001424:	d10e      	bne.n	8001444 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f006 f8ad 	bl	800759e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f004 fc0c 	bl	8005c66 <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d10b      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_PCD_SetAddress+0x1a>
 8001490:	2302      	movs	r3, #2
 8001492:	e013      	b.n	80014bc <HAL_PCD_SetAddress+0x42>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fbbb 	bl	8005c28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	460b      	mov	r3, r1
 80014d8:	803b      	strh	r3, [r7, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da0e      	bge.n	8001508 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	e00e      	b.n	8001526 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001532:	883a      	ldrh	r2, [r7, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	78ba      	ldrb	r2, [r7, #2]
 800153c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001550:	78bb      	ldrb	r3, [r7, #2]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d102      	bne.n	800155c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_PCD_EP_Open+0xa6>
 8001566:	2302      	movs	r3, #2
 8001568:	e00e      	b.n	8001588 <HAL_PCD_EP_Open+0xc4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68f9      	ldr	r1, [r7, #12]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fbdb 	bl	8003d34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001586:	7afb      	ldrb	r3, [r7, #11]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800159c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0e      	bge.n	80015c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	705a      	strb	r2, [r3, #1]
 80015c0:	e00e      	b.n	80015e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f003 0207 	and.w	r2, r3, #7
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_EP_Close+0x6a>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e00e      	b.n	8001618 <HAL_PCD_EP_Close+0x88>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	4618      	mov	r0, r3
 800160a:	f002 ff01 	bl	8004410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	f003 0207 	and.w	r2, r3, #7
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	b2da      	uxtb	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	4618      	mov	r0, r3
 800167e:	f003 f8b4 	bl	80047ea <USB_EPStartXfer>
 8001682:	e005      	b.n	8001690 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6979      	ldr	r1, [r7, #20]
 800168a:	4618      	mov	r0, r3
 800168c:	f003 f8ad 	bl	80047ea <USB_EPStartXfer>
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	460b      	mov	r3, r1
 80016a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2201      	movs	r2, #1
 80016e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d106      	bne.n	800170a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6979      	ldr	r1, [r7, #20]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 f871 	bl	80047ea <USB_EPStartXfer>
 8001708:	e005      	b.n	8001716 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6979      	ldr	r1, [r7, #20]
 8001710:	4618      	mov	r0, r3
 8001712:	f003 f86a 	bl	80047ea <USB_EPStartXfer>
  }

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0207 	and.w	r2, r3, #7
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	d901      	bls.n	800173e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e03e      	b.n	80017bc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800173e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	da0e      	bge.n	8001764 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	705a      	strb	r2, [r3, #1]
 8001762:	e00c      	b.n	800177e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	b2da      	uxtb	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_PCD_EP_SetStall+0x7e>
 800179a:	2302      	movs	r3, #2
 800179c:	e00e      	b.n	80017bc <HAL_PCD_EP_SetStall+0x9c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 f93c 	bl	8005a2a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 020f 	and.w	r2, r3, #15
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d901      	bls.n	80017e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e040      	b.n	8001864 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da0e      	bge.n	8001808 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	705a      	strb	r2, [r3, #1]
 8001806:	e00e      	b.n	8001826 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	f003 0207 	and.w	r2, r3, #7
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	b2da      	uxtb	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_PCD_EP_ClrStall+0x82>
 8001842:	2302      	movs	r3, #2
 8001844:	e00e      	b.n	8001864 <HAL_PCD_EP_ClrStall+0xa0>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	4618      	mov	r0, r3
 8001856:	f004 f939 	bl	8005acc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001874:	e2df      	b.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001880:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800188c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 8158 	bne.w	8001b46 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001896:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d152      	bne.n	8001946 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b0:	81fb      	strh	r3, [r7, #14]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3328      	adds	r3, #40	; 0x28
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	3302      	adds	r3, #2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	441a      	add	r2, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001904:	2100      	movs	r1, #0
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f005 fe2f 	bl	800756a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 828e 	beq.w	8001e36 <PCD_EP_ISR_Handler+0x5ca>
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 8289 	bne.w	8001e36 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b292      	uxth	r2, r2
 8001938:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001944:	e277      	b.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195c:	2b00      	cmp	r3, #0
 800195e:	d034      	beq.n	80019ca <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001968:	b29b      	uxth	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	3306      	adds	r3, #6
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f004 f9b6 	bl	8005d10 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019b0:	4013      	ands	r3, r2
 80019b2:	823b      	strh	r3, [r7, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	8a3a      	ldrh	r2, [r7, #16]
 80019ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019be:	b292      	uxth	r2, r2
 80019c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f005 fda4 	bl	8007510 <HAL_PCD_SetupStageCallback>
 80019c8:	e235      	b.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f280 8231 	bge.w	8001e36 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019e0:	4013      	ands	r3, r2
 80019e2:	83bb      	strh	r3, [r7, #28]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	8bba      	ldrh	r2, [r7, #28]
 80019ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ee:	b292      	uxth	r2, r2
 80019f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	3306      	adds	r3, #6
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d019      	beq.n	8001a5a <PCD_EP_ISR_Handler+0x1ee>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	6959      	ldr	r1, [r3, #20]
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f004 f966 	bl	8005d10 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 fd6d 	bl	8007534 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4413      	add	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d112      	bne.n	8001aa8 <PCD_EP_ISR_Handler+0x23c>
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	e02f      	b.n	8001b08 <PCD_EP_ISR_Handler+0x29c>
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b3e      	cmp	r3, #62	; 0x3e
 8001aae:	d813      	bhi.n	8001ad8 <PCD_EP_ISR_Handler+0x26c>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <PCD_EP_ISR_Handler+0x25e>
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	e017      	b.n	8001b08 <PCD_EP_ISR_Handler+0x29c>
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <PCD_EP_ISR_Handler+0x286>
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	3b01      	subs	r3, #1
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	029b      	lsls	r3, r3, #10
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b18:	827b      	strh	r3, [r7, #18]
 8001b1a:	8a7b      	ldrh	r3, [r7, #18]
 8001b1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b20:	827b      	strh	r3, [r7, #18]
 8001b22:	8a7b      	ldrh	r3, [r7, #18]
 8001b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b28:	827b      	strh	r3, [r7, #18]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8013      	strh	r3, [r2, #0]
 8001b44:	e177      	b.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b58:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f280 80ea 	bge.w	8001d36 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b78:	4013      	ands	r3, r2
 8001b7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b90:	b292      	uxth	r2, r2
 8001b92:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b94:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	7b1b      	ldrb	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d122      	bne.n	8001bf8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3306      	adds	r3, #6
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bda:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001bdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	6959      	ldr	r1, [r3, #20]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	88da      	ldrh	r2, [r3, #6]
 8001bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bf2:	f004 f88d 	bl	8005d10 <USB_ReadPMA>
 8001bf6:	e07c      	b.n	8001cf2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	78db      	ldrb	r3, [r3, #3]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d108      	bne.n	8001c12 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c02:	461a      	mov	r2, r3
 8001c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f923 	bl	8001e52 <HAL_PCD_EP_DB_Receive>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c10:	e06f      	b.n	8001cf2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	441a      	add	r2, r3
 8001c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d021      	beq.n	8001cb0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3302      	adds	r3, #2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c94:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02a      	beq.n	8001cf2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	6959      	ldr	r1, [r3, #20]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	891a      	ldrh	r2, [r3, #8]
 8001ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001caa:	f004 f831 	bl	8005d10 <USB_ReadPMA>
 8001cae:	e020      	b.n	8001cf2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3306      	adds	r3, #6
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	6959      	ldr	r1, [r3, #20]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	895a      	ldrh	r2, [r3, #10]
 8001cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cee:	f004 f80f 	bl	8005d10 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cf8:	441a      	add	r2, r3
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d04:	441a      	add	r2, r3
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <PCD_EP_ISR_Handler+0x4b0>
 8001d12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d206      	bcs.n	8001d2a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f005 fc06 	bl	8007534 <HAL_PCD_DataOutStageCallback>
 8001d28:	e005      	b.n	8001d36 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fd5a 	bl	80047ea <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d07a      	beq.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6e:	843b      	strh	r3, [r7, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	441a      	add	r2, r3
 8001d7e:	8c3b      	ldrh	r3, [r7, #32]
 8001d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	78db      	ldrb	r3, [r3, #3]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d108      	bne.n	8001da6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d146      	bne.n	8001e2a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d141      	bne.n	8001e2a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dce:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	8bfb      	ldrh	r3, [r7, #30]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d906      	bls.n	8001de8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	8bfb      	ldrh	r3, [r7, #30]
 8001de0:	1ad2      	subs	r2, r2, r3
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	e002      	b.n	8001dee <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f005 fbb4 	bl	800756a <HAL_PCD_DataInStageCallback>
 8001e02:	e018      	b.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	8bfb      	ldrh	r3, [r7, #30]
 8001e0a:	441a      	add	r2, r3
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	8bfb      	ldrh	r3, [r7, #30]
 8001e16:	441a      	add	r2, r3
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fce1 	bl	80047ea <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e28:	e005      	b.n	8001e36 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f91b 	bl	800206c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f6ff ad17 	blt.w	8001876 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3738      	adds	r7, #56	; 0x38
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b088      	sub	sp, #32
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d07e      	beq.n	8001f68 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	8b7b      	ldrh	r3, [r7, #26]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d306      	bcc.n	8001eac <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	8b7b      	ldrh	r3, [r7, #26]
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	e002      	b.n	8001eb2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d123      	bne.n	8001f02 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed4:	833b      	strh	r3, [r7, #24]
 8001ed6:	8b3b      	ldrh	r3, [r7, #24]
 8001ed8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001edc:	833b      	strh	r3, [r7, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	441a      	add	r2, r3
 8001eec:	8b3b      	ldrh	r3, [r7, #24]
 8001eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01f      	beq.n	8001f4c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	82fb      	strh	r3, [r7, #22]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	8afb      	ldrh	r3, [r7, #22]
 8001f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f4c:	8b7b      	ldrh	r3, [r7, #26]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	6959      	ldr	r1, [r3, #20]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	891a      	ldrh	r2, [r3, #8]
 8001f60:	8b7b      	ldrh	r3, [r7, #26]
 8001f62:	f003 fed5 	bl	8005d10 <USB_ReadPMA>
 8001f66:	e07c      	b.n	8002062 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3306      	adds	r3, #6
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f90:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	8b7b      	ldrh	r3, [r7, #26]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d306      	bcc.n	8001faa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	8b7b      	ldrh	r3, [r7, #26]
 8001fa2:	1ad2      	subs	r2, r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	619a      	str	r2, [r3, #24]
 8001fa8:	e002      	b.n	8001fb0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d123      	bne.n	8002000 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	83fb      	strh	r3, [r7, #30]
 8001fd4:	8bfb      	ldrh	r3, [r7, #30]
 8001fd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fda:	83fb      	strh	r3, [r7, #30]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11f      	bne.n	800204a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002024:	83bb      	strh	r3, [r7, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	8bbb      	ldrh	r3, [r7, #28]
 8002036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800203a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002046:	b29b      	uxth	r3, r3
 8002048:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800204a:	8b7b      	ldrh	r3, [r7, #26]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6959      	ldr	r1, [r3, #20]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	895a      	ldrh	r2, [r3, #10]
 800205c:	8b7b      	ldrh	r3, [r7, #26]
 800205e:	f003 fe57 	bl	8005d10 <USB_ReadPMA>
    }
  }

  return count;
 8002062:	8b7b      	ldrh	r3, [r7, #26]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b092      	sub	sp, #72	; 0x48
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8132 	beq.w	80022ea <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	3302      	adds	r3, #2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d906      	bls.n	80020c8 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	619a      	str	r2, [r3, #24]
 80020c6:	e002      	b.n	80020ce <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d12c      	bne.n	8002130 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f005 fa44 	bl	800756a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 822f 	beq.w	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002108:	827b      	strh	r3, [r7, #18]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	441a      	add	r2, r3
 8002118:	8a7b      	ldrh	r3, [r7, #18]
 800211a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800211e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212a:	b29b      	uxth	r3, r3
 800212c:	8013      	strh	r3, [r2, #0]
 800212e:	e20d      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01f      	beq.n	800217a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002154:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002176:	b29b      	uxth	r3, r3
 8002178:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002180:	2b01      	cmp	r3, #1
 8002182:	f040 81e3 	bne.w	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800218c:	441a      	add	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002198:	441a      	add	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6a1a      	ldr	r2, [r3, #32]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d309      	bcc.n	80021be <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	621a      	str	r2, [r3, #32]
 80021bc:	e014      	b.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80021c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021d2:	e009      	b.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d155      	bne.n	800229c <HAL_PCD_EP_DB_Transmit+0x230>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	011a      	lsls	r2, r3, #4
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	2b00      	cmp	r3, #0
 800221c:	d112      	bne.n	8002244 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002228:	b29a      	uxth	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223c:	b29a      	uxth	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	e047      	b.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	2b3e      	cmp	r3, #62	; 0x3e
 8002248:	d811      	bhi.n	800226e <HAL_PCD_EP_DB_Transmit+0x202>
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	3301      	adds	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	b29b      	uxth	r3, r3
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	b29a      	uxth	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	e032      	b.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x268>
 800226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_PCD_EP_DB_Transmit+0x218>
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	b29b      	uxth	r3, r3
 8002288:	029b      	lsls	r3, r3, #10
 800228a:	b29b      	uxth	r3, r3
 800228c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002294:	b29a      	uxth	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	e01b      	b.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x268>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d117      	bne.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x268>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	4413      	add	r3, r2
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	011a      	lsls	r2, r3, #4
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	4413      	add	r3, r2
 80022c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6959      	ldr	r1, [r3, #20]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	891a      	ldrh	r2, [r3, #8]
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f003 fccf 	bl	8005c86 <USB_WritePMA>
 80022e8:	e130      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	3306      	adds	r3, #6
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002312:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800231a:	429a      	cmp	r2, r3
 800231c:	d306      	bcc.n	800232c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	619a      	str	r2, [r3, #24]
 800232a:	e002      	b.n	8002332 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d12c      	bne.n	8002394 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f005 f912 	bl	800756a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 80fd 	bne.w	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	441a      	add	r2, r3
 800237c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800237e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238e:	b29b      	uxth	r3, r3
 8002390:	8013      	strh	r3, [r2, #0]
 8002392:	e0db      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11f      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	441a      	add	r2, r3
 80023c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023da:	b29b      	uxth	r3, r3
 80023dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 80b1 	bne.w	800254c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f0:	441a      	add	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023fc:	441a      	add	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d309      	bcc.n	8002422 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	e014      	b.n	800244c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800242a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002436:	e009      	b.n	800244c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d155      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x49a>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246e:	4413      	add	r3, r2
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	011a      	lsls	r2, r3, #4
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	4413      	add	r3, r2
 800247c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002480:	643b      	str	r3, [r7, #64]	; 0x40
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <HAL_PCD_EP_DB_Transmit+0x442>
 8002488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002492:	b29a      	uxth	r2, r3
 8002494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	e044      	b.n	8002538 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	2b3e      	cmp	r3, #62	; 0x3e
 80024b2:	d811      	bhi.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x46c>
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_PCD_EP_DB_Transmit+0x45e>
 80024c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c6:	3301      	adds	r3, #1
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	029b      	lsls	r3, r3, #10
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	e02f      	b.n	8002538 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <HAL_PCD_EP_DB_Transmit+0x482>
 80024e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ea:	3b01      	subs	r3, #1
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	029b      	lsls	r3, r3, #10
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fe:	b29a      	uxth	r2, r3
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e018      	b.n	8002538 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d114      	bne.n	8002538 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	4413      	add	r3, r2
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	011a      	lsls	r2, r3, #4
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	4413      	add	r3, r2
 800252a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	b29a      	uxth	r2, r3
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6959      	ldr	r1, [r3, #20]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	895a      	ldrh	r2, [r3, #10]
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	b29b      	uxth	r3, r3
 8002548:	f003 fb9d 	bl	8005c86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002566:	823b      	strh	r3, [r7, #16]
 8002568:	8a3b      	ldrh	r3, [r7, #16]
 800256a:	f083 0310 	eor.w	r3, r3, #16
 800256e:	823b      	strh	r3, [r7, #16]
 8002570:	8a3b      	ldrh	r3, [r7, #16]
 8002572:	f083 0320 	eor.w	r3, r3, #32
 8002576:	823b      	strh	r3, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	8a3b      	ldrh	r3, [r7, #16]
 8002588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	b29b      	uxth	r3, r3
 800259a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3748      	adds	r7, #72	; 0x48
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b087      	sub	sp, #28
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	897b      	ldrh	r3, [r7, #10]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e009      	b.n	80025f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025dc:	897a      	ldrh	r2, [r7, #10]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025f0:	893b      	ldrh	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	80da      	strh	r2, [r3, #6]
 8002604:	e00b      	b.n	800261e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2201      	movs	r2, #1
 800260a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	b29a      	uxth	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0c1b      	lsrs	r3, r3, #16
 8002618:	b29a      	uxth	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002632:	af00      	add	r7, sp, #0
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f000 bef4 	b.w	800342e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 816a 	beq.w	800292a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002656:	4bb3      	ldr	r3, [pc, #716]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b04      	cmp	r3, #4
 8002660:	d00c      	beq.n	800267c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002662:	4bb0      	ldr	r3, [pc, #704]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d159      	bne.n	8002722 <HAL_RCC_OscConfig+0xf6>
 800266e:	4bad      	ldr	r3, [pc, #692]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d152      	bne.n	8002722 <HAL_RCC_OscConfig+0xf6>
 800267c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002680:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002690:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0x82>
 80026a8:	4b9e      	ldr	r3, [pc, #632]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0xae>
 80026ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026d6:	4b93      	ldr	r3, [pc, #588]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026e6:	fa92 f2a2 	rbit	r2, r2
 80026ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026f2:	fab2 f282 	clz	r2, r2
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f042 0220 	orr.w	r2, r2, #32
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f002 021f 	and.w	r2, r2, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f202 	lsl.w	r2, r1, r2
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 810c 	beq.w	8002928 <HAL_RCC_OscConfig+0x2fc>
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 8106 	bne.w	8002928 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f000 be86 	b.w	800342e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x110>
 800272e:	4b7d      	ldr	r3, [pc, #500]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7c      	ldr	r2, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e030      	b.n	800279e <HAL_RCC_OscConfig+0x172>
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x134>
 8002746:	4b77      	ldr	r3, [pc, #476]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a76      	ldr	r2, [pc, #472]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b74      	ldr	r3, [pc, #464]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a73      	ldr	r2, [pc, #460]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01e      	b.n	800279e <HAL_RCC_OscConfig+0x172>
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x15a>
 800276c:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6c      	ldr	r2, [pc, #432]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a69      	ldr	r2, [pc, #420]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0x172>
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a66      	ldr	r2, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	f023 020f 	bic.w	r2, r3, #15
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	495d      	ldr	r1, [pc, #372]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d059      	beq.n	8002870 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe f838 	bl	8000830 <HAL_GetTick>
 80027c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c6:	f7fe f833 	bl	8000830 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d902      	bls.n	80027dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f000 be29 	b.w	800342e <HAL_RCC_OscConfig+0xe02>
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d102      	bne.n	800280e <HAL_RCC_OscConfig+0x1e2>
 8002808:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x20e>
 800280e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002812:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002826:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800282a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800283e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002842:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800284e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ab      	beq.n	80027c6 <HAL_RCC_OscConfig+0x19a>
 800286e:	e05c      	b.n	800292a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fd ffde 	bl	8000830 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287a:	f7fd ffd9 	bl	8000830 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d902      	bls.n	8002890 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	f000 bdcf 	b.w	800342e <HAL_RCC_OscConfig+0xe02>
 8002890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002894:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <HAL_RCC_OscConfig+0x296>
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	e015      	b.n	80028ee <HAL_RCC_OscConfig+0x2c2>
 80028c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_RCC_OscConfig+0x2f8>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028fa:	fa92 f2a2 	rbit	r2, r2
 80028fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002902:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ab      	bne.n	800287a <HAL_RCC_OscConfig+0x24e>
 8002922:	e002      	b.n	800292a <HAL_RCC_OscConfig+0x2fe>
 8002924:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 816f 	beq.w	8002c18 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800293a:	4bd0      	ldr	r3, [pc, #832]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002946:	4bcd      	ldr	r3, [pc, #820]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d16c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x400>
 8002952:	4bca      	ldr	r3, [pc, #808]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d166      	bne.n	8002a2c <HAL_RCC_OscConfig+0x400>
 800295e:	2302      	movs	r3, #2
 8002960:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002970:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_RCC_OscConfig+0x362>
 8002988:	4bbc      	ldr	r3, [pc, #752]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	e013      	b.n	80029b6 <HAL_RCC_OscConfig+0x38a>
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029b2:	4bb2      	ldr	r3, [pc, #712]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2202      	movs	r2, #2
 80029b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029c0:	fa92 f2a2 	rbit	r2, r2
 80029c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d002      	beq.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f000 bd1b 	b.w	800342e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	21f8      	movs	r1, #248	; 0xf8
 8002a08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a10:	fa91 f1a1 	rbit	r1, r1
 8002a14:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a18:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a1c:	fab1 f181 	clz	r1, r1
 8002a20:	b2c9      	uxtb	r1, r1
 8002a22:	408b      	lsls	r3, r1
 8002a24:	4995      	ldr	r1, [pc, #596]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e0f5      	b.n	8002c18 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8085 	beq.w	8002b42 <HAL_RCC_OscConfig+0x516>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2301      	movs	r3, #1
 8002a62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fd fee4 	bl	8000830 <HAL_GetTick>
 8002a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fd fedf 	bl	8000830 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f000 bcd5 	b.w	800342e <HAL_RCC_OscConfig+0xe02>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x488>
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e013      	b.n	8002adc <HAL_RCC_OscConfig+0x4b0>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002acc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	2202      	movs	r2, #2
 8002ade:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ae2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ae6:	fa92 f2a2 	rbit	r2, r2
 8002aea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002aee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f002 021f 	and.w	r2, r2, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0af      	beq.n	8002a6e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	21f8      	movs	r1, #248	; 0xf8
 8002b1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b26:	fa91 f1a1 	rbit	r1, r1
 8002b2a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b2e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b32:	fab1 f181 	clz	r1, r1
 8002b36:	b2c9      	uxtb	r1, r1
 8002b38:	408b      	lsls	r3, r1
 8002b3a:	4950      	ldr	r1, [pc, #320]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e06a      	b.n	8002c18 <HAL_RCC_OscConfig+0x5ec>
 8002b42:	2301      	movs	r3, #1
 8002b44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fd fe5f 	bl	8000830 <HAL_GetTick>
 8002b72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fd fe5a 	bl	8000830 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f000 bc50 	b.w	800342e <HAL_RCC_OscConfig+0xe02>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x592>
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e013      	b.n	8002be6 <HAL_RCC_OscConfig+0x5ba>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x650>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f002 021f 	and.w	r2, r2, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1af      	bne.n	8002b78 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80da 	beq.w	8002ddc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d069      	beq.n	8002d06 <HAL_RCC_OscConfig+0x6da>
 8002c32:	2301      	movs	r3, #1
 8002c34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x654>)
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fd fde8 	bl	8000830 <HAL_GetTick>
 8002c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c64:	e00e      	b.n	8002c84 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fd fde3 	bl	8000830 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d906      	bls.n	8002c84 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e3d9      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	10908120 	.word	0x10908120
 8002c84:	2302      	movs	r3, #2
 8002c86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	4ba5      	ldr	r3, [pc, #660]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cce:	2102      	movs	r1, #2
 8002cd0:	6019      	str	r1, [r3, #0]
 8002cd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f1a3 	rbit	r1, r3
 8002cdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ce0:	6019      	str	r1, [r3, #0]
  return result;
 8002ce2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0b0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x63a>
 8002d04:	e06a      	b.n	8002ddc <HAL_RCC_OscConfig+0x7b0>
 8002d06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d1c:	601a      	str	r2, [r3, #0]
  return result;
 8002d1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b8c      	ldr	r3, [pc, #560]	; (8002f60 <HAL_RCC_OscConfig+0x934>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	2300      	movs	r3, #0
 8002d36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7fd fd7a 	bl	8000830 <HAL_GetTick>
 8002d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	e009      	b.n	8002d56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d42:	f7fd fd75 	bl	8000830 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e36b      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 8002d56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d72:	2202      	movs	r2, #2
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9e:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002da6:	2102      	movs	r1, #2
 8002da8:	6019      	str	r1, [r3, #0]
 8002daa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f1a3 	rbit	r1, r3
 8002db4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002db8:	6019      	str	r1, [r3, #0]
  return result;
 8002dba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1b2      	bne.n	8002d42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8158 	beq.w	800309c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d112      	bne.n	8002e24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a56      	ldr	r2, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]
 8002e0a:	4b54      	ldr	r3, [pc, #336]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f107 0308 	add.w	r3, r7, #8
 8002e1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <HAL_RCC_OscConfig+0x938>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11a      	bne.n	8002e66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e30:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <HAL_RCC_OscConfig+0x938>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4b      	ldr	r2, [pc, #300]	; (8002f64 <HAL_RCC_OscConfig+0x938>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3c:	f7fd fcf8 	bl	8000830 <HAL_GetTick>
 8002e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fd fcf3 	bl	8000830 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e2e9      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCC_OscConfig+0x938>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ef      	beq.n	8002e46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x852>
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a39      	ldr	r2, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e02f      	b.n	8002ede <HAL_RCC_OscConfig+0x8b2>
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10c      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x876>
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	6213      	str	r3, [r2, #32]
 8002ea0:	e01d      	b.n	8002ede <HAL_RCC_OscConfig+0x8b2>
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x89a>
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x8b2>
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d06b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7fd fca2 	bl	8000830 <HAL_GetTick>
 8002eec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fd fc9d 	bl	8000830 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e291      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 8002f0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f38:	601a      	str	r2, [r3, #0]
  return result;
 8002f3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_OscConfig+0x93c>
 8002f54:	4b01      	ldr	r3, [pc, #4]	; (8002f5c <HAL_RCC_OscConfig+0x930>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x958>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	10908120 	.word	0x10908120
 8002f64:	40007000 	.word	0x40007000
 8002f68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	4bbb      	ldr	r3, [pc, #748]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f88:	2102      	movs	r1, #2
 8002f8a:	6011      	str	r1, [r2, #0]
 8002f8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	fa92 f1a2 	rbit	r1, r2
 8002f96:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f9a:	6011      	str	r1, [r2, #0]
  return result;
 8002f9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f002 021f 	and.w	r2, r2, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d099      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x8c6>
 8002fbe:	e063      	b.n	8003088 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fd fc36 	bl	8000830 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fc31 	bl	8000830 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e225      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 8002fe2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003010:	601a      	str	r2, [r3, #0]
  return result;
 8003012:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003016:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d102      	bne.n	8003032 <HAL_RCC_OscConfig+0xa06>
 800302c:	4b90      	ldr	r3, [pc, #576]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	e00d      	b.n	800304e <HAL_RCC_OscConfig+0xa22>
 8003032:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003036:	2202      	movs	r2, #2
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	4b89      	ldr	r3, [pc, #548]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003052:	2102      	movs	r1, #2
 8003054:	6011      	str	r1, [r2, #0]
 8003056:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	fa92 f1a2 	rbit	r1, r2
 8003060:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003064:	6011      	str	r1, [r2, #0]
  return result;
 8003066:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	fab2 f282 	clz	r2, r2
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f002 021f 	and.w	r2, r2, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1a0      	bne.n	8002fca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003088:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b77      	ldr	r3, [pc, #476]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4a76      	ldr	r2, [pc, #472]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 81c2 	beq.w	800342c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a8:	4b71      	ldr	r3, [pc, #452]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f000 819c 	beq.w	80033ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	f040 8114 	bne.w	80032ea <HAL_RCC_OscConfig+0xcbe>
 80030c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030da:	601a      	str	r2, [r3, #0]
  return result;
 80030dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd fb9a 	bl	8000830 <HAL_GetTick>
 80030fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003100:	e009      	b.n	8003116 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7fd fb95 	bl	8000830 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e18b      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 8003116:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800311a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800312e:	601a      	str	r2, [r3, #0]
  return result;
 8003130:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_RCC_OscConfig+0xb24>
 800314a:	4b49      	ldr	r3, [pc, #292]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e01b      	b.n	8003188 <HAL_RCC_OscConfig+0xb5c>
 8003150:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800316e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800318c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fa92 f1a2 	rbit	r1, r2
 800319c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d19e      	bne.n	8003102 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	430b      	orrs	r3, r1
 80031da:	4925      	ldr	r1, [pc, #148]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	fa93 f2a3 	rbit	r2, r3
 80031f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031f8:	601a      	str	r2, [r3, #0]
  return result;
 80031fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800320a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	461a      	mov	r2, r3
 8003212:	2301      	movs	r3, #1
 8003214:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7fd fb0b 	bl	8000830 <HAL_GetTick>
 800321a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800321e:	e009      	b.n	8003234 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fd fb06 	bl	8000830 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0fc      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 8003234:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003238:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fa93 f2a3 	rbit	r2, r3
 8003248:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800324c:	601a      	str	r2, [r3, #0]
  return result;
 800324e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003252:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0xc48>
 8003268:	4b01      	ldr	r3, [pc, #4]	; (8003270 <HAL_RCC_OscConfig+0xc44>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	e01e      	b.n	80032ac <HAL_RCC_OscConfig+0xc80>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_OscConfig+0xe0c>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	fa92 f1a2 	rbit	r1, r2
 80032c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032c4:	6011      	str	r1, [r2, #0]
  return result;
 80032c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f042 0220 	orr.w	r2, r2, #32
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	f002 021f 	and.w	r2, r2, #31
 80032dc:	2101      	movs	r1, #1
 80032de:	fa01 f202 	lsl.w	r2, r1, r2
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d09b      	beq.n	8003220 <HAL_RCC_OscConfig+0xbf4>
 80032e8:	e0a0      	b.n	800342c <HAL_RCC_OscConfig+0xe00>
 80032ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003302:	601a      	str	r2, [r3, #0]
  return result;
 8003304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003308:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	2300      	movs	r3, #0
 800331e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fd fa86 	bl	8000830 <HAL_GetTick>
 8003324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003328:	e009      	b.n	800333e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fd fa81 	bl	8000830 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e077      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
 800333e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003356:	601a      	str	r2, [r3, #0]
  return result;
 8003358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_RCC_OscConfig+0xd4c>
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_OscConfig+0xe0c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	e01b      	b.n	80033b0 <HAL_RCC_OscConfig+0xd84>
 8003378:	f107 0320 	add.w	r3, r7, #32
 800337c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f107 0318 	add.w	r3, r7, #24
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f2a3 	rbit	r2, r3
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCC_OscConfig+0xe0c>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f107 0210 	add.w	r2, r7, #16
 80033b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	f107 0210 	add.w	r2, r7, #16
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	fa92 f1a2 	rbit	r1, r2
 80033c4:	f107 020c 	add.w	r2, r7, #12
 80033c8:	6011      	str	r1, [r2, #0]
  return result;
 80033ca:	f107 020c 	add.w	r2, r7, #12
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d19e      	bne.n	800332a <HAL_RCC_OscConfig+0xcfe>
 80033ec:	e01e      	b.n	800342c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e018      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_RCC_OscConfig+0xe0c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003404:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003408:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	429a      	cmp	r2, r3
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003416:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800341a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b09e      	sub	sp, #120	; 0x78
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e162      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b90      	ldr	r3, [pc, #576]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d910      	bls.n	8003484 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	498b      	ldr	r1, [pc, #556]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e14a      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b82      	ldr	r3, [pc, #520]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	497f      	ldr	r1, [pc, #508]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80dc 	beq.w	8003668 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d13c      	bne.n	8003532 <HAL_RCC_ClockConfig+0xf6>
 80034b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xa6>
 80034dc:	4b6f      	ldr	r3, [pc, #444]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e00f      	b.n	8003502 <HAL_RCC_ClockConfig+0xc6>
 80034e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	667b      	str	r3, [r7, #100]	; 0x64
 80034f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f4:	663b      	str	r3, [r7, #96]	; 0x60
 80034f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003506:	65ba      	str	r2, [r7, #88]	; 0x58
 8003508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f042 0220 	orr.w	r2, r2, #32
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f002 021f 	and.w	r2, r2, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d17b      	bne.n	8003626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0f3      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d13c      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x178>
 800353a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_RCC_ClockConfig+0x128>
 800355e:	4b4f      	ldr	r3, [pc, #316]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	e00f      	b.n	8003584 <HAL_RCC_ClockConfig+0x148>
 8003564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
 8003572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003576:	643b      	str	r3, [r7, #64]	; 0x40
 8003578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	4b46      	ldr	r3, [pc, #280]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003588:	63ba      	str	r2, [r7, #56]	; 0x38
 800358a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800358c:	fa92 f2a2 	rbit	r2, r2
 8003590:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f042 0220 	orr.w	r2, r2, #32
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f002 021f 	and.w	r2, r2, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d13a      	bne.n	8003626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b2      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
 80035b4:	2302      	movs	r3, #2
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
 80035d6:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e00d      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1bc>
 80035dc:	2302      	movs	r3, #2
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	2302      	movs	r3, #2
 80035ea:	623b      	str	r3, [r7, #32]
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	4b29      	ldr	r3, [pc, #164]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2202      	movs	r2, #2
 80035fa:	61ba      	str	r2, [r7, #24]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	fa92 f2a2 	rbit	r2, r2
 8003602:	617a      	str	r2, [r7, #20]
  return result;
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	fab2 f282 	clz	r2, r2
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f042 0220 	orr.w	r2, r2, #32
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f002 021f 	and.w	r2, r2, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e079      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	491a      	ldr	r1, [pc, #104]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fd f8fa 	bl	8000830 <HAL_GetTick>
 800363c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fd f8f6 	bl	8000830 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e061      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_RCC_ClockConfig+0x260>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d214      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4906      	ldr	r1, [pc, #24]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e040      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
 8003698:	40022000 	.word	0x40022000
 800369c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	491a      	ldr	r1, [pc, #104]	; (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4912      	ldr	r1, [pc, #72]	; (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036de:	f000 f829 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036e2:	4601      	mov	r1, r0
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ec:	22f0      	movs	r2, #240	; 0xf0
 80036ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	fa92 f2a2 	rbit	r2, r2
 80036f6:	60fa      	str	r2, [r7, #12]
  return result;
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	fab2 f282 	clz	r2, r2
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	40d3      	lsrs	r3, r2
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x2ec>)
 8003704:	5cd3      	ldrb	r3, [r2, r3]
 8003706:	fa21 f303 	lsr.w	r3, r1, r3
 800370a:	4a08      	ldr	r2, [pc, #32]	; (800372c <HAL_RCC_ClockConfig+0x2f0>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_RCC_ClockConfig+0x2f4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd f848 	bl	80007a8 <HAL_InitTick>
  
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3778      	adds	r7, #120	; 0x78
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	08007a90 	.word	0x08007a90
 800372c:	20000000 	.word	0x20000000
 8003730:	20000004 	.word	0x20000004

08003734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b08b      	sub	sp, #44	; 0x2c
 8003738:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b04      	cmp	r3, #4
 800375c:	d002      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x30>
 800375e:	2b08      	cmp	r3, #8
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x36>
 8003762:	e03c      	b.n	80037de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003766:	623b      	str	r3, [r7, #32]
      break;
 8003768:	e03c      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003770:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003774:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	607a      	str	r2, [r7, #4]
  return result;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	40d3      	lsrs	r3, r2
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	220f      	movs	r2, #15
 8003798:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	fa92 f2a2 	rbit	r2, r2
 80037a0:	60fa      	str	r2, [r7, #12]
  return result;
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	40d3      	lsrs	r3, r2
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037bc:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	e004      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	623b      	str	r3, [r7, #32]
      break;
 80037dc:	e002      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037e0:	623b      	str	r3, [r7, #32]
      break;
 80037e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e4:	6a3b      	ldr	r3, [r7, #32]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	372c      	adds	r7, #44	; 0x2c
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	007a1200 	.word	0x007a1200
 80037fc:	08007aa0 	.word	0x08007aa0
 8003800:	08007ab0 	.word	0x08007ab0
 8003804:	003d0900 	.word	0x003d0900

08003808 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b092      	sub	sp, #72	; 0x48
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80d7 	beq.w	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382c:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10e      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003842:	61d3      	str	r3, [r2, #28]
 8003844:	4b48      	ldr	r3, [pc, #288]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	4b45      	ldr	r3, [pc, #276]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d118      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003862:	4b42      	ldr	r3, [pc, #264]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a41      	ldr	r2, [pc, #260]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386e:	f7fc ffdf 	bl	8000830 <HAL_GetTick>
 8003872:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	e008      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fc ffdb 	bl	8000830 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b64      	cmp	r3, #100	; 0x64
 8003882:	d901      	bls.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e169      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	4b38      	ldr	r3, [pc, #224]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8084 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d07c      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038b4:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	461a      	mov	r2, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	461a      	mov	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04b      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fc ff8b 	bl	8000830 <HAL_GetTick>
 800391a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	e00a      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fc ff87 	bl	8000830 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e113      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003934:	2302      	movs	r3, #2
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
 8003940:	2302      	movs	r3, #2
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	61fb      	str	r3, [r7, #28]
  return result;
 800394c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d108      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003962:	4b01      	ldr	r3, [pc, #4]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	e00d      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	10908100 	.word	0x10908100
 8003974:	2302      	movs	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	4b78      	ldr	r3, [pc, #480]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2202      	movs	r2, #2
 8003986:	613a      	str	r2, [r7, #16]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	fa92 f2a2 	rbit	r2, r2
 800398e:	60fa      	str	r2, [r7, #12]
  return result;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	fab2 f282 	clz	r2, r2
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	f002 021f 	and.w	r2, r2, #31
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0b7      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039ae:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	496a      	ldr	r1, [pc, #424]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039e0:	4b60      	ldr	r3, [pc, #384]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f023 0203 	bic.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	495d      	ldr	r1, [pc, #372]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039fe:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4956      	ldr	r1, [pc, #344]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1c:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	494e      	ldr	r1, [pc, #312]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f023 0210 	bic.w	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4947      	ldr	r1, [pc, #284]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	493f      	ldr	r1, [pc, #252]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f023 0220 	bic.w	r2, r3, #32
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4938      	ldr	r1, [pc, #224]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4930      	ldr	r1, [pc, #192]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	4929      	ldr	r1, [pc, #164]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4921      	ldr	r1, [pc, #132]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	491a      	ldr	r1, [pc, #104]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	4912      	ldr	r1, [pc, #72]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	490b      	ldr	r1, [pc, #44]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3748      	adds	r7, #72	; 0x48
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000

08003b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e084      	b.n	8003c84 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fc fd37 	bl	8000608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bba:	d902      	bls.n	8003bc2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e002      	b.n	8003bc8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bd0:	d007      	beq.n	8003be2 <HAL_SPI_Init+0x7a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bda:	d002      	beq.n	8003be2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf2:	d903      	bls.n	8003bfc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfa:	e002      	b.n	8003c02 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	ea42 0103 	orr.w	r1, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0204 	and.w	r2, r3, #4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	ea42 0103 	orr.w	r1, r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ca0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cc2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cc6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	f107 0014 	add.w	r0, r7, #20
 8003cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	b004      	add	sp, #16
 8003d30:	4770      	bx	lr
	...

08003d34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b09b      	sub	sp, #108	; 0x6c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	78db      	ldrb	r3, [r3, #3]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d81f      	bhi.n	8003da6 <USB_ActivateEndpoint+0x72>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <USB_ActivateEndpoint+0x38>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003daf 	.word	0x08003daf
 8003d78:	08003d8b 	.word	0x08003d8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d88:	e012      	b.n	8003db0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d96:	e00b      	b.n	8003db0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003da4:	e004      	b.n	8003db0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003dac:	e000      	b.n	8003db0 <USB_ActivateEndpoint+0x7c>
      break;
 8003dae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	b21a      	sxth	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	4313      	orrs	r3, r2
 8003df4:	b21b      	sxth	r3, r3
 8003df6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	441a      	add	r2, r3
 8003e04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	7b1b      	ldrb	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 8149 	bne.w	80040b8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	785b      	ldrb	r3, [r3, #1]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8084 	beq.w	8003f38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4413      	add	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	011a      	lsls	r2, r3, #4
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	88db      	ldrh	r3, [r3, #6]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	81fb      	strh	r3, [r7, #14]
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01b      	beq.n	8003eb4 <USB_ActivateEndpoint+0x180>
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	81bb      	strh	r3, [r7, #12]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	89bb      	ldrh	r3, [r7, #12]
 8003ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d020      	beq.n	8003efe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed2:	813b      	strh	r3, [r7, #8]
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	f083 0320 	eor.w	r3, r3, #32
 8003eda:	813b      	strh	r3, [r7, #8]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	893b      	ldrh	r3, [r7, #8]
 8003ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	8013      	strh	r3, [r2, #0]
 8003efc:	e27f      	b.n	80043fe <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f14:	817b      	strh	r3, [r7, #10]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	897b      	ldrh	r3, [r7, #10]
 8003f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	8013      	strh	r3, [r2, #0]
 8003f36:	e262      	b.n	80043fe <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	4413      	add	r3, r2
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	88db      	ldrh	r3, [r3, #6]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	4413      	add	r3, r2
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	011a      	lsls	r2, r3, #4
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	4413      	add	r3, r2
 8003f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f8e:	623b      	str	r3, [r7, #32]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d112      	bne.n	8003fbe <USB_ActivateEndpoint+0x28a>
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	e02f      	b.n	800401e <USB_ActivateEndpoint+0x2ea>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc4:	d813      	bhi.n	8003fee <USB_ActivateEndpoint+0x2ba>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <USB_ActivateEndpoint+0x2ac>
 8003fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fdc:	3301      	adds	r3, #1
 8003fde:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e017      	b.n	800401e <USB_ActivateEndpoint+0x2ea>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <USB_ActivateEndpoint+0x2d4>
 8004002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004004:	3b01      	subs	r3, #1
 8004006:	663b      	str	r3, [r7, #96]	; 0x60
 8004008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400a:	b29b      	uxth	r3, r3
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	b29b      	uxth	r3, r3
 8004010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004018:	b29a      	uxth	r2, r3
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	83fb      	strh	r3, [r7, #30]
 800402c:	8bfb      	ldrh	r3, [r7, #30]
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01b      	beq.n	800406e <USB_ActivateEndpoint+0x33a>
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	83bb      	strh	r3, [r7, #28]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	8bbb      	ldrh	r3, [r7, #28]
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	837b      	strh	r3, [r7, #26]
 8004086:	8b7b      	ldrh	r3, [r7, #26]
 8004088:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800408c:	837b      	strh	r3, [r7, #26]
 800408e:	8b7b      	ldrh	r3, [r7, #26]
 8004090:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004094:	837b      	strh	r3, [r7, #26]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	8b7b      	ldrh	r3, [r7, #26]
 80040a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8013      	strh	r3, [r2, #0]
 80040b6:	e1a2      	b.n	80043fe <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004104:	4413      	add	r3, r2
 8004106:	65bb      	str	r3, [r7, #88]	; 0x58
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	011a      	lsls	r2, r3, #4
 800410e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004110:	4413      	add	r3, r2
 8004112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004116:	657b      	str	r3, [r7, #84]	; 0x54
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	891b      	ldrh	r3, [r3, #8]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004138:	4413      	add	r3, r2
 800413a:	653b      	str	r3, [r7, #80]	; 0x50
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	011a      	lsls	r2, r3, #4
 8004142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004144:	4413      	add	r3, r2
 8004146:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	895b      	ldrh	r3, [r3, #10]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 8091 	bne.w	8004288 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004174:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01b      	beq.n	80041b6 <USB_ActivateEndpoint+0x482>
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004194:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80041c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01b      	beq.n	8004206 <USB_ActivateEndpoint+0x4d2>
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800421e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004224:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004226:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800422c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004264:	867b      	strh	r3, [r7, #50]	; 0x32
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]
 8004286:	e0ba      	b.n	80043fe <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004298:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800429c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01d      	beq.n	80042e0 <USB_ActivateEndpoint+0x5ac>
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01d      	beq.n	8004338 <USB_ActivateEndpoint+0x604>
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	78db      	ldrb	r3, [r3, #3]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d024      	beq.n	800438a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004356:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800435a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800435e:	f083 0320 	eor.w	r3, r3, #32
 8004362:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]
 8004388:	e01d      	b.n	80043c6 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004402:	4618      	mov	r0, r3
 8004404:	376c      	adds	r7, #108	; 0x6c
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop

08004410 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004410:	b480      	push	{r7}
 8004412:	b08d      	sub	sp, #52	; 0x34
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	7b1b      	ldrb	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 808e 	bne.w	8004540 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d044      	beq.n	80044b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	81bb      	strh	r3, [r7, #12]
 800443a:	89bb      	ldrh	r3, [r7, #12]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <USB_DeactivateEndpoint+0x6c>
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	817b      	strh	r3, [r7, #10]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004478:	b29b      	uxth	r3, r3
 800447a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004492:	813b      	strh	r3, [r7, #8]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	893b      	ldrh	r3, [r7, #8]
 80044a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8013      	strh	r3, [r2, #0]
 80044b4:	e192      	b.n	80047dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	827b      	strh	r3, [r7, #18]
 80044c4:	8a7b      	ldrh	r3, [r7, #18]
 80044c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01b      	beq.n	8004506 <USB_DeactivateEndpoint+0xf6>
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	823b      	strh	r3, [r7, #16]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	8a3b      	ldrh	r3, [r7, #16]
 80044f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004502:	b29b      	uxth	r3, r3
 8004504:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451c:	81fb      	strh	r3, [r7, #14]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	89fb      	ldrh	r3, [r7, #14]
 800452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	8013      	strh	r3, [r2, #0]
 800453e:	e14d      	b.n	80047dc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 80a5 	bne.w	8004694 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	843b      	strh	r3, [r7, #32]
 8004558:	8c3b      	ldrh	r3, [r7, #32]
 800455a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01b      	beq.n	800459a <USB_DeactivateEndpoint+0x18a>
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	83fb      	strh	r3, [r7, #30]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	8bfb      	ldrh	r3, [r7, #30]
 8004586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004596:	b29b      	uxth	r3, r3
 8004598:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	83bb      	strh	r3, [r7, #28]
 80045a8:	8bbb      	ldrh	r3, [r7, #28]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01b      	beq.n	80045ea <USB_DeactivateEndpoint+0x1da>
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	837b      	strh	r3, [r7, #26]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	8b7b      	ldrh	r3, [r7, #26]
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	833b      	strh	r3, [r7, #24]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	8b3b      	ldrh	r3, [r7, #24]
 800460e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800461e:	b29b      	uxth	r3, r3
 8004620:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	82fb      	strh	r3, [r7, #22]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004670:	82bb      	strh	r3, [r7, #20]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	8abb      	ldrh	r3, [r7, #20]
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
 8004692:	e0a3      	b.n	80047dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <USB_DeactivateEndpoint+0x2d4>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <USB_DeactivateEndpoint+0x324>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	853b      	strh	r3, [r7, #40]	; 0x28
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004782:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3734      	adds	r7, #52	; 0x34
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b0c4      	sub	sp, #272	; 0x110
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	6018      	str	r0, [r3, #0]
 80047f4:	463b      	mov	r3, r7
 80047f6:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f8:	463b      	mov	r3, r7
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f040 8557 	bne.w	80052b2 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004804:	463b      	mov	r3, r7
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	463b      	mov	r3, r7
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d905      	bls.n	8004820 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800481e:	e004      	b.n	800482a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004820:	463b      	mov	r3, r7
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800482a:	463b      	mov	r3, r7
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	7b1b      	ldrb	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d12c      	bne.n	800488e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6959      	ldr	r1, [r3, #20]
 800483a:	463b      	mov	r3, r7
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	88da      	ldrh	r2, [r3, #6]
 8004840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004844:	b29b      	uxth	r3, r3
 8004846:	1d38      	adds	r0, r7, #4
 8004848:	6800      	ldr	r0, [r0, #0]
 800484a:	f001 fa1c 	bl	8005c86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	1d3b      	adds	r3, r7, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4413      	add	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	463b      	mov	r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	011a      	lsls	r2, r3, #4
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4413      	add	r3, r2
 8004872:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004876:	f107 0310 	add.w	r3, r7, #16
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004880:	b29a      	uxth	r2, r3
 8004882:	f107 0310 	add.w	r3, r7, #16
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	f000 bcdd 	b.w	8005248 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	2b02      	cmp	r3, #2
 8004896:	f040 8347 	bne.w	8004f28 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800489a:	463b      	mov	r3, r7
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	f240 82eb 	bls.w	8004e82 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	463b      	mov	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048f0:	463b      	mov	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1a      	ldr	r2, [r3, #32]
 80048f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	463b      	mov	r3, r7
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8159 	beq.w	8004bd0 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
 8004924:	463b      	mov	r3, r7
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d164      	bne.n	80049f8 <USB_EPStartXfer+0x20e>
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493c:	b29b      	uxth	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	4413      	add	r3, r2
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	4413      	add	r3, r2
 8004952:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
 8004958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d112      	bne.n	8004986 <USB_EPStartXfer+0x19c>
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800496a:	b29a      	uxth	r2, r3
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497e:	b29a      	uxth	r2, r3
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	e054      	b.n	8004a30 <USB_EPStartXfer+0x246>
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498a:	2b3e      	cmp	r3, #62	; 0x3e
 800498c:	d817      	bhi.n	80049be <USB_EPStartXfer+0x1d4>
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <USB_EPStartXfer+0x1c4>
 80049a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a8:	3301      	adds	r3, #1
 80049aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	e038      	b.n	8004a30 <USB_EPStartXfer+0x246>
 80049be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <USB_EPStartXfer+0x1f4>
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d8:	3b01      	subs	r3, #1
 80049da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e01b      	b.n	8004a30 <USB_EPStartXfer+0x246>
 80049f8:	463b      	mov	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	785b      	ldrb	r3, [r3, #1]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d116      	bne.n	8004a30 <USB_EPStartXfer+0x246>
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	4413      	add	r3, r2
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
 8004a14:	463b      	mov	r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	4413      	add	r3, r2
 8004a20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a24:	633b      	str	r3, [r7, #48]	; 0x30
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a30:	463b      	mov	r3, r7
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	895b      	ldrh	r3, [r3, #10]
 8004a36:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6959      	ldr	r1, [r3, #20]
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a4a:	1d38      	adds	r0, r7, #4
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	f001 f91a 	bl	8005c86 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a52:	463b      	mov	r3, r7
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	441a      	add	r2, r3
 8004a5e:	463b      	mov	r3, r7
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d909      	bls.n	8004a88 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004a74:	463b      	mov	r3, r7
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	463b      	mov	r3, r7
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	621a      	str	r2, [r3, #32]
 8004a86:	e008      	b.n	8004a9a <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a88:	463b      	mov	r3, r7
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004a92:	463b      	mov	r3, r7
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d164      	bne.n	8004b6e <USB_EPStartXfer+0x384>
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	463b      	mov	r3, r7
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	011a      	lsls	r2, r3, #4
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d112      	bne.n	8004afc <USB_EPStartXfer+0x312>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	e057      	b.n	8004bac <USB_EPStartXfer+0x3c2>
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	2b3e      	cmp	r3, #62	; 0x3e
 8004b02:	d817      	bhi.n	8004b34 <USB_EPStartXfer+0x34a>
 8004b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <USB_EPStartXfer+0x33a>
 8004b1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	801a      	strh	r2, [r3, #0]
 8004b32:	e03b      	b.n	8004bac <USB_EPStartXfer+0x3c2>
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <USB_EPStartXfer+0x36a>
 8004b4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	029b      	lsls	r3, r3, #10
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	e01e      	b.n	8004bac <USB_EPStartXfer+0x3c2>
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d119      	bne.n	8004bac <USB_EPStartXfer+0x3c2>
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	4413      	add	r3, r2
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b90:	463b      	mov	r3, r7
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	011a      	lsls	r2, r3, #4
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ba0:	623b      	str	r3, [r7, #32]
 8004ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bac:	463b      	mov	r3, r7
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	891b      	ldrh	r3, [r3, #8]
 8004bb2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6959      	ldr	r1, [r3, #20]
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004bc6:	1d38      	adds	r0, r7, #4
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	f001 f85c 	bl	8005c86 <USB_WritePMA>
 8004bce:	e33b      	b.n	8005248 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d164      	bne.n	8004ca4 <USB_EPStartXfer+0x4ba>
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bee:	4413      	add	r3, r2
 8004bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	011a      	lsls	r2, r3, #4
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d112      	bne.n	8004c32 <USB_EPStartXfer+0x448>
 8004c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e057      	b.n	8004ce2 <USB_EPStartXfer+0x4f8>
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c36:	2b3e      	cmp	r3, #62	; 0x3e
 8004c38:	d817      	bhi.n	8004c6a <USB_EPStartXfer+0x480>
 8004c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <USB_EPStartXfer+0x470>
 8004c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c54:	3301      	adds	r3, #1
 8004c56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	e03b      	b.n	8004ce2 <USB_EPStartXfer+0x4f8>
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <USB_EPStartXfer+0x4a0>
 8004c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	e01e      	b.n	8004ce2 <USB_EPStartXfer+0x4f8>
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d119      	bne.n	8004ce2 <USB_EPStartXfer+0x4f8>
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	4413      	add	r3, r2
 8004cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	011a      	lsls	r2, r3, #4
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	891b      	ldrh	r3, [r3, #8]
 8004ce8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cec:	463b      	mov	r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6959      	ldr	r1, [r3, #20]
 8004cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004cfc:	1d38      	adds	r0, r7, #4
 8004cfe:	6800      	ldr	r0, [r0, #0]
 8004d00:	f000 ffc1 	bl	8005c86 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	441a      	add	r2, r3
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d16:	463b      	mov	r3, r7
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d909      	bls.n	8004d3a <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d30:	1ad2      	subs	r2, r2, r3
 8004d32:	463b      	mov	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	621a      	str	r2, [r3, #32]
 8004d38:	e008      	b.n	8004d4c <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
 8004d52:	463b      	mov	r3, r7
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d164      	bne.n	8004e26 <USB_EPStartXfer+0x63c>
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	4413      	add	r3, r2
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d74:	463b      	mov	r3, r7
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	011a      	lsls	r2, r3, #4
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7e:	4413      	add	r3, r2
 8004d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d112      	bne.n	8004db4 <USB_EPStartXfer+0x5ca>
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e054      	b.n	8004e5e <USB_EPStartXfer+0x674>
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dba:	d817      	bhi.n	8004dec <USB_EPStartXfer+0x602>
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <USB_EPStartXfer+0x5f2>
 8004dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ddc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	801a      	strh	r2, [r3, #0]
 8004dea:	e038      	b.n	8004e5e <USB_EPStartXfer+0x674>
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <USB_EPStartXfer+0x622>
 8004e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	801a      	strh	r2, [r3, #0]
 8004e24:	e01b      	b.n	8004e5e <USB_EPStartXfer+0x674>
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d116      	bne.n	8004e5e <USB_EPStartXfer+0x674>
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3e:	4413      	add	r3, r2
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e52:	643b      	str	r3, [r7, #64]	; 0x40
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e5e:	463b      	mov	r3, r7
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	895b      	ldrh	r3, [r3, #10]
 8004e64:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e68:	463b      	mov	r3, r7
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6959      	ldr	r1, [r3, #20]
 8004e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e78:	1d38      	adds	r0, r7, #4
 8004e7a:	6800      	ldr	r0, [r0, #0]
 8004e7c:	f000 ff03 	bl	8005c86 <USB_WritePMA>
 8004e80:	e1e2      	b.n	8005248 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	463b      	mov	r3, r7
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee4:	4413      	add	r3, r2
 8004ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	891b      	ldrh	r3, [r3, #8]
 8004f0a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f0e:	463b      	mov	r3, r7
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6959      	ldr	r1, [r3, #20]
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f1e:	1d38      	adds	r0, r7, #4
 8004f20:	6800      	ldr	r0, [r0, #0]
 8004f22:	f000 feb0 	bl	8005c86 <USB_WritePMA>
 8004f26:	e18f      	b.n	8005248 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 808f 	beq.w	8005062 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d164      	bne.n	800501e <USB_EPStartXfer+0x834>
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	673b      	str	r3, [r7, #112]	; 0x70
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f68:	4413      	add	r3, r2
 8004f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	011a      	lsls	r2, r3, #4
 8004f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f76:	4413      	add	r3, r2
 8004f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d112      	bne.n	8004fac <USB_EPStartXfer+0x7c2>
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e054      	b.n	8005056 <USB_EPStartXfer+0x86c>
 8004fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb2:	d817      	bhi.n	8004fe4 <USB_EPStartXfer+0x7fa>
 8004fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <USB_EPStartXfer+0x7ea>
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	e038      	b.n	8005056 <USB_EPStartXfer+0x86c>
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <USB_EPStartXfer+0x81a>
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	3b01      	subs	r3, #1
 8005000:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	b29b      	uxth	r3, r3
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	b29b      	uxth	r3, r3
 800500e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005016:	b29a      	uxth	r2, r3
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e01b      	b.n	8005056 <USB_EPStartXfer+0x86c>
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d116      	bne.n	8005056 <USB_EPStartXfer+0x86c>
 8005028:	1d3b      	adds	r3, r7, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005030:	b29b      	uxth	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005036:	4413      	add	r3, r2
 8005038:	67bb      	str	r3, [r7, #120]	; 0x78
 800503a:	463b      	mov	r3, r7
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	011a      	lsls	r2, r3, #4
 8005042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005044:	4413      	add	r3, r2
 8005046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800504a:	677b      	str	r3, [r7, #116]	; 0x74
 800504c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005050:	b29a      	uxth	r2, r3
 8005052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005054:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	895b      	ldrh	r3, [r3, #10]
 800505c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005060:	e097      	b.n	8005192 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d168      	bne.n	800513e <USB_EPStartXfer+0x954>
 800506c:	1d3b      	adds	r3, r7, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005084:	4413      	add	r3, r2
 8005086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800508a:	463b      	mov	r3, r7
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	011a      	lsls	r2, r3, #4
 8005092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005096:	4413      	add	r3, r2
 8005098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800509c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <USB_EPStartXfer+0x8e2>
 80050a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	e05d      	b.n	8005188 <USB_EPStartXfer+0x99e>
 80050cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d0:	2b3e      	cmp	r3, #62	; 0x3e
 80050d2:	d817      	bhi.n	8005104 <USB_EPStartXfer+0x91a>
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <USB_EPStartXfer+0x90a>
 80050ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ee:	3301      	adds	r3, #1
 80050f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	e041      	b.n	8005188 <USB_EPStartXfer+0x99e>
 8005104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <USB_EPStartXfer+0x93a>
 800511a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800511e:	3b01      	subs	r3, #1
 8005120:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005124:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005128:	b29b      	uxth	r3, r3
 800512a:	029b      	lsls	r3, r3, #10
 800512c:	b29b      	uxth	r3, r3
 800512e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005136:	b29a      	uxth	r2, r3
 8005138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e024      	b.n	8005188 <USB_EPStartXfer+0x99e>
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d11f      	bne.n	8005188 <USB_EPStartXfer+0x99e>
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005158:	b29b      	uxth	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005160:	4413      	add	r3, r2
 8005162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005166:	463b      	mov	r3, r7
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	011a      	lsls	r2, r3, #4
 800516e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005172:	4413      	add	r3, r2
 8005174:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005180:	b29a      	uxth	r2, r3
 8005182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005186:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005188:	463b      	mov	r3, r7
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	891b      	ldrh	r3, [r3, #8]
 800518e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005192:	463b      	mov	r3, r7
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6959      	ldr	r1, [r3, #20]
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519c:	b29b      	uxth	r3, r3
 800519e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051a2:	1d38      	adds	r0, r7, #4
 80051a4:	6800      	ldr	r0, [r0, #0]
 80051a6:	f000 fd6e 	bl	8005c86 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d122      	bne.n	80051fa <USB_EPStartXfer+0xa10>
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
 80051f8:	e026      	b.n	8005248 <USB_EPStartXfer+0xa5e>
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d121      	bne.n	8005248 <USB_EPStartXfer+0xa5e>
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f107 020e 	add.w	r2, r7, #14
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005266:	8013      	strh	r3, [r2, #0]
 8005268:	f107 030e 	add.w	r3, r7, #14
 800526c:	f107 020e 	add.w	r2, r7, #14
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	f082 0210 	eor.w	r2, r2, #16
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	f107 030e 	add.w	r3, r7, #14
 800527c:	f107 020e 	add.w	r2, r7, #14
 8005280:	8812      	ldrh	r2, [r2, #0]
 8005282:	f082 0220 	eor.w	r2, r2, #32
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	f107 030e 	add.w	r3, r7, #14
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
 80052b0:	e3b5      	b.n	8005a1e <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	7b1b      	ldrb	r3, [r3, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 8090 	bne.w	80053de <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d90e      	bls.n	80052ec <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	619a      	str	r2, [r3, #24]
 80052ea:	e008      	b.n	80052fe <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005316:	4413      	add	r3, r2
 8005318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	011a      	lsls	r2, r3, #4
 8005324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005328:	4413      	add	r3, r2
 800532a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800532e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d116      	bne.n	8005368 <USB_EPStartXfer+0xb7e>
 800533a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005346:	b29a      	uxth	r2, r3
 8005348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535e:	b29a      	uxth	r2, r3
 8005360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	e32c      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
 8005368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536c:	2b3e      	cmp	r3, #62	; 0x3e
 800536e:	d818      	bhi.n	80053a2 <USB_EPStartXfer+0xbb8>
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <USB_EPStartXfer+0xba6>
 8005386:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800538a:	3301      	adds	r3, #1
 800538c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005394:	b29b      	uxth	r3, r3
 8005396:	029b      	lsls	r3, r3, #10
 8005398:	b29a      	uxth	r2, r3
 800539a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	e30f      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
 80053a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <USB_EPStartXfer+0xbd8>
 80053b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053bc:	3b01      	subs	r3, #1
 80053be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	029b      	lsls	r3, r3, #10
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	e2f1      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	78db      	ldrb	r3, [r3, #3]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	f040 818f 	bne.w	8005708 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80053ea:	463b      	mov	r3, r7
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d175      	bne.n	80054e0 <USB_EPStartXfer+0xcf6>
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005404:	b29b      	uxth	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800540c:	4413      	add	r3, r2
 800540e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005412:	463b      	mov	r3, r7
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	011a      	lsls	r2, r3, #4
 800541a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800541e:	4413      	add	r3, r2
 8005420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <USB_EPStartXfer+0xc76>
 8005432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800543e:	b29a      	uxth	r2, r3
 8005440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005456:	b29a      	uxth	r2, r3
 8005458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800545c:	801a      	strh	r2, [r3, #0]
 800545e:	e065      	b.n	800552c <USB_EPStartXfer+0xd42>
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b3e      	cmp	r3, #62	; 0x3e
 8005468:	d81a      	bhi.n	80054a0 <USB_EPStartXfer+0xcb6>
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <USB_EPStartXfer+0xca4>
 8005484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005488:	3301      	adds	r3, #1
 800548a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800548e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005492:	b29b      	uxth	r3, r3
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	b29a      	uxth	r2, r3
 8005498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e045      	b.n	800552c <USB_EPStartXfer+0xd42>
 80054a0:	463b      	mov	r3, r7
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <USB_EPStartXfer+0xcda>
 80054ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054be:	3b01      	subs	r3, #1
 80054c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e025      	b.n	800552c <USB_EPStartXfer+0xd42>
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d120      	bne.n	800552c <USB_EPStartXfer+0xd42>
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005502:	4413      	add	r3, r2
 8005504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	011a      	lsls	r2, r3, #4
 8005510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005514:	4413      	add	r3, r2
 8005516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800551a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800551e:	463b      	mov	r3, r7
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	b29a      	uxth	r2, r3
 8005526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	1d3b      	adds	r3, r7, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d175      	bne.n	800562a <USB_EPStartXfer+0xe40>
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005556:	4413      	add	r3, r2
 8005558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	011a      	lsls	r2, r3, #4
 8005564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005568:	4413      	add	r3, r2
 800556a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d116      	bne.n	80055aa <USB_EPStartXfer+0xdc0>
 800557c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005588:	b29a      	uxth	r2, r3
 800558a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	e061      	b.n	800566e <USB_EPStartXfer+0xe84>
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b3e      	cmp	r3, #62	; 0x3e
 80055b2:	d81a      	bhi.n	80055ea <USB_EPStartXfer+0xe00>
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <USB_EPStartXfer+0xdee>
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d2:	3301      	adds	r3, #1
 80055d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	b29b      	uxth	r3, r3
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	e041      	b.n	800566e <USB_EPStartXfer+0xe84>
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <USB_EPStartXfer+0xe24>
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	3b01      	subs	r3, #1
 800560a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005620:	b29a      	uxth	r2, r3
 8005622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e021      	b.n	800566e <USB_EPStartXfer+0xe84>
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d11c      	bne.n	800566e <USB_EPStartXfer+0xe84>
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005644:	4413      	add	r3, r2
 8005646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800564a:	463b      	mov	r3, r7
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	011a      	lsls	r2, r3, #4
 8005652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005656:	4413      	add	r3, r2
 8005658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800565c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	b29a      	uxth	r2, r3
 8005668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800566c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 81a4 	beq.w	80059c2 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800568e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <USB_EPStartXfer+0xebc>
 800569a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 8187 	bne.w	80059c2 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8180 	bne.w	80059c2 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056dc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
 8005706:	e15c      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	78db      	ldrb	r3, [r3, #3]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 8155 	bne.w	80059be <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d90e      	bls.n	8005742 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005738:	1ad2      	subs	r2, r2, r3
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	619a      	str	r2, [r3, #24]
 8005740:	e008      	b.n	8005754 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d16f      	bne.n	800583e <USB_EPStartXfer+0x1054>
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005776:	4413      	add	r3, r2
 8005778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800577c:	463b      	mov	r3, r7
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	011a      	lsls	r2, r3, #4
 8005784:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005788:	4413      	add	r3, r2
 800578a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800578e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <USB_EPStartXfer+0xfde>
 800579a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e05f      	b.n	8005888 <USB_EPStartXfer+0x109e>
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057cc:	2b3e      	cmp	r3, #62	; 0x3e
 80057ce:	d818      	bhi.n	8005802 <USB_EPStartXfer+0x1018>
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <USB_EPStartXfer+0x1006>
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	3301      	adds	r3, #1
 80057ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	e042      	b.n	8005888 <USB_EPStartXfer+0x109e>
 8005802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <USB_EPStartXfer+0x1038>
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	3b01      	subs	r3, #1
 800581e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005826:	b29b      	uxth	r3, r3
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	b29b      	uxth	r3, r3
 800582c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005834:	b29a      	uxth	r2, r3
 8005836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	e024      	b.n	8005888 <USB_EPStartXfer+0x109e>
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d11f      	bne.n	8005888 <USB_EPStartXfer+0x109e>
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005860:	4413      	add	r3, r2
 8005862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	011a      	lsls	r2, r3, #4
 800586e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005872:	4413      	add	r3, r2
 8005874:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800587c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005880:	b29a      	uxth	r2, r3
 8005882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005890:	463b      	mov	r3, r7
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d16f      	bne.n	800597a <USB_EPStartXfer+0x1190>
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058b2:	4413      	add	r3, r2
 80058b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	011a      	lsls	r2, r3, #4
 80058c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d116      	bne.n	8005904 <USB_EPStartXfer+0x111a>
 80058d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e05e      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005908:	2b3e      	cmp	r3, #62	; 0x3e
 800590a:	d818      	bhi.n	800593e <USB_EPStartXfer+0x1154>
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USB_EPStartXfer+0x1142>
 8005922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005926:	3301      	adds	r3, #1
 8005928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800592c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005930:	b29b      	uxth	r3, r3
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	b29a      	uxth	r2, r3
 8005936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e041      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
 800593e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <USB_EPStartXfer+0x1174>
 8005954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005958:	3b01      	subs	r3, #1
 800595a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800595e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005962:	b29b      	uxth	r3, r3
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	b29b      	uxth	r3, r3
 8005968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	e023      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d11e      	bne.n	80059c2 <USB_EPStartXfer+0x11d8>
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005994:	4413      	add	r3, r2
 8005996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	011a      	lsls	r2, r3, #4
 80059a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e001      	b.n	80059c2 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e02e      	b.n	8005a20 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80059e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80059e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80059ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80059f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a52:	81bb      	strh	r3, [r7, #12]
 8005a54:	89bb      	ldrh	r3, [r7, #12]
 8005a56:	f083 0310 	eor.w	r3, r3, #16
 8005a5a:	81bb      	strh	r3, [r7, #12]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	89bb      	ldrh	r3, [r7, #12]
 8005a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	8013      	strh	r3, [r2, #0]
 8005a7c:	e01f      	b.n	8005abe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	81fb      	strh	r3, [r7, #14]
 8005a96:	89fb      	ldrh	r3, [r7, #14]
 8005a98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a9c:	81fb      	strh	r3, [r7, #14]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	89fb      	ldrh	r3, [r7, #14]
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	7b1b      	ldrb	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 809d 	bne.w	8005c1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d04c      	beq.n	8005b82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	823b      	strh	r3, [r7, #16]
 8005af6:	8a3b      	ldrh	r3, [r7, #16]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01b      	beq.n	8005b38 <USB_EPClearStall+0x6c>
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	81fb      	strh	r3, [r7, #14]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	89fb      	ldrh	r3, [r7, #14]
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	78db      	ldrb	r3, [r3, #3]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d06c      	beq.n	8005c1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b56:	81bb      	strh	r3, [r7, #12]
 8005b58:	89bb      	ldrh	r3, [r7, #12]
 8005b5a:	f083 0320 	eor.w	r3, r3, #32
 8005b5e:	81bb      	strh	r3, [r7, #12]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	89bb      	ldrh	r3, [r7, #12]
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]
 8005b80:	e04b      	b.n	8005c1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	82fb      	strh	r3, [r7, #22]
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <USB_EPClearStall+0x106>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	82bb      	strh	r3, [r7, #20]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8abb      	ldrh	r3, [r7, #20]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	827b      	strh	r3, [r7, #18]
 8005bea:	8a7b      	ldrh	r3, [r7, #18]
 8005bec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bf0:	827b      	strh	r3, [r7, #18]
 8005bf2:	8a7b      	ldrh	r3, [r7, #18]
 8005bf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf8:	827b      	strh	r3, [r7, #18]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	8a7b      	ldrh	r3, [r7, #18]
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b08d      	sub	sp, #52	; 0x34
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	4611      	mov	r1, r2
 8005c92:	461a      	mov	r2, r3
 8005c94:	460b      	mov	r3, r1
 8005c96:	80fb      	strh	r3, [r7, #6]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c9c:	88bb      	ldrh	r3, [r7, #4]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	005a      	lsls	r2, r3, #1
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbe:	e01e      	b.n	8005cfe <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	3302      	adds	r3, #2
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	3302      	adds	r3, #2
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1dd      	bne.n	8005cc0 <USB_WritePMA+0x3a>
  }
}
 8005d04:	bf00      	nop
 8005d06:	3734      	adds	r7, #52	; 0x34
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b08b      	sub	sp, #44	; 0x2c
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	460b      	mov	r3, r1
 8005d20:	80fb      	strh	r3, [r7, #6]
 8005d22:	4613      	mov	r3, r2
 8005d24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d26:	88bb      	ldrh	r3, [r7, #4]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	005a      	lsls	r2, r3, #1
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	e01b      	b.n	8005d82 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	3302      	adds	r3, #2
 8005d56:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	3301      	adds	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	3302      	adds	r3, #2
 8005d7a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e0      	bne.n	8005d4a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d88:	88bb      	ldrh	r3, [r7, #4]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	701a      	strb	r2, [r3, #0]
  }
}
 8005da4:	bf00      	nop
 8005da6:	372c      	adds	r7, #44	; 0x2c
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	2181      	movs	r1, #129	; 0x81
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 fca3 	bl	800770e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005dce:	2010      	movs	r0, #16
 8005dd0:	f001 fdb2 	bl	8007938 <USBD_static_malloc>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005de6:	2302      	movs	r3, #2
 8005de8:	e005      	b.n	8005df6 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df0:	2200      	movs	r2, #0
 8005df2:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005e0a:	2181      	movs	r1, #129	; 0x81
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fca4 	bl	800775a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 fd93 	bl	8007954 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d045      	beq.n	8005efa <USBD_HID_Setup+0xba>
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	f040 80d3 	bne.w	800601a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	3b02      	subs	r3, #2
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d835      	bhi.n	8005eea <USBD_HID_Setup+0xaa>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <USBD_HID_Setup+0x44>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005edb 	.word	0x08005edb
 8005e88:	08005ebb 	.word	0x08005ebb
 8005e8c:	08005eeb 	.word	0x08005eeb
 8005e90:	08005eeb 	.word	0x08005eeb
 8005e94:	08005eeb 	.word	0x08005eeb
 8005e98:	08005eeb 	.word	0x08005eeb
 8005e9c:	08005eeb 	.word	0x08005eeb
 8005ea0:	08005eeb 	.word	0x08005eeb
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ead 	.word	0x08005ead
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	885b      	ldrh	r3, [r3, #2]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	601a      	str	r2, [r3, #0]
          break;
 8005eb8:	e01e      	b.n	8005ef8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 f93f 	bl	8007144 <USBD_CtlSendData>
          break;
 8005ec6:	e017      	b.n	8005ef8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	885b      	ldrh	r3, [r3, #2]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]
          break;
 8005ed8:	e00e      	b.n	8005ef8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3304      	adds	r3, #4
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 f92e 	bl	8007144 <USBD_CtlSendData>
          break;
 8005ee8:	e006      	b.n	8005ef8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 f8be 	bl	800706e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef6:	bf00      	nop
      }
      break;
 8005ef8:	e096      	b.n	8006028 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b0b      	cmp	r3, #11
 8005f00:	f200 8083 	bhi.w	800600a <USBD_HID_Setup+0x1ca>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <USBD_HID_Setup+0xcc>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f3d 	.word	0x08005f3d
 8005f10:	0800600b 	.word	0x0800600b
 8005f14:	0800600b 	.word	0x0800600b
 8005f18:	0800600b 	.word	0x0800600b
 8005f1c:	0800600b 	.word	0x0800600b
 8005f20:	0800600b 	.word	0x0800600b
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	0800600b 	.word	0x0800600b
 8005f2c:	0800600b 	.word	0x0800600b
 8005f30:	0800600b 	.word	0x0800600b
 8005f34:	08005fbd 	.word	0x08005fbd
 8005f38:	08005fe5 	.word	0x08005fe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d107      	bne.n	8005f56 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005f46:	f107 030e 	add.w	r3, r7, #14
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 f8f8 	bl	8007144 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f54:	e060      	b.n	8006018 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 f888 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	75fb      	strb	r3, [r7, #23]
          break;
 8005f62:	e059      	b.n	8006018 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	885b      	ldrh	r3, [r3, #2]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b22      	cmp	r3, #34	; 0x22
 8005f6e:	d108      	bne.n	8005f82 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	88db      	ldrh	r3, [r3, #6]
 8005f74:	2b4a      	cmp	r3, #74	; 0x4a
 8005f76:	bf28      	it	cs
 8005f78:	234a      	movcs	r3, #74	; 0x4a
 8005f7a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005f7c:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <USBD_HID_Setup+0x1f4>)
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	e015      	b.n	8005fae <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	885b      	ldrh	r3, [r3, #2]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b21      	cmp	r3, #33	; 0x21
 8005f8c:	d108      	bne.n	8005fa0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <USBD_HID_Setup+0x1f8>)
 8005f90:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	2b09      	cmp	r3, #9
 8005f98:	bf28      	it	cs
 8005f9a:	2309      	movcs	r3, #9
 8005f9c:	83fb      	strh	r3, [r7, #30]
 8005f9e:	e006      	b.n	8005fae <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f863 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	75fb      	strb	r3, [r7, #23]
            break;
 8005fac:	e034      	b.n	8006018 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005fae:	8bfb      	ldrh	r3, [r7, #30]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 f8c5 	bl	8007144 <USBD_CtlSendData>
          break;
 8005fba:	e02d      	b.n	8006018 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d107      	bne.n	8005fd6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 f8b8 	bl	8007144 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fd4:	e020      	b.n	8006018 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f848 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe2:	e019      	b.n	8006018 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d106      	bne.n	8005ffc <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	885b      	ldrh	r3, [r3, #2]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ffa:	e00d      	b.n	8006018 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 f835 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 8006004:	2302      	movs	r3, #2
 8006006:	75fb      	strb	r3, [r7, #23]
          break;
 8006008:	e006      	b.n	8006018 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f82e 	bl	800706e <USBD_CtlError>
          ret = USBD_FAIL;
 8006012:	2302      	movs	r3, #2
 8006014:	75fb      	strb	r3, [r7, #23]
          break;
 8006016:	bf00      	nop
      }
      break;
 8006018:	e006      	b.n	8006028 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 f826 	bl	800706e <USBD_CtlError>
      ret = USBD_FAIL;
 8006022:	2302      	movs	r3, #2
 8006024:	75fb      	strb	r3, [r7, #23]
      break;
 8006026:	bf00      	nop
  }

  return ret;
 8006028:	7dfb      	ldrb	r3, [r7, #23]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200000c8 	.word	0x200000c8
 8006038:	200000b0 	.word	0x200000b0

0800603c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006058:	2b03      	cmp	r3, #3
 800605a:	d10c      	bne.n	8006076 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	7b1b      	ldrb	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d108      	bne.n	8006076 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2201      	movs	r2, #1
 8006068:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	2181      	movs	r1, #129	; 0x81
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f001 fc1b 	bl	80078ac <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2222      	movs	r2, #34	; 0x22
 800608c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000044 	.word	0x20000044

080060a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2222      	movs	r2, #34	; 0x22
 80060ac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80060ae:	4b03      	ldr	r3, [pc, #12]	; (80060bc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20000068 	.word	0x20000068

080060c0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2222      	movs	r2, #34	; 0x22
 80060cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80060ce:	4b03      	ldr	r3, [pc, #12]	; (80060dc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	2000008c 	.word	0x2000008c

080060e0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	2200      	movs	r2, #0
 80060f4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	220a      	movs	r2, #10
 8006110:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006112:	4b03      	ldr	r3, [pc, #12]	; (8006120 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	200000bc 	.word	0x200000bc

08006124 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006138:	2302      	movs	r3, #2
 800613a:	e01a      	b.n	8006172 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	79fa      	ldrb	r2, [r7, #7]
 8006168:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f001 fa6c 	bl	8007648 <USBD_LL_Init>

  return USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d006      	beq.n	800619c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]
 800619a:	e001      	b.n	80061a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800619c:	2302      	movs	r3, #2
 800619e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fa8e 	bl	80076d8 <USBD_LL_Start>

  return USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061e8:	2302      	movs	r3, #2
 80061ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00c      	beq.n	8006210 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	4611      	mov	r1, r2
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	4611      	mov	r1, r2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fece 	bl	8006ff4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006266:	461a      	mov	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2b01      	cmp	r3, #1
 800627a:	d00c      	beq.n	8006296 <USBD_LL_SetupStage+0x56>
 800627c:	2b01      	cmp	r3, #1
 800627e:	d302      	bcc.n	8006286 <USBD_LL_SetupStage+0x46>
 8006280:	2b02      	cmp	r3, #2
 8006282:	d010      	beq.n	80062a6 <USBD_LL_SetupStage+0x66>
 8006284:	e017      	b.n	80062b6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9ce 	bl	8006630 <USBD_StdDevReq>
      break;
 8006294:	e01a      	b.n	80062cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa30 	bl	8006704 <USBD_StdItfReq>
      break;
 80062a4:	e012      	b.n	80062cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa6e 	bl	8006790 <USBD_StdEPReq>
      break;
 80062b4:	e00a      	b.n	80062cc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fa67 	bl	8007798 <USBD_LL_StallEP>
      break;
 80062ca:	bf00      	nop
  }

  return USBD_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b086      	sub	sp, #24
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	460b      	mov	r3, r1
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d14b      	bne.n	8006382 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d134      	bne.n	8006366 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	429a      	cmp	r2, r3
 8006306:	d919      	bls.n	800633c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	1ad2      	subs	r2, r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800631e:	429a      	cmp	r2, r3
 8006320:	d203      	bcs.n	800632a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006326:	b29b      	uxth	r3, r3
 8006328:	e002      	b.n	8006330 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 ff33 	bl	80071a0 <USBD_CtlContinueRx>
 800633a:	e038      	b.n	80063ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800634e:	2b03      	cmp	r3, #3
 8006350:	d105      	bne.n	800635e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 ff30 	bl	80071c4 <USBD_CtlSendStatus>
 8006364:	e023      	b.n	80063ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800636c:	2b05      	cmp	r3, #5
 800636e:	d11e      	bne.n	80063ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006378:	2100      	movs	r1, #0
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 fa0c 	bl	8007798 <USBD_LL_StallEP>
 8006380:	e015      	b.n	80063ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00d      	beq.n	80063aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006394:	2b03      	cmp	r3, #3
 8006396:	d108      	bne.n	80063aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	7afa      	ldrb	r2, [r7, #11]
 80063a2:	4611      	mov	r1, r2
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	4798      	blx	r3
 80063a8:	e001      	b.n	80063ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063aa:	2302      	movs	r3, #2
 80063ac:	e000      	b.n	80063b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	460b      	mov	r3, r1
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063c6:	7afb      	ldrb	r3, [r7, #11]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d17f      	bne.n	80064cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3314      	adds	r3, #20
 80063d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d15c      	bne.n	8006496 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d915      	bls.n	8006414 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 febb 	bl	800717c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006406:	2300      	movs	r3, #0
 8006408:	2200      	movs	r2, #0
 800640a:	2100      	movs	r1, #0
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f001 fa70 	bl	80078f2 <USBD_LL_PrepareReceive>
 8006412:	e04e      	b.n	80064b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	6912      	ldr	r2, [r2, #16]
 800641c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006420:	fb02 f201 	mul.w	r2, r2, r1
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11c      	bne.n	8006464 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006432:	429a      	cmp	r2, r3
 8006434:	d316      	bcc.n	8006464 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006440:	429a      	cmp	r2, r3
 8006442:	d20f      	bcs.n	8006464 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fe97 	bl	800717c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006456:	2300      	movs	r3, #0
 8006458:	2200      	movs	r2, #0
 800645a:	2100      	movs	r1, #0
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f001 fa48 	bl	80078f2 <USBD_LL_PrepareReceive>
 8006462:	e026      	b.n	80064b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006476:	2b03      	cmp	r3, #3
 8006478:	d105      	bne.n	8006486 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006486:	2180      	movs	r1, #128	; 0x80
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f001 f985 	bl	8007798 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 feab 	bl	80071ea <USBD_CtlReceiveStatus>
 8006494:	e00d      	b.n	80064b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800649c:	2b04      	cmp	r3, #4
 800649e:	d004      	beq.n	80064aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f001 f973 	bl	8007798 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d11d      	bne.n	80064f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fe82 	bl	80061c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064ca:	e015      	b.n	80064f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d108      	bne.n	80064f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	7afa      	ldrb	r2, [r7, #11]
 80064ec:	4611      	mov	r1, r2
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	4798      	blx	r3
 80064f2:	e001      	b.n	80064f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064f4:	2302      	movs	r3, #2
 80064f6:	e000      	b.n	80064fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	2200      	movs	r2, #0
 800650e:	2100      	movs	r1, #0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f8fc 	bl	800770e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2240      	movs	r2, #64	; 0x40
 8006522:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006526:	2340      	movs	r3, #64	; 0x40
 8006528:	2200      	movs	r2, #0
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 f8ee 	bl	800770e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6852      	ldr	r2, [r2, #4]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	4611      	mov	r1, r2
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
  }

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2204      	movs	r2, #4
 80065bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d105      	bne.n	80065ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006608:	2b03      	cmp	r3, #3
 800660a:	d10b      	bne.n	8006624 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006646:	2b20      	cmp	r3, #32
 8006648:	d004      	beq.n	8006654 <USBD_StdDevReq+0x24>
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d002      	beq.n	8006654 <USBD_StdDevReq+0x24>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <USBD_StdDevReq+0x34>
 8006652:	e04c      	b.n	80066ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
      break;
 8006662:	e049      	b.n	80066f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b09      	cmp	r3, #9
 800666a:	d83a      	bhi.n	80066e2 <USBD_StdDevReq+0xb2>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <USBD_StdDevReq+0x44>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066c5 	.word	0x080066c5
 8006678:	080066d9 	.word	0x080066d9
 800667c:	080066e3 	.word	0x080066e3
 8006680:	080066cf 	.word	0x080066cf
 8006684:	080066e3 	.word	0x080066e3
 8006688:	080066a7 	.word	0x080066a7
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066e3 	.word	0x080066e3
 8006694:	080066bb 	.word	0x080066bb
 8006698:	080066b1 	.word	0x080066b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9d4 	bl	8006a4c <USBD_GetDescriptor>
          break;
 80066a4:	e022      	b.n	80066ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fb37 	bl	8006d1c <USBD_SetAddress>
          break;
 80066ae:	e01d      	b.n	80066ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fb74 	bl	8006da0 <USBD_SetConfig>
          break;
 80066b8:	e018      	b.n	80066ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fbfd 	bl	8006ebc <USBD_GetConfig>
          break;
 80066c2:	e013      	b.n	80066ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fc2c 	bl	8006f24 <USBD_GetStatus>
          break;
 80066cc:	e00e      	b.n	80066ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fc5a 	bl	8006f8a <USBD_SetFeature>
          break;
 80066d6:	e009      	b.n	80066ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fc69 	bl	8006fb2 <USBD_ClrFeature>
          break;
 80066e0:	e004      	b.n	80066ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fcc2 	bl	800706e <USBD_CtlError>
          break;
 80066ea:	bf00      	nop
      }
      break;
 80066ec:	e004      	b.n	80066f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fcbc 	bl	800706e <USBD_CtlError>
      break;
 80066f6:	bf00      	nop
  }

  return ret;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop

08006704 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800671a:	2b20      	cmp	r3, #32
 800671c:	d003      	beq.n	8006726 <USBD_StdItfReq+0x22>
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d001      	beq.n	8006726 <USBD_StdItfReq+0x22>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d12a      	bne.n	800677c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672c:	3b01      	subs	r3, #1
 800672e:	2b02      	cmp	r3, #2
 8006730:	d81d      	bhi.n	800676e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	889b      	ldrh	r3, [r3, #4]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d813      	bhi.n	8006764 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	88db      	ldrh	r3, [r3, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d110      	bne.n	8006778 <USBD_StdItfReq+0x74>
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fd31 	bl	80071c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006762:	e009      	b.n	8006778 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fc81 	bl	800706e <USBD_CtlError>
          break;
 800676c:	e004      	b.n	8006778 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc7c 	bl	800706e <USBD_CtlError>
          break;
 8006776:	e000      	b.n	800677a <USBD_StdItfReq+0x76>
          break;
 8006778:	bf00      	nop
      }
      break;
 800677a:	e004      	b.n	8006786 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc75 	bl	800706e <USBD_CtlError>
      break;
 8006784:	bf00      	nop
  }

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	889b      	ldrh	r3, [r3, #4]
 80067a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d004      	beq.n	80067ba <USBD_StdEPReq+0x2a>
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d002      	beq.n	80067ba <USBD_StdEPReq+0x2a>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <USBD_StdEPReq+0x3a>
 80067b8:	e13d      	b.n	8006a36 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
      break;
 80067c8:	e13a      	b.n	8006a40 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d10a      	bne.n	80067ec <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	e12a      	b.n	8006a42 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d03e      	beq.n	8006872 <USBD_StdEPReq+0xe2>
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d002      	beq.n	80067fe <USBD_StdEPReq+0x6e>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d070      	beq.n	80068de <USBD_StdEPReq+0x14e>
 80067fc:	e115      	b.n	8006a2a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	2b02      	cmp	r3, #2
 8006806:	d002      	beq.n	800680e <USBD_StdEPReq+0x7e>
 8006808:	2b03      	cmp	r3, #3
 800680a:	d015      	beq.n	8006838 <USBD_StdEPReq+0xa8>
 800680c:	e02b      	b.n	8006866 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00c      	beq.n	800682e <USBD_StdEPReq+0x9e>
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d009      	beq.n	800682e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 ffba 	bl	8007798 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006824:	2180      	movs	r1, #128	; 0x80
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 ffb6 	bl	8007798 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800682c:	e020      	b.n	8006870 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fc1c 	bl	800706e <USBD_CtlError>
              break;
 8006836:	e01b      	b.n	8006870 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	885b      	ldrh	r3, [r3, #2]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10e      	bne.n	800685e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <USBD_StdEPReq+0xce>
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d008      	beq.n	800685e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	88db      	ldrh	r3, [r3, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 ff9d 	bl	8007798 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fcb0 	bl	80071c4 <USBD_CtlSendStatus>

              break;
 8006864:	e004      	b.n	8006870 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fc00 	bl	800706e <USBD_CtlError>
              break;
 800686e:	bf00      	nop
          }
          break;
 8006870:	e0e0      	b.n	8006a34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	2b02      	cmp	r3, #2
 800687a:	d002      	beq.n	8006882 <USBD_StdEPReq+0xf2>
 800687c:	2b03      	cmp	r3, #3
 800687e:	d015      	beq.n	80068ac <USBD_StdEPReq+0x11c>
 8006880:	e026      	b.n	80068d0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00c      	beq.n	80068a2 <USBD_StdEPReq+0x112>
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b80      	cmp	r3, #128	; 0x80
 800688c:	d009      	beq.n	80068a2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 ff80 	bl	8007798 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 ff7c 	bl	8007798 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068a0:	e01c      	b.n	80068dc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fbe2 	bl	800706e <USBD_CtlError>
              break;
 80068aa:	e017      	b.n	80068dc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	885b      	ldrh	r3, [r3, #2]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d112      	bne.n	80068da <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 ff87 	bl	80077d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fc7b 	bl	80071c4 <USBD_CtlSendStatus>
              }
              break;
 80068ce:	e004      	b.n	80068da <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fbcb 	bl	800706e <USBD_CtlError>
              break;
 80068d8:	e000      	b.n	80068dc <USBD_StdEPReq+0x14c>
              break;
 80068da:	bf00      	nop
          }
          break;
 80068dc:	e0aa      	b.n	8006a34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d002      	beq.n	80068ee <USBD_StdEPReq+0x15e>
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d032      	beq.n	8006952 <USBD_StdEPReq+0x1c2>
 80068ec:	e097      	b.n	8006a1e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <USBD_StdEPReq+0x174>
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2b80      	cmp	r3, #128	; 0x80
 80068f8:	d004      	beq.n	8006904 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fbb6 	bl	800706e <USBD_CtlError>
                break;
 8006902:	e091      	b.n	8006a28 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006908:	2b00      	cmp	r3, #0
 800690a:	da0b      	bge.n	8006924 <USBD_StdEPReq+0x194>
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	3310      	adds	r3, #16
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	3304      	adds	r3, #4
 8006922:	e00b      	b.n	800693c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2202      	movs	r2, #2
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fbfa 	bl	8007144 <USBD_CtlSendData>
              break;
 8006950:	e06a      	b.n	8006a28 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006956:	2b00      	cmp	r3, #0
 8006958:	da11      	bge.n	800697e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	3318      	adds	r3, #24
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d117      	bne.n	80069a4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fb79 	bl	800706e <USBD_CtlError>
                  break;
 800697c:	e054      	b.n	8006a28 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	f003 020f 	and.w	r2, r3, #15
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb66 	bl	800706e <USBD_CtlError>
                  break;
 80069a2:	e041      	b.n	8006a28 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da0b      	bge.n	80069c4 <USBD_StdEPReq+0x234>
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	3310      	adds	r3, #16
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	e00b      	b.n	80069dc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	3304      	adds	r3, #4
 80069dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <USBD_StdEPReq+0x25a>
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b80      	cmp	r3, #128	; 0x80
 80069e8:	d103      	bne.n	80069f2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e00e      	b.n	8006a10 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 ff0c 	bl	8007814 <USBD_LL_IsStallEP>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e002      	b.n	8006a10 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2202      	movs	r2, #2
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb94 	bl	8007144 <USBD_CtlSendData>
              break;
 8006a1c:	e004      	b.n	8006a28 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fb24 	bl	800706e <USBD_CtlError>
              break;
 8006a26:	bf00      	nop
          }
          break;
 8006a28:	e004      	b.n	8006a34 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb1e 	bl	800706e <USBD_CtlError>
          break;
 8006a32:	bf00      	nop
      }
      break;
 8006a34:	e004      	b.n	8006a40 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fb18 	bl	800706e <USBD_CtlError>
      break;
 8006a3e:	bf00      	nop
  }

  return ret;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	885b      	ldrh	r3, [r3, #2]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	2b06      	cmp	r3, #6
 8006a6e:	f200 8128 	bhi.w	8006cc2 <USBD_GetDescriptor+0x276>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <USBD_GetDescriptor+0x2c>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a95 	.word	0x08006a95
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006aed 	.word	0x08006aed
 8006a84:	08006cc3 	.word	0x08006cc3
 8006a88:	08006cc3 	.word	0x08006cc3
 8006a8c:	08006c63 	.word	0x08006c63
 8006a90:	08006c8f 	.word	0x08006c8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	7c12      	ldrb	r2, [r2, #16]
 8006aa0:	f107 0108 	add.w	r1, r7, #8
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
 8006aa8:	60f8      	str	r0, [r7, #12]
      break;
 8006aaa:	e112      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7c1b      	ldrb	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f107 0208 	add.w	r2, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	2202      	movs	r2, #2
 8006acc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ace:	e100      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
      break;
 8006aea:	e0f2      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	885b      	ldrh	r3, [r3, #2]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	f200 80ac 	bhi.w	8006c50 <USBD_GetDescriptor+0x204>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBD_GetDescriptor+0xb4>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b4d 	.word	0x08006b4d
 8006b08:	08006b81 	.word	0x08006b81
 8006b0c:	08006bb5 	.word	0x08006bb5
 8006b10:	08006be9 	.word	0x08006be9
 8006b14:	08006c1d 	.word	0x08006c1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	7c12      	ldrb	r2, [r2, #16]
 8006b30:	f107 0108 	add.w	r1, r7, #8
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b3a:	e091      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa95 	bl	800706e <USBD_CtlError>
            err++;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	3301      	adds	r3, #1
 8006b48:	72fb      	strb	r3, [r7, #11]
          break;
 8006b4a:	e089      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	7c12      	ldrb	r2, [r2, #16]
 8006b64:	f107 0108 	add.w	r1, r7, #8
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4798      	blx	r3
 8006b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b6e:	e077      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa7b 	bl	800706e <USBD_CtlError>
            err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b7e:	e06f      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	7c12      	ldrb	r2, [r2, #16]
 8006b98:	f107 0108 	add.w	r1, r7, #8
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4798      	blx	r3
 8006ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ba2:	e05d      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa61 	bl	800706e <USBD_CtlError>
            err++;
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bb2:	e055      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	7c12      	ldrb	r2, [r2, #16]
 8006bcc:	f107 0108 	add.w	r1, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bd6:	e043      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa47 	bl	800706e <USBD_CtlError>
            err++;
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	3301      	adds	r3, #1
 8006be4:	72fb      	strb	r3, [r7, #11]
          break;
 8006be6:	e03b      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0a:	e029      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa2d 	bl	800706e <USBD_CtlError>
            err++;
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	3301      	adds	r3, #1
 8006c18:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1a:	e021      	b.n	8006c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	7c12      	ldrb	r2, [r2, #16]
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3e:	e00f      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa13 	bl	800706e <USBD_CtlError>
            err++;
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4e:	e007      	b.n	8006c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa0b 	bl	800706e <USBD_CtlError>
          err++;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006c5e:	e038      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
 8006c60:	e037      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7c1b      	ldrb	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	f107 0208 	add.w	r2, r7, #8
 8006c76:	4610      	mov	r0, r2
 8006c78:	4798      	blx	r3
 8006c7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c7c:	e029      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9f4 	bl	800706e <USBD_CtlError>
        err++;
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c8c:	e021      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7c1b      	ldrb	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10d      	bne.n	8006cb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f107 0208 	add.w	r2, r7, #8
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4798      	blx	r3
 8006ca6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	2207      	movs	r2, #7
 8006cae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cb0:	e00f      	b.n	8006cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9da 	bl	800706e <USBD_CtlError>
        err++;
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8006cc0:	e007      	b.n	8006cd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9d2 	bl	800706e <USBD_CtlError>
      err++;
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	72fb      	strb	r3, [r7, #11]
      break;
 8006cd0:	bf00      	nop
  }

  if (err != 0U)
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11c      	bne.n	8006d12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006cd8:	893b      	ldrh	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <USBD_GetDescriptor+0x2b6>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	88db      	ldrh	r3, [r3, #6]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00d      	beq.n	8006d02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88da      	ldrh	r2, [r3, #6]
 8006cea:	893b      	ldrh	r3, [r7, #8]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bf28      	it	cs
 8006cf0:	4613      	movcs	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cf6:	893b      	ldrh	r3, [r7, #8]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa21 	bl	8007144 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88db      	ldrh	r3, [r3, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa5a 	bl	80071c4 <USBD_CtlSendStatus>
 8006d10:	e000      	b.n	8006d14 <USBD_GetDescriptor+0x2c8>
    return;
 8006d12:	bf00      	nop
    }
  }
}
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop

08006d1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	889b      	ldrh	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d130      	bne.n	8006d90 <USBD_SetAddress+0x74>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	88db      	ldrh	r3, [r3, #6]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d12c      	bne.n	8006d90 <USBD_SetAddress+0x74>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3c:	d828      	bhi.n	8006d90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	885b      	ldrh	r3, [r3, #2]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d104      	bne.n	8006d5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f989 	bl	800706e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5c:	e01c      	b.n	8006d98 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7bfa      	ldrb	r2, [r7, #15]
 8006d62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fd7f 	bl	800786e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa27 	bl	80071c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d84:	e008      	b.n	8006d98 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8e:	e003      	b.n	8006d98 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f96b 	bl	800706e <USBD_CtlError>
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	885b      	ldrh	r3, [r3, #2]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006db2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006db4:	4b40      	ldr	r3, [pc, #256]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d904      	bls.n	8006dc6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f955 	bl	800706e <USBD_CtlError>
 8006dc4:	e075      	b.n	8006eb2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d002      	beq.n	8006dd6 <USBD_SetConfig+0x36>
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d023      	beq.n	8006e1c <USBD_SetConfig+0x7c>
 8006dd4:	e062      	b.n	8006e9c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006dd6:	4b38      	ldr	r3, [pc, #224]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01a      	beq.n	8006e14 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006dde:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2203      	movs	r2, #3
 8006dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006df0:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff f9f0 	bl	80061dc <USBD_SetClassConfig>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d104      	bne.n	8006e0c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f932 	bl	800706e <USBD_CtlError>
            return;
 8006e0a:	e052      	b.n	8006eb2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f9d9 	bl	80071c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e12:	e04e      	b.n	8006eb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f9d5 	bl	80071c4 <USBD_CtlSendStatus>
        break;
 8006e1a:	e04a      	b.n	8006eb2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d112      	bne.n	8006e4a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006e2c:	4b22      	ldr	r3, [pc, #136]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006e36:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff f9ec 	bl	800621a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f9be 	bl	80071c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e48:	e033      	b.n	8006eb2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006e4a:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d01d      	beq.n	8006e94 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff f9da 	bl	800621a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e70:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff f9b0 	bl	80061dc <USBD_SetClassConfig>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d104      	bne.n	8006e8c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8f2 	bl	800706e <USBD_CtlError>
            return;
 8006e8a:	e012      	b.n	8006eb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f999 	bl	80071c4 <USBD_CtlSendStatus>
        break;
 8006e92:	e00e      	b.n	8006eb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f995 	bl	80071c4 <USBD_CtlSendStatus>
        break;
 8006e9a:	e00a      	b.n	8006eb2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8e5 	bl	800706e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <USBD_SetConfig+0x118>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff f9b5 	bl	800621a <USBD_ClrClassConfig>
        break;
 8006eb0:	bf00      	nop
    }
  }
}
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000180 	.word	0x20000180

08006ebc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d004      	beq.n	8006ed8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8cc 	bl	800706e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ed6:	e021      	b.n	8006f1c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	db17      	blt.n	8006f12 <USBD_GetConfig+0x56>
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	dd02      	ble.n	8006eec <USBD_GetConfig+0x30>
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d00b      	beq.n	8006f02 <USBD_GetConfig+0x46>
 8006eea:	e012      	b.n	8006f12 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f922 	bl	8007144 <USBD_CtlSendData>
        break;
 8006f00:	e00c      	b.n	8006f1c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3304      	adds	r3, #4
 8006f06:	2201      	movs	r2, #1
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f91a 	bl	8007144 <USBD_CtlSendData>
        break;
 8006f10:	e004      	b.n	8006f1c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8aa 	bl	800706e <USBD_CtlError>
        break;
 8006f1a:	bf00      	nop
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d81e      	bhi.n	8006f78 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	88db      	ldrh	r3, [r3, #6]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d004      	beq.n	8006f4c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f892 	bl	800706e <USBD_CtlError>
        break;
 8006f4a:	e01a      	b.n	8006f82 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f043 0202 	orr.w	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f8e7 	bl	8007144 <USBD_CtlSendData>
      break;
 8006f76:	e004      	b.n	8006f82 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f877 	bl	800706e <USBD_CtlError>
      break;
 8006f80:	bf00      	nop
  }
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	885b      	ldrh	r3, [r3, #2]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d106      	bne.n	8006faa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f90d 	bl	80071c4 <USBD_CtlSendStatus>
  }
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d80b      	bhi.n	8006fe0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d10c      	bne.n	8006fea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8f3 	bl	80071c4 <USBD_CtlSendStatus>
      }
      break;
 8006fde:	e004      	b.n	8006fea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f843 	bl	800706e <USBD_CtlError>
      break;
 8006fe8:	e000      	b.n	8006fec <USBD_ClrFeature+0x3a>
      break;
 8006fea:	bf00      	nop
  }
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	785a      	ldrb	r2, [r3, #1]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	3302      	adds	r3, #2
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b29a      	uxth	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3303      	adds	r3, #3
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	b29b      	uxth	r3, r3
 8007022:	4413      	add	r3, r2
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b29a      	uxth	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	3305      	adds	r3, #5
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	b29b      	uxth	r3, r3
 800703e:	4413      	add	r3, r2
 8007040:	b29a      	uxth	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3306      	adds	r3, #6
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	b29a      	uxth	r2, r3
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	3307      	adds	r3, #7
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	b29b      	uxth	r3, r3
 800705a:	4413      	add	r3, r2
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	80da      	strh	r2, [r3, #6]

}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fb8c 	bl	8007798 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007080:	2100      	movs	r1, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fb88 	bl	8007798 <USBD_LL_StallEP>
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d032      	beq.n	800710c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f834 	bl	8007114 <USBD_GetLen>
 80070ac:	4603      	mov	r3, r0
 80070ae:	3301      	adds	r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	75fa      	strb	r2, [r7, #23]
 80070c0:	461a      	mov	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	75fa      	strb	r2, [r7, #23]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4413      	add	r3, r2
 80070d8:	2203      	movs	r2, #3
 80070da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80070dc:	e012      	b.n	8007104 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	60fa      	str	r2, [r7, #12]
 80070e4:	7dfa      	ldrb	r2, [r7, #23]
 80070e6:	1c51      	adds	r1, r2, #1
 80070e8:	75f9      	strb	r1, [r7, #23]
 80070ea:	4611      	mov	r1, r2
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	440a      	add	r2, r1
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	75fa      	strb	r2, [r7, #23]
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4413      	add	r3, r2
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e8      	bne.n	80070de <USBD_GetString+0x4e>
    }
  }
}
 800710c:	bf00      	nop
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007120:	e005      	b.n	800712e <USBD_GetLen+0x1a>
  {
    len++;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	3301      	adds	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3301      	adds	r3, #1
 800712c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f5      	bne.n	8007122 <USBD_GetLen+0xe>
  }

  return len;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2202      	movs	r2, #2
 8007156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	2100      	movs	r1, #0
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fb9d 	bl	80078ac <USBD_LL_Transmit>

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	2100      	movs	r1, #0
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fb8b 	bl	80078ac <USBD_LL_Transmit>

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	2100      	movs	r1, #0
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fb9c 	bl	80078f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2204      	movs	r2, #4
 80071d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071d4:	2300      	movs	r3, #0
 80071d6:	2200      	movs	r2, #0
 80071d8:	2100      	movs	r1, #0
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fb66 	bl	80078ac <USBD_LL_Transmit>

  return USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2205      	movs	r2, #5
 80071f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071fa:	2300      	movs	r3, #0
 80071fc:	2200      	movs	r2, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fb76 	bl	80078f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007214:	2200      	movs	r2, #0
 8007216:	490e      	ldr	r1, [pc, #56]	; (8007250 <MX_USB_DEVICE_Init+0x40>)
 8007218:	480e      	ldr	r0, [pc, #56]	; (8007254 <MX_USB_DEVICE_Init+0x44>)
 800721a:	f7fe ff83 	bl	8006124 <USBD_Init>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007224:	f7f9 f980 	bl	8000528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007228:	490b      	ldr	r1, [pc, #44]	; (8007258 <MX_USB_DEVICE_Init+0x48>)
 800722a:	480a      	ldr	r0, [pc, #40]	; (8007254 <MX_USB_DEVICE_Init+0x44>)
 800722c:	f7fe ffa5 	bl	800617a <USBD_RegisterClass>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007236:	f7f9 f977 	bl	8000528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800723a:	4806      	ldr	r0, [pc, #24]	; (8007254 <MX_USB_DEVICE_Init+0x44>)
 800723c:	f7fe ffb7 	bl	80061ae <USBD_Start>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007246:	f7f9 f96f 	bl	8000528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000114 	.word	0x20000114
 8007254:	2000025c 	.word	0x2000025c
 8007258:	2000000c 	.word	0x2000000c

0800725c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2212      	movs	r2, #18
 800726c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800726e:	4b03      	ldr	r3, [pc, #12]	; (800727c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20000130 	.word	0x20000130

08007280 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	6039      	str	r1, [r7, #0]
 800728a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2204      	movs	r2, #4
 8007290:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007292:	4b03      	ldr	r3, [pc, #12]	; (80072a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	20000144 	.word	0x20000144

080072a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	4907      	ldr	r1, [pc, #28]	; (80072d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80072ba:	4808      	ldr	r0, [pc, #32]	; (80072dc <USBD_FS_ProductStrDescriptor+0x38>)
 80072bc:	f7ff fee8 	bl	8007090 <USBD_GetString>
 80072c0:	e004      	b.n	80072cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	4904      	ldr	r1, [pc, #16]	; (80072d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80072c6:	4805      	ldr	r0, [pc, #20]	; (80072dc <USBD_FS_ProductStrDescriptor+0x38>)
 80072c8:	f7ff fee2 	bl	8007090 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000520 	.word	0x20000520
 80072dc:	08007a48 	.word	0x08007a48

080072e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	6039      	str	r1, [r7, #0]
 80072ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	4904      	ldr	r1, [pc, #16]	; (8007300 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072f0:	4804      	ldr	r0, [pc, #16]	; (8007304 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072f2:	f7ff fecd 	bl	8007090 <USBD_GetString>
  return USBD_StrDesc;
 80072f6:	4b02      	ldr	r3, [pc, #8]	; (8007300 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000520 	.word	0x20000520
 8007304:	08007a60 	.word	0x08007a60

08007308 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	221a      	movs	r2, #26
 8007318:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800731a:	f000 f843 	bl	80073a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800731e:	4b02      	ldr	r3, [pc, #8]	; (8007328 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000148 	.word	0x20000148

0800732c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	6039      	str	r1, [r7, #0]
 8007336:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	4907      	ldr	r1, [pc, #28]	; (8007360 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007342:	4808      	ldr	r0, [pc, #32]	; (8007364 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007344:	f7ff fea4 	bl	8007090 <USBD_GetString>
 8007348:	e004      	b.n	8007354 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	4904      	ldr	r1, [pc, #16]	; (8007360 <USBD_FS_ConfigStrDescriptor+0x34>)
 800734e:	4805      	ldr	r0, [pc, #20]	; (8007364 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007350:	f7ff fe9e 	bl	8007090 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000520 	.word	0x20000520
 8007364:	08007a74 	.word	0x08007a74

08007368 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	4907      	ldr	r1, [pc, #28]	; (800739c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800737e:	4808      	ldr	r0, [pc, #32]	; (80073a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007380:	f7ff fe86 	bl	8007090 <USBD_GetString>
 8007384:	e004      	b.n	8007390 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	4904      	ldr	r1, [pc, #16]	; (800739c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800738a:	4805      	ldr	r0, [pc, #20]	; (80073a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800738c:	f7ff fe80 	bl	8007090 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000520 	.word	0x20000520
 80073a0:	08007a80 	.word	0x08007a80

080073a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073aa:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <Get_SerialNum+0x44>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073b0:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <Get_SerialNum+0x48>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073b6:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <Get_SerialNum+0x4c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4413      	add	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073ca:	2208      	movs	r2, #8
 80073cc:	4909      	ldr	r1, [pc, #36]	; (80073f4 <Get_SerialNum+0x50>)
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f814 	bl	80073fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073d4:	2204      	movs	r2, #4
 80073d6:	4908      	ldr	r1, [pc, #32]	; (80073f8 <Get_SerialNum+0x54>)
 80073d8:	68b8      	ldr	r0, [r7, #8]
 80073da:	f000 f80f 	bl	80073fc <IntToUnicode>
  }
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	1ffff7ac 	.word	0x1ffff7ac
 80073ec:	1ffff7b0 	.word	0x1ffff7b0
 80073f0:	1ffff7b4 	.word	0x1ffff7b4
 80073f4:	2000014a 	.word	0x2000014a
 80073f8:	2000015a 	.word	0x2000015a

080073fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]
 8007412:	e027      	b.n	8007464 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	0f1b      	lsrs	r3, r3, #28
 8007418:	2b09      	cmp	r3, #9
 800741a:	d80b      	bhi.n	8007434 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	0f1b      	lsrs	r3, r3, #28
 8007420:	b2da      	uxtb	r2, r3
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	4619      	mov	r1, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	440b      	add	r3, r1
 800742c:	3230      	adds	r2, #48	; 0x30
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
 8007432:	e00a      	b.n	800744a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0f1b      	lsrs	r3, r3, #28
 8007438:	b2da      	uxtb	r2, r3
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4619      	mov	r1, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	440b      	add	r3, r1
 8007444:	3237      	adds	r2, #55	; 0x37
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	3301      	adds	r3, #1
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4413      	add	r3, r2
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	3301      	adds	r3, #1
 8007462:	75fb      	strb	r3, [r7, #23]
 8007464:	7dfa      	ldrb	r2, [r7, #23]
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	429a      	cmp	r2, r3
 800746a:	d3d3      	bcc.n	8007414 <IntToUnicode+0x18>
  }
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1c      	ldr	r2, [pc, #112]	; (8007508 <HAL_PCD_MspInit+0x90>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d131      	bne.n	80074fe <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800749a:	4b1c      	ldr	r3, [pc, #112]	; (800750c <HAL_PCD_MspInit+0x94>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4a1b      	ldr	r2, [pc, #108]	; (800750c <HAL_PCD_MspInit+0x94>)
 80074a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a4:	6153      	str	r3, [r2, #20]
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <HAL_PCD_MspInit+0x94>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80074b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074b8:	2302      	movs	r3, #2
 80074ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074c0:	2303      	movs	r3, #3
 80074c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80074c4:	230e      	movs	r3, #14
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074c8:	f107 0314 	add.w	r3, r7, #20
 80074cc:	4619      	mov	r1, r3
 80074ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074d2:	f7f9 faed 	bl	8000ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <HAL_PCD_MspInit+0x94>)
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4a0c      	ldr	r2, [pc, #48]	; (800750c <HAL_PCD_MspInit+0x94>)
 80074dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074e0:	61d3      	str	r3, [r2, #28]
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <HAL_PCD_MspInit+0x94>)
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80074ee:	2200      	movs	r2, #0
 80074f0:	2100      	movs	r1, #0
 80074f2:	2014      	movs	r0, #20
 80074f4:	f7f9 faa5 	bl	8000a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80074f8:	2014      	movs	r0, #20
 80074fa:	f7f9 fabe 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80074fe:	bf00      	nop
 8007500:	3728      	adds	r7, #40	; 0x28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	40005c00 	.word	0x40005c00
 800750c:	40021000 	.word	0x40021000

08007510 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fe fe8a 	bl	8006240 <USBD_LL_SetupStage>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	440b      	add	r3, r1
 8007554:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	4619      	mov	r1, r3
 800755e:	f7fe feba 	bl	80062d6 <USBD_LL_DataOutStage>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	440b      	add	r3, r1
 800758a:	333c      	adds	r3, #60	; 0x3c
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	4619      	mov	r1, r3
 8007592:	f7fe ff11 	bl	80063b8 <USBD_LL_DataInStage>
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff f824 	bl	80065fa <USBD_LL_SOF>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d001      	beq.n	80075d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075ce:	f7f8 ffab 	bl	8000528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075d8:	7bfa      	ldrb	r2, [r7, #15]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe ffd1 	bl	8006584 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe ff8a 	bl	8006502 <USBD_LL_Reset>
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe ffcc 	bl	80065a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <HAL_PCD_SuspendCallback+0x30>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	4a03      	ldr	r2, [pc, #12]	; (8007628 <HAL_PCD_SuspendCallback+0x30>)
 800761a:	f043 0306 	orr.w	r3, r3, #6
 800761e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed00 	.word	0xe000ed00

0800762c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe ffc7 	bl	80065ce <USBD_LL_Resume>
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007650:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <USBD_LL_Init+0x88>)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <USBD_LL_Init+0x88>)
 800765c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <USBD_LL_Init+0x88>)
 8007662:	4a1c      	ldr	r2, [pc, #112]	; (80076d4 <USBD_LL_Init+0x8c>)
 8007664:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007666:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <USBD_LL_Init+0x88>)
 8007668:	2208      	movs	r2, #8
 800766a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800766c:	4b18      	ldr	r3, [pc, #96]	; (80076d0 <USBD_LL_Init+0x88>)
 800766e:	2202      	movs	r2, #2
 8007670:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007672:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <USBD_LL_Init+0x88>)
 8007674:	2202      	movs	r2, #2
 8007676:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <USBD_LL_Init+0x88>)
 800767a:	2200      	movs	r2, #0
 800767c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <USBD_LL_Init+0x88>)
 8007680:	2200      	movs	r2, #0
 8007682:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007684:	4812      	ldr	r0, [pc, #72]	; (80076d0 <USBD_LL_Init+0x88>)
 8007686:	f7f9 fcfd 	bl	8001084 <HAL_PCD_Init>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007690:	f7f8 ff4a 	bl	8000528 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800769a:	2318      	movs	r3, #24
 800769c:	2200      	movs	r2, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	f7fa ff81 	bl	80025a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076aa:	2358      	movs	r3, #88	; 0x58
 80076ac:	2200      	movs	r2, #0
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	f7fa ff79 	bl	80025a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076be:	2200      	movs	r2, #0
 80076c0:	2181      	movs	r1, #129	; 0x81
 80076c2:	f7fa ff70 	bl	80025a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000720 	.word	0x20000720
 80076d4:	40005c00 	.word	0x40005c00

080076d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7f9 fda6 	bl	8001240 <HAL_PCD_Start>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f940 	bl	8007980 <USBD_Get_USB_Status>
 8007700:	4603      	mov	r3, r0
 8007702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007704:	7bbb      	ldrb	r3, [r7, #14]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	461a      	mov	r2, r3
 800771c:	4603      	mov	r3, r0
 800771e:	70fb      	strb	r3, [r7, #3]
 8007720:	460b      	mov	r3, r1
 8007722:	70bb      	strb	r3, [r7, #2]
 8007724:	4613      	mov	r3, r2
 8007726:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007736:	78bb      	ldrb	r3, [r7, #2]
 8007738:	883a      	ldrh	r2, [r7, #0]
 800773a:	78f9      	ldrb	r1, [r7, #3]
 800773c:	f7f9 fec2 	bl	80014c4 <HAL_PCD_EP_Open>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f91a 	bl	8007980 <USBD_Get_USB_Status>
 800774c:	4603      	mov	r3, r0
 800774e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007750:	7bbb      	ldrb	r3, [r7, #14]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	4611      	mov	r1, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f7f9 ff09 	bl	8001590 <HAL_PCD_EP_Close>
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f8fb 	bl	8007980 <USBD_Get_USB_Status>
 800778a:	4603      	mov	r3, r0
 800778c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800778e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7f9 ffb2 	bl	8001720 <HAL_PCD_EP_SetStall>
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f8dc 	bl	8007980 <USBD_Get_USB_Status>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7f9 ffe5 	bl	80017c4 <HAL_PCD_EP_ClrStall>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f8bd 	bl	8007980 <USBD_Get_USB_Status>
 8007806:	4603      	mov	r3, r0
 8007808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800780a:	7bbb      	ldrb	r3, [r7, #14]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007826:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da0c      	bge.n	800784a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	440b      	add	r3, r1
 8007844:	3302      	adds	r3, #2
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	e00b      	b.n	8007862 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	440b      	add	r3, r1
 800785c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007860:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	4611      	mov	r1, r2
 800788c:	4618      	mov	r0, r3
 800788e:	f7f9 fdf4 	bl	800147a <HAL_PCD_SetAddress>
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f871 	bl	8007980 <USBD_Get_USB_Status>
 800789e:	4603      	mov	r3, r0
 80078a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	461a      	mov	r2, r3
 80078b8:	460b      	mov	r3, r1
 80078ba:	72fb      	strb	r3, [r7, #11]
 80078bc:	4613      	mov	r3, r2
 80078be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078ce:	893b      	ldrh	r3, [r7, #8]
 80078d0:	7af9      	ldrb	r1, [r7, #11]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	f7f9 fee1 	bl	800169a <HAL_PCD_EP_Transmit>
 80078d8:	4603      	mov	r3, r0
 80078da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f84e 	bl	8007980 <USBD_Get_USB_Status>
 80078e4:	4603      	mov	r3, r0
 80078e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	461a      	mov	r2, r3
 80078fe:	460b      	mov	r3, r1
 8007900:	72fb      	strb	r3, [r7, #11]
 8007902:	4613      	mov	r3, r2
 8007904:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007914:	893b      	ldrh	r3, [r7, #8]
 8007916:	7af9      	ldrb	r1, [r7, #11]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	f7f9 fe81 	bl	8001620 <HAL_PCD_EP_Receive>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 f82b 	bl	8007980 <USBD_Get_USB_Status>
 800792a:	4603      	mov	r3, r0
 800792c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800792e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007940:	4b03      	ldr	r3, [pc, #12]	; (8007950 <USBD_static_malloc+0x18>)
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000184 	.word	0x20000184

08007954 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b03      	cmp	r3, #3
 8007992:	d817      	bhi.n	80079c4 <USBD_Get_USB_Status+0x44>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <USBD_Get_USB_Status+0x1c>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079ad 	.word	0x080079ad
 80079a0:	080079b3 	.word	0x080079b3
 80079a4:	080079b9 	.word	0x080079b9
 80079a8:	080079bf 	.word	0x080079bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
    break;
 80079b0:	e00b      	b.n	80079ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079b2:	2302      	movs	r3, #2
 80079b4:	73fb      	strb	r3, [r7, #15]
    break;
 80079b6:	e008      	b.n	80079ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079b8:	2301      	movs	r3, #1
 80079ba:	73fb      	strb	r3, [r7, #15]
    break;
 80079bc:	e005      	b.n	80079ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079be:	2302      	movs	r3, #2
 80079c0:	73fb      	strb	r3, [r7, #15]
    break;
 80079c2:	e002      	b.n	80079ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80079c4:	2302      	movs	r3, #2
 80079c6:	73fb      	strb	r3, [r7, #15]
    break;
 80079c8:	bf00      	nop
  }
  return usb_status;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4e0d      	ldr	r6, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1ba4      	subs	r4, r4, r6
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2500      	movs	r5, #0
 80079e4:	42a5      	cmp	r5, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4e0b      	ldr	r6, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f000 f820 	bl	8007a30 <_init>
 80079f0:	1ba4      	subs	r4, r4, r6
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2500      	movs	r5, #0
 80079f6:	42a5      	cmp	r5, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a00:	4798      	blx	r3
 8007a02:	3501      	adds	r5, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a0a:	4798      	blx	r3
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08007ac0 	.word	0x08007ac0
 8007a14:	08007ac0 	.word	0x08007ac0
 8007a18:	08007ac0 	.word	0x08007ac0
 8007a1c:	08007ac4 	.word	0x08007ac4

08007a20 <memset>:
 8007a20:	4402      	add	r2, r0
 8007a22:	4603      	mov	r3, r0
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d100      	bne.n	8007a2a <memset+0xa>
 8007a28:	4770      	bx	lr
 8007a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2e:	e7f9      	b.n	8007a24 <memset+0x4>

08007a30 <_init>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	bf00      	nop
 8007a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a36:	bc08      	pop	{r3}
 8007a38:	469e      	mov	lr, r3
 8007a3a:	4770      	bx	lr

08007a3c <_fini>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr
